[{"id":1, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":9, "classname":"net.sourceforge.ganttproject.ChartComponentBase", "methodid":1, "methodname":"net.sourceforge.ganttproject.ChartComponentBase.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.zoom.ZoomManager)", "isreturn":0, "sourcecode":"public ChartComponentBase(IGanttProject project, UIFacade uiFacade, ZoomManager zoomManager) {\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myZoomManager = zoomManager;\r\n    myChartViewState = new ChartViewState(project, uiFacade);\r\n    myChartViewState.addStateListener(new ChartViewState.Listener() {\r\n        public void startDateChanged(ChartViewState.ViewStateEvent e) {\r\n            repaint();\r\n        }\r\n\r\n        public void zoomChanged(ZoomEvent e) {\r\n            getImplementation().zoomChanged(e);\r\n        }\r\n    });\r\n    myMouseWheelListener = new ChartComponentBase.MouseWheelListenerBase();\r\n    addMouseListener(getMouseListener());\r\n    addMouseMotionListener(getMouseMotionListener());\r\n    addMouseWheelListener(myMouseWheelListener);\r\n}"},
 {"id":2, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":9, "classname":"net.sourceforge.ganttproject.ChartComponentBase", "methodid":1, "methodname":"net.sourceforge.ganttproject.ChartComponentBase.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.zoom.ZoomManager)", "isreturn":0, "sourcecode":"public ChartComponentBase(IGanttProject project, UIFacade uiFacade, ZoomManager zoomManager) {\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myZoomManager = zoomManager;\r\n    myChartViewState = new ChartViewState(project, uiFacade);\r\n    myChartViewState.addStateListener(new ChartViewState.Listener() {\r\n        public void startDateChanged(ChartViewState.ViewStateEvent e) {\r\n            repaint();\r\n        }\r\n\r\n        public void zoomChanged(ZoomEvent e) {\r\n            getImplementation().zoomChanged(e);\r\n        }\r\n    });\r\n    myMouseWheelListener = new ChartComponentBase.MouseWheelListenerBase();\r\n    addMouseListener(getMouseListener());\r\n    addMouseMotionListener(getMouseMotionListener());\r\n    addMouseWheelListener(myMouseWheelListener);\r\n}"},
 {"id":3, "parametername":"ZoomManager zoomManager", "parametertype":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "parameterclass":425, "classid":9, "classname":"net.sourceforge.ganttproject.ChartComponentBase", "methodid":1, "methodname":"net.sourceforge.ganttproject.ChartComponentBase.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.zoom.ZoomManager)", "isreturn":0, "sourcecode":"public ChartComponentBase(IGanttProject project, UIFacade uiFacade, ZoomManager zoomManager) {\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myZoomManager = zoomManager;\r\n    myChartViewState = new ChartViewState(project, uiFacade);\r\n    myChartViewState.addStateListener(new ChartViewState.Listener() {\r\n        public void startDateChanged(ChartViewState.ViewStateEvent e) {\r\n            repaint();\r\n        }\r\n\r\n        public void zoomChanged(ZoomEvent e) {\r\n            getImplementation().zoomChanged(e);\r\n        }\r\n    });\r\n    myMouseWheelListener = new ChartComponentBase.MouseWheelListenerBase();\r\n    addMouseListener(getMouseListener());\r\n    addMouseMotionListener(getMouseMotionListener());\r\n    addMouseWheelListener(myMouseWheelListener);\r\n}"},
 {"id":4, "parametername":"ChartModelBase chartModel", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase", "parameterclass":170, "classid":1, "classname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "methodid":28, "methodname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.-init-(net.sourceforge.ganttproject.chart.ChartModelBase)", "isreturn":0, "sourcecode":"private AbstractChartImplementation(ChartModelBase chartModel) {\r\n    myChartModel = chartModel;\r\n}"},
 {"id":5, "parametername":"ChartSelection selection", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelection", "parameterclass":177, "classid":9, "classname":"net.sourceforge.ganttproject.ChartComponentBase", "methodid":7, "methodname":"net.sourceforge.ganttproject.ChartComponentBase.canPaste(net.sourceforge.ganttproject.chart.ChartSelection)", "isreturn":0, "sourcecode":"public IStatus canPaste(ChartSelection selection) {\r\n    return getImplementation().canPaste(selection);\r\n}"},
 {"id":6, "parametername":"ChartSelection selection", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelection", "parameterclass":177, "classid":9, "classname":"net.sourceforge.ganttproject.ChartComponentBase", "methodid":24, "methodname":"net.sourceforge.ganttproject.ChartComponentBase.paste(net.sourceforge.ganttproject.chart.ChartSelection)", "isreturn":0, "sourcecode":"public void paste(ChartSelection selection) {\r\n    getImplementation().paste(selection);\r\n}"},
 {"id":7, "parametername":"ChartSelectionListener listener", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelectionListener", "parameterclass":178, "classid":9, "classname":"net.sourceforge.ganttproject.ChartComponentBase", "methodid":6, "methodname":"net.sourceforge.ganttproject.ChartComponentBase.addSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "isreturn":0, "sourcecode":"public void addSelectionListener(ChartSelectionListener listener) {\r\n    getImplementation().addSelectionListener(listener);\r\n}"},
 {"id":8, "parametername":"ChartSelectionListener listener", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelectionListener", "parameterclass":178, "classid":9, "classname":"net.sourceforge.ganttproject.ChartComponentBase", "methodid":25, "methodname":"net.sourceforge.ganttproject.ChartComponentBase.removeSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "isreturn":0, "sourcecode":"public void removeSelectionListener(ChartSelectionListener listener) {\r\n    getImplementation().removeSelectionListener(listener);\r\n}"},
 {"id":9, "parametername":"ChartComponentBase.MouseInteraction myActiveInteraction", "parametertype":"net.sourceforge.ganttproject.ChartComponentBase$MouseInteraction", "parameterclass":3, "classid":1, "classname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "methodid":50, "methodname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.setActiveInteraction(net.sourceforge.ganttproject.ChartComponentBase$MouseInteraction)", "isreturn":0, "sourcecode":"protected void setActiveInteraction(ChartComponentBase.MouseInteraction myActiveInteraction) {\r\n    this.myActiveInteraction = myActiveInteraction;\r\n}"},
 {"id":10, "parametername":"ZoomEvent e", "parametertype":"net.sourceforge.ganttproject.gui.zoom.ZoomEvent", "parameterclass":422, "classid":1, "classname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "methodid":52, "methodname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "isreturn":0, "sourcecode":"public void zoomChanged(ZoomEvent e) {\r\n    invalidate();\r\n    repaint();\r\n}"},
 {"id":11, "parametername":"GanttExportSettings settings", "parametertype":"net.sourceforge.ganttproject.GanttExportSettings", "parameterclass":27, "classid":1, "classname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "methodid":43, "methodname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.getRenderedImage(net.sourceforge.ganttproject.GanttExportSettings)", "isreturn":0, "sourcecode":"// ///////////////////////////////////////////////////////////\r\n// interface Chart\r\npublic RenderedImage getRenderedImage(GanttExportSettings settings) {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":12, "parametername":"GanttExportSettings settings", "parametertype":"net.sourceforge.ganttproject.GanttExportSettings", "parameterclass":27, "classid":1, "classname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "methodid":37, "methodname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.getChart(net.sourceforge.ganttproject.GanttExportSettings)", "isreturn":0, "sourcecode":"public BufferedImage getChart(GanttExportSettings settings) {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":13, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":1, "classname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "methodid":51, "methodname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.setTaskManager(net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"public void setTaskManager(TaskManager taskManager) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":14, "parametername":"ChartSelection selection", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelection", "parameterclass":177, "classid":1, "classname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "methodid":31, "methodname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.canPaste(net.sourceforge.ganttproject.chart.ChartSelection)", "isreturn":0, "sourcecode":"public IStatus canPaste(ChartSelection selection) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":15, "parametername":"ChartSelection selection", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelection", "parameterclass":177, "classid":1, "classname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "methodid":47, "methodname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.paste(net.sourceforge.ganttproject.chart.ChartSelection)", "isreturn":0, "sourcecode":"public void paste(ChartSelection selection) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":16, "parametername":"ChartSelectionListener listener", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelectionListener", "parameterclass":178, "classid":1, "classname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "methodid":29, "methodname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.addSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "isreturn":0, "sourcecode":"public void addSelectionListener(ChartSelectionListener listener) {\r\n    mySelectionListeners.add(listener);\r\n}"},
 {"id":17, "parametername":"ChartSelectionListener listener", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelectionListener", "parameterclass":178, "classid":1, "classname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "methodid":48, "methodname":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation.removeSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "isreturn":0, "sourcecode":"public void removeSelectionListener(ChartSelectionListener listener) {\r\n    mySelectionListeners.remove(listener);\r\n}"},
 {"id":18, "parametername":"CustomPropertyDefinition definition", "parametertype":"net.sourceforge.ganttproject.CustomPropertyDefinition", "parameterclass":11, "classid":12, "classname":"net.sourceforge.ganttproject.CustomPropertyHolder", "methodid":95, "methodname":"net.sourceforge.ganttproject.CustomPropertyHolder.addCustomProperty(net.sourceforge.ganttproject.CustomPropertyDefinition,java.lang.String)", "isreturn":0, "sourcecode":"CustomProperty addCustomProperty(CustomPropertyDefinition definition, String defaultValueAsString);"},
 {"id":19, "parametername":"net.sourceforge.ganttproject.CustomProperty", "parametertype":"net.sourceforge.ganttproject.CustomProperty", "parameterclass":10, "classid":12, "classname":"net.sourceforge.ganttproject.CustomPropertyHolder", "methodid":95, "methodname":"net.sourceforge.ganttproject.CustomPropertyHolder.addCustomProperty(net.sourceforge.ganttproject.CustomPropertyDefinition,java.lang.String)", "isreturn":1, "sourcecode":"CustomProperty addCustomProperty(CustomPropertyDefinition definition, String defaultValueAsString);"},
 {"id":20, "parametername":"CustomPropertyManager source", "parametertype":"net.sourceforge.ganttproject.CustomPropertyManager", "parameterclass":14, "classid":14, "classname":"net.sourceforge.ganttproject.CustomPropertyManager", "methodid":100, "methodname":"net.sourceforge.ganttproject.CustomPropertyManager.importData(net.sourceforge.ganttproject.CustomPropertyManager)", "isreturn":0, "sourcecode":"void importData(CustomPropertyManager source);"},
 {"id":21, "parametername":"UIFacadeImpl uiFacade", "parametertype":"net.sourceforge.ganttproject.UIFacadeImpl", "parameterclass":103, "classid":15, "classname":"net.sourceforge.ganttproject.ErrorNotifier", "methodid":104, "methodname":"net.sourceforge.ganttproject.ErrorNotifier.-init-(net.sourceforge.ganttproject.UIFacadeImpl)", "isreturn":0, "sourcecode":"ErrorNotifier(UIFacadeImpl uiFacade) {\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":22, "parametername":"UIFacade uifacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":17, "classname":"net.sourceforge.ganttproject.GPLogger", "methodid":120, "methodname":"net.sourceforge.ganttproject.GPLogger.setUIFacade(net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public static void setUIFacade(UIFacade uifacade) {\r\n    GPLogger.ourUIFacade = uifacade;\r\n}"},
 {"id":23, "parametername":"GanttOptions options", "parametertype":"net.sourceforge.ganttproject.GanttOptions", "parameterclass":48, "classid":18, "classname":"net.sourceforge.ganttproject.GPToolBar", "methodid":123, "methodname":"net.sourceforge.ganttproject.GPToolBar.-init-(java.lang.String,int,net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public GPToolBar(String title, int toolBarPosition, GanttOptions options) {\r\n    super(title, toolBarPosition);\r\n    setBorderPainted(true);\r\n    setRollover(true);\r\n    setFloatable(true);\r\n    this.options = options;\r\n}"},
 {"id":24, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":20, "classname":"net.sourceforge.ganttproject.GPTreeTableBase", "methodid":126, "methodname":"net.sourceforge.ganttproject.GPTreeTableBase.-init-(net.sourceforge.ganttproject.IGanttProject,org.jdesktop.swing.treetable.TreeTableModel)", "isreturn":0, "sourcecode":"protected GPTreeTableBase(IGanttProject project, TreeTableModel model) {\r\n    super(new JXTreeTable(model) {\r\n        protected boolean processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed) {\r\n            if ((e.isAltDown()) || (e.isControlDown())) {\r\n                putClientProperty(\"JTable.autoStartsEdit\", Boolean.FALSE);\r\n            }\r\n            boolean result = super.processKeyBinding(ks, e, condition, pressed);\r\n            putClientProperty(\"JTable.autoStartsEdit\", Boolean.TRUE);\r\n            return result;\r\n        }\r\n    });\r\n    myProject = project;\r\n}"},
 {"id":25, "parametername":"GanttCalendar g", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":24, "classname":"net.sourceforge.ganttproject.GanttCalendar", "methodid":144, "methodname":"net.sourceforge.ganttproject.GanttCalendar.-init-(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"/**\r\n * Copy constructor\r\n */\r\npublic GanttCalendar(GanttCalendar g) {\r\n    super(g.getYear(), g.getMonth(), g.getDate());\r\n}"},
 {"id":26, "parametername":"GanttCalendar d", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":24, "classname":"net.sourceforge.ganttproject.GanttCalendar", "methodid":150, "methodname":"net.sourceforge.ganttproject.GanttCalendar.diff(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @deprecated Use TimeUnit related methods\r\nReturn the difference (in day) between two date\r\n */\r\npublic int diff(GanttCalendar d) {\r\n    int res = 0;\r\n    GanttCalendar d1;\r\n    GanttCalendar d2;\r\n    if ((this.compareTo(d)) == 0)\r\n        return res;\r\n    else\r\n        if ((compareTo(d)) < 0) {\r\n            d1 = this.Clone();\r\n            d2 = new GanttCalendar(d);\r\n        } else {\r\n            d1 = new GanttCalendar(d);\r\n            d2 = this.Clone();\r\n        }\r\n\r\n    while ((d1.compareTo(d2)) != 0) {\r\n        d1.add(1);\r\n        res++;\r\n    } \r\n    return res;\r\n}"},
 {"id":27, "parametername":"GanttCalendar when", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":24, "classname":"net.sourceforge.ganttproject.GanttCalendar", "methodid":149, "methodname":"net.sourceforge.ganttproject.GanttCalendar.compareTo(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"/**\r\n * This function compare two date\r\n *\r\n * @return 0 If the two date are equals\r\n * @return -1 if the date is before when\r\n * @return 1 if the date is after when\r\n */\r\npublic int compareTo(GanttCalendar when) {\r\n    int[] comparissons = new int[]{ Calendar.YEAR, Calendar.MONTH, Calendar.DATE };\r\n    for (int i = 0; i < (comparissons.length); i++) {\r\n        switch (module(((this.get(comparissons[i])) - (when.get(comparissons[i]))))) {\r\n            case -1 :\r\n                return -1;\r\n            case 1 :\r\n                return 1;\r\n            default :\r\n                break;\r\n        }\r\n    }\r\n    return 0;\r\n}"},
 {"id":28, "parametername":"GanttCalendar when", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":24, "classname":"net.sourceforge.ganttproject.GanttCalendar", "methodid":151, "methodname":"net.sourceforge.ganttproject.GanttCalendar.equals(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"/**\r\n * Is the date equals to when\r\n */\r\npublic boolean equals(GanttCalendar when) {\r\n    return (((getYear()) == (when.getYear())) && ((getMonth()) == (when.getMonth()))) && ((getDay()) == (when.getDay()));\r\n}"},
 {"id":29, "parametername":"GanttCalendar day", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":25, "classname":"net.sourceforge.ganttproject.GanttCalendarDays", "methodid":179, "methodname":"net.sourceforge.ganttproject.GanttCalendarDays.insert(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"/**\r\n * Insert the day on the daylist\r\n */\r\npublic void insert(GanttCalendar day) {\r\n    if (!(dayList.contains(day)))\r\n        dayList.add(day);\r\n\r\n}"},
 {"id":30, "parametername":"GanttCalendar day", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":25, "classname":"net.sourceforge.ganttproject.GanttCalendarDays", "methodid":180, "methodname":"net.sourceforge.ganttproject.GanttCalendarDays.remove(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"/**\r\n * Remove the selected day\r\n */\r\npublic void remove(GanttCalendar day) {\r\n    int index = dayList.indexOf(day);\r\n    if (index >= 0)\r\n        dayList.remove(index);\r\n\r\n}"},
 {"id":31, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":26, "classname":"net.sourceforge.ganttproject.GanttChartTabContentPanel", "methodid":181, "methodname":"net.sourceforge.ganttproject.GanttChartTabContentPanel.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.TaskTreeUIFacade,java.awt.Component)", "isreturn":0, "sourcecode":"GanttChartTabContentPanel(IGanttProject project, UIFacade workbenchFacade, TaskTreeUIFacade treeFacade, Component ganttChart) {\r\n    myProject = project;\r\n    myWorkbenchFacade = workbenchFacade;\r\n    myTreeFacade = treeFacade;\r\n    myTaskTree = treeFacade.getTreeComponent();\r\n    myGanttChart = ganttChart;\r\n}"},
 {"id":32, "parametername":"UIFacade workbenchFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":26, "classname":"net.sourceforge.ganttproject.GanttChartTabContentPanel", "methodid":181, "methodname":"net.sourceforge.ganttproject.GanttChartTabContentPanel.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.TaskTreeUIFacade,java.awt.Component)", "isreturn":0, "sourcecode":"GanttChartTabContentPanel(IGanttProject project, UIFacade workbenchFacade, TaskTreeUIFacade treeFacade, Component ganttChart) {\r\n    myProject = project;\r\n    myWorkbenchFacade = workbenchFacade;\r\n    myTreeFacade = treeFacade;\r\n    myTaskTree = treeFacade.getTreeComponent();\r\n    myGanttChart = ganttChart;\r\n}"},
 {"id":33, "parametername":"TaskTreeUIFacade treeFacade", "parametertype":"net.sourceforge.ganttproject.gui.TaskTreeUIFacade", "parameterclass":326, "classid":26, "classname":"net.sourceforge.ganttproject.GanttChartTabContentPanel", "methodid":181, "methodname":"net.sourceforge.ganttproject.GanttChartTabContentPanel.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.TaskTreeUIFacade,java.awt.Component)", "isreturn":0, "sourcecode":"GanttChartTabContentPanel(IGanttProject project, UIFacade workbenchFacade, TaskTreeUIFacade treeFacade, Component ganttChart) {\r\n    myProject = project;\r\n    myWorkbenchFacade = workbenchFacade;\r\n    myTreeFacade = treeFacade;\r\n    myTaskTree = treeFacade.getTreeComponent();\r\n    myGanttChart = ganttChart;\r\n}"},
 {"id":34, "parametername":"GanttProject app", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":45, "classname":"net.sourceforge.ganttproject.GanttGraphicArea", "methodid":196, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.zoom.ZoomManager,net.sourceforge.ganttproject.undo.GPUndoManager)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttGraphicArea(GanttProject app, GanttTree2 ttree, TaskManager taskManager, ZoomManager zoomManager, GPUndoManager undoManager) {\r\n    super(((IGanttProject) (app)), ((UIFacade) (app)), zoomManager);\r\n    this.setBackground(Color.WHITE);\r\n    myTaskManager = taskManager;\r\n    myUndoManager = undoManager;\r\n    // \r\n    myChartModel = new ChartModelImpl(getTaskManager(), app.getTimeUnitStack(), app.getUIConfiguration());\r\n    myChartModel.addOptionChangeListener(new GPOptionChangeListener() {\r\n        public void optionsChanged() {\r\n            repaint();\r\n        }\r\n    });\r\n    getViewState().addStateListener(myChartModel);\r\n    getViewState().setStartDate(CalendarFactory.newCalendar().getTime());\r\n    myTaskManager.addTaskListener(new TaskListenerAdapter() {\r\n        private boolean isRepaintPending;\r\n\r\n        public void taskScheduleChanged(TaskScheduleEvent e) {\r\n            boolean needRepaint = !(isRepaintPending);\r\n            isRepaintPending = true;\r\n            adjustDependencies(((Task) (e.getSource())));\r\n            if (needRepaint) {\r\n                repaint();\r\n                isRepaintPending = false;\r\n            }\r\n        }\r\n\r\n        public void dependencyAdded(TaskDependencyEvent e) {\r\n            adjustDependencies(e.getDependency().getDependee());\r\n            repaint();\r\n        }\r\n\r\n        public void dependencyRemoved(TaskDependencyEvent e) {\r\n            repaint();\r\n        }\r\n\r\n        private void adjustDependencies(Task task) {\r\n            RecalculateTaskScheduleAlgorithm alg = myTaskManager.getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm();\r\n            if (!(alg.isRunning())) {\r\n                try {\r\n                    alg.run(task);\r\n                } catch (TaskDependencyException e) {\r\n                    if (!(GPLogger.log(e))) {\r\n                        e.printStackTrace(System.err);\r\n                    }\r\n                    getUIFacade().showErrorDialog(e);\r\n                }\r\n                // appli.setQuickSave (true);\r\n            }\r\n        }\r\n    });\r\n    // date = new GanttCalendar();\r\n    // \r\n    // date.setDay(1);\r\n    this.tree = ttree;\r\n    margY = 0;\r\n    appli = app;\r\n    // creation of the different color use to paint\r\n    // arrayColor[0] = new Color((float)0.905,(float)0.905,(float)0.905);\r\n    myTableHeader = tree.getTreeTable().getTable().getTableHeader();\r\n    getProject().getTaskCustomColumnManager().addCustomColumnsListener(this);\r\n    myTaskImageGenerator = new TaskTreeImageGenerator(ttree, app.getUIConfiguration());\r\n}"},
 {"id":35, "parametername":"GanttTree2 ttree", "parametertype":"net.sourceforge.ganttproject.GanttTree2", "parameterclass":73, "classid":45, "classname":"net.sourceforge.ganttproject.GanttGraphicArea", "methodid":196, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.zoom.ZoomManager,net.sourceforge.ganttproject.undo.GPUndoManager)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttGraphicArea(GanttProject app, GanttTree2 ttree, TaskManager taskManager, ZoomManager zoomManager, GPUndoManager undoManager) {\r\n    super(((IGanttProject) (app)), ((UIFacade) (app)), zoomManager);\r\n    this.setBackground(Color.WHITE);\r\n    myTaskManager = taskManager;\r\n    myUndoManager = undoManager;\r\n    // \r\n    myChartModel = new ChartModelImpl(getTaskManager(), app.getTimeUnitStack(), app.getUIConfiguration());\r\n    myChartModel.addOptionChangeListener(new GPOptionChangeListener() {\r\n        public void optionsChanged() {\r\n            repaint();\r\n        }\r\n    });\r\n    getViewState().addStateListener(myChartModel);\r\n    getViewState().setStartDate(CalendarFactory.newCalendar().getTime());\r\n    myTaskManager.addTaskListener(new TaskListenerAdapter() {\r\n        private boolean isRepaintPending;\r\n\r\n        public void taskScheduleChanged(TaskScheduleEvent e) {\r\n            boolean needRepaint = !(isRepaintPending);\r\n            isRepaintPending = true;\r\n            adjustDependencies(((Task) (e.getSource())));\r\n            if (needRepaint) {\r\n                repaint();\r\n                isRepaintPending = false;\r\n            }\r\n        }\r\n\r\n        public void dependencyAdded(TaskDependencyEvent e) {\r\n            adjustDependencies(e.getDependency().getDependee());\r\n            repaint();\r\n        }\r\n\r\n        public void dependencyRemoved(TaskDependencyEvent e) {\r\n            repaint();\r\n        }\r\n\r\n        private void adjustDependencies(Task task) {\r\n            RecalculateTaskScheduleAlgorithm alg = myTaskManager.getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm();\r\n            if (!(alg.isRunning())) {\r\n                try {\r\n                    alg.run(task);\r\n                } catch (TaskDependencyException e) {\r\n                    if (!(GPLogger.log(e))) {\r\n                        e.printStackTrace(System.err);\r\n                    }\r\n                    getUIFacade().showErrorDialog(e);\r\n                }\r\n                // appli.setQuickSave (true);\r\n            }\r\n        }\r\n    });\r\n    // date = new GanttCalendar();\r\n    // \r\n    // date.setDay(1);\r\n    this.tree = ttree;\r\n    margY = 0;\r\n    appli = app;\r\n    // creation of the different color use to paint\r\n    // arrayColor[0] = new Color((float)0.905,(float)0.905,(float)0.905);\r\n    myTableHeader = tree.getTreeTable().getTable().getTableHeader();\r\n    getProject().getTaskCustomColumnManager().addCustomColumnsListener(this);\r\n    myTaskImageGenerator = new TaskTreeImageGenerator(ttree, app.getUIConfiguration());\r\n}"},
 {"id":36, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":45, "classname":"net.sourceforge.ganttproject.GanttGraphicArea", "methodid":196, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.zoom.ZoomManager,net.sourceforge.ganttproject.undo.GPUndoManager)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttGraphicArea(GanttProject app, GanttTree2 ttree, TaskManager taskManager, ZoomManager zoomManager, GPUndoManager undoManager) {\r\n    super(((IGanttProject) (app)), ((UIFacade) (app)), zoomManager);\r\n    this.setBackground(Color.WHITE);\r\n    myTaskManager = taskManager;\r\n    myUndoManager = undoManager;\r\n    // \r\n    myChartModel = new ChartModelImpl(getTaskManager(), app.getTimeUnitStack(), app.getUIConfiguration());\r\n    myChartModel.addOptionChangeListener(new GPOptionChangeListener() {\r\n        public void optionsChanged() {\r\n            repaint();\r\n        }\r\n    });\r\n    getViewState().addStateListener(myChartModel);\r\n    getViewState().setStartDate(CalendarFactory.newCalendar().getTime());\r\n    myTaskManager.addTaskListener(new TaskListenerAdapter() {\r\n        private boolean isRepaintPending;\r\n\r\n        public void taskScheduleChanged(TaskScheduleEvent e) {\r\n            boolean needRepaint = !(isRepaintPending);\r\n            isRepaintPending = true;\r\n            adjustDependencies(((Task) (e.getSource())));\r\n            if (needRepaint) {\r\n                repaint();\r\n                isRepaintPending = false;\r\n            }\r\n        }\r\n\r\n        public void dependencyAdded(TaskDependencyEvent e) {\r\n            adjustDependencies(e.getDependency().getDependee());\r\n            repaint();\r\n        }\r\n\r\n        public void dependencyRemoved(TaskDependencyEvent e) {\r\n            repaint();\r\n        }\r\n\r\n        private void adjustDependencies(Task task) {\r\n            RecalculateTaskScheduleAlgorithm alg = myTaskManager.getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm();\r\n            if (!(alg.isRunning())) {\r\n                try {\r\n                    alg.run(task);\r\n                } catch (TaskDependencyException e) {\r\n                    if (!(GPLogger.log(e))) {\r\n                        e.printStackTrace(System.err);\r\n                    }\r\n                    getUIFacade().showErrorDialog(e);\r\n                }\r\n                // appli.setQuickSave (true);\r\n            }\r\n        }\r\n    });\r\n    // date = new GanttCalendar();\r\n    // \r\n    // date.setDay(1);\r\n    this.tree = ttree;\r\n    margY = 0;\r\n    appli = app;\r\n    // creation of the different color use to paint\r\n    // arrayColor[0] = new Color((float)0.905,(float)0.905,(float)0.905);\r\n    myTableHeader = tree.getTreeTable().getTable().getTableHeader();\r\n    getProject().getTaskCustomColumnManager().addCustomColumnsListener(this);\r\n    myTaskImageGenerator = new TaskTreeImageGenerator(ttree, app.getUIConfiguration());\r\n}"},
 {"id":37, "parametername":"ZoomManager zoomManager", "parametertype":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "parameterclass":425, "classid":45, "classname":"net.sourceforge.ganttproject.GanttGraphicArea", "methodid":196, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.zoom.ZoomManager,net.sourceforge.ganttproject.undo.GPUndoManager)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttGraphicArea(GanttProject app, GanttTree2 ttree, TaskManager taskManager, ZoomManager zoomManager, GPUndoManager undoManager) {\r\n    super(((IGanttProject) (app)), ((UIFacade) (app)), zoomManager);\r\n    this.setBackground(Color.WHITE);\r\n    myTaskManager = taskManager;\r\n    myUndoManager = undoManager;\r\n    // \r\n    myChartModel = new ChartModelImpl(getTaskManager(), app.getTimeUnitStack(), app.getUIConfiguration());\r\n    myChartModel.addOptionChangeListener(new GPOptionChangeListener() {\r\n        public void optionsChanged() {\r\n            repaint();\r\n        }\r\n    });\r\n    getViewState().addStateListener(myChartModel);\r\n    getViewState().setStartDate(CalendarFactory.newCalendar().getTime());\r\n    myTaskManager.addTaskListener(new TaskListenerAdapter() {\r\n        private boolean isRepaintPending;\r\n\r\n        public void taskScheduleChanged(TaskScheduleEvent e) {\r\n            boolean needRepaint = !(isRepaintPending);\r\n            isRepaintPending = true;\r\n            adjustDependencies(((Task) (e.getSource())));\r\n            if (needRepaint) {\r\n                repaint();\r\n                isRepaintPending = false;\r\n            }\r\n        }\r\n\r\n        public void dependencyAdded(TaskDependencyEvent e) {\r\n            adjustDependencies(e.getDependency().getDependee());\r\n            repaint();\r\n        }\r\n\r\n        public void dependencyRemoved(TaskDependencyEvent e) {\r\n            repaint();\r\n        }\r\n\r\n        private void adjustDependencies(Task task) {\r\n            RecalculateTaskScheduleAlgorithm alg = myTaskManager.getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm();\r\n            if (!(alg.isRunning())) {\r\n                try {\r\n                    alg.run(task);\r\n                } catch (TaskDependencyException e) {\r\n                    if (!(GPLogger.log(e))) {\r\n                        e.printStackTrace(System.err);\r\n                    }\r\n                    getUIFacade().showErrorDialog(e);\r\n                }\r\n                // appli.setQuickSave (true);\r\n            }\r\n        }\r\n    });\r\n    // date = new GanttCalendar();\r\n    // \r\n    // date.setDay(1);\r\n    this.tree = ttree;\r\n    margY = 0;\r\n    appli = app;\r\n    // creation of the different color use to paint\r\n    // arrayColor[0] = new Color((float)0.905,(float)0.905,(float)0.905);\r\n    myTableHeader = tree.getTreeTable().getTable().getTableHeader();\r\n    getProject().getTaskCustomColumnManager().addCustomColumnsListener(this);\r\n    myTaskImageGenerator = new TaskTreeImageGenerator(ttree, app.getUIConfiguration());\r\n}"},
 {"id":38, "parametername":"GPUndoManager undoManager", "parametertype":"net.sourceforge.ganttproject.undo.GPUndoManager", "parameterclass":657, "classid":45, "classname":"net.sourceforge.ganttproject.GanttGraphicArea", "methodid":196, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.zoom.ZoomManager,net.sourceforge.ganttproject.undo.GPUndoManager)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttGraphicArea(GanttProject app, GanttTree2 ttree, TaskManager taskManager, ZoomManager zoomManager, GPUndoManager undoManager) {\r\n    super(((IGanttProject) (app)), ((UIFacade) (app)), zoomManager);\r\n    this.setBackground(Color.WHITE);\r\n    myTaskManager = taskManager;\r\n    myUndoManager = undoManager;\r\n    // \r\n    myChartModel = new ChartModelImpl(getTaskManager(), app.getTimeUnitStack(), app.getUIConfiguration());\r\n    myChartModel.addOptionChangeListener(new GPOptionChangeListener() {\r\n        public void optionsChanged() {\r\n            repaint();\r\n        }\r\n    });\r\n    getViewState().addStateListener(myChartModel);\r\n    getViewState().setStartDate(CalendarFactory.newCalendar().getTime());\r\n    myTaskManager.addTaskListener(new TaskListenerAdapter() {\r\n        private boolean isRepaintPending;\r\n\r\n        public void taskScheduleChanged(TaskScheduleEvent e) {\r\n            boolean needRepaint = !(isRepaintPending);\r\n            isRepaintPending = true;\r\n            adjustDependencies(((Task) (e.getSource())));\r\n            if (needRepaint) {\r\n                repaint();\r\n                isRepaintPending = false;\r\n            }\r\n        }\r\n\r\n        public void dependencyAdded(TaskDependencyEvent e) {\r\n            adjustDependencies(e.getDependency().getDependee());\r\n            repaint();\r\n        }\r\n\r\n        public void dependencyRemoved(TaskDependencyEvent e) {\r\n            repaint();\r\n        }\r\n\r\n        private void adjustDependencies(Task task) {\r\n            RecalculateTaskScheduleAlgorithm alg = myTaskManager.getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm();\r\n            if (!(alg.isRunning())) {\r\n                try {\r\n                    alg.run(task);\r\n                } catch (TaskDependencyException e) {\r\n                    if (!(GPLogger.log(e))) {\r\n                        e.printStackTrace(System.err);\r\n                    }\r\n                    getUIFacade().showErrorDialog(e);\r\n                }\r\n                // appli.setQuickSave (true);\r\n            }\r\n        }\r\n    });\r\n    // date = new GanttCalendar();\r\n    // \r\n    // date.setDay(1);\r\n    this.tree = ttree;\r\n    margY = 0;\r\n    appli = app;\r\n    // creation of the different color use to paint\r\n    // arrayColor[0] = new Color((float)0.905,(float)0.905,(float)0.905);\r\n    myTableHeader = tree.getTreeTable().getTable().getTableHeader();\r\n    getProject().getTaskCustomColumnManager().addCustomColumnsListener(this);\r\n    myTaskImageGenerator = new TaskTreeImageGenerator(ttree, app.getUIConfiguration());\r\n}"},
 {"id":39, "parametername":"TaskBoundaryChartItem taskBoundary", "parametertype":"net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem", "parameterclass":225, "classid":28, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction", "methodid":240, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "isreturn":0, "sourcecode":"protected ChangeTaskBoundaryInteraction(MouseEvent initiatingEvent, TaskBoundaryChartItem taskBoundary) {\r\n    super(initiatingEvent);\r\n    myTask = taskBoundary.getTask();\r\n    myInitialDuration = myTask.getDuration().getLength(getViewState().getBottomTimeUnit());\r\n    myInitialEnd = getTask().getEnd();\r\n    myInitialStart = getTask().getStart();\r\n}"},
 {"id":40, "parametername":"TaskBoundaryChartItem taskBoundary", "parametertype":"net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem", "parameterclass":225, "classid":29, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskEndInteraction", "methodid":250, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskEndInteraction.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "isreturn":0, "sourcecode":"public ChangeTaskEndInteraction(MouseEvent initiatingEvent, TaskBoundaryChartItem taskBoundary) {\r\n    super(initiatingEvent, taskBoundary);\r\n    setCursor(GanttGraphicArea.E_RESIZE_CURSOR);\r\n    myMutator = getTask().createMutator();\r\n    myInitialEnd = getTask().getEnd();\r\n}"},
 {"id":41, "parametername":"TaskBoundaryChartItem taskBoundary", "parametertype":"net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem", "parameterclass":225, "classid":31, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskStartInteraction", "methodid":260, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskStartInteraction.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "isreturn":0, "sourcecode":"ChangeTaskStartInteraction(MouseEvent e, TaskBoundaryChartItem taskBoundary) {\r\n    super(e, taskBoundary);\r\n    setCursor(GanttGraphicArea.W_RESIZE_CURSOR);\r\n    myInitialLength = getTask().getDuration();\r\n    myMutator = getTask().createMutator();\r\n    myInitialStart = getTask().getStart();\r\n}"},
 {"id":42, "parametername":"TaskProgressChartItem taskProgress", "parametertype":"net.sourceforge.ganttproject.chart.item.TaskProgressChartItem", "parameterclass":226, "classid":30, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskProgressInteraction", "methodid":254, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskProgressInteraction.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskProgressChartItem)", "isreturn":0, "sourcecode":"public ChangeTaskProgressInteraction(MouseEvent e, TaskProgressChartItem taskProgress) {\r\n    super(e);\r\n    Toolkit toolkit = Toolkit.getDefaultToolkit();\r\n    try {\r\n        setCursor(GanttGraphicArea.CHANGE_PROGRESS_CURSOR);\r\n    } catch (Exception exept) {\r\n        setCursor(GanttGraphicArea.E_RESIZE_CURSOR);\r\n    }\r\n    myTaskProgrssItem = taskProgress;\r\n    myMutator = myTaskProgrssItem.getTask().createMutator();\r\n    myProgressWas = myTaskProgrssItem.getTask().getCompletionPercentage();\r\n}"},
 {"id":43, "parametername":"TaskRegularAreaChartItem taskArea", "parametertype":"net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem", "parameterclass":227, "classid":37, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction", "methodid":296, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem,net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport)", "isreturn":0, "sourcecode":"public DrawDependencyInteraction(MouseEvent initiatingEvent, TaskRegularAreaChartItem taskArea, GanttGraphicArea.MouseSupport mouseSupport) {\r\n    super(initiatingEvent);\r\n    myStartPoint = initiatingEvent.getPoint();\r\n    myTask = taskArea.getTask();\r\n    myArrow = new DependencyInteractionRenderer(myStartPoint.x, myStartPoint.y, myStartPoint.x, myStartPoint.y);\r\n    myMouseSupport = mouseSupport;\r\n}"},
 {"id":44, "parametername":"GanttGraphicArea.MouseSupport mouseSupport", "parametertype":"net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport", "parameterclass":38, "classid":37, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction", "methodid":296, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem,net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport)", "isreturn":0, "sourcecode":"public DrawDependencyInteraction(MouseEvent initiatingEvent, TaskRegularAreaChartItem taskArea, GanttGraphicArea.MouseSupport mouseSupport) {\r\n    super(initiatingEvent);\r\n    myStartPoint = initiatingEvent.getPoint();\r\n    myTask = taskArea.getTask();\r\n    myArrow = new DependencyInteractionRenderer(myStartPoint.x, myStartPoint.y, myStartPoint.x, myStartPoint.y);\r\n    myMouseSupport = mouseSupport;\r\n}"},
 {"id":45, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":39, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteraction", "methodid":305, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$MoveTaskInteraction.-init-(java.awt.event.MouseEvent,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"MoveTaskInteraction(MouseEvent e, Task task) {\r\n    super(e);\r\n    myTask = task;\r\n    myMutator = task.createMutator();\r\n    myInitialStart = myTask.getStart();\r\n}"},
 {"id":46, "parametername":"ScrollingManager scrollingManager", "parametertype":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager", "parameterclass":409, "classid":44, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ScrollGanttChartCenterAction", "methodid":331, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ScrollGanttChartCenterAction.-init-(net.sourceforge.ganttproject.gui.scrolling.ScrollingManager,net.sourceforge.ganttproject.task.TaskSelectionManager,java.lang.String)", "isreturn":0, "sourcecode":"public ScrollGanttChartCenterAction(ScrollingManager scrollingManager, TaskSelectionManager taskSelectionManager, String iconSize) {\r\n    super(\"ScrollCenter\", iconSize);\r\n    myScrollingManager = scrollingManager;\r\n    myTaskSelectionManager = taskSelectionManager;\r\n}"},
 {"id":47, "parametername":"TaskSelectionManager taskSelectionManager", "parametertype":"net.sourceforge.ganttproject.task.TaskSelectionManager", "parameterclass":575, "classid":44, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ScrollGanttChartCenterAction", "methodid":331, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ScrollGanttChartCenterAction.-init-(net.sourceforge.ganttproject.gui.scrolling.ScrollingManager,net.sourceforge.ganttproject.task.TaskSelectionManager,java.lang.String)", "isreturn":0, "sourcecode":"public ScrollGanttChartCenterAction(ScrollingManager scrollingManager, TaskSelectionManager taskSelectionManager, String iconSize) {\r\n    super(\"ScrollCenter\", iconSize);\r\n    myScrollingManager = scrollingManager;\r\n    myTaskSelectionManager = taskSelectionManager;\r\n}"},
 {"id":48, "parametername":"GanttGraphicArea.ChartOptionsPreviewPanel.TaskBar refBar", "parametertype":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$TaskBar", "parameterclass":35, "classid":36, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$Text", "methodid":293, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$Text.-init-(int,net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel$TaskBar)", "isreturn":0, "sourcecode":"Text(int position, GanttGraphicArea.ChartOptionsPreviewPanel.TaskBar refBar) {\r\n    this.position = position;\r\n    this.taskBar = refBar;\r\n}"},
 {"id":49, "parametername":"GanttExportSettings settings", "parametertype":"net.sourceforge.ganttproject.GanttExportSettings", "parameterclass":27, "classid":45, "classname":"net.sourceforge.ganttproject.GanttGraphicArea", "methodid":209, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea.getChart(net.sourceforge.ganttproject.GanttExportSettings)", "isreturn":0, "sourcecode":"/**\r\n * Return an image with the gantt chart\r\n */\r\n// TODO: 1.11 take into account flags \"render this and dont render that\"\r\npublic BufferedImage getChart(GanttExportSettings settings) {\r\n    RenderedChartImage renderedImage = ((RenderedChartImage) (getRenderedImage(settings)));\r\n    BufferedImage result = renderedImage.getWholeImage();\r\n    repaint();\r\n    return result;\r\n}"},
 {"id":50, "parametername":"GanttExportSettings settings", "parametertype":"net.sourceforge.ganttproject.GanttExportSettings", "parameterclass":27, "classid":45, "classname":"net.sourceforge.ganttproject.GanttGraphicArea", "methodid":222, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea.getRenderedImage(net.sourceforge.ganttproject.GanttExportSettings)", "isreturn":0, "sourcecode":"public RenderedImage getRenderedImage(GanttExportSettings settings) {\r\n    Date dateStart = null;\r\n    Date dateEnd = null;\r\n    List myItemsToConsider = myTaskImageGenerator.getPrintableNodes(settings);\r\n    TimeUnit unit = getViewState().getBottomTimeUnit();\r\n    dateStart = ((settings.getStartDate()) == null) ? getStartDate() : settings.getStartDate();\r\n    dateEnd = ((settings.getEndDate()) == null) ? getEndDate() : settings.getEndDate();\r\n    // dateStart = new GregorianCalendar(2005,2,25).getTime();\r\n    if (dateStart.after(dateEnd)) {\r\n        Date tmp = ((Date) (dateStart.clone()));\r\n        dateStart = ((Date) (dateEnd.clone()));\r\n        dateEnd = tmp;\r\n    }\r\n    // System.out.println(\"GanttGraphicArea dateStart=\" + dateStart);\r\n    // System.out.println(\"GanttGraphicArea dateEnd=\" + dateEnd);\r\n    TaskLength printedLength = getTaskManager().createLength(unit, dateStart, dateEnd);\r\n    BufferedImage taskImage = ((BufferedImage) (myTaskImageGenerator.createImage(myItemsToConsider)));\r\n    int chartWidth = ((int) (((printedLength.getLength(getViewState().getBottomTimeUnit())) + 1) * (getViewState().getBottomUnitWidth())));\r\n    if (chartWidth < (getWidth())) {\r\n        chartWidth = getWidth();\r\n    }\r\n    int chartHeight = taskImage.getHeight(null);\r\n    return new RenderedGanttChartImage(myChartModel, myChartComponentImpl, GanttTree2.convertNodesListToItemList(myItemsToConsider), taskImage, chartWidth, chartHeight);\r\n}"},
 {"id":51, "parametername":"final TaskMutator mutator", "parametertype":"net.sourceforge.ganttproject.task.TaskMutator", "parameterclass":571, "classid":28, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction", "methodid":245, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction.finish(net.sourceforge.ganttproject.task.TaskMutator)", "isreturn":0, "sourcecode":"public void finish(final TaskMutator mutator) {\r\n    mutator.setIsolationLevel(TaskMutator.READ_COMMITED);\r\n    // if\r\n    // ((!myInitialEnd.equals(getTask().getEnd()))||(!myInitialStart.equals(getTask().getStart())))\r\n    getUndoManager().undoableEdit(\"Task boundary changed\", new Runnable() {\r\n        public void run() {\r\n            doFinish(mutator);\r\n        }\r\n    });\r\n}"},
 {"id":52, "parametername":"TaskMutator mutator", "parametertype":"net.sourceforge.ganttproject.task.TaskMutator", "parameterclass":571, "classid":28, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction", "methodid":244, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskBoundaryInteraction.doFinish(net.sourceforge.ganttproject.task.TaskMutator)", "isreturn":0, "sourcecode":"private void doFinish(TaskMutator mutator) {\r\n    mutator.commit();\r\n    myLastNotes = null;\r\n    try {\r\n        getTaskManager().getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm().run();\r\n    } catch (TaskDependencyException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n        getUIFacade().showErrorDialog(e);\r\n    }\r\n    this.repaint();\r\n}"},
 {"id":53, "parametername":"TaskMutator mutator", "parametertype":"net.sourceforge.ganttproject.task.TaskMutator", "parameterclass":571, "classid":30, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskProgressInteraction", "methodid":257, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChangeTaskProgressInteraction.doFinish(net.sourceforge.ganttproject.task.TaskMutator)", "isreturn":0, "sourcecode":"private void doFinish(TaskMutator mutator) {\r\n    mutator.commit();\r\n    myLastNotes = null;\r\n    try {\r\n        getTaskManager().getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm().run();\r\n    } catch (TaskDependencyException e) {\r\n        getUIFacade().showErrorDialog(e);\r\n    }\r\n    if ((myProgressIs) == (myProgressWas)) {\r\n        // getUndoManager ().die ();\r\n        myMutator.commit();\r\n        repaint();\r\n        int myProgressIs = myTaskProgrssItem.getTask().getCompletionPercentage();\r\n        if (myProgressIs != (myProgressWas)) {\r\n            // appli.setQuickSave(true);\r\n            // appli.quickSave (\"Task progress changed\");\r\n        }\r\n    }\r\n}"},
 {"id":54, "parametername":"final Task dependee", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":37, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction", "methodid":299, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$DrawDependencyInteraction.createDependency(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"private void createDependency(final Task dependee) {\r\n    try {\r\n        getTaskManager().getDependencyCollection().createDependency(myDependant, dependee, new FinishStartConstraintImpl());\r\n    } catch (TaskDependencyException e) {\r\n        getUIFacade().showErrorDialog(e);\r\n    }\r\n    getProject().setModified();\r\n}"},
 {"id":55, "parametername":"TaskBoundaryChartItem taskBoundary", "parametertype":"net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem", "parameterclass":225, "classid":32, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "methodid":264, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.beginChangeTaskEndInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "isreturn":0, "sourcecode":"void beginChangeTaskEndInteraction(MouseEvent initiatingEvent, TaskBoundaryChartItem taskBoundary);"},
 {"id":56, "parametername":"TaskBoundaryChartItem taskBoundary", "parametertype":"net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem", "parameterclass":225, "classid":32, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "methodid":266, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.beginChangeTaskStartInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "isreturn":0, "sourcecode":"void beginChangeTaskStartInteraction(MouseEvent e, TaskBoundaryChartItem taskBoundary);"},
 {"id":57, "parametername":"TaskProgressChartItem item", "parametertype":"net.sourceforge.ganttproject.chart.item.TaskProgressChartItem", "parameterclass":226, "classid":32, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "methodid":265, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.beginChangeTaskProgressInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskProgressChartItem)", "isreturn":0, "sourcecode":"void beginChangeTaskProgressInteraction(MouseEvent e, TaskProgressChartItem item);"},
 {"id":58, "parametername":"TaskRegularAreaChartItem taskArea", "parametertype":"net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem", "parameterclass":227, "classid":32, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "methodid":267, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.beginDrawDependencyInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem,net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport)", "isreturn":0, "sourcecode":"void beginDrawDependencyInteraction(MouseEvent initiatingEvent, TaskRegularAreaChartItem taskArea, GanttGraphicArea.MouseSupport mouseSupport);"},
 {"id":59, "parametername":"GanttGraphicArea.MouseSupport mouseSupport", "parametertype":"net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport", "parameterclass":38, "classid":32, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "methodid":267, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.beginDrawDependencyInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem,net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport)", "isreturn":0, "sourcecode":"void beginDrawDependencyInteraction(MouseEvent initiatingEvent, TaskRegularAreaChartItem taskArea, GanttGraphicArea.MouseSupport mouseSupport);"},
 {"id":60, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":32, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "methodid":268, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation.beginMoveTaskInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"void beginMoveTaskInteraction(MouseEvent e, Task task);"},
 {"id":61, "parametername":"TaskBoundaryChartItem taskBoundary", "parametertype":"net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem", "parameterclass":225, "classid":33, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase", "methodid":278, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase.beginChangeTaskEndInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "isreturn":0, "sourcecode":"public void beginChangeTaskEndInteraction(MouseEvent initiatingEvent, TaskBoundaryChartItem taskBoundary) {\r\n    setActiveInteraction(new GanttGraphicArea.ChangeTaskEndInteraction(initiatingEvent, taskBoundary));\r\n}"},
 {"id":62, "parametername":"TaskBoundaryChartItem taskBoundary", "parametertype":"net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem", "parameterclass":225, "classid":33, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase", "methodid":280, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase.beginChangeTaskStartInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem)", "isreturn":0, "sourcecode":"public void beginChangeTaskStartInteraction(MouseEvent e, TaskBoundaryChartItem taskBoundary) {\r\n    setActiveInteraction(new GanttGraphicArea.ChangeTaskStartInteraction(e, taskBoundary));\r\n}"},
 {"id":63, "parametername":"TaskProgressChartItem taskProgress", "parametertype":"net.sourceforge.ganttproject.chart.item.TaskProgressChartItem", "parameterclass":226, "classid":33, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase", "methodid":279, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase.beginChangeTaskProgressInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskProgressChartItem)", "isreturn":0, "sourcecode":"public void beginChangeTaskProgressInteraction(MouseEvent e, TaskProgressChartItem taskProgress) {\r\n    setActiveInteraction(new GanttGraphicArea.ChangeTaskProgressInteraction(e, taskProgress));\r\n}"},
 {"id":64, "parametername":"TaskRegularAreaChartItem taskArea", "parametertype":"net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem", "parameterclass":227, "classid":33, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase", "methodid":281, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase.beginDrawDependencyInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem,net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport)", "isreturn":0, "sourcecode":"public void beginDrawDependencyInteraction(MouseEvent initiatingEvent, TaskRegularAreaChartItem taskArea, GanttGraphicArea.MouseSupport mouseSupport) {\r\n    setActiveInteraction(new GanttGraphicArea.DrawDependencyInteraction(initiatingEvent, taskArea, mouseSupport));\r\n}"},
 {"id":65, "parametername":"GanttGraphicArea.MouseSupport mouseSupport", "parametertype":"net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport", "parameterclass":38, "classid":33, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase", "methodid":281, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase.beginDrawDependencyInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem,net.sourceforge.ganttproject.GanttGraphicArea$MouseSupport)", "isreturn":0, "sourcecode":"public void beginDrawDependencyInteraction(MouseEvent initiatingEvent, TaskRegularAreaChartItem taskArea, GanttGraphicArea.MouseSupport mouseSupport) {\r\n    setActiveInteraction(new GanttGraphicArea.DrawDependencyInteraction(initiatingEvent, taskArea, mouseSupport));\r\n}"},
 {"id":66, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":33, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase", "methodid":282, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementationBase.beginMoveTaskInteraction(java.awt.event.MouseEvent,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public void beginMoveTaskInteraction(MouseEvent e, Task task) {\r\n    setActiveInteraction(new GanttGraphicArea.MoveTaskInteraction(e, task));\r\n}"},
 {"id":67, "parametername":"ChartSelection selection", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelection", "parameterclass":177, "classid":41, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl", "methodid":316, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl.canPaste(net.sourceforge.ganttproject.chart.ChartSelection)", "isreturn":0, "sourcecode":"public IStatus canPaste(ChartSelection selection) {\r\n    return Status.OK_STATUS;\r\n}"},
 {"id":68, "parametername":"ChartSelection selection", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelection", "parameterclass":177, "classid":41, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl", "methodid":322, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$NewChartComponentImpl.paste(net.sourceforge.ganttproject.chart.ChartSelection)", "isreturn":0, "sourcecode":"public void paste(ChartSelection selection) {\r\n    tree.pasteNode();\r\n}"},
 {"id":69, "parametername":"ScrollingManager scrollMgr", "parametertype":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager", "parameterclass":409, "classid":45, "classname":"net.sourceforge.ganttproject.GanttGraphicArea", "methodid":224, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea.getScrollCenterAction(net.sourceforge.ganttproject.gui.scrolling.ScrollingManager,net.sourceforge.ganttproject.task.TaskSelectionManager,java.lang.String)", "isreturn":0, "sourcecode":"public Action getScrollCenterAction(ScrollingManager scrollMgr, TaskSelectionManager taskSelMgr, String iconSize) {\r\n    if ((myScrollCenterAction) == null)\r\n        myScrollCenterAction = new GanttGraphicArea.ScrollGanttChartCenterAction(scrollMgr, taskSelMgr, iconSize);\r\n\r\n    return myScrollCenterAction;\r\n}"},
 {"id":70, "parametername":"TaskSelectionManager taskSelMgr", "parametertype":"net.sourceforge.ganttproject.task.TaskSelectionManager", "parameterclass":575, "classid":45, "classname":"net.sourceforge.ganttproject.GanttGraphicArea", "methodid":224, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea.getScrollCenterAction(net.sourceforge.ganttproject.gui.scrolling.ScrollingManager,net.sourceforge.ganttproject.task.TaskSelectionManager,java.lang.String)", "isreturn":0, "sourcecode":"public Action getScrollCenterAction(ScrollingManager scrollMgr, TaskSelectionManager taskSelMgr, String iconSize) {\r\n    if ((myScrollCenterAction) == null)\r\n        myScrollCenterAction = new GanttGraphicArea.ScrollGanttChartCenterAction(scrollMgr, taskSelMgr, iconSize);\r\n\r\n    return myScrollCenterAction;\r\n}"},
 {"id":71, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":45, "classname":"net.sourceforge.ganttproject.GanttGraphicArea", "methodid":238, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea.setTaskManager(net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"public void setTaskManager(TaskManager taskManager) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":72, "parametername":"CustomColumEvent event", "parametertype":"net.sourceforge.ganttproject.task.CustomColumEvent", "parameterclass":531, "classid":45, "classname":"net.sourceforge.ganttproject.GanttGraphicArea", "methodid":207, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea.customColumsChange(net.sourceforge.ganttproject.task.CustomColumEvent)", "isreturn":0, "sourcecode":"public void customColumsChange(CustomColumEvent event) {\r\n    repaint();\r\n}"},
 {"id":73, "parametername":"UIConfiguration configuration", "parametertype":"net.sourceforge.ganttproject.gui.UIConfiguration", "parameterclass":335, "classid":45, "classname":"net.sourceforge.ganttproject.GanttGraphicArea", "methodid":239, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea.setUIConfiguration(net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"public void setUIConfiguration(UIConfiguration configuration) {\r\n    myUIConfiguration = configuration;\r\n}"},
 {"id":74, "parametername":"ChangeValueEvent event", "parametertype":"net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent", "parameterclass":375, "classid":34, "classname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel", "methodid":287, "methodname":"net.sourceforge.ganttproject.GanttGraphicArea$ChartOptionsPreviewPanel.changeValue(net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent)", "isreturn":0, "sourcecode":"public void changeValue(ChangeValueEvent event) {\r\n    Object id = event.getID();\r\n    if (id.equals(\"up\")) {\r\n        upText.text = GanttGraphicArea.ChartOptionsPreviewPanel.getI18n(event.getNewValue().toString());\r\n    } else\r\n        if (id.equals(\"down\")) {\r\n            downText.text = GanttGraphicArea.ChartOptionsPreviewPanel.getI18n(event.getNewValue().toString());\r\n        } else\r\n            if (id.equals(\"left\")) {\r\n                leftText.text = GanttGraphicArea.ChartOptionsPreviewPanel.getI18n(event.getNewValue().toString());\r\n            } else\r\n                if (id.equals(\"right\")) {\r\n                    rightText.text = GanttGraphicArea.ChartOptionsPreviewPanel.getI18n(event.getNewValue().toString());\r\n                }\r\n\r\n\r\n\r\n    repaint();\r\n}"},
 {"id":75, "parametername":"RoleManager roleManager", "parametertype":"net.sourceforge.ganttproject.roles.RoleManager", "parameterclass":517, "classid":48, "classname":"net.sourceforge.ganttproject.GanttOptions", "methodid":339, "methodname":"net.sourceforge.ganttproject.GanttOptions.-init-(net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.document.DocumentManager,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Default constructor.\r\n */\r\npublic GanttOptions(RoleManager roleManager, DocumentManager documentManager, boolean isOnlyViewer) {\r\n    myDocumentManager = documentManager;\r\n    myRoleManager = roleManager;\r\n    this.isOnlyViewer = isOnlyViewer;\r\n    initByDefault();\r\n    try {\r\n        this.workingDir = System.getProperty(\"user.home\");\r\n    } catch (AccessControlException e) {\r\n        // This can happen when running in a sandbox (Java WebStart)\r\n        System.err.println(((e + \": \") + (e.getMessage())));\r\n    }\r\n}"},
 {"id":76, "parametername":"DocumentManager documentManager", "parametertype":"net.sourceforge.ganttproject.document.DocumentManager", "parameterclass":237, "classid":48, "classname":"net.sourceforge.ganttproject.GanttOptions", "methodid":339, "methodname":"net.sourceforge.ganttproject.GanttOptions.-init-(net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.document.DocumentManager,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Default constructor.\r\n */\r\npublic GanttOptions(RoleManager roleManager, DocumentManager documentManager, boolean isOnlyViewer) {\r\n    myDocumentManager = documentManager;\r\n    myRoleManager = roleManager;\r\n    this.isOnlyViewer = isOnlyViewer;\r\n    initByDefault();\r\n    try {\r\n        this.workingDir = System.getProperty(\"user.home\");\r\n    } catch (AccessControlException e) {\r\n        // This can happen when running in a sandbox (Java WebStart)\r\n        System.err.println(((e + \": \") + (e.getMessage())));\r\n    }\r\n}"},
 {"id":77, "parametername":"RoleSet roleSet", "parametertype":"net.sourceforge.ganttproject.roles.RoleSet", "parameterclass":520, "classid":48, "classname":"net.sourceforge.ganttproject.GanttOptions", "methodid":398, "methodname":"net.sourceforge.ganttproject.GanttOptions.saveRoles(net.sourceforge.ganttproject.roles.RoleSet,javax.xml.transform.sax.TransformerHandler)", "isreturn":0, "sourcecode":"private void saveRoles(RoleSet roleSet, TransformerHandler handler) throws SAXException {\r\n    Role[] roles = roleSet.getRoles();\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    for (int i = 0; i < (roles.length); i++) {\r\n        Role next = roles[i];\r\n        addAttribute(\"id\", (\"\" + (next.getID())), attrs);\r\n        addAttribute(\"name\", next.getName(), attrs);\r\n        emptyElement(\"role\", attrs, handler);\r\n    }\r\n}"},
 {"id":78, "parametername":"DocumentsMRU documentsMRU", "parametertype":"net.sourceforge.ganttproject.document.DocumentsMRU", "parameterclass":238, "classid":48, "classname":"net.sourceforge.ganttproject.GanttOptions", "methodid":404, "methodname":"net.sourceforge.ganttproject.GanttOptions.setDocumentsMRU(net.sourceforge.ganttproject.document.DocumentsMRU)", "isreturn":0, "sourcecode":"public void setDocumentsMRU(DocumentsMRU documentsMRU) {\r\n    this.documentsMRU = documentsMRU;\r\n}"},
 {"id":79, "parametername":"UIConfiguration uiConfiguration", "parametertype":"net.sourceforge.ganttproject.gui.UIConfiguration", "parameterclass":335, "classid":48, "classname":"net.sourceforge.ganttproject.GanttOptions", "methodid":428, "methodname":"net.sourceforge.ganttproject.GanttOptions.setUIConfiguration(net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"public void setUIConfiguration(UIConfiguration uiConfiguration) {\r\n    this.myUIConfig = uiConfiguration;\r\n}"},
 {"id":80, "parametername":"GanttLookAndFeelInfo lookAndFeel", "parametertype":"net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo", "parameterclass":301, "classid":48, "classname":"net.sourceforge.ganttproject.GanttOptions", "methodid":418, "methodname":"net.sourceforge.ganttproject.GanttOptions.setLookAndFeel(net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo)", "isreturn":0, "sourcecode":"/**\r\n * set new drag time with mouse value.\r\n */\r\n// public void setDragTime(boolean dragTime){\r\n// this.dragTime = dragTime;\r\n// }\r\npublic void setLookAndFeel(GanttLookAndFeelInfo lookAndFeel) {\r\n    this.lookAndFeel = lookAndFeel;\r\n}"},
 {"id":81, "parametername":"GPOptionGroup optionGroup", "parametertype":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup", "parameterclass":389, "classid":48, "classname":"net.sourceforge.ganttproject.GanttOptions", "methodid":344, "methodname":"net.sourceforge.ganttproject.GanttOptions.addOptions(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup)", "isreturn":0, "sourcecode":"private void addOptions(GPOptionGroup optionGroup) {\r\n    GPOption[] options = optionGroup.getOptions();\r\n    for (int i = 0; i < (options.length); i++) {\r\n        GPOption nextOption = options[i];\r\n        myGPOptions.put((((optionGroup.getID()) + \".\") + (nextOption.getID())), nextOption);\r\n        if (nextOption instanceof GP1XOptionConverter) {\r\n            GP1XOptionConverter nextConverter = ((GP1XOptionConverter) (nextOption));\r\n            myTagDotAttribute_Converter.put((((nextConverter.getTagName()) + \".\") + (nextConverter.getAttributeName())), nextConverter);\r\n        }\r\n    }\r\n}"},
 {"id":82, "parametername":"GanttProject project", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":49, "classname":"net.sourceforge.ganttproject.GanttPreviousState", "methodid":439, "methodname":"net.sourceforge.ganttproject.GanttPreviousState.-init-(java.lang.String,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"// constructor for a new previous state\r\npublic GanttPreviousState(String name, GanttProject project) throws IOException {\r\n    myName = name;\r\n    myTree = ((GanttTree2) (project.getTree()));\r\n    myProject = project;\r\n    myFile = createTemporaryFile();\r\n    myFile.deleteOnExit();\r\n    os = new OutputStreamWriter(new FileOutputStream(myFile), \"UTF-8\");\r\n    saveFile();\r\n}"},
 {"id":83, "parametername":"GanttCalendar start", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":50, "classname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "methodid":454, "methodname":"net.sourceforge.ganttproject.GanttPreviousStateTask.-init-(int,net.sourceforge.ganttproject.GanttCalendar,int,boolean,boolean)", "isreturn":0, "sourcecode":"public GanttPreviousStateTask(int id, GanttCalendar start, int duration, boolean isMilestone, boolean hasNested) {\r\n    myId = id;\r\n    myStart = start;\r\n    myDuration = duration;\r\n    this.isMilestone = isMilestone;\r\n    this.hasNested = hasNested;\r\n}"},
 {"id":84, "parametername":"GPCalendar calendar", "parametertype":"net.sourceforge.ganttproject.calendar.GPCalendar", "parameterclass":146, "classid":50, "classname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "methodid":456, "methodname":"net.sourceforge.ganttproject.GanttPreviousStateTask.getEnd(net.sourceforge.ganttproject.calendar.GPCalendar)", "isreturn":0, "sourcecode":"public GanttCalendar getEnd(GPCalendar calendar) {\r\n    int duration = myDuration;\r\n    GanttCalendar end = myStart.newAdd(myDuration);\r\n    for (int i = 0; i < duration; i++) {\r\n        // if (myId == 1)\r\n        // System.out.println (myStart.newAdd(i).getTime() + \" is workingDay : \" + calendar.isNonWorkingDay(myStart.newAdd(i).getTime()));\r\n        if (calendar.isNonWorkingDay(myStart.newAdd(i).getTime())) {\r\n            end.add(1);\r\n            duration++;\r\n        }\r\n    }\r\n    return end;\r\n}"},
 {"id":85, "parametername":"net.sourceforge.ganttproject.GanttCalendar", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":50, "classname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "methodid":456, "methodname":"net.sourceforge.ganttproject.GanttPreviousStateTask.getEnd(net.sourceforge.ganttproject.calendar.GPCalendar)", "isreturn":1, "sourcecode":"public GanttCalendar getEnd(GPCalendar calendar) {\r\n    int duration = myDuration;\r\n    GanttCalendar end = myStart.newAdd(myDuration);\r\n    for (int i = 0; i < duration; i++) {\r\n        // if (myId == 1)\r\n        // System.out.println (myStart.newAdd(i).getTime() + \" is workingDay : \" + calendar.isNonWorkingDay(myStart.newAdd(i).getTime()));\r\n        if (calendar.isNonWorkingDay(myStart.newAdd(i).getTime())) {\r\n            end.add(1);\r\n            duration++;\r\n        }\r\n    }\r\n    return end;\r\n}"},
 {"id":86, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":50, "classname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "methodid":465, "methodname":"net.sourceforge.ganttproject.GanttPreviousStateTask.setState(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.calendar.GPCalendar)", "isreturn":0, "sourcecode":"public void setState(Task task, GPCalendar calendar) {\r\n    if (task.getEnd().before(getEnd(calendar)))\r\n        setState(GanttPreviousStateTask.EARLIER);\r\n    else\r\n        if (task.getEnd().after(getEnd(calendar)))\r\n            setState(GanttPreviousStateTask.LATER);\r\n        else\r\n            setState(GanttPreviousStateTask.NORMAL);\r\n\r\n\r\n}"},
 {"id":87, "parametername":"GPCalendar calendar", "parametertype":"net.sourceforge.ganttproject.calendar.GPCalendar", "parameterclass":146, "classid":50, "classname":"net.sourceforge.ganttproject.GanttPreviousStateTask", "methodid":465, "methodname":"net.sourceforge.ganttproject.GanttPreviousStateTask.setState(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.calendar.GPCalendar)", "isreturn":0, "sourcecode":"public void setState(Task task, GPCalendar calendar) {\r\n    if (task.getEnd().before(getEnd(calendar)))\r\n        setState(GanttPreviousStateTask.EARLIER);\r\n    else\r\n        if (task.getEnd().after(getEnd(calendar)))\r\n            setState(GanttPreviousStateTask.LATER);\r\n        else\r\n            setState(GanttPreviousStateTask.NORMAL);\r\n\r\n\r\n}"},
 {"id":88, "parametername":"GanttExportSettings options", "parametertype":"net.sourceforge.ganttproject.GanttExportSettings", "parameterclass":27, "classid":51, "classname":"net.sourceforge.ganttproject.GanttProject$ExportFileInfo", "methodid":595, "methodname":"net.sourceforge.ganttproject.GanttProject$ExportFileInfo.-init-(java.io.File,int,net.sourceforge.ganttproject.GanttExportSettings)", "isreturn":0, "sourcecode":"public ExportFileInfo(File file, int format, GanttExportSettings options) {\r\n    myFile = file;\r\n    myFormat = format;\r\n    myStorageOptions = options;\r\n}"},
 {"id":89, "parametername":"GanttLookAndFeelInfo lookAndFeel", "parametertype":"net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo", "parameterclass":301, "classid":53, "classname":"net.sourceforge.ganttproject.GanttProject", "methodid":480, "methodname":"net.sourceforge.ganttproject.GanttProject.changeLookAndFeel(net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo)", "isreturn":0, "sourcecode":"/**\r\n * Change the style of the application\r\n */\r\npublic void changeLookAndFeel(GanttLookAndFeelInfo lookAndFeel) {\r\n    try {\r\n        UIManager.setLookAndFeel(lookAndFeel.getClassName());\r\n        SwingUtilities.updateComponentTreeUI(this);\r\n        this.lookAndFeel = lookAndFeel;\r\n    } catch (Exception e) {\r\n        GanttLookAndFeelInfo info = GanttLookAndFeels.getGanttLookAndFeels().getDefaultInfo();\r\n        System.out.println((((((\"Can\t find the LookAndFeel\n\" + (lookAndFeel.getClassName())) + \"\n\") + (lookAndFeel.getName())) + \"\nSetting the default Look\nFeel\") + (info.getName())));\r\n        try {\r\n            UIManager.setLookAndFeel(info.getClassName());\r\n            SwingUtilities.updateComponentTreeUI(this);\r\n            this.lookAndFeel = info;\r\n        } catch (Exception ex) {\r\n        }\r\n    }\r\n    // MetalLookAndFeel.setCurrentTheme(new GanttMetalTheme());\r\n    // must force to do that instead of the task on tree are not in\r\n    // continuity of the calendar\r\n    if ((tree.getTable().getRowHeight()) <= 22)\r\n        tree.getTable().setRowHeight(20);\r\n\r\n}"},
 {"id":90, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":53, "classname":"net.sourceforge.ganttproject.GanttProject", "methodid":551, "methodname":"net.sourceforge.ganttproject.GanttProject.open(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"public void open(Document document) throws IOException {\r\n    openDocument(document);\r\n    if ((document.getPortfolio()) != null) {\r\n        Document defaultDocument = document.getPortfolio().getDefaultDocument();\r\n        openDocument(defaultDocument);\r\n    }\r\n}"},
 {"id":91, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":53, "classname":"net.sourceforge.ganttproject.GanttProject", "methodid":552, "methodname":"net.sourceforge.ganttproject.GanttProject.openDocument(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"private void openDocument(Document document) throws IOException {\r\n    if ((document.getDescription().toLowerCase().endsWith(\".xml\")) || (document.getDescription().toLowerCase().endsWith(\".gan\"))) {\r\n        boolean locked = document.acquireLock();\r\n        if (!locked) {\r\n            getUIFacade().logErrorMessage(new Exception(language.getText(\"msg13\")));\r\n        }\r\n        document.read();\r\n        if (documentsMRU.add(document)) {\r\n            updateMenuMRU();\r\n        }\r\n        if (locked) {\r\n            projectDocument = document;\r\n        }\r\n        this.setTitle(((((language.getText(\"appliTitle\")) + \" [\") + (document.getDescription())) + \"]\"));\r\n        setAskForSave(false);\r\n        if ((myPreviousStates.size()) != 0) {\r\n            bComparePrev.setEnabled(true);\r\n        }\r\n    } else {\r\n        String errorMessage = ((language.getText(\"msg2\")) + \"\n\") + (document.getDescription());\r\n        throw new IOException(errorMessage);\r\n    }\r\n    Chart[] charts = Mediator.getPluginManager().getCharts();\r\n    for (int i = 0; i < (charts.length); i++) {\r\n        charts[i].setTaskManager(myTaskManager);\r\n        charts[i].reset();\r\n    }\r\n    // myDelayManager.fireDelayObservation(); // it is done in repaint2\r\n    addMouseListenerToAllContainer(this.getComponents());\r\n    getTaskManager().processCriticalPath(((TaskNode) (tree.getRoot())));\r\n    ArrayList projectTasks = tree.getProjectTasks();\r\n    if ((projectTasks.size()) != 0)\r\n        for (int i = 0; i < (projectTasks.size()); i++)\r\n            getTaskManager().processCriticalPath(((TaskNode) (projectTasks.get(i))));\r\n\r\n\r\n    // repaint2();\r\n}"},
 {"id":92, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":53, "classname":"net.sourceforge.ganttproject.GanttProject", "methodid":592, "methodname":"net.sourceforge.ganttproject.GanttProject.tryImportDocument(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"private boolean tryImportDocument(Document document) {\r\n    boolean success = false;\r\n    Importer[] importers = ((Importer[]) (Mediator.getPluginManager().getExtensions(Importer.EXTENSION_POINT_ID, Importer.class)));\r\n    for (int i = 0; i < (importers.length); i++) {\r\n        Importer nextImporter = importers[i];\r\n        if (Pattern.matches(((\".*(\" + (nextImporter.getFileNamePattern())) + \")$\"), document.getFilePath())) {\r\n            try {\r\n                nextImporter.run(this, getUIFacade(), new File(document.getFilePath()), false);\r\n                success = true;\r\n                break;\r\n            } catch (Throwable e) {\r\n                if (!(GPLogger.log(e))) {\r\n                    e.printStackTrace(System.err);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return success;\r\n}"},
 {"id":93, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":53, "classname":"net.sourceforge.ganttproject.GanttProject", "methodid":555, "methodname":"net.sourceforge.ganttproject.GanttProject.openStartupDocument(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"private void openStartupDocument(Document document) {\r\n    try {\r\n        getProjectUIFacade().openProject(document, getProject());\r\n    } catch (IOException e) {\r\n        getUIFacade().showErrorDialog(e);\r\n    }\r\n}"},
 {"id":94, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":53, "classname":"net.sourceforge.ganttproject.GanttProject", "methodid":578, "methodname":"net.sourceforge.ganttproject.GanttProject.setDocument(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"public void setDocument(Document document) {\r\n    projectDocument = document;\r\n}"},
 {"id":95, "parametername":"ResourceEvent event", "parametertype":"net.sourceforge.ganttproject.resource.ResourceEvent", "parameterclass":508, "classid":53, "classname":"net.sourceforge.ganttproject.GanttProject", "methodid":566, "methodname":"net.sourceforge.ganttproject.GanttProject.resourceAdded(net.sourceforge.ganttproject.resource.ResourceEvent)", "isreturn":0, "sourcecode":"// ///////////////////////////////////////////////////////////////\r\n// ResourceView implementation\r\npublic void resourceAdded(ResourceEvent event) {\r\n    if ((getStatusBar()) != null) {\r\n        // tabpane.setSelectedIndex(1);\r\n        getUIFacade().setStatusText(GanttLanguage.getInstance().correctLabel(GanttLanguage.getInstance().getText(\"newHuman\")));\r\n        setAskForSave(true);\r\n        refreshProjectInfos();\r\n    }\r\n}"},
 {"id":96, "parametername":"ResourceEvent event", "parametertype":"net.sourceforge.ganttproject.resource.ResourceEvent", "parameterclass":508, "classid":53, "classname":"net.sourceforge.ganttproject.GanttProject", "methodid":569, "methodname":"net.sourceforge.ganttproject.GanttProject.resourcesRemoved(net.sourceforge.ganttproject.resource.ResourceEvent)", "isreturn":0, "sourcecode":"public void resourcesRemoved(ResourceEvent event) {\r\n    refreshProjectInfos();\r\n    setAskForSave(true);\r\n}"},
 {"id":97, "parametername":"ResourceEvent e", "parametertype":"net.sourceforge.ganttproject.resource.ResourceEvent", "parameterclass":508, "classid":53, "classname":"net.sourceforge.ganttproject.GanttProject", "methodid":568, "methodname":"net.sourceforge.ganttproject.GanttProject.resourceChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "isreturn":0, "sourcecode":"public void resourceChanged(ResourceEvent e) {\r\n    setAskForSave(true);\r\n}"},
 {"id":98, "parametername":"ResourceEvent e", "parametertype":"net.sourceforge.ganttproject.resource.ResourceEvent", "parameterclass":508, "classid":53, "classname":"net.sourceforge.ganttproject.GanttProject", "methodid":567, "methodname":"net.sourceforge.ganttproject.GanttProject.resourceAssignmentsChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "isreturn":0, "sourcecode":"public void resourceAssignmentsChanged(ResourceEvent e) {\r\n    setAskForSave(true);\r\n}"},
 {"id":99, "parametername":"GanttTabbedPane tabs", "parametertype":"net.sourceforge.ganttproject.gui.GanttTabbedPane", "parameterclass":311, "classid":56, "classname":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl", "methodid":663, "methodname":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl.-init-(net.sourceforge.ganttproject.gui.GanttTabbedPane)", "isreturn":0, "sourcecode":"ViewManagerImpl(GanttTabbedPane tabs) {\r\n    myTabs = tabs;\r\n    myTabs.addChangeListener(new ChangeListener() {\r\n        public void stateChanged(ChangeEvent e) {\r\n            GanttProjectBase.GPViewImpl selectedView = ((GanttProjectBase.GPViewImpl) (myTabs.getSelectedUserObject()));\r\n            if ((mySelectedView) == selectedView) {\r\n                return;\r\n            }\r\n            if ((mySelectedView) != null) {\r\n                mySelectedView.setActive(false);\r\n            }\r\n            mySelectedView = selectedView;\r\n            mySelectedView.setActive(true);\r\n        }\r\n    });\r\n}"},
 {"id":100, "parametername":"GanttProjectBase.ViewManagerImpl manager", "parametertype":"net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl", "parameterclass":56, "classid":54, "classname":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl", "methodid":655, "methodname":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl.-init-(net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl,net.sourceforge.ganttproject.gui.GanttTabbedPane,java.awt.Container,net.sourceforge.ganttproject.chart.Chart,javax.swing.Icon)", "isreturn":0, "sourcecode":"GPViewImpl(GanttProjectBase.ViewManagerImpl manager, GanttTabbedPane tabs, Container component, Chart chart, Icon icon) {\r\n    myManager = manager;\r\n    myTabs = tabs;\r\n    myComponent = component;\r\n    myIcon = icon;\r\n    myChart = chart;\r\n    assert (myChart) != null;\r\n}"},
 {"id":101, "parametername":"GanttTabbedPane tabs", "parametertype":"net.sourceforge.ganttproject.gui.GanttTabbedPane", "parameterclass":311, "classid":54, "classname":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl", "methodid":655, "methodname":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl.-init-(net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl,net.sourceforge.ganttproject.gui.GanttTabbedPane,java.awt.Container,net.sourceforge.ganttproject.chart.Chart,javax.swing.Icon)", "isreturn":0, "sourcecode":"GPViewImpl(GanttProjectBase.ViewManagerImpl manager, GanttTabbedPane tabs, Container component, Chart chart, Icon icon) {\r\n    myManager = manager;\r\n    myTabs = tabs;\r\n    myComponent = component;\r\n    myIcon = icon;\r\n    myChart = chart;\r\n    assert (myChart) != null;\r\n}"},
 {"id":102, "parametername":"Chart chart", "parametertype":"net.sourceforge.ganttproject.chart.Chart", "parameterclass":159, "classid":54, "classname":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl", "methodid":655, "methodname":"net.sourceforge.ganttproject.GanttProjectBase$GPViewImpl.-init-(net.sourceforge.ganttproject.GanttProjectBase$ViewManagerImpl,net.sourceforge.ganttproject.gui.GanttTabbedPane,java.awt.Container,net.sourceforge.ganttproject.chart.Chart,javax.swing.Icon)", "isreturn":0, "sourcecode":"GPViewImpl(GanttProjectBase.ViewManagerImpl manager, GanttTabbedPane tabs, Container component, Chart chart, Icon icon) {\r\n    myManager = manager;\r\n    myTabs = tabs;\r\n    myComponent = component;\r\n    myIcon = icon;\r\n    myChart = chart;\r\n    assert (myChart) != null;\r\n}"},
 {"id":103, "parametername":"GanttTree2 treeView", "parametertype":"net.sourceforge.ganttproject.GanttTree2", "parameterclass":73, "classid":55, "classname":"net.sourceforge.ganttproject.GanttProjectBase$RowHeightAligner", "methodid":661, "methodname":"net.sourceforge.ganttproject.GanttProjectBase$RowHeightAligner.-init-(net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.chart.ChartModelImpl)", "isreturn":0, "sourcecode":"// TODO: 1.12 refactor and get rid of using concrete implementations of\r\n// gantt view model\r\n// and tree view\r\npublic RowHeightAligner(GanttTree2 treeView, ChartModelImpl ganttViewModel) {\r\n    myGanttViewModel = ganttViewModel;\r\n    myTreeView = treeView;\r\n}"},
 {"id":104, "parametername":"ChartModelImpl ganttViewModel", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelImpl", "parameterclass":172, "classid":55, "classname":"net.sourceforge.ganttproject.GanttProjectBase$RowHeightAligner", "methodid":661, "methodname":"net.sourceforge.ganttproject.GanttProjectBase$RowHeightAligner.-init-(net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.chart.ChartModelImpl)", "isreturn":0, "sourcecode":"// TODO: 1.12 refactor and get rid of using concrete implementations of\r\n// gantt view model\r\n// and tree view\r\npublic RowHeightAligner(GanttTree2 treeView, ChartModelImpl ganttViewModel) {\r\n    myGanttViewModel = ganttViewModel;\r\n    myTreeView = treeView;\r\n}"},
 {"id":105, "parametername":"ProjectEventListener listener", "parametertype":"net.sourceforge.ganttproject.ProjectEventListener", "parameterclass":88, "classid":57, "classname":"net.sourceforge.ganttproject.GanttProjectBase", "methodid":606, "methodname":"net.sourceforge.ganttproject.GanttProjectBase.addProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "isreturn":0, "sourcecode":"public void addProjectEventListener(ProjectEventListener listener) {\r\n    myModifiedStateChangeListeners.add(listener);\r\n}"},
 {"id":106, "parametername":"ProjectEventListener listener", "parametertype":"net.sourceforge.ganttproject.ProjectEventListener", "parameterclass":88, "classid":57, "classname":"net.sourceforge.ganttproject.GanttProjectBase", "methodid":641, "methodname":"net.sourceforge.ganttproject.GanttProjectBase.removeProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "isreturn":0, "sourcecode":"public void removeProjectEventListener(ProjectEventListener listener) {\r\n    myModifiedStateChangeListeners.remove(listener);\r\n}"},
 {"id":107, "parametername":"ResourceManager resourceManager", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":58, "classname":"net.sourceforge.ganttproject.GanttProjectImpl$TaskManagerConfigImpl", "methodid":706, "methodname":"net.sourceforge.ganttproject.GanttProjectImpl$TaskManagerConfigImpl.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.language.GanttLanguage)", "isreturn":0, "sourcecode":"private TaskManagerConfigImpl(ResourceManager resourceManager, GanttLanguage i18n) {\r\n    myResourceManager = resourceManager;\r\n    myTimeUnitStack = new GPTimeUnitStack(i18n);\r\n    myCalendar = new WeekendCalendarImpl();\r\n}"},
 {"id":108, "parametername":"GanttLanguage i18n", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage", "parameterclass":461, "classid":58, "classname":"net.sourceforge.ganttproject.GanttProjectImpl$TaskManagerConfigImpl", "methodid":706, "methodname":"net.sourceforge.ganttproject.GanttProjectImpl$TaskManagerConfigImpl.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.language.GanttLanguage)", "isreturn":0, "sourcecode":"private TaskManagerConfigImpl(ResourceManager resourceManager, GanttLanguage i18n) {\r\n    myResourceManager = resourceManager;\r\n    myTimeUnitStack = new GPTimeUnitStack(i18n);\r\n    myCalendar = new WeekendCalendarImpl();\r\n}"},
 {"id":109, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":59, "classname":"net.sourceforge.ganttproject.GanttProjectImpl", "methodid":700, "methodname":"net.sourceforge.ganttproject.GanttProjectImpl.setDocument(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"public void setDocument(Document document) {\r\n    myDocument = document;\r\n}"},
 {"id":110, "parametername":"ProjectEventListener listener", "parametertype":"net.sourceforge.ganttproject.ProjectEventListener", "parameterclass":88, "classid":59, "classname":"net.sourceforge.ganttproject.GanttProjectImpl", "methodid":675, "methodname":"net.sourceforge.ganttproject.GanttProjectImpl.addProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "isreturn":0, "sourcecode":"public void addProjectEventListener(ProjectEventListener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":111, "parametername":"ProjectEventListener listener", "parametertype":"net.sourceforge.ganttproject.ProjectEventListener", "parameterclass":88, "classid":59, "classname":"net.sourceforge.ganttproject.GanttProjectImpl", "methodid":698, "methodname":"net.sourceforge.ganttproject.GanttProjectImpl.removeProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "isreturn":0, "sourcecode":"public void removeProjectEventListener(ProjectEventListener listener) {\r\n    myListeners.remove(listener);\r\n}"},
 {"id":112, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":59, "classname":"net.sourceforge.ganttproject.GanttProjectImpl", "methodid":697, "methodname":"net.sourceforge.ganttproject.GanttProjectImpl.open(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"public void open(Document document) throws IOException {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":113, "parametername":"final GanttProject prj", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":61, "classname":"net.sourceforge.ganttproject.GanttResourcePanel", "methodid":713, "methodname":"net.sourceforge.ganttproject.GanttResourcePanel.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public GanttResourcePanel(final GanttProject prj, GanttTree2 tree, UIFacade uiFacade) {\r\n    super();\r\n    myUIFacade = uiFacade;\r\n    myDeleteAssignmentAction = new DeleteAssignmentAction(prj.getProject().getHumanResourceManager(), ((AssignmentContext) (this)), prj);\r\n    prj.addProjectEventListener(this);\r\n    appli = prj;\r\n    model = new ResourceTreeTableModel(appli.getHumanResourceManager(), prj.getTaskManager());\r\n    table = new ResourceTreeTable(appli.getProject(), model);\r\n    setLayout(new BorderLayout());\r\n    GanttImagePanel but = new GanttImagePanel(\"big.png\", 300, 42);\r\n    myImagePanel = but;\r\n    left = new JPanel(new BorderLayout());\r\n    table.setRowHeight(20);\r\n    left.add(but, \"North\");\r\n    left.setBackground(new Color(102, 153, 153));\r\n    scrollpane = new JScrollPane();\r\n    setLayout(new BorderLayout());\r\n    add(scrollpane, BorderLayout.CENTER);\r\n    scrollpane.getViewport().add(table);\r\n    scrollpane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);\r\n    vbar = table.getVerticalScrollBar();\r\n    final JPanel jp = new JPanel(new BorderLayout());\r\n    jp.add(vbar, BorderLayout.CENTER);\r\n    // jp.setBorder(BorderFactory.createEmptyBorder(2,1,2,0));\r\n    // jp.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));\r\n    jp.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));\r\n    jp.setVisible(false);\r\n    vbar.addAdjustmentListener(new AdjustmentListener() {\r\n        public void adjustmentValueChanged(AdjustmentEvent e) {\r\n            if (((table.getSize().getHeight()) - 20) < (e.getAdjustable().getMaximum()))\r\n                jp.setVisible(true);\r\n            else\r\n                jp.setVisible(false);\r\n\r\n            repaint();\r\n        }\r\n    });\r\n    left.add(jp, BorderLayout.WEST);\r\n    vbar.addAdjustmentListener(new GanttResourcePanel.GanttAdjustmentListener());\r\n    left.add(scrollpane, \"Center\");\r\n    // A splitpane is use\r\n    mySplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);\r\n    area = new ResourceLoadGraphicArea(prj, prj.getZoomManager()) {\r\n        protected int getHeaderHeight() {\r\n            return (myImagePanel.getHeight()) + (table.getTable().getTableHeader().getHeight());\r\n        }\r\n\r\n        public boolean isExpanded(ProjectResource pr) {\r\n            return getResourceTreeTable().isExpanded(pr);\r\n        }\r\n\r\n        protected int getRowHeight() {\r\n            return table.getRowHeight();\r\n        }\r\n    };\r\n    prj.getZoomManager().addZoomListener(area.getZoomListener());\r\n    area.getChartModel().setRowHeight(table.getRowHeight());\r\n    if ((lang.getComponentOrientation()) == (ComponentOrientation.LEFT_TO_RIGHT)) {\r\n        mySplitPane.setLeftComponent(left);\r\n        mySplitPane.setRightComponent(area);\r\n    } else {\r\n        mySplitPane.setRightComponent(left);\r\n        mySplitPane.setLeftComponent(area);\r\n        mySplitPane.setDividerLocation(((int) ((Toolkit.getDefaultToolkit().getScreenSize().getWidth()) - (left.getPreferredSize().getWidth()))));\r\n    }\r\n    mySplitPane.setOneTouchExpandable(true);\r\n    mySplitPane.setPreferredSize(new Dimension(800, 500));\r\n    add(mySplitPane, BorderLayout.CENTER);\r\n    scrollpane.getViewport().setBackground(new Color(1.0F, 1.0F, 1.0F));\r\n    left.setBackground(new Color(1.0F, 1.0F, 1.0F));\r\n    table.setBackground(new Color(1.0F, 1.0F, 1.0F));\r\n    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n    this.setBackground(new Color(0.0F, 0.0F, 0.0F));\r\n    applyComponentOrientation(lang.getComponentOrientation());\r\n    table.addKeyListener(prj);// callback for keyboard pressed\r\n\r\n    // Add listener for mouse click\r\n    MouseListener ml = new MouseAdapter() {\r\n        public void mousePressed(MouseEvent e) {\r\n            TreePath selPath = table.getTreeTable().getPathForLocation(e.getX(), e.getY());\r\n            table.getTreeTable().getTree().setSelectionPath(selPath);\r\n            handlePopupTrigger(e);\r\n        }\r\n\r\n        public void mouseReleased(MouseEvent e) {\r\n            handlePopupTrigger(e);\r\n        }\r\n\r\n        public void mouseClicked(MouseEvent e) {\r\n            e.consume();\r\n            if (((e.getClickCount()) == 2) && ((e.getButton()) == (MouseEvent.BUTTON1))) {\r\n                handleDoubleClick(e);\r\n            } else {\r\n                handlePopupTrigger(e);\r\n            }\r\n        }\r\n    };\r\n    table.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.ALT_DOWN_MASK), \"properties\");\r\n    table.getActionMap().put(\"properties\", myPropertiesAction);\r\n    table.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), \"delete\");\r\n    table.getActionMap().put(\"delete\", myDeleteAssignmentAction);\r\n    table.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(GPAction.getKeyStroke(\"newArtifact.shortcut\"), \"newHuman\");\r\n    table.getActionMap().put(\"newHuman\", new AbstractAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            prj.newHumanResource();\r\n        }\r\n    });\r\n    if (!(prj.isOnlyViewer)) {\r\n        table.addMouseListener(ml);\r\n        table.getTreeTable().getParent().addMouseListener(ml);\r\n    }\r\n    myResourcePropertiesAction = new ResourcePropertiesAction(prj.getProject(), prj.getUIFacade());\r\n    myContextListener = new ListSelectionListener() {\r\n        public void valueChanged(ListSelectionEvent e) {\r\n            myResourcePropertiesAction.setContext(getContext());\r\n        }\r\n    };\r\n    table.getTable().getSelectionModel().addListSelectionListener(myContextListener);\r\n}"},
 {"id":114, "parametername":"GanttTree2 tree", "parametertype":"net.sourceforge.ganttproject.GanttTree2", "parameterclass":73, "classid":61, "classname":"net.sourceforge.ganttproject.GanttResourcePanel", "methodid":713, "methodname":"net.sourceforge.ganttproject.GanttResourcePanel.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public GanttResourcePanel(final GanttProject prj, GanttTree2 tree, UIFacade uiFacade) {\r\n    super();\r\n    myUIFacade = uiFacade;\r\n    myDeleteAssignmentAction = new DeleteAssignmentAction(prj.getProject().getHumanResourceManager(), ((AssignmentContext) (this)), prj);\r\n    prj.addProjectEventListener(this);\r\n    appli = prj;\r\n    model = new ResourceTreeTableModel(appli.getHumanResourceManager(), prj.getTaskManager());\r\n    table = new ResourceTreeTable(appli.getProject(), model);\r\n    setLayout(new BorderLayout());\r\n    GanttImagePanel but = new GanttImagePanel(\"big.png\", 300, 42);\r\n    myImagePanel = but;\r\n    left = new JPanel(new BorderLayout());\r\n    table.setRowHeight(20);\r\n    left.add(but, \"North\");\r\n    left.setBackground(new Color(102, 153, 153));\r\n    scrollpane = new JScrollPane();\r\n    setLayout(new BorderLayout());\r\n    add(scrollpane, BorderLayout.CENTER);\r\n    scrollpane.getViewport().add(table);\r\n    scrollpane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);\r\n    vbar = table.getVerticalScrollBar();\r\n    final JPanel jp = new JPanel(new BorderLayout());\r\n    jp.add(vbar, BorderLayout.CENTER);\r\n    // jp.setBorder(BorderFactory.createEmptyBorder(2,1,2,0));\r\n    // jp.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));\r\n    jp.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));\r\n    jp.setVisible(false);\r\n    vbar.addAdjustmentListener(new AdjustmentListener() {\r\n        public void adjustmentValueChanged(AdjustmentEvent e) {\r\n            if (((table.getSize().getHeight()) - 20) < (e.getAdjustable().getMaximum()))\r\n                jp.setVisible(true);\r\n            else\r\n                jp.setVisible(false);\r\n\r\n            repaint();\r\n        }\r\n    });\r\n    left.add(jp, BorderLayout.WEST);\r\n    vbar.addAdjustmentListener(new GanttResourcePanel.GanttAdjustmentListener());\r\n    left.add(scrollpane, \"Center\");\r\n    // A splitpane is use\r\n    mySplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);\r\n    area = new ResourceLoadGraphicArea(prj, prj.getZoomManager()) {\r\n        protected int getHeaderHeight() {\r\n            return (myImagePanel.getHeight()) + (table.getTable().getTableHeader().getHeight());\r\n        }\r\n\r\n        public boolean isExpanded(ProjectResource pr) {\r\n            return getResourceTreeTable().isExpanded(pr);\r\n        }\r\n\r\n        protected int getRowHeight() {\r\n            return table.getRowHeight();\r\n        }\r\n    };\r\n    prj.getZoomManager().addZoomListener(area.getZoomListener());\r\n    area.getChartModel().setRowHeight(table.getRowHeight());\r\n    if ((lang.getComponentOrientation()) == (ComponentOrientation.LEFT_TO_RIGHT)) {\r\n        mySplitPane.setLeftComponent(left);\r\n        mySplitPane.setRightComponent(area);\r\n    } else {\r\n        mySplitPane.setRightComponent(left);\r\n        mySplitPane.setLeftComponent(area);\r\n        mySplitPane.setDividerLocation(((int) ((Toolkit.getDefaultToolkit().getScreenSize().getWidth()) - (left.getPreferredSize().getWidth()))));\r\n    }\r\n    mySplitPane.setOneTouchExpandable(true);\r\n    mySplitPane.setPreferredSize(new Dimension(800, 500));\r\n    add(mySplitPane, BorderLayout.CENTER);\r\n    scrollpane.getViewport().setBackground(new Color(1.0F, 1.0F, 1.0F));\r\n    left.setBackground(new Color(1.0F, 1.0F, 1.0F));\r\n    table.setBackground(new Color(1.0F, 1.0F, 1.0F));\r\n    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n    this.setBackground(new Color(0.0F, 0.0F, 0.0F));\r\n    applyComponentOrientation(lang.getComponentOrientation());\r\n    table.addKeyListener(prj);// callback for keyboard pressed\r\n\r\n    // Add listener for mouse click\r\n    MouseListener ml = new MouseAdapter() {\r\n        public void mousePressed(MouseEvent e) {\r\n            TreePath selPath = table.getTreeTable().getPathForLocation(e.getX(), e.getY());\r\n            table.getTreeTable().getTree().setSelectionPath(selPath);\r\n            handlePopupTrigger(e);\r\n        }\r\n\r\n        public void mouseReleased(MouseEvent e) {\r\n            handlePopupTrigger(e);\r\n        }\r\n\r\n        public void mouseClicked(MouseEvent e) {\r\n            e.consume();\r\n            if (((e.getClickCount()) == 2) && ((e.getButton()) == (MouseEvent.BUTTON1))) {\r\n                handleDoubleClick(e);\r\n            } else {\r\n                handlePopupTrigger(e);\r\n            }\r\n        }\r\n    };\r\n    table.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.ALT_DOWN_MASK), \"properties\");\r\n    table.getActionMap().put(\"properties\", myPropertiesAction);\r\n    table.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), \"delete\");\r\n    table.getActionMap().put(\"delete\", myDeleteAssignmentAction);\r\n    table.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(GPAction.getKeyStroke(\"newArtifact.shortcut\"), \"newHuman\");\r\n    table.getActionMap().put(\"newHuman\", new AbstractAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            prj.newHumanResource();\r\n        }\r\n    });\r\n    if (!(prj.isOnlyViewer)) {\r\n        table.addMouseListener(ml);\r\n        table.getTreeTable().getParent().addMouseListener(ml);\r\n    }\r\n    myResourcePropertiesAction = new ResourcePropertiesAction(prj.getProject(), prj.getUIFacade());\r\n    myContextListener = new ListSelectionListener() {\r\n        public void valueChanged(ListSelectionEvent e) {\r\n            myResourcePropertiesAction.setContext(getContext());\r\n        }\r\n    };\r\n    table.getTable().getSelectionModel().addListSelectionListener(myContextListener);\r\n}"},
 {"id":115, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":61, "classname":"net.sourceforge.ganttproject.GanttResourcePanel", "methodid":713, "methodname":"net.sourceforge.ganttproject.GanttResourcePanel.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public GanttResourcePanel(final GanttProject prj, GanttTree2 tree, UIFacade uiFacade) {\r\n    super();\r\n    myUIFacade = uiFacade;\r\n    myDeleteAssignmentAction = new DeleteAssignmentAction(prj.getProject().getHumanResourceManager(), ((AssignmentContext) (this)), prj);\r\n    prj.addProjectEventListener(this);\r\n    appli = prj;\r\n    model = new ResourceTreeTableModel(appli.getHumanResourceManager(), prj.getTaskManager());\r\n    table = new ResourceTreeTable(appli.getProject(), model);\r\n    setLayout(new BorderLayout());\r\n    GanttImagePanel but = new GanttImagePanel(\"big.png\", 300, 42);\r\n    myImagePanel = but;\r\n    left = new JPanel(new BorderLayout());\r\n    table.setRowHeight(20);\r\n    left.add(but, \"North\");\r\n    left.setBackground(new Color(102, 153, 153));\r\n    scrollpane = new JScrollPane();\r\n    setLayout(new BorderLayout());\r\n    add(scrollpane, BorderLayout.CENTER);\r\n    scrollpane.getViewport().add(table);\r\n    scrollpane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);\r\n    vbar = table.getVerticalScrollBar();\r\n    final JPanel jp = new JPanel(new BorderLayout());\r\n    jp.add(vbar, BorderLayout.CENTER);\r\n    // jp.setBorder(BorderFactory.createEmptyBorder(2,1,2,0));\r\n    // jp.setBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED));\r\n    jp.setBorder(BorderFactory.createEtchedBorder(EtchedBorder.LOWERED));\r\n    jp.setVisible(false);\r\n    vbar.addAdjustmentListener(new AdjustmentListener() {\r\n        public void adjustmentValueChanged(AdjustmentEvent e) {\r\n            if (((table.getSize().getHeight()) - 20) < (e.getAdjustable().getMaximum()))\r\n                jp.setVisible(true);\r\n            else\r\n                jp.setVisible(false);\r\n\r\n            repaint();\r\n        }\r\n    });\r\n    left.add(jp, BorderLayout.WEST);\r\n    vbar.addAdjustmentListener(new GanttResourcePanel.GanttAdjustmentListener());\r\n    left.add(scrollpane, \"Center\");\r\n    // A splitpane is use\r\n    mySplitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);\r\n    area = new ResourceLoadGraphicArea(prj, prj.getZoomManager()) {\r\n        protected int getHeaderHeight() {\r\n            return (myImagePanel.getHeight()) + (table.getTable().getTableHeader().getHeight());\r\n        }\r\n\r\n        public boolean isExpanded(ProjectResource pr) {\r\n            return getResourceTreeTable().isExpanded(pr);\r\n        }\r\n\r\n        protected int getRowHeight() {\r\n            return table.getRowHeight();\r\n        }\r\n    };\r\n    prj.getZoomManager().addZoomListener(area.getZoomListener());\r\n    area.getChartModel().setRowHeight(table.getRowHeight());\r\n    if ((lang.getComponentOrientation()) == (ComponentOrientation.LEFT_TO_RIGHT)) {\r\n        mySplitPane.setLeftComponent(left);\r\n        mySplitPane.setRightComponent(area);\r\n    } else {\r\n        mySplitPane.setRightComponent(left);\r\n        mySplitPane.setLeftComponent(area);\r\n        mySplitPane.setDividerLocation(((int) ((Toolkit.getDefaultToolkit().getScreenSize().getWidth()) - (left.getPreferredSize().getWidth()))));\r\n    }\r\n    mySplitPane.setOneTouchExpandable(true);\r\n    mySplitPane.setPreferredSize(new Dimension(800, 500));\r\n    add(mySplitPane, BorderLayout.CENTER);\r\n    scrollpane.getViewport().setBackground(new Color(1.0F, 1.0F, 1.0F));\r\n    left.setBackground(new Color(1.0F, 1.0F, 1.0F));\r\n    table.setBackground(new Color(1.0F, 1.0F, 1.0F));\r\n    table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\r\n    this.setBackground(new Color(0.0F, 0.0F, 0.0F));\r\n    applyComponentOrientation(lang.getComponentOrientation());\r\n    table.addKeyListener(prj);// callback for keyboard pressed\r\n\r\n    // Add listener for mouse click\r\n    MouseListener ml = new MouseAdapter() {\r\n        public void mousePressed(MouseEvent e) {\r\n            TreePath selPath = table.getTreeTable().getPathForLocation(e.getX(), e.getY());\r\n            table.getTreeTable().getTree().setSelectionPath(selPath);\r\n            handlePopupTrigger(e);\r\n        }\r\n\r\n        public void mouseReleased(MouseEvent e) {\r\n            handlePopupTrigger(e);\r\n        }\r\n\r\n        public void mouseClicked(MouseEvent e) {\r\n            e.consume();\r\n            if (((e.getClickCount()) == 2) && ((e.getButton()) == (MouseEvent.BUTTON1))) {\r\n                handleDoubleClick(e);\r\n            } else {\r\n                handlePopupTrigger(e);\r\n            }\r\n        }\r\n    };\r\n    table.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.ALT_DOWN_MASK), \"properties\");\r\n    table.getActionMap().put(\"properties\", myPropertiesAction);\r\n    table.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(KeyEvent.VK_DELETE, 0), \"delete\");\r\n    table.getActionMap().put(\"delete\", myDeleteAssignmentAction);\r\n    table.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(GPAction.getKeyStroke(\"newArtifact.shortcut\"), \"newHuman\");\r\n    table.getActionMap().put(\"newHuman\", new AbstractAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            prj.newHumanResource();\r\n        }\r\n    });\r\n    if (!(prj.isOnlyViewer)) {\r\n        table.addMouseListener(ml);\r\n        table.getTreeTable().getParent().addMouseListener(ml);\r\n    }\r\n    myResourcePropertiesAction = new ResourcePropertiesAction(prj.getProject(), prj.getUIFacade());\r\n    myContextListener = new ListSelectionListener() {\r\n        public void valueChanged(ListSelectionEvent e) {\r\n            myResourcePropertiesAction.setContext(getContext());\r\n        }\r\n    };\r\n    table.getTable().getSelectionModel().addListSelectionListener(myContextListener);\r\n}"},
 {"id":116, "parametername":"GanttLanguage language", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage", "parameterclass":461, "classid":61, "classname":"net.sourceforge.ganttproject.GanttResourcePanel", "methodid":742, "methodname":"net.sourceforge.ganttproject.GanttResourcePanel.refresh(net.sourceforge.ganttproject.language.GanttLanguage)", "isreturn":0, "sourcecode":"/**\r\n * Function called when the language is changed\r\n */\r\npublic void refresh(GanttLanguage language) {\r\n    lang = language;\r\n    model.changeLanguage(lang);\r\n}"},
 {"id":117, "parametername":"ResourceEvent event", "parametertype":"net.sourceforge.ganttproject.resource.ResourceEvent", "parameterclass":508, "classid":61, "classname":"net.sourceforge.ganttproject.GanttResourcePanel", "methodid":744, "methodname":"net.sourceforge.ganttproject.GanttResourcePanel.resourceAdded(net.sourceforge.ganttproject.resource.ResourceEvent)", "isreturn":0, "sourcecode":"public void resourceAdded(ResourceEvent event) {\r\n    newHuman(((HumanResource) (event.getResource())));\r\n}"},
 {"id":118, "parametername":"ResourceEvent event", "parametertype":"net.sourceforge.ganttproject.resource.ResourceEvent", "parameterclass":508, "classid":61, "classname":"net.sourceforge.ganttproject.GanttResourcePanel", "methodid":747, "methodname":"net.sourceforge.ganttproject.GanttResourcePanel.resourcesRemoved(net.sourceforge.ganttproject.resource.ResourceEvent)", "isreturn":0, "sourcecode":"public void resourcesRemoved(ResourceEvent event) {\r\n    table.getTable().editingStopped(new ChangeEvent(table.getTable()));\r\n    model.deleteResources(event.getResources());\r\n}"},
 {"id":119, "parametername":"ResourceEvent e", "parametertype":"net.sourceforge.ganttproject.resource.ResourceEvent", "parameterclass":508, "classid":61, "classname":"net.sourceforge.ganttproject.GanttResourcePanel", "methodid":746, "methodname":"net.sourceforge.ganttproject.GanttResourcePanel.resourceChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "isreturn":0, "sourcecode":"public void resourceChanged(ResourceEvent e) {\r\n    model.resourceChanged(e.getResource());\r\n    ((HumanResource) (e.getResource())).resetLoads();\r\n    repaint();\r\n}"},
 {"id":120, "parametername":"ResourceEvent e", "parametertype":"net.sourceforge.ganttproject.resource.ResourceEvent", "parameterclass":508, "classid":61, "classname":"net.sourceforge.ganttproject.GanttResourcePanel", "methodid":745, "methodname":"net.sourceforge.ganttproject.GanttResourcePanel.resourceAssignmentsChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "isreturn":0, "sourcecode":"public void resourceAssignmentsChanged(ResourceEvent e) {\r\n    model.resourceAssignmentsChanged(e.getResources());\r\n}"},
 {"id":121, "parametername":"HumanResource people", "parametertype":"net.sourceforge.ganttproject.resource.HumanResource", "parameterclass":499, "classid":61, "classname":"net.sourceforge.ganttproject.GanttResourcePanel", "methodid":737, "methodname":"net.sourceforge.ganttproject.GanttResourcePanel.newHuman(net.sourceforge.ganttproject.resource.HumanResource)", "isreturn":0, "sourcecode":"/**\r\n * Create a new Human\r\n */\r\npublic void newHuman(HumanResource people) {\r\n    if (people != null) {\r\n        DefaultMutableTreeNode result = model.addResource(people);\r\n        table.getTree().scrollPathToVisible(new TreePath(result.getPath()));\r\n    }\r\n}"},
 {"id":122, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":61, "classname":"net.sourceforge.ganttproject.GanttResourcePanel", "methodid":749, "methodname":"net.sourceforge.ganttproject.GanttResourcePanel.sendMail(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Send an Email to the current resource\r\n */\r\npublic void sendMail(GanttProject parent) {\r\n    if ((((table) != null) && ((table.getSelectedNodes()) != null)) && ((table.getSelectedNodes().length) > 0)) {\r\n        HumanResource people = ((HumanResource) (table.getSelectedNodes()[0].getUserObject()));\r\n        if (people != null) {\r\n            try {\r\n                BrowserControl.displayURL((\"mailto:\" + (people.getMail())));\r\n            } catch (Exception e) {\r\n                System.err.println(e);\r\n            }\r\n        }\r\n    } else {\r\n        GanttDialogInfo gdi = new GanttDialogInfo(appli, GanttDialogInfo.INFO, GanttDialogInfo.YES_OPTION, GanttLanguage.getInstance().getText(\"msg26\"), GanttLanguage.getInstance().getText(\"sendMail\"));\r\n        gdi.show();\r\n    }\r\n}"},
 {"id":123, "parametername":"ResourceActionSet actionSet", "parametertype":"net.sourceforge.ganttproject.action.ResourceActionSet", "parameterclass":119, "classid":61, "classname":"net.sourceforge.ganttproject.GanttResourcePanel", "methodid":752, "methodname":"net.sourceforge.ganttproject.GanttResourcePanel.setResourceActions(net.sourceforge.ganttproject.action.ResourceActionSet)", "isreturn":0, "sourcecode":"public void setResourceActions(ResourceActionSet actionSet) {\r\n    myResourceActionSet = actionSet;\r\n}"},
 {"id":124, "parametername":"GanttCalendar start", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":63, "classname":"net.sourceforge.ganttproject.GanttTask", "methodid":764, "methodname":"net.sourceforge.ganttproject.GanttTask.-init-(java.lang.String,net.sourceforge.ganttproject.GanttCalendar,long,net.sourceforge.ganttproject.task.TaskManager,int)", "isreturn":0, "sourcecode":"// ///////////////////////////////////////////////////////////////////////////////\r\n/**\r\n * Constructor\r\n *\r\n * @param taskID\r\n * \t\t\r\n */\r\npublic GanttTask(String name, GanttCalendar start, long length, TaskManager taskManager, int taskID) {\r\n    super(taskManager, taskID);\r\n    TaskMutator mutator = createMutator();\r\n    mutator.setName(name);\r\n    mutator.setStart(start);\r\n    mutator.setDuration(taskManager.createLength(length));\r\n    mutator.commit();\r\n    enableEvents(true);\r\n}"},
 {"id":125, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":63, "classname":"net.sourceforge.ganttproject.GanttTask", "methodid":764, "methodname":"net.sourceforge.ganttproject.GanttTask.-init-(java.lang.String,net.sourceforge.ganttproject.GanttCalendar,long,net.sourceforge.ganttproject.task.TaskManager,int)", "isreturn":0, "sourcecode":"// ///////////////////////////////////////////////////////////////////////////////\r\n/**\r\n * Constructor\r\n *\r\n * @param taskID\r\n * \t\t\r\n */\r\npublic GanttTask(String name, GanttCalendar start, long length, TaskManager taskManager, int taskID) {\r\n    super(taskManager, taskID);\r\n    TaskMutator mutator = createMutator();\r\n    mutator.setName(name);\r\n    mutator.setStart(start);\r\n    mutator.setDuration(taskManager.createLength(length));\r\n    mutator.commit();\r\n    enableEvents(true);\r\n}"},
 {"id":126, "parametername":"GanttTask copy", "parametertype":"net.sourceforge.ganttproject.GanttTask", "parameterclass":63, "classid":63, "classname":"net.sourceforge.ganttproject.GanttTask", "methodid":765, "methodname":"net.sourceforge.ganttproject.GanttTask.-init-(net.sourceforge.ganttproject.GanttTask)", "isreturn":0, "sourcecode":"public GanttTask(GanttTask copy) {\r\n    super(copy, false);\r\n    // for (int i = 0; i < getPredecessorsOld().size(); i++) {\r\n    // GanttTaskRelationship tempRel = (GanttTaskRelationship) ( (\r\n    // GanttTaskRelationship) getPredecessorsOld().get(i)).clone();\r\n    // addPredecessor(tempRel);\r\n    // }\r\n    // for (int i = 0; i < successors.size(); i++) {\r\n    // GanttTaskRelationship tempRel = (GanttTaskRelationship) ( (\r\n    // GanttTaskRelationship) successors.get(i)).clone();\r\n    // addSuccessor(tempRel);\r\n    // }\r\n    enableEvents(true);\r\n}"},
 {"id":127, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":64, "classname":"net.sourceforge.ganttproject.GanttTaskRelationship", "methodid":771, "methodname":"net.sourceforge.ganttproject.GanttTaskRelationship.-init-(net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"public GanttTaskRelationship(TaskManager taskManager) {\r\n    myTaskManager = taskManager;\r\n}"},
 {"id":128, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":64, "classname":"net.sourceforge.ganttproject.GanttTaskRelationship", "methodid":772, "methodname":"net.sourceforge.ganttproject.GanttTaskRelationship.-init-(int,int,int,int,net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttTaskRelationship(int predecessorTaskID, int successorTaskID, int relationshipType, int difference, TaskManager taskManager) {\r\n    this(taskManager);\r\n    this.predecessorTaskID = predecessorTaskID;\r\n    this.successorTaskID = successorTaskID;\r\n    this.relationshipType = relationshipType;\r\n    this.difference = difference;\r\n}"},
 {"id":129, "parametername":"Task predecessorTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":64, "classname":"net.sourceforge.ganttproject.GanttTaskRelationship", "methodid":783, "methodname":"net.sourceforge.ganttproject.GanttTaskRelationship.setPredecessorTask(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n * set the predecessor task by GanttTask object\r\n */\r\npublic void setPredecessorTask(Task predecessorTask) {\r\n    this.predecessorTaskID = predecessorTask.getTaskID();\r\n    // this.predecessorTask=predecessorTask;\r\n}"},
 {"id":130, "parametername":"Task successorTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":64, "classname":"net.sourceforge.ganttproject.GanttTaskRelationship", "methodid":786, "methodname":"net.sourceforge.ganttproject.GanttTaskRelationship.setSuccessorTask(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n * set the successor task by GanttTask object\r\n *\r\n * @param successorTask\r\n * \t\tGanttTask object of successor\r\n */\r\npublic void setSuccessorTask(Task successorTask) {\r\n    this.successorTaskID = successorTask.getTaskID();\r\n    // this.successorTask = successorTask;\r\n}"},
 {"id":131, "parametername":"GanttTaskRelationship compareRel", "parametertype":"net.sourceforge.ganttproject.GanttTaskRelationship", "parameterclass":64, "classid":64, "classname":"net.sourceforge.ganttproject.GanttTaskRelationship", "methodid":774, "methodname":"net.sourceforge.ganttproject.GanttTaskRelationship.equals(net.sourceforge.ganttproject.GanttTaskRelationship)", "isreturn":0, "sourcecode":"public boolean equals(GanttTaskRelationship compareRel) {\r\n    return (((relationshipType) == (compareRel.relationshipType)) && ((predecessorTaskID) == (compareRel.predecessorTaskID))) && ((successorTaskID) == (compareRel.successorTaskID));\r\n}"},
 {"id":132, "parametername":"final GanttProject app", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":73, "classname":"net.sourceforge.ganttproject.GanttTree2", "methodid":790, "methodname":"net.sourceforge.ganttproject.GanttTree2.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":""},
 {"id":133, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":73, "classname":"net.sourceforge.ganttproject.GanttTree2", "methodid":790, "methodname":"net.sourceforge.ganttproject.GanttTree2.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":""},
 {"id":134, "parametername":"TaskSelectionManager selectionManager", "parametertype":"net.sourceforge.ganttproject.task.TaskSelectionManager", "parameterclass":575, "classid":73, "classname":"net.sourceforge.ganttproject.GanttTree2", "methodid":790, "methodname":"net.sourceforge.ganttproject.GanttTree2.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":""},
 {"id":135, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":73, "classname":"net.sourceforge.ganttproject.GanttTree2", "methodid":790, "methodname":"net.sourceforge.ganttproject.GanttTree2.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":""},
 {"id":136, "parametername":"Task t", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":73, "classname":"net.sourceforge.ganttproject.GanttTree2", "methodid":871, "methodname":"net.sourceforge.ganttproject.GanttTree2.setEditingTask(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n * Edits the <code>t</code> task name in the treetable.\r\n */\r\npublic void setEditingTask(Task t) {\r\n    selectTask(t, false);\r\n    TreePath tp = new TreePath(getSelectedTaskNode().getPath());\r\n    int c = getTable().convertColumnIndexToView(getTable().getColumn(GanttTreeTableModel.strColName).getModelIndex());\r\n    treetable.getTreeTable().editingStopped(new ChangeEvent(treetable.getTreeTable()));\r\n    treetable.editNewTask(t);\r\n    // treetable.getTreeTable().editCellAt(\r\n    // treetable.getTree().getRowForPath(tp), c);\r\n    // treetable.requestFocus();\r\n    treetable.centerViewOnSelectedCell();\r\n}"},
 {"id":137, "parametername":"GanttLanguage ganttLanguage", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage", "parameterclass":461, "classid":73, "classname":"net.sourceforge.ganttproject.GanttTree2", "methodid":797, "methodname":"net.sourceforge.ganttproject.GanttTree2.changeLanguage(net.sourceforge.ganttproject.language.GanttLanguage)", "isreturn":0, "sourcecode":"public void changeLanguage(GanttLanguage ganttLanguage) {\r\n    this.language = ganttLanguage;\r\n    // this.treetable.changeLanguage(language);\r\n}"},
 {"id":138, "parametername":"GanttGraphicArea area", "parametertype":"net.sourceforge.ganttproject.GanttGraphicArea", "parameterclass":45, "classid":73, "classname":"net.sourceforge.ganttproject.GanttTree2", "methodid":872, "methodname":"net.sourceforge.ganttproject.GanttTree2.setGraphicArea(net.sourceforge.ganttproject.GanttGraphicArea)", "isreturn":0, "sourcecode":"/**\r\n * Change grpahic part\r\n */\r\npublic void setGraphicArea(GanttGraphicArea area) {\r\n    this.area = area;\r\n}"},
 {"id":139, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":73, "classname":"net.sourceforge.ganttproject.GanttTree2", "methodid":817, "methodname":"net.sourceforge.ganttproject.GanttTree2.getAllChildTask(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n * Return all sub task for the tree node base\r\n */\r\npublic ArrayList getAllChildTask(Task task) {\r\n    ArrayList res = new ArrayList();\r\n    if (task == null)\r\n        return null;\r\n\r\n    DefaultMutableTreeNode base = ((DefaultMutableTreeNode) (getNode(task.getTaskID())));\r\n    if (base == null)\r\n        return res;\r\n\r\n    Enumeration e = base.children();\r\n    while (e.hasMoreElements()) {\r\n        res.add(e.nextElement());\r\n    } \r\n    return res;\r\n}"},
 {"id":140, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":73, "classname":"net.sourceforge.ganttproject.GanttTree2", "methodid":866, "methodname":"net.sourceforge.ganttproject.GanttTree2.selectTask(net.sourceforge.ganttproject.task.Task,boolean)", "isreturn":0, "sourcecode":"public void selectTask(Task task, boolean multipleSelection) {\r\n    DefaultMutableTreeNode taskNode = null;\r\n    for (Enumeration nodes = rootNode.preorderEnumeration(); nodes.hasMoreElements();) {\r\n        DefaultMutableTreeNode nextNode = ((DefaultMutableTreeNode) (nodes.nextElement()));\r\n        if (!(nextNode instanceof TaskNode))\r\n            continue;\r\n\r\n        if (nextNode.getUserObject().equals(task)) {\r\n            taskNode = nextNode;\r\n            break;\r\n        }\r\n    }\r\n    if (taskNode != null) {\r\n        TreePath taskPath = new TreePath(taskNode.getPath());\r\n        if (multipleSelection)\r\n            if (treetable.getTree().getSelectionModel().isPathSelected(taskPath))\r\n                treetable.getTree().getSelectionModel().removeSelectionPath(taskPath);\r\n            else\r\n                treetable.getTree().getSelectionModel().addSelectionPath(taskPath);\r\n\r\n        else\r\n            treetable.getTree().getSelectionModel().setSelectionPath(taskPath);\r\n\r\n    }\r\n    TreePath[] paths = treetable.getTree().getSelectionModel().getSelectionPaths();\r\n    Mediator.getTaskSelectionManager().clear();\r\n    if (paths != null)\r\n        for (int i = 0; i < (paths.length); i++) {\r\n            TaskNode tn = ((TaskNode) (paths[i].getLastPathComponent()));\r\n            if (!(tn.isRoot()))\r\n                Mediator.getTaskSelectionManager().addTask(((Task) (tn.getUserObject())));\r\n\r\n        }\r\n\r\n}"},
 {"id":141, "parametername":"Task node", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":73, "classname":"net.sourceforge.ganttproject.GanttTree2", "methodid":822, "methodname":"net.sourceforge.ganttproject.GanttTree2.getFatherNode(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n * Returne the mother task.\r\n */\r\npublic DefaultMutableTreeNode getFatherNode(Task node) {\r\n    if (node == null) {\r\n        return null;\r\n    }\r\n    DefaultMutableTreeNode tmp = ((DefaultMutableTreeNode) (getNode(node.getTaskID())));\r\n    if (tmp == null) {\r\n        return null;\r\n    }\r\n    return ((DefaultMutableTreeNode) (tmp.getParent()));\r\n}"},
 {"id":142, "parametername":"TaskNode node", "parametertype":"net.sourceforge.ganttproject.task.TaskNode", "parameterclass":572, "classid":73, "classname":"net.sourceforge.ganttproject.GanttTree2", "methodid":865, "methodname":"net.sourceforge.ganttproject.GanttTree2.restoreExpand(net.sourceforge.ganttproject.task.TaskNode)", "isreturn":0, "sourcecode":"/**\r\n * Retores the expand state of the node and its children.\r\n *\r\n * @param node\r\n * \t\t\r\n */\r\nprivate void restoreExpand(TaskNode node) {\r\n    Task task = ((Task) (node.getUserObject()));\r\n    boolean expand = task.getExpand();\r\n    Enumeration enumeration = node.children();\r\n    while (enumeration.hasMoreElements())\r\n        restoreExpand(((TaskNode) (enumeration.nextElement())));\r\n\r\n    if (expand)\r\n        getTreeTable().getTree().expandPath(new TreePath(node.getPath()));\r\n    else\r\n        getTreeTable().getTree().collapsePath(new TreePath(node.getPath()));\r\n\r\n    task.setExpand(expand);\r\n}"},
 {"id":143, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":68, "classname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeCellRenderer", "methodid":888, "methodname":"net.sourceforge.ganttproject.GanttTree2$GanttTreeCellRenderer.getToolTip(net.sourceforge.ganttproject.task.Task,int)", "isreturn":0, "sourcecode":"public String getToolTip(Task task, int type) {\r\n    String res = \"<html><body bgcolor=#EAEAEA>\";\r\n    res += (((\"<b>\" + (task.toString())) + \"</b>\") + \"<br>\") + (task.getStart());\r\n    if (type != 1) {\r\n        res += \"  -  \" + (task.getEnd());\r\n    }\r\n    if (type == 1) {\r\n        res += \"<br>\" + (language.getText(\"meetingPoint\"));\r\n    }\r\n    res += \"<br><b>Pri</b> \" + ((task.getPriority()) == 0 ? language.getText(\"low\") : (task.getPriority()) == 1 ? language.getText(\"normal\") : language.getText(\"hight\"));\r\n    ResourceAssignment[] assignments = task.getAssignments();\r\n    if ((assignments.length) > 0) {\r\n        res += \"<br><b>Assign to </b><br>\";\r\n        for (int j = 0; j < (assignments.length); j++) {\r\n            res += (\"&nbsp;&nbsp;\" + (assignments[j].getResource().getName())) + \"<br>\";\r\n        }\r\n    }\r\n    if (((task.getNotes()) != null) && (!(task.getNotes().equals(\"\")))) {\r\n        String notes = task.getNotes();\r\n        res += \"<br><b>Notes </b>: \";\r\n        int maxLength = 150;\r\n        if ((notes.length()) > maxLength) {\r\n            notes = notes.substring(0, maxLength);\r\n            int i = maxLength - 1;\r\n            for (; (i >= 0) && ((notes.charAt(i)) !=  ); i--);\r\n            notes = notes.substring(0, i);\r\n            notes += \" <b>( . . . )</b>\";\r\n        }\r\n        notes = notes.replaceAll(\"\n\", \"<br>\");\r\n        res += (\"<font size=\"-2\">\" + notes) + \"</font>\";\r\n    }\r\n    res += \"</body></html>\";\r\n    return res;\r\n}"},
 {"id":144, "parametername":"final Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":73, "classname":"net.sourceforge.ganttproject.GanttTree2", "methodid":870, "methodname":"net.sourceforge.ganttproject.GanttTree2.setDelay(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.delay.Delay)", "isreturn":0, "sourcecode":"public void setDelay(final Task task, final Delay delay) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            TaskNode taskNode = ((TaskNode) (getNode(task.getTaskID())));\r\n            if (taskNode != null)\r\n                treetable.setDelay(taskNode, delay);\r\n\r\n        }\r\n    });\r\n}"},
 {"id":145, "parametername":"final Delay delay", "parametertype":"net.sourceforge.ganttproject.delay.Delay", "parameterclass":228, "classid":73, "classname":"net.sourceforge.ganttproject.GanttTree2", "methodid":870, "methodname":"net.sourceforge.ganttproject.GanttTree2.setDelay(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.delay.Delay)", "isreturn":0, "sourcecode":"public void setDelay(final Task task, final Delay delay) {\r\n    SwingUtilities.invokeLater(new Runnable() {\r\n        public void run() {\r\n            TaskNode taskNode = ((TaskNode) (getNode(task.getTaskID())));\r\n            if (taskNode != null)\r\n                treetable.setDelay(taskNode, delay);\r\n\r\n        }\r\n    });\r\n}"},
 {"id":146, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":911, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttTreeTableModel)", "isreturn":0, "sourcecode":"/**\r\n * Creates an instance of GanttTreeTable with the given TreeTableModel.\r\n *\r\n * @param project\r\n * \t\t\r\n * @param model\r\n * \t\tTreeTableModel.\r\n */\r\npublic GanttTreeTable(IGanttProject project, UIFacade uifacade, GanttTreeTableModel model) {\r\n    super(project, model);\r\n    GanttLanguage.getInstance().addListener(this);\r\n    initTreeTable();\r\n    this.ttModel = model;\r\n    myUIfacade = uifacade;\r\n}"},
 {"id":147, "parametername":"UIFacade uifacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":911, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttTreeTableModel)", "isreturn":0, "sourcecode":"/**\r\n * Creates an instance of GanttTreeTable with the given TreeTableModel.\r\n *\r\n * @param project\r\n * \t\t\r\n * @param model\r\n * \t\tTreeTableModel.\r\n */\r\npublic GanttTreeTable(IGanttProject project, UIFacade uifacade, GanttTreeTableModel model) {\r\n    super(project, model);\r\n    GanttLanguage.getInstance().addListener(this);\r\n    initTreeTable();\r\n    this.ttModel = model;\r\n    myUIfacade = uifacade;\r\n}"},
 {"id":148, "parametername":"GanttTreeTableModel model", "parametertype":"net.sourceforge.ganttproject.GanttTreeTableModel", "parameterclass":82, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":911, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttTreeTableModel)", "isreturn":0, "sourcecode":"/**\r\n * Creates an instance of GanttTreeTable with the given TreeTableModel.\r\n *\r\n * @param project\r\n * \t\t\r\n * @param model\r\n * \t\tTreeTableModel.\r\n */\r\npublic GanttTreeTable(IGanttProject project, UIFacade uifacade, GanttTreeTableModel model) {\r\n    super(project, model);\r\n    GanttLanguage.getInstance().addListener(this);\r\n    initTreeTable();\r\n    this.ttModel = model;\r\n    myUIfacade = uifacade;\r\n}"},
 {"id":149, "parametername":"GanttTreeTable.DisplayedColumnsList displayedColumns", "parametertype":"net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumnsList", "parameterclass":76, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":949, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.setDisplayedColumns(net.sourceforge.ganttproject.GanttTreeTable$DisplayedColumnsList)", "isreturn":0, "sourcecode":"public void setDisplayedColumns(GanttTreeTable.DisplayedColumnsList displayedColumns) {\r\n    GanttTreeTable.DisplayedColumnsList l = ((GanttTreeTable.DisplayedColumnsList) (displayedColumns.clone()));\r\n    displayAllColumns();\r\n    hideAllColumns();\r\n    this.listDisplayedColumns = l;\r\n    Collections.sort(this.listDisplayedColumns);\r\n    Iterator it = this.listDisplayedColumns.iterator();\r\n    while (it.hasNext()) {\r\n        GanttTreeTable.DisplayedColumn dc = ((GanttTreeTable.DisplayedColumn) (it.next()));\r\n        String id = dc.getID();\r\n        String name = getNameForId(id);\r\n        if (dc.displayed)\r\n            displayColumn(name);\r\n        else\r\n            hideColumn(name);\r\n\r\n    } \r\n}"},
 {"id":150, "parametername":"CustomColumn customColumn", "parametertype":"net.sourceforge.ganttproject.task.CustomColumn", "parameterclass":532, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":918, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.addNewCustomColumn(net.sourceforge.ganttproject.task.CustomColumn)", "isreturn":0, "sourcecode":""},
 {"id":151, "parametername":"CustomColumn column", "parametertype":"net.sourceforge.ganttproject.task.CustomColumn", "parameterclass":532, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":925, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.deleteCustomColumn(net.sourceforge.ganttproject.task.CustomColumn)", "isreturn":0, "sourcecode":"/**\r\n * Delete permanently a custom column.\r\n *\r\n * @param name\r\n * \t\tName of the column to delete.\r\n */\r\npublic void deleteCustomColumn(CustomColumn column) {\r\n    final String name = column.getName();\r\n    // the column has to be displayed to be removed.\r\n    this.displayColumn(name);\r\n    deleteColumnFromUI(name);\r\n    // Every tasks\r\n    TaskContainmentHierarchyFacade tchf = Mediator.getGanttProjectSingleton().getTaskManager().getTaskHierarchy();\r\n    tchf.getRootTask().getCustomValues().removeCustomColumn(name);\r\n    removeCustomColumnToAllNestedTask(tchf, tchf.getRootTask(), name);\r\n    Mediator.getGanttProjectSingleton().setAskForSave(true);\r\n}"},
 {"id":152, "parametername":"TaskContainmentHierarchyFacade facade", "parametertype":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "parameterclass":552, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":947, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.setCustomColumnValueToAllNestedTask(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade,net.sourceforge.ganttproject.task.Task,java.lang.String,java.lang.Object)", "isreturn":0, "sourcecode":"// public void changeDefaultValue(String name, Object newDefaultValue)\r\n// {\r\n// // this.displayColumn(name);\r\n// }\r\n/**\r\n *\r\n *\r\n * @param facade\r\n * \t\tTaskContainmentHierarchyFacade ot retrive nested tasks.\r\n * @param root\r\n * \t\tRoot task to start with.\r\n * @param colName\r\n * \t\tName of the new custom column to add to the tasks.\r\n * @param value\r\n * \t\tValue for this new custom column.\r\n */\r\nprivate void setCustomColumnValueToAllNestedTask(TaskContainmentHierarchyFacade facade, Task root, String colName, Object value) {\r\n    try {\r\n        root.getCustomValues().setValue(colName, value);\r\n    } catch (CustomColumnsException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n    Task[] tt = facade.getNestedTasks(root);\r\n    for (int i = 0; i < (tt.length); i++) {\r\n        try {\r\n            tt[i].getCustomValues().setValue(colName, value);\r\n        } catch (CustomColumnsException e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n        }\r\n        setCustomColumnValueToAllNestedTask(facade, tt[i], colName, value);\r\n    }\r\n}"},
 {"id":153, "parametername":"Task root", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":947, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.setCustomColumnValueToAllNestedTask(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade,net.sourceforge.ganttproject.task.Task,java.lang.String,java.lang.Object)", "isreturn":0, "sourcecode":"// public void changeDefaultValue(String name, Object newDefaultValue)\r\n// {\r\n// // this.displayColumn(name);\r\n// }\r\n/**\r\n *\r\n *\r\n * @param facade\r\n * \t\tTaskContainmentHierarchyFacade ot retrive nested tasks.\r\n * @param root\r\n * \t\tRoot task to start with.\r\n * @param colName\r\n * \t\tName of the new custom column to add to the tasks.\r\n * @param value\r\n * \t\tValue for this new custom column.\r\n */\r\nprivate void setCustomColumnValueToAllNestedTask(TaskContainmentHierarchyFacade facade, Task root, String colName, Object value) {\r\n    try {\r\n        root.getCustomValues().setValue(colName, value);\r\n    } catch (CustomColumnsException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n    Task[] tt = facade.getNestedTasks(root);\r\n    for (int i = 0; i < (tt.length); i++) {\r\n        try {\r\n            tt[i].getCustomValues().setValue(colName, value);\r\n        } catch (CustomColumnsException e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n        }\r\n        setCustomColumnValueToAllNestedTask(facade, tt[i], colName, value);\r\n    }\r\n}"},
 {"id":154, "parametername":"TaskContainmentHierarchyFacade facade", "parametertype":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "parameterclass":552, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":943, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.removeCustomColumnToAllNestedTask(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade,net.sourceforge.ganttproject.task.Task,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Remove permanetly the custom column for the task <code>root</code> and\r\n * all its children.\r\n *\r\n * @param facade\r\n * \t\tTaskContainmentHierarchyFacade ot retrive nested tasks.\r\n * @param root\r\n * \t\tRoot task to start with.\r\n * @param colName\r\n * \t\tName of the custom column to remove.\r\n */\r\nprivate void removeCustomColumnToAllNestedTask(TaskContainmentHierarchyFacade facade, Task root, String colName) {\r\n    // root.getCustomValues().removeCustomColumn(colName);\r\n    Task[] tt = facade.getNestedTasks(root);\r\n    for (int i = 0; i < (tt.length); i++) {\r\n        tt[i].getCustomValues().removeCustomColumn(colName);\r\n        removeCustomColumnToAllNestedTask(facade, tt[i], colName);\r\n    }\r\n}"},
 {"id":155, "parametername":"Task root", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":943, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.removeCustomColumnToAllNestedTask(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade,net.sourceforge.ganttproject.task.Task,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Remove permanetly the custom column for the task <code>root</code> and\r\n * all its children.\r\n *\r\n * @param facade\r\n * \t\tTaskContainmentHierarchyFacade ot retrive nested tasks.\r\n * @param root\r\n * \t\tRoot task to start with.\r\n * @param colName\r\n * \t\tName of the custom column to remove.\r\n */\r\nprivate void removeCustomColumnToAllNestedTask(TaskContainmentHierarchyFacade facade, Task root, String colName) {\r\n    // root.getCustomValues().removeCustomColumn(colName);\r\n    Task[] tt = facade.getNestedTasks(root);\r\n    for (int i = 0; i < (tt.length); i++) {\r\n        tt[i].getCustomValues().removeCustomColumn(colName);\r\n        removeCustomColumnToAllNestedTask(facade, tt[i], colName);\r\n    }\r\n}"},
 {"id":156, "parametername":"TaskContainmentHierarchyFacade facade", "parametertype":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "parameterclass":552, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":944, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.renameCustomColumnForAllNestedTask(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade,net.sourceforge.ganttproject.task.Task,java.lang.String,java.lang.String)", "isreturn":0, "sourcecode":"private void renameCustomColumnForAllNestedTask(TaskContainmentHierarchyFacade facade, Task root, String oldName, String newName) {\r\n    // root.getCustomValues().renameCustomColumn(oldName,newName);\r\n    Task[] tt = facade.getNestedTasks(root);\r\n    for (int i = 0; i < (tt.length); i++) {\r\n        tt[i].getCustomValues().renameCustomColumn(oldName, newName);\r\n        renameCustomColumnForAllNestedTask(facade, tt[i], oldName, newName);\r\n    }\r\n}"},
 {"id":157, "parametername":"Task root", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":944, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.renameCustomColumnForAllNestedTask(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade,net.sourceforge.ganttproject.task.Task,java.lang.String,java.lang.String)", "isreturn":0, "sourcecode":"private void renameCustomColumnForAllNestedTask(TaskContainmentHierarchyFacade facade, Task root, String oldName, String newName) {\r\n    // root.getCustomValues().renameCustomColumn(oldName,newName);\r\n    Task[] tt = facade.getNestedTasks(root);\r\n    for (int i = 0; i < (tt.length); i++) {\r\n        tt[i].getCustomValues().renameCustomColumn(oldName, newName);\r\n        renameCustomColumnForAllNestedTask(facade, tt[i], oldName, newName);\r\n    }\r\n}"},
 {"id":158, "parametername":"GanttLanguage.Event changeEvent", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage$Event", "parameterclass":459, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":940, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "isreturn":0, "sourcecode":""},
 {"id":159, "parametername":"TaskNode taskNode", "parametertype":"net.sourceforge.ganttproject.task.TaskNode", "parameterclass":572, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":948, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.setDelay(net.sourceforge.ganttproject.task.TaskNode,net.sourceforge.ganttproject.delay.Delay)", "isreturn":0, "sourcecode":""},
 {"id":160, "parametername":"Delay delay", "parametertype":"net.sourceforge.ganttproject.delay.Delay", "parameterclass":228, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":948, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.setDelay(net.sourceforge.ganttproject.task.TaskNode,net.sourceforge.ganttproject.delay.Delay)", "isreturn":0, "sourcecode":""},
 {"id":161, "parametername":"Task t", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":928, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.editNewTask(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":""},
 {"id":162, "parametername":"CustomColumEvent event", "parametertype":"net.sourceforge.ganttproject.task.CustomColumEvent", "parameterclass":531, "classid":81, "classname":"net.sourceforge.ganttproject.GanttTreeTable", "methodid":923, "methodname":"net.sourceforge.ganttproject.GanttTreeTable.customColumsChange(net.sourceforge.ganttproject.task.CustomColumEvent)", "isreturn":0, "sourcecode":"public void customColumsChange(CustomColumEvent event) {\r\n    switch (event.getType()) {\r\n        case CustomColumEvent.EVENT_ADD :\r\n            addNewCustomColumn(event.getColumn());\r\n            break;\r\n        case CustomColumEvent.EVENT_REMOVE :\r\n            deleteCustomColumn(event.getColumn());\r\n            break;\r\n        case CustomColumEvent.EVENT_RENAME :\r\n            renameCustomcolumn(event.getOldName(), event.getColName());\r\n            break;\r\n    }\r\n}"},
 {"id":163, "parametername":"TableHeaderUIFacade source", "parametertype":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade", "parameterclass":324, "classid":80, "classname":"net.sourceforge.ganttproject.GanttTreeTable$VisibleFieldsImpl", "methodid":992, "methodname":"net.sourceforge.ganttproject.GanttTreeTable$VisibleFieldsImpl.importData(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "isreturn":0, "sourcecode":"public void importData(TableHeaderUIFacade source) {\r\n    clear();\r\n    GanttTreeTable.DisplayedColumnsList clone = ((GanttTreeTable.DisplayedColumnsList) (getDisplayColumns().clone()));\r\n    clone.clear();\r\n    for (int i = 0; i < (source.getSize()); i++) {\r\n        TableHeaderUIFacade.Column nextField = source.getField(i);\r\n        GanttTreeTable.DisplayedColumn newColumn = new GanttTreeTable.DisplayedColumn(nextField.getName());\r\n        newColumn.setID(nextField.getID());\r\n        newColumn.setOrder(nextField.getOrder());\r\n        if ((nextField.getWidth()) >= 0) {\r\n            newColumn.setWidth(nextField.getWidth());\r\n        }\r\n        newColumn.setDisplayed(true);\r\n        clone.add(newColumn);\r\n    }\r\n    setDisplayedColumns(clone);\r\n}"},
 {"id":164, "parametername":"GanttLanguage ganttLanguage", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage", "parameterclass":461, "classid":82, "classname":"net.sourceforge.ganttproject.GanttTreeTableModel", "methodid":997, "methodname":"net.sourceforge.ganttproject.GanttTreeTableModel.changeLanguage(net.sourceforge.ganttproject.language.GanttLanguage)", "isreturn":0, "sourcecode":"/**\r\n * Changes the language.\r\n *\r\n * @param ganttLanguage\r\n * \t\tNew language to use.\r\n */\r\npublic void changeLanguage(GanttLanguage ganttLanguage) {\r\n    GanttTreeTableModel.strColType = GanttTreeTableModel.language.getText(\"tableColType\");\r\n    GanttTreeTableModel.strColPriority = GanttTreeTableModel.language.getText(\"tableColPriority\");\r\n    GanttTreeTableModel.strColInfo = GanttTreeTableModel.language.getText(\"tableColInfo\");\r\n    GanttTreeTableModel.strColName = GanttTreeTableModel.language.getText(\"tableColName\");\r\n    GanttTreeTableModel.strColBegDate = GanttTreeTableModel.language.getText(\"tableColBegDate\");\r\n    GanttTreeTableModel.strColEndDate = GanttTreeTableModel.language.getText(\"tableColEndDate\");\r\n    GanttTreeTableModel.strColDuration = GanttTreeTableModel.language.getText(\"tableColDuration\");\r\n    GanttTreeTableModel.strColCompletion = GanttTreeTableModel.language.getText(\"tableColCompletion\");\r\n    GanttTreeTableModel.strColCoordinator = GanttTreeTableModel.language.getText(\"tableColCoordinator\");\r\n    GanttTreeTableModel.strColPredecessors = GanttTreeTableModel.language.getText(\"tableColPredecessors\");\r\n    GanttTreeTableModel.strColID = GanttTreeTableModel.language.getText(\"tableColID\");\r\n    titles.clear();\r\n    String[] cols = new String[]{ GanttTreeTableModel.strColType, GanttTreeTableModel.strColPriority, GanttTreeTableModel.strColInfo, GanttTreeTableModel.strColName, GanttTreeTableModel.strColBegDate, GanttTreeTableModel.strColEndDate, GanttTreeTableModel.strColDuration, GanttTreeTableModel.strColCompletion, GanttTreeTableModel.strColCoordinator, GanttTreeTableModel.strColPredecessors, GanttTreeTableModel.strColID };\r\n    for (int i = 0; i < (cols.length); i++)\r\n        titles.add(new String(cols[i]));\r\n\r\n}"},
 {"id":165, "parametername":"Task container", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":82, "classname":"net.sourceforge.ganttproject.GanttTreeTableModel", "methodid":1012, "methodname":"net.sourceforge.ganttproject.GanttTreeTableModel.getNestedTasks(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic Task[] getNestedTasks(Task container) {\r\n    TaskNode r = ((TaskNode) (root));\r\n    Enumeration e = r.children();\r\n    Vector v = new Vector();\r\n    while (e.hasMoreElements())\r\n        v.add(((TaskNode) (e.nextElement())));\r\n\r\n    Task[] res = new Task[v.size()];\r\n    v.toArray(res);\r\n    return res;\r\n}"},
 {"id":166, "parametername":"Task container", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":82, "classname":"net.sourceforge.ganttproject.GanttTreeTableModel", "methodid":1016, "methodname":"net.sourceforge.ganttproject.GanttTreeTableModel.hasNestedTasks(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n * Purpose: Should return true if this Tasks has any nested subtasks.\r\n */\r\npublic boolean hasNestedTasks(Task container) {\r\n    TaskNode r = ((TaskNode) (root));\r\n    if ((r.getChildCount()) > 0) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}"},
 {"id":167, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":82, "classname":"net.sourceforge.ganttproject.GanttTreeTableModel", "methodid":1014, "methodname":"net.sourceforge.ganttproject.GanttTreeTableModel.getTaskNodeForTask(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":""},
 {"id":168, "parametername":"net.sourceforge.ganttproject.task.TaskNode", "parametertype":"net.sourceforge.ganttproject.task.TaskNode", "parameterclass":572, "classid":82, "classname":"net.sourceforge.ganttproject.GanttTreeTableModel", "methodid":1014, "methodname":"net.sourceforge.ganttproject.GanttTreeTableModel.getTaskNodeForTask(net.sourceforge.ganttproject.task.Task)", "isreturn":1, "sourcecode":""},
 {"id":169, "parametername":"Task nestedTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":82, "classname":"net.sourceforge.ganttproject.GanttTreeTableModel", "methodid":1010, "methodname":"net.sourceforge.ganttproject.GanttTreeTableModel.getContainer(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic Task getContainer(Task nestedTask) {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":170, "parametername":"net.sourceforge.ganttproject.task.Task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":82, "classname":"net.sourceforge.ganttproject.GanttTreeTableModel", "methodid":1010, "methodname":"net.sourceforge.ganttproject.GanttTreeTableModel.getContainer(net.sourceforge.ganttproject.task.Task)", "isreturn":1, "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic Task getContainer(Task nestedTask) {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":171, "parametername":"Task whatMove", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":82, "classname":"net.sourceforge.ganttproject.GanttTreeTableModel", "methodid":1020, "methodname":"net.sourceforge.ganttproject.GanttTreeTableModel.move(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic void move(Task whatMove, Task whereMove) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":172, "parametername":"Task whereMove", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":82, "classname":"net.sourceforge.ganttproject.GanttTreeTableModel", "methodid":1020, "methodname":"net.sourceforge.ganttproject.GanttTreeTableModel.move(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic void move(Task whatMove, Task whereMove) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":173, "parametername":"Task dependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":82, "classname":"net.sourceforge.ganttproject.GanttTreeTableModel", "methodid":996, "methodname":"net.sourceforge.ganttproject.GanttTreeTableModel.areUnrelated(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic boolean areUnrelated(Task dependant, Task dependee) {\r\n    // TODO Auto-generated method stub\r\n    return false;\r\n}"},
 {"id":174, "parametername":"Task dependee", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":82, "classname":"net.sourceforge.ganttproject.GanttTreeTableModel", "methodid":996, "methodname":"net.sourceforge.ganttproject.GanttTreeTableModel.areUnrelated(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @unknown \r\n */\r\npublic boolean areUnrelated(Task dependant, Task dependee) {\r\n    // TODO Auto-generated method stub\r\n    return false;\r\n}"},
 {"id":175, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":82, "classname":"net.sourceforge.ganttproject.GanttTreeTableModel", "methodid":1011, "methodname":"net.sourceforge.ganttproject.GanttTreeTableModel.getDepth(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public int getDepth(Task task) {\r\n    // TODO Auto-generated method stub\r\n    return 0;\r\n}"},
 {"id":176, "parametername":"GanttLanguage.Event event", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage$Event", "parameterclass":459, "classid":82, "classname":"net.sourceforge.ganttproject.GanttTreeTableModel", "methodid":1019, "methodname":"net.sourceforge.ganttproject.GanttTreeTableModel.languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "isreturn":0, "sourcecode":"public void languageChanged(GanttLanguage.Event event) {\r\n    changeLanguage(event.getLanguage());\r\n}"},
 {"id":177, "parametername":"Task next", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":82, "classname":"net.sourceforge.ganttproject.GanttTreeTableModel", "methodid":1003, "methodname":"net.sourceforge.ganttproject.GanttTreeTableModel.compareDocumentOrder(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public int compareDocumentOrder(Task next, Task dependeeTask) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":178, "parametername":"Task dependeeTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":82, "classname":"net.sourceforge.ganttproject.GanttTreeTableModel", "methodid":1003, "methodname":"net.sourceforge.ganttproject.GanttTreeTableModel.compareDocumentOrder(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public int compareDocumentOrder(Task next, Task dependeeTask) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":179, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":82, "classname":"net.sourceforge.ganttproject.GanttTreeTableModel", "methodid":1004, "methodname":"net.sourceforge.ganttproject.GanttTreeTableModel.contains(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public boolean contains(Task task) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":180, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":84, "classname":"net.sourceforge.ganttproject.IGanttProject", "methodid":1052, "methodname":"net.sourceforge.ganttproject.IGanttProject.setDocument(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"void setDocument(Document document);"},
 {"id":181, "parametername":"ProjectEventListener listener", "parametertype":"net.sourceforge.ganttproject.ProjectEventListener", "parameterclass":88, "classid":84, "classname":"net.sourceforge.ganttproject.IGanttProject", "methodid":1027, "methodname":"net.sourceforge.ganttproject.IGanttProject.addProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "isreturn":0, "sourcecode":"void addProjectEventListener(ProjectEventListener listener);"},
 {"id":182, "parametername":"ProjectEventListener listener", "parametertype":"net.sourceforge.ganttproject.ProjectEventListener", "parameterclass":88, "classid":84, "classname":"net.sourceforge.ganttproject.IGanttProject", "methodid":1050, "methodname":"net.sourceforge.ganttproject.IGanttProject.removeProjectEventListener(net.sourceforge.ganttproject.ProjectEventListener)", "isreturn":0, "sourcecode":"void removeProjectEventListener(ProjectEventListener listener);"},
 {"id":183, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":84, "classname":"net.sourceforge.ganttproject.IGanttProject", "methodid":1049, "methodname":"net.sourceforge.ganttproject.IGanttProject.open(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"void open(Document document) throws IOException;"},
 {"id":184, "parametername":"GanttProject gp", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":85, "classname":"net.sourceforge.ganttproject.Mediator", "methodid":1067, "methodname":"net.sourceforge.ganttproject.Mediator.registerGanttProject(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Regsiters the unique GanttProject instance.\r\n *\r\n * @param gp\r\n * \t\tThe unique GanttProject instance.\r\n */\r\npublic static void registerGanttProject(GanttProject gp) {\r\n    Mediator.ganttprojectSingleton = gp;\r\n}"},
 {"id":185, "parametername":"TaskSelectionManager taskSelection", "parametertype":"net.sourceforge.ganttproject.task.TaskSelectionManager", "parameterclass":575, "classid":85, "classname":"net.sourceforge.ganttproject.Mediator", "methodid":1068, "methodname":"net.sourceforge.ganttproject.Mediator.registerTaskSelectionManager(net.sourceforge.ganttproject.task.TaskSelectionManager)", "isreturn":0, "sourcecode":"/**\r\n * Regsiters the unique CustomColumnsManager instance.\r\n *\r\n * @param managerThe\r\n * \t\tunique CustomColumnsManager instance.\r\n */\r\n// public static void registerCustomColumnsManager(CustomColumnsManager manager) {\r\n// customColumnsManager = manager;\r\n// }\r\n// \r\n// public static void registerCustomColumnsStorage(CustomColumnsStorage storage) {\r\n// customColumnsStorage = storage;\r\n// }\r\n// \r\npublic static void registerTaskSelectionManager(TaskSelectionManager taskSelection) {\r\n    Mediator.taskSelectionManager = taskSelection;\r\n}"},
 {"id":186, "parametername":"GPUndoManager undoMgr", "parametertype":"net.sourceforge.ganttproject.undo.GPUndoManager", "parameterclass":657, "classid":85, "classname":"net.sourceforge.ganttproject.Mediator", "methodid":1069, "methodname":"net.sourceforge.ganttproject.Mediator.registerUndoManager(net.sourceforge.ganttproject.undo.GPUndoManager)", "isreturn":0, "sourcecode":"// public static void registerRoleManager(RoleManager roleMgr) {\r\n// roleManager = roleMgr;\r\n// }\r\n// \r\n// public static void registerTaskManager(TaskManager taskMgr) {\r\n// taskManager = taskMgr;\r\n// }\r\npublic static void registerUndoManager(GPUndoManager undoMgr) {\r\n    Mediator.undoManager = undoMgr;\r\n}"},
 {"id":187, "parametername":"DelayManager delayMgr", "parametertype":"net.sourceforge.ganttproject.delay.DelayManager", "parameterclass":229, "classid":85, "classname":"net.sourceforge.ganttproject.Mediator", "methodid":1066, "methodname":"net.sourceforge.ganttproject.Mediator.registerDelayManager(net.sourceforge.ganttproject.delay.DelayManager)", "isreturn":0, "sourcecode":"public static void registerDelayManager(DelayManager delayMgr) {\r\n    Mediator.delayManager = delayMgr;\r\n}"},
 {"id":188, "parametername":"ChangeValueDispatcher dispatcher", "parametertype":"net.sourceforge.ganttproject.gui.options.model.ChangeValueDispatcher", "parameterclass":374, "classid":85, "classname":"net.sourceforge.ganttproject.Mediator", "methodid":1059, "methodname":"net.sourceforge.ganttproject.Mediator.addChangeValueDispatcher(net.sourceforge.ganttproject.gui.options.model.ChangeValueDispatcher)", "isreturn":0, "sourcecode":"public static void addChangeValueDispatcher(ChangeValueDispatcher dispatcher) {\r\n    Mediator.changeValueDispatchers.add(dispatcher);\r\n}"},
 {"id":189, "parametername":"GanttProject myProj", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":86, "classname":"net.sourceforge.ganttproject.OSXAdapter", "methodid":1070, "methodname":"net.sourceforge.ganttproject.OSXAdapter.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"private OSXAdapter(GanttProject myProj) {\r\n    this.myProj = myProj;\r\n}"},
 {"id":190, "parametername":"GanttProject myProj", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":86, "classname":"net.sourceforge.ganttproject.OSXAdapter", "methodid":1074, "methodname":"net.sourceforge.ganttproject.OSXAdapter.registerMacOSXApplication(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public static void registerMacOSXApplication(GanttProject myProj) {\r\n    if ((OSXAdapter.theApp) == null) {\r\n        OSXAdapter.theApp = new Application();\r\n    }\r\n    if ((OSXAdapter.osxAdapter) == null) {\r\n        OSXAdapter.osxAdapter = new OSXAdapter(myProj);\r\n    }\r\n    OSXAdapter.theApp.addApplicationListener(OSXAdapter.osxAdapter);\r\n}"},
 {"id":191, "parametername":"ResourceTreeUIFacade resourceTree", "parametertype":"net.sourceforge.ganttproject.gui.ResourceTreeUIFacade", "parameterclass":320, "classid":89, "classname":"net.sourceforge.ganttproject.ResourceChartTabContentPanel", "methodid":1084, "methodname":"net.sourceforge.ganttproject.ResourceChartTabContentPanel.-init-(net.sourceforge.ganttproject.gui.ResourceTreeUIFacade,java.awt.Component)", "isreturn":0, "sourcecode":"ResourceChartTabContentPanel(ResourceTreeUIFacade resourceTree, Component resourceChart) {\r\n    myTreeFacade = resourceTree;\r\n    myResourceChart = resourceChart;\r\n}"},
 {"id":192, "parametername":"GanttProject app", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":90, "classname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "methodid":1088, "methodname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.zoom.ZoomManager)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic ResourceLoadGraphicArea(GanttProject app, ZoomManager zoomManager) {\r\n    super(((IGanttProject) (app)), ((UIFacade) (app)), zoomManager);\r\n    this.setBackground(Color.WHITE);\r\n    myChartModel = new ChartModelResource(getTaskManager(), ((HumanResourceManager) (app.getHumanResourceManager())), getTimeUnitStack(), getUIConfiguration(), ((ResourceChart) (this)));\r\n    getViewState().addStateListener(myChartModel);\r\n    getViewState().setStartDate(CalendarFactory.newCalendar().getTime());\r\n    margY = 0;\r\n    appli = app;\r\n}"},
 {"id":193, "parametername":"ZoomManager zoomManager", "parametertype":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "parameterclass":425, "classid":90, "classname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "methodid":1088, "methodname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.zoom.ZoomManager)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic ResourceLoadGraphicArea(GanttProject app, ZoomManager zoomManager) {\r\n    super(((IGanttProject) (app)), ((UIFacade) (app)), zoomManager);\r\n    this.setBackground(Color.WHITE);\r\n    myChartModel = new ChartModelResource(getTaskManager(), ((HumanResourceManager) (app.getHumanResourceManager())), getTimeUnitStack(), getUIConfiguration(), ((ResourceChart) (this)));\r\n    getViewState().addStateListener(myChartModel);\r\n    getViewState().setStartDate(CalendarFactory.newCalendar().getTime());\r\n    margY = 0;\r\n    appli = app;\r\n}"},
 {"id":194, "parametername":"GanttExportSettings settings", "parametertype":"net.sourceforge.ganttproject.GanttExportSettings", "parameterclass":27, "classid":90, "classname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "methodid":1092, "methodname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.getChart(net.sourceforge.ganttproject.GanttExportSettings)", "isreturn":0, "sourcecode":"// /** Return the value of the JTrees Scrollbar */\r\n// public int getScrollBar() {\r\n// return margY;\r\n// }\r\npublic BufferedImage getChart(GanttExportSettings settings) {\r\n    RenderedChartImage renderedImage = ((RenderedChartImage) (getRenderedImage(settings)));\r\n    BufferedImage result = renderedImage.getWholeImage();\r\n    repaint();\r\n    return result;\r\n}"},
 {"id":195, "parametername":"GanttExportSettings settings", "parametertype":"net.sourceforge.ganttproject.GanttExportSettings", "parameterclass":27, "classid":90, "classname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "methodid":1103, "methodname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.getRenderedImage(net.sourceforge.ganttproject.GanttExportSettings)", "isreturn":0, "sourcecode":"/**\r\n * Return an image with the gantt chart\r\n */\r\npublic RenderedImage getRenderedImage(GanttExportSettings settings) {\r\n    Date dateStart = ((settings.getStartDate()) == null) ? getStartDate() : settings.getStartDate();\r\n    Date dateEnd = ((settings.getEndDate()) == null) ? getEndDate() : settings.getEndDate();\r\n    if (dateStart.after(dateEnd)) {\r\n        Date tmp = ((Date) (dateStart.clone()));\r\n        dateStart = ((Date) (dateEnd.clone()));\r\n        dateEnd = tmp;\r\n    }\r\n    TaskLength printedLength = getTaskManager().createLength(getViewState().getBottomTimeUnit(), dateStart, dateEnd);\r\n    int chartWidth = ((int) (((printedLength.getLength(getViewState().getBottomTimeUnit())) + 1) * (getViewState().getBottomUnitWidth())));\r\n    if (chartWidth < (getWidth())) {\r\n        chartWidth = getWidth();\r\n    }\r\n    ResourceTreeImageGenerator resourceTreeGenerator = new ResourceTreeImageGenerator(getHumanResourceManager()) {\r\n        protected boolean isAssignmentVisible(ResourceAssignment assignment) {\r\n            AssignmentNode an = appli.getResourcePanel().getResourceTreeTableModel().getNodeForAssigment(assignment);\r\n            return appli.getResourcePanel().getResourceTreeTable().isVisible(an);\r\n        }\r\n\r\n        protected int getRowHeight() {\r\n            return ResourceLoadGraphicArea.this.getRowHeight();\r\n        }\r\n    };\r\n    BufferedImage resourceTreeImage = resourceTreeGenerator.createImage();\r\n    final int chartHeight = resourceTreeImage.getHeight();\r\n    RenderedResourceChartImage renderedImage = new RenderedResourceChartImage(myChartModel, myChartImplementation, resourceTreeImage, chartWidth, chartHeight);\r\n    return renderedImage;\r\n}"},
 {"id":196, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":90, "classname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "methodid":1107, "methodname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.isExpanded(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public boolean isExpanded(ProjectResource resource) {\r\n    return true;\r\n}"},
 {"id":197, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":90, "classname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea", "methodid":1111, "methodname":"net.sourceforge.ganttproject.ResourceLoadGraphicArea.setTaskManager(net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"public void setTaskManager(TaskManager taskManager) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":198, "parametername":"HumanResourceManager resourceManager", "parametertype":"net.sourceforge.ganttproject.resource.HumanResourceManager", "parameterclass":501, "classid":91, "classname":"net.sourceforge.ganttproject.ResourceTreeImageGenerator", "methodid":1112, "methodname":"net.sourceforge.ganttproject.ResourceTreeImageGenerator.-init-(net.sourceforge.ganttproject.resource.HumanResourceManager)", "isreturn":0, "sourcecode":"ResourceTreeImageGenerator(HumanResourceManager resourceManager) {\r\n    myResourceManager = resourceManager;\r\n    final BufferedImage testImage = new BufferedImage(10, 10, BufferedImage.TYPE_INT_RGB);\r\n    final Graphics g = testImage.getGraphics();\r\n    final int nameFontHeight = g.getFontMetrics().getHeight();\r\n    final int nameLinePadding = 3;\r\n    myRowHeight = nameFontHeight + (2 * nameLinePadding);\r\n}"},
 {"id":199, "parametername":"ResourceAssignment assignment", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":91, "classname":"net.sourceforge.ganttproject.ResourceTreeImageGenerator", "methodid":1116, "methodname":"net.sourceforge.ganttproject.ResourceTreeImageGenerator.isAssignmentVisible(net.sourceforge.ganttproject.task.ResourceAssignment)", "isreturn":0, "sourcecode":"protected boolean isAssignmentVisible(ResourceAssignment assignment) {\r\n    return true;\r\n}"},
 {"id":200, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":94, "classname":"net.sourceforge.ganttproject.ResourceTreeTable", "methodid":1118, "methodname":"net.sourceforge.ganttproject.ResourceTreeTable.-init-(net.sourceforge.ganttproject.IGanttProject,org.jdesktop.swing.treetable.TreeTableModel)", "isreturn":0, "sourcecode":"/**\r\n * Creates an instance of GanttTreeTable with the given TreeTableModel.\r\n *\r\n * @param model\r\n * \t\tTreeTableModel.\r\n */\r\npublic ResourceTreeTable(IGanttProject project, TreeTableModel model) {\r\n    super(project, model);\r\n    myProject = project;\r\n    myProject.addProjectEventListener(new ProjectEventListener() {\r\n        public void projectClosed() {\r\n            deleteAllColumns();\r\n        }\r\n\r\n        public void projectModified() {\r\n        }\r\n\r\n        public void projectSaved() {\r\n        }\r\n    });\r\n    myResourceManager = ((HumanResourceManager) (project.getHumanResourceManager()));\r\n    myRoleManager = project.getRoleManager();\r\n    myRoleManager.addRoleListener(new RoleManager.Listener() {\r\n        public void rolesChanged(RoleManager.RoleEvent e) {\r\n            setUpRolesRenderer();\r\n            setUpAssignementRolesRenderer();\r\n        }\r\n    });\r\n    ttModel = ((ResourceTreeTableModel) (model));\r\n    this.setTreeTableModel(model);\r\n    initTreeTable();\r\n}"},
 {"id":201, "parametername":"ResourceColumn c", "parametertype":"net.sourceforge.ganttproject.resource.ResourceColumn", "parameterclass":506, "classid":92, "classname":"net.sourceforge.ganttproject.ResourceTreeTable$ColumnHandler", "methodid":1151, "methodname":"net.sourceforge.ganttproject.ResourceTreeTable$ColumnHandler.-init-(net.sourceforge.ganttproject.resource.ResourceColumn)", "isreturn":0, "sourcecode":"public ColumnHandler(ResourceColumn c) {\r\n    column = c;\r\n}"},
 {"id":202, "parametername":"ResourceColumn col", "parametertype":"net.sourceforge.ganttproject.resource.ResourceColumn", "parameterclass":506, "classid":94, "classname":"net.sourceforge.ganttproject.ResourceTreeTable", "methodid":1148, "methodname":"net.sourceforge.ganttproject.ResourceTreeTable.showColumn(net.sourceforge.ganttproject.resource.ResourceColumn)", "isreturn":0, "sourcecode":"/* Shows the given column. The column will appear on\nits default position\n */\r\nvoid showColumn(ResourceColumn col) {\r\n    col.setVisible(true);\r\n    if ((col.getOrder()) < (getTable().getColumnCount())) {\r\n        col.setOrder(getTable().getColumnCount());\r\n    }\r\n    this.addColumn(col.getColumn());\r\n}"},
 {"id":203, "parametername":"ResourceColumn col", "parametertype":"net.sourceforge.ganttproject.resource.ResourceColumn", "parameterclass":506, "classid":94, "classname":"net.sourceforge.ganttproject.ResourceTreeTable", "methodid":1136, "methodname":"net.sourceforge.ganttproject.ResourceTreeTable.hideColumn(net.sourceforge.ganttproject.resource.ResourceColumn)", "isreturn":0, "sourcecode":"void hideColumn(ResourceColumn col) {\r\n    col.setVisible(false);\r\n    this.removeColumn(col.getColumn());\r\n}"},
 {"id":204, "parametername":"ResourceColumn column", "parametertype":"net.sourceforge.ganttproject.resource.ResourceColumn", "parameterclass":506, "classid":94, "classname":"net.sourceforge.ganttproject.ResourceTreeTable", "methodid":1123, "methodname":"net.sourceforge.ganttproject.ResourceTreeTable.addMandatoryColumn(net.sourceforge.ganttproject.resource.ResourceColumn)", "isreturn":0, "sourcecode":"public void addMandatoryColumn(ResourceColumn column) {\r\n    this.addColumn(column.getColumn());\r\n    ttModel.addMandatoryColumn(column);\r\n}"},
 {"id":205, "parametername":"ResourceColumn column", "parametertype":"net.sourceforge.ganttproject.resource.ResourceColumn", "parameterclass":506, "classid":94, "classname":"net.sourceforge.ganttproject.ResourceTreeTable", "methodid":1121, "methodname":"net.sourceforge.ganttproject.ResourceTreeTable.addCustomColumn(net.sourceforge.ganttproject.resource.ResourceColumn)", "isreturn":0, "sourcecode":"/* creates a custom property column in the datamodel and on the screen */\r\npublic void addCustomColumn(ResourceColumn column) {\r\n    if (column == null) {\r\n        /* create dialog and create column */\r\n        column = newResourceColumn();\r\n        ResourceDialogCustomColumn d = new ResourceDialogCustomColumn(Mediator.getGanttProjectSingleton().getUIFacade(), column);\r\n        d.setVisible(true);\r\n        if (!(d.isOk())) {\r\n            return;\r\n        }\r\n        column = d.getColumn();\r\n    }\r\n    if ((column.getTitle()) != null) {\r\n        /* adding the column into the datamodel */\r\n        try {\r\n            ttModel.addCustomColumn(column.getTitle(), column);\r\n        } catch (Exception e) {\r\n            /* TODO add translation */\r\n            JOptionPane.showMessageDialog(this, e.getMessage(), \"Column add\", JOptionPane.ERROR_MESSAGE);\r\n            return;\r\n        }\r\n        /* adding the column to the screen */\r\n        this.addColumn(column.getColumn());\r\n        /* setting the cell renderer */\r\n        String colClass = column.getType().getName();\r\n        int align;\r\n        if ((colClass.equals(\"java.lang.Integer\")) || (colClass.equals(\"java.lang.Double\"))) {\r\n            align = SwingConstants.RIGHT;\r\n            setColumnHorizontalAlignment(column.getTitle(), align);\r\n        } else\r\n            if (colClass.equals(\"java.util.GregorianCalendar\")) {\r\n                align = SwingConstants.CENTER;\r\n                setColumnHorizontalAlignment(column.getTitle(), align);\r\n                /* the customised date cell editor */\r\n                column.getColumn().setCellEditor(newDateCellEditor());\r\n            } else {\r\n                align = SwingConstants.LEFT;\r\n                setColumnHorizontalAlignment(column.getTitle(), align);\r\n            }\r\n\r\n    }\r\n}"},
 {"id":206, "parametername":"ProjectResource pr", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":94, "classname":"net.sourceforge.ganttproject.ResourceTreeTable", "methodid":1140, "methodname":"net.sourceforge.ganttproject.ResourceTreeTable.isExpanded(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public boolean isExpanded(ProjectResource pr) {\r\n    ResourceNode node = ((ResourceTreeTableModel) (getTreeTableModel())).exists(pr);\r\n    if (node != null)\r\n        return getTreeTable().isExpanded(new javax.swing.tree.TreePath(node.getPath()));\r\n\r\n    return false;\r\n}"},
 {"id":207, "parametername":"CustomPropertyManager source", "parametertype":"net.sourceforge.ganttproject.CustomPropertyManager", "parameterclass":14, "classid":94, "classname":"net.sourceforge.ganttproject.ResourceTreeTable", "methodid":1137, "methodname":"net.sourceforge.ganttproject.ResourceTreeTable.importData(net.sourceforge.ganttproject.CustomPropertyManager)", "isreturn":0, "sourcecode":"public void importData(CustomPropertyManager source) {\r\n    List sourceDefs = source.getDefinitions();\r\n    for (int i = 0; i < (sourceDefs.size()); i++) {\r\n        CustomPropertyDefinition nextDefinition = ((CustomPropertyDefinition) (sourceDefs.get(i)));\r\n        createDefinition(nextDefinition.getID(), nextDefinition.getTypeAsString(), nextDefinition.getName(), nextDefinition.getDefaultValueAsString());\r\n    }\r\n}"},
 {"id":208, "parametername":"TableHeaderUIFacade source", "parametertype":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade", "parameterclass":324, "classid":93, "classname":"net.sourceforge.ganttproject.ResourceTreeTable$TableHeaderImpl", "methodid":1158, "methodname":"net.sourceforge.ganttproject.ResourceTreeTable$TableHeaderImpl.importData(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "isreturn":0, "sourcecode":"public void importData(TableHeaderUIFacade source) {\r\n    if ((source.getSize()) == 0) {\r\n        return;\r\n    }\r\n    ArrayList cols = ttModel.getColumns();\r\n    for (int i = 0; i < (cols.size()); i++) {\r\n        ResourceColumn col = ((ResourceColumn) (cols.get(i)));\r\n        hideColumn(col);\r\n    }\r\n    ArrayList sourceColumns = new ArrayList();\r\n    for (int i = 0; i < (source.getSize()); i++) {\r\n        TableHeaderUIFacade.Column nextField = source.getField(i);\r\n        sourceColumns.add(nextField);\r\n    }\r\n    Collections.sort(sourceColumns, new Comparator() {\r\n        public int compare(Object o1, Object o2) {\r\n            TableHeaderUIFacade.Column lhs = ((TableHeaderUIFacade.Column) (o1));\r\n            TableHeaderUIFacade.Column rhs = ((TableHeaderUIFacade.Column) (o2));\r\n            return (lhs.getOrder()) - (rhs.getOrder());\r\n        }\r\n    });\r\n    for (int i = 0; i < (sourceColumns.size()); i++) {\r\n        TableHeaderUIFacade.Column nextField = ((TableHeaderUIFacade.Column) (sourceColumns.get(i)));\r\n        add(nextField.getID(), i, nextField.getWidth());\r\n    }\r\n}"},
 {"id":209, "parametername":"ResourceManager resMgr", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1159, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"public ResourceTreeTableModel(ResourceManager resMgr, TaskManager taskManager) {\r\n    super();\r\n    myResourceManager = ((HumanResourceManager) (resMgr));\r\n    myTaskManager = taskManager;\r\n    myTaskManager.addTaskListener(new TaskListenerAdapter() {\r\n        public void taskRemoved(TaskHierarchyEvent e) {\r\n            fireResourceChange(e.getTask());\r\n        }\r\n\r\n        public void taskScheduleChanged(TaskScheduleEvent e) {\r\n            fireResourceChange(e.getTask());\r\n        }\r\n\r\n        void fireResourceChange(Task task) {\r\n            ResourceAssignment[] assignments = task.getAssignments();\r\n            for (int i = 0; i < (assignments.length); i++) {\r\n                assignments[i].getResource().resetLoads();\r\n                resourceAssignmentsChanged(new ProjectResource[]{ assignments[i].getResource() });\r\n            }\r\n        }\r\n    });\r\n    changeLanguage(ResourceTreeTableModel.language);\r\n    root = buildTree();\r\n    this.setRoot(root);\r\n}"},
 {"id":210, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1159, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"public ResourceTreeTableModel(ResourceManager resMgr, TaskManager taskManager) {\r\n    super();\r\n    myResourceManager = ((HumanResourceManager) (resMgr));\r\n    myTaskManager = taskManager;\r\n    myTaskManager.addTaskListener(new TaskListenerAdapter() {\r\n        public void taskRemoved(TaskHierarchyEvent e) {\r\n            fireResourceChange(e.getTask());\r\n        }\r\n\r\n        public void taskScheduleChanged(TaskScheduleEvent e) {\r\n            fireResourceChange(e.getTask());\r\n        }\r\n\r\n        void fireResourceChange(Task task) {\r\n            ResourceAssignment[] assignments = task.getAssignments();\r\n            for (int i = 0; i < (assignments.length); i++) {\r\n                assignments[i].getResource().resetLoads();\r\n                resourceAssignmentsChanged(new ProjectResource[]{ assignments[i].getResource() });\r\n            }\r\n        }\r\n    });\r\n    changeLanguage(ResourceTreeTableModel.language);\r\n    root = buildTree();\r\n    this.setRoot(root);\r\n}"},
 {"id":211, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1182, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.getNodeForResource(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public ResourceNode getNodeForResource(ProjectResource resource) {\r\n    ResourceNode res = null;\r\n    Enumeration childs = root.children();\r\n    while ((childs.hasMoreElements()) && (res == null)) {\r\n        ResourceNode rn = ((ResourceNode) (childs.nextElement()));\r\n        if (resource.equals(rn.getUserObject()))\r\n            res = rn;\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":212, "parametername":"net.sourceforge.ganttproject.resource.ResourceNode", "parametertype":"net.sourceforge.ganttproject.resource.ResourceNode", "parameterclass":510, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1182, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.getNodeForResource(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":1, "sourcecode":"public ResourceNode getNodeForResource(ProjectResource resource) {\r\n    ResourceNode res = null;\r\n    Enumeration childs = root.children();\r\n    while ((childs.hasMoreElements()) && (res == null)) {\r\n        ResourceNode rn = ((ResourceNode) (childs.nextElement()));\r\n        if (resource.equals(rn.getUserObject()))\r\n            res = rn;\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":213, "parametername":"ResourceAssignment assignement", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1181, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.getNodeForAssigment(net.sourceforge.ganttproject.task.ResourceAssignment)", "isreturn":0, "sourcecode":"public AssignmentNode getNodeForAssigment(ResourceAssignment assignement) {\r\n    AssignmentNode res = null;\r\n    Enumeration childs = getNodeForResource(assignement.getResource()).children();\r\n    while ((childs.hasMoreElements()) && (res == null)) {\r\n        AssignmentNode an = ((AssignmentNode) (childs.nextElement()));\r\n        if (assignement.equals(an.getUserObject()))\r\n            res = an;\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":214, "parametername":"net.sourceforge.ganttproject.resource.AssignmentNode", "parametertype":"net.sourceforge.ganttproject.resource.AssignmentNode", "parameterclass":497, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1181, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.getNodeForAssigment(net.sourceforge.ganttproject.task.ResourceAssignment)", "isreturn":1, "sourcecode":"public AssignmentNode getNodeForAssigment(ResourceAssignment assignement) {\r\n    AssignmentNode res = null;\r\n    Enumeration childs = getNodeForResource(assignement.getResource()).children();\r\n    while ((childs.hasMoreElements()) && (res == null)) {\r\n        AssignmentNode an = ((AssignmentNode) (childs.nextElement()));\r\n        if (assignement.equals(an.getUserObject()))\r\n            res = an;\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":215, "parametername":"ProjectResource pr", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1173, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.exists(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"ResourceNode exists(ProjectResource pr) {\r\n    ResourceNode res = null;\r\n    Enumeration en = root.children();\r\n    while ((res == null) && (en.hasMoreElements())) {\r\n        ResourceNode rn = ((ResourceNode) (en.nextElement()));\r\n        if (rn.getUserObject().equals(pr))\r\n            res = rn;\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":216, "parametername":"net.sourceforge.ganttproject.resource.ResourceNode", "parametertype":"net.sourceforge.ganttproject.resource.ResourceNode", "parameterclass":510, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1173, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.exists(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":1, "sourcecode":"ResourceNode exists(ProjectResource pr) {\r\n    ResourceNode res = null;\r\n    Enumeration en = root.children();\r\n    while ((res == null) && (en.hasMoreElements())) {\r\n        ResourceNode rn = ((ResourceNode) (en.nextElement()));\r\n        if (rn.getUserObject().equals(pr))\r\n            res = rn;\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":217, "parametername":"ResourceNode rn", "parametertype":"net.sourceforge.ganttproject.resource.ResourceNode", "parameterclass":510, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1174, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.exists(net.sourceforge.ganttproject.resource.ResourceNode,net.sourceforge.ganttproject.task.ResourceAssignment)", "isreturn":0, "sourcecode":"private AssignmentNode exists(ResourceNode rn, ResourceAssignment ra) {\r\n    AssignmentNode res = null;\r\n    Enumeration en = rn.children();\r\n    while ((res == null) && (en.hasMoreElements())) {\r\n        AssignmentNode an = ((AssignmentNode) (en.nextElement()));\r\n        if (an.getUserObject().equals(ra))\r\n            res = an;\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":218, "parametername":"net.sourceforge.ganttproject.resource.AssignmentNode", "parametertype":"net.sourceforge.ganttproject.resource.AssignmentNode", "parameterclass":497, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1174, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.exists(net.sourceforge.ganttproject.resource.ResourceNode,net.sourceforge.ganttproject.task.ResourceAssignment)", "isreturn":1, "sourcecode":"private AssignmentNode exists(ResourceNode rn, ResourceAssignment ra) {\r\n    AssignmentNode res = null;\r\n    Enumeration en = rn.children();\r\n    while ((res == null) && (en.hasMoreElements())) {\r\n        AssignmentNode an = ((AssignmentNode) (en.nextElement()));\r\n        if (an.getUserObject().equals(ra))\r\n            res = an;\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":219, "parametername":"ResourceAssignment ra", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1174, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.exists(net.sourceforge.ganttproject.resource.ResourceNode,net.sourceforge.ganttproject.task.ResourceAssignment)", "isreturn":0, "sourcecode":"private AssignmentNode exists(ResourceNode rn, ResourceAssignment ra) {\r\n    AssignmentNode res = null;\r\n    Enumeration en = rn.children();\r\n    while ((res == null) && (en.hasMoreElements())) {\r\n        AssignmentNode an = ((AssignmentNode) (en.nextElement()));\r\n        if (an.getUserObject().equals(ra))\r\n            res = an;\r\n\r\n    } \r\n    return res;\r\n}"},
 {"id":220, "parametername":"GanttLanguage ganttLanguage", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage", "parameterclass":461, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1166, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.changeLanguage(net.sourceforge.ganttproject.language.GanttLanguage)", "isreturn":0, "sourcecode":"/**\r\n * Changes the language.\r\n *\r\n * @param ganttLanguage\r\n * \t\tNew language to use.\r\n */\r\npublic void changeLanguage(GanttLanguage ganttLanguage) {\r\n    ResourceTreeTableModel.strResourceName = ResourceTreeTableModel.language.getText(\"tableColResourceName\");\r\n    ResourceTreeTableModel.strResourceRole = ResourceTreeTableModel.language.getText(\"tableColResourceRole\");\r\n    ResourceTreeTableModel.strResourceEMail = ResourceTreeTableModel.language.getText(\"tableColResourceEMail\");\r\n    ResourceTreeTableModel.strResourcePhone = ResourceTreeTableModel.language.getText(\"tableColResourcePhone\");\r\n    ResourceTreeTableModel.strResourceRoleForTask = ResourceTreeTableModel.language.getText(\"tableColResourceRoleForTask\");\r\n    // hack assume that INDEX_RESOURCE_ROLE_TASK is the last index\r\n    String[] cols = new String[(ResourceTreeTableModel.INDEX_RESOURCE_ROLE_TASK) + 1];\r\n    cols[ResourceTreeTableModel.INDEX_RESOURCE_EMAIL] = ResourceTreeTableModel.strResourceEMail;\r\n    cols[ResourceTreeTableModel.INDEX_RESOURCE_NAME] = ResourceTreeTableModel.strResourceName;\r\n    cols[ResourceTreeTableModel.INDEX_RESOURCE_PHONE] = ResourceTreeTableModel.strResourcePhone;\r\n    cols[ResourceTreeTableModel.INDEX_RESOURCE_ROLE] = ResourceTreeTableModel.strResourceRole;\r\n    cols[ResourceTreeTableModel.INDEX_RESOURCE_ROLE_TASK] = ResourceTreeTableModel.strResourceRoleForTask;\r\n    for (int i = 0; i < (cols.length); i++) {\r\n        ResourceColumn col = ((ResourceColumn) (columns.get(new Integer(i))));\r\n        if (col != null)\r\n            col.setTitle(cols[i]);\r\n\r\n    }\r\n}"},
 {"id":221, "parametername":"ProjectResource people", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1163, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.addResource(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public DefaultMutableTreeNode addResource(ProjectResource people) {\r\n    DefaultMutableTreeNode result = new ResourceNode(people);\r\n    insertNodeInto(result, root, root.getChildCount());\r\n    myResourceManager.toString();\r\n    return result;\r\n}"},
 {"id":222, "parametername":"ProjectResource people", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1171, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.deleteResource(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public void deleteResource(ProjectResource people) {\r\n    removeNodeFromParent(getNodeForResource(people));\r\n    // myResourceManager.remove(people);\r\n}"},
 {"id":223, "parametername":"HumanResource resource", "parametertype":"net.sourceforge.ganttproject.resource.HumanResource", "parameterclass":499, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1187, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.moveUp(net.sourceforge.ganttproject.resource.HumanResource)", "isreturn":0, "sourcecode":"/**\r\n * Move Up the selected resource\r\n */\r\npublic boolean moveUp(HumanResource resource) {\r\n    myResourceManager.up(resource);\r\n    ResourceNode rn = getNodeForResource(resource);\r\n    int index = root.getIndex(root.getChildBefore(rn));\r\n    removeNodeFromParent(rn);\r\n    insertNodeInto(rn, root, index);\r\n    return true;\r\n}"},
 {"id":224, "parametername":"HumanResource resource", "parametertype":"net.sourceforge.ganttproject.resource.HumanResource", "parameterclass":499, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1186, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.moveDown(net.sourceforge.ganttproject.resource.HumanResource)", "isreturn":0, "sourcecode":"public boolean moveDown(HumanResource resource) {\r\n    myResourceManager.down(resource);\r\n    ResourceNode rn = getNodeForResource(resource);\r\n    int index = root.getIndex(root.getChildAfter(rn));\r\n    removeNodeFromParent(rn);\r\n    insertNodeInto(rn, root, index);\r\n    return true;\r\n}"},
 {"id":225, "parametername":"ResourceColumn col", "parametertype":"net.sourceforge.ganttproject.resource.ResourceColumn", "parameterclass":506, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1162, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.addMandatoryColumn(net.sourceforge.ganttproject.resource.ResourceColumn)", "isreturn":0, "sourcecode":"/**\r\n * Adds a column that cannot be removed afterwards.\r\n */\r\npublic void addMandatoryColumn(ResourceColumn col) {\r\n    columns.put(new Integer(col.getIndex()), col);\r\n}"},
 {"id":226, "parametername":"ResourceColumn col", "parametertype":"net.sourceforge.ganttproject.resource.ResourceColumn", "parameterclass":506, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1161, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.addCustomColumn(java.lang.String,net.sourceforge.ganttproject.resource.ResourceColumn)", "isreturn":0, "sourcecode":"/**\r\n * Adds a custom column (which is removable) to the datamodel\r\n */\r\npublic void addCustomColumn(String title, ResourceColumn col) throws Exception {\r\n    /* TODO add translation */\r\n    if (((HumanResourceManager) (myResourceManager)).checkCustomField(title))\r\n        throw new Exception(\"Column exists\");\r\n\r\n    ((HumanResourceManager) (myResourceManager)).addCustomField(col);\r\n    columns.put(new Integer(ResourceTreeTableModel.index), col);\r\n}"},
 {"id":227, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1191, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.resourceChanged(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public void resourceChanged(ProjectResource resource) {\r\n    ResourceNode node = getNodeForResource(resource);\r\n    if (node == null) {\r\n        return;\r\n    }\r\n    TreeNode parent = node.getParent();\r\n    int index = parent.getIndex(node);\r\n    assert index >= 0;\r\n    nodesChanged(parent, new int[]{ index });\r\n}"},
 {"id":228, "parametername":"ResourceNode resourceNode", "parametertype":"net.sourceforge.ganttproject.resource.ResourceNode", "parameterclass":510, "classid":95, "classname":"net.sourceforge.ganttproject.ResourceTreeTableModel", "methodid":1164, "methodname":"net.sourceforge.ganttproject.ResourceTreeTableModel.buildAssignmentsSubtree(net.sourceforge.ganttproject.resource.ResourceNode)", "isreturn":0, "sourcecode":"private void buildAssignmentsSubtree(ResourceNode resourceNode) {\r\n    ProjectResource resource = resourceNode.getResource();\r\n    resourceNode.removeAllChildren();\r\n    ResourceAssignment[] assignments = resource.getAssignments();\r\n    int[] indices = new int[assignments.length];\r\n    TreeNode[] children = new TreeNode[assignments.length];\r\n    if ((assignments.length) > 0) {\r\n        for (int i = 0; i < (assignments.length); i++) {\r\n            indices[i] = i;\r\n            AssignmentNode an = new AssignmentNode(assignments[i]);\r\n            children[i] = an;\r\n            resourceNode.add(an);\r\n        }\r\n    }\r\n    fireTreeStructureChanged(this, resourceNode.getPath(), indices, children);\r\n}"},
 {"id":229, "parametername":"GanttTree2 tree", "parametertype":"net.sourceforge.ganttproject.GanttTree2", "parameterclass":73, "classid":96, "classname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "methodid":1195, "methodname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.-init-(net.sourceforge.ganttproject.GanttTree2)", "isreturn":0, "sourcecode":"public TaskContainmentHierarchyFacadeImpl(GanttTree2 tree) {\r\n    /* <DefaultMutableTreeNode> */\r\n    ArrayList allTasks = tree.getAllTasks();\r\n    // comboBox.addItem(\"no set\");\r\n    // for (int i = 0; i < allTasks.size(); i++) {\r\n    // DefaultMutableTreeNode treeNode = (DefaultMutableTreeNode)\r\n    // allTasks.get(i);\r\n    for (int i = 0; i < (allTasks.size()); i++) {\r\n        DefaultMutableTreeNode treeNode = ((DefaultMutableTreeNode) (allTasks.get(i)));\r\n        Task task = ((Task) (treeNode.getUserObject()));\r\n        if (treeNode.isRoot()) {\r\n            myRootTask = task;\r\n        }\r\n        myTask2treeNode.put(task, treeNode);\r\n        myTask2index.put(task, new Integer(i));\r\n    }\r\n    myTree = tree;\r\n}"},
 {"id":230, "parametername":"Task container", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":96, "classname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "methodid":1201, "methodname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.getNestedTasks(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public Task[] getNestedTasks(Task container) {\r\n    Task[] result = null;\r\n    DefaultMutableTreeNode treeNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(container)));\r\n    if (treeNode != null) {\r\n        ArrayList list = new ArrayList();\r\n        for (Enumeration children = treeNode.children(); children.hasMoreElements();) {\r\n            DefaultMutableTreeNode next = ((DefaultMutableTreeNode) (children.nextElement()));\r\n            if (next instanceof TaskNode)\r\n                list.add(next.getUserObject());\r\n\r\n        }\r\n        result = ((Task[]) (list.toArray(new Task[0])));\r\n    }\r\n    return result == null ? new Task[0] : result;\r\n}"},
 {"id":231, "parametername":"Task container", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":96, "classname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "methodid":1204, "methodname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.hasNestedTasks(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n * Purpose: Returns true if the container Task has any nested tasks.\r\n * This should be a quicker check than using getNestedTasks().\r\n *\r\n * @param container\r\n * \t\tThe Task on which to check for children.\r\n */\r\npublic boolean hasNestedTasks(Task container) {\r\n    DefaultMutableTreeNode treeNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(container)));\r\n    if (treeNode != null) {\r\n        if (treeNode.children().hasMoreElements()) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}"},
 {"id":232, "parametername":"Task nestedTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":96, "classname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "methodid":1199, "methodname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.getContainer(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public Task getContainer(Task nestedTask) {\r\n    DefaultMutableTreeNode treeNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(nestedTask)));\r\n    if (treeNode == null) {\r\n        return null;\r\n    }\r\n    DefaultMutableTreeNode containerNode = ((DefaultMutableTreeNode) (treeNode.getParent()));\r\n    return containerNode == null ? null : ((Task) (containerNode.getUserObject()));\r\n}"},
 {"id":233, "parametername":"net.sourceforge.ganttproject.task.Task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":96, "classname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "methodid":1199, "methodname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.getContainer(net.sourceforge.ganttproject.task.Task)", "isreturn":1, "sourcecode":"public Task getContainer(Task nestedTask) {\r\n    DefaultMutableTreeNode treeNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(nestedTask)));\r\n    if (treeNode == null) {\r\n        return null;\r\n    }\r\n    DefaultMutableTreeNode containerNode = ((DefaultMutableTreeNode) (treeNode.getParent()));\r\n    return containerNode == null ? null : ((Task) (containerNode.getUserObject()));\r\n}"},
 {"id":234, "parametername":"Task first", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":96, "classname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "methodid":1196, "methodname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.areUnrelated(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public boolean areUnrelated(Task first, Task second) {\r\n    myPathBuffer.clear();\r\n    for (Task container = getContainer(first); container != null; container = getContainer(container)) {\r\n        myPathBuffer.add(container);\r\n    }\r\n    if (myPathBuffer.contains(second)) {\r\n        return false;\r\n    }\r\n    myPathBuffer.clear();\r\n    for (Task container = getContainer(second); container != null; container = getContainer(container)) {\r\n        myPathBuffer.add(container);\r\n    }\r\n    if (myPathBuffer.contains(first)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"},
 {"id":235, "parametername":"Task second", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":96, "classname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "methodid":1196, "methodname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.areUnrelated(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public boolean areUnrelated(Task first, Task second) {\r\n    myPathBuffer.clear();\r\n    for (Task container = getContainer(first); container != null; container = getContainer(container)) {\r\n        myPathBuffer.add(container);\r\n    }\r\n    if (myPathBuffer.contains(second)) {\r\n        return false;\r\n    }\r\n    myPathBuffer.clear();\r\n    for (Task container = getContainer(second); container != null; container = getContainer(container)) {\r\n        myPathBuffer.add(container);\r\n    }\r\n    if (myPathBuffer.contains(first)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"},
 {"id":236, "parametername":"Task whatMove", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":96, "classname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "methodid":1205, "methodname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.move(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public void move(Task whatMove, Task whereMove) {\r\n    DefaultMutableTreeNode targetNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(whereMove)));\r\n    DefaultMutableTreeNode movedNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(whatMove)));\r\n    if (movedNode != null) {\r\n        TreePath movedPath = new TreePath(movedNode.getPath());\r\n        boolean wasSelected = myTree.getJTree().getSelectionModel().isPathSelected(movedPath);\r\n        if (wasSelected) {\r\n            myTree.getJTree().getSelectionModel().removeSelectionPath(movedPath);\r\n        }\r\n        myTree.getModel().removeNodeFromParent(movedNode);\r\n        myTree.getModel().insertNodeInto(movedNode, targetNode, targetNode.getChildCount());\r\n        if (wasSelected) {\r\n            movedPath = new TreePath(movedNode.getPath());\r\n            myTree.getJTree().getSelectionModel().addSelectionPath(movedPath);\r\n        }\r\n    } else {\r\n        myTree.addObjectWithExpand(whatMove, targetNode);\r\n    }\r\n    getTaskManager().getAlgorithmCollection().getAdjustTaskBoundsAlgorithm().run(whatMove);\r\n    try {\r\n        getTaskManager().getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm().run();\r\n    } catch (TaskDependencyException e) {\r\n        e.printStackTrace();\r\n        throw new RuntimeException(e);\r\n    }\r\n}"},
 {"id":237, "parametername":"Task whereMove", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":96, "classname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "methodid":1205, "methodname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.move(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public void move(Task whatMove, Task whereMove) {\r\n    DefaultMutableTreeNode targetNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(whereMove)));\r\n    DefaultMutableTreeNode movedNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(whatMove)));\r\n    if (movedNode != null) {\r\n        TreePath movedPath = new TreePath(movedNode.getPath());\r\n        boolean wasSelected = myTree.getJTree().getSelectionModel().isPathSelected(movedPath);\r\n        if (wasSelected) {\r\n            myTree.getJTree().getSelectionModel().removeSelectionPath(movedPath);\r\n        }\r\n        myTree.getModel().removeNodeFromParent(movedNode);\r\n        myTree.getModel().insertNodeInto(movedNode, targetNode, targetNode.getChildCount());\r\n        if (wasSelected) {\r\n            movedPath = new TreePath(movedNode.getPath());\r\n            myTree.getJTree().getSelectionModel().addSelectionPath(movedPath);\r\n        }\r\n    } else {\r\n        myTree.addObjectWithExpand(whatMove, targetNode);\r\n    }\r\n    getTaskManager().getAlgorithmCollection().getAdjustTaskBoundsAlgorithm().run(whatMove);\r\n    try {\r\n        getTaskManager().getAlgorithmCollection().getRecalculateTaskScheduleAlgorithm().run();\r\n    } catch (TaskDependencyException e) {\r\n        e.printStackTrace();\r\n        throw new RuntimeException(e);\r\n    }\r\n}"},
 {"id":238, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":96, "classname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "methodid":1200, "methodname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.getDepth(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public int getDepth(Task task) {\r\n    DefaultMutableTreeNode treeNode = ((DefaultMutableTreeNode) (myTask2treeNode.get(task)));\r\n    return treeNode.getLevel();\r\n}"},
 {"id":239, "parametername":"Task task1", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":96, "classname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "methodid":1197, "methodname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.compareDocumentOrder(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public int compareDocumentOrder(Task task1, Task task2) {\r\n    // DefaultMutableTreeNode node1 = (DefaultMutableTreeNode) myTask2treeNode.get(task1);\r\n    // DefaultMutableTreeNode node2 = (DefaultMutableTreeNode) myTask2treeNode.get(task2);\r\n    // int row1 = myTree.getJTree().getRowForPath(new TreePath(node1.getPath()));\r\n    // int row2 = myTree.getJTree().getRowForPath(new TreePath(node2.getPath()));\r\n    Integer index1 = ((Integer) (myTask2index.get(task1)));\r\n    Integer index2 = ((Integer) (myTask2index.get(task2)));\r\n    return (index1.intValue()) - (index2.intValue());\r\n}"},
 {"id":240, "parametername":"Task task2", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":96, "classname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "methodid":1197, "methodname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.compareDocumentOrder(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public int compareDocumentOrder(Task task1, Task task2) {\r\n    // DefaultMutableTreeNode node1 = (DefaultMutableTreeNode) myTask2treeNode.get(task1);\r\n    // DefaultMutableTreeNode node2 = (DefaultMutableTreeNode) myTask2treeNode.get(task2);\r\n    // int row1 = myTree.getJTree().getRowForPath(new TreePath(node1.getPath()));\r\n    // int row2 = myTree.getJTree().getRowForPath(new TreePath(node2.getPath()));\r\n    Integer index1 = ((Integer) (myTask2index.get(task1)));\r\n    Integer index2 = ((Integer) (myTask2index.get(task2)));\r\n    return (index1.intValue()) - (index2.intValue());\r\n}"},
 {"id":241, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":96, "classname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl", "methodid":1198, "methodname":"net.sourceforge.ganttproject.TaskContainmentHierarchyFacadeImpl.contains(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public boolean contains(Task task) {\r\n    return myTask2treeNode.containsKey(task);\r\n}"},
 {"id":242, "parametername":"IGanttProject ganttProject", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":97, "classname":"net.sourceforge.ganttproject.TaskModelModificationListener", "methodid":1206, "methodname":"net.sourceforge.ganttproject.TaskModelModificationListener.-init-(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"TaskModelModificationListener(IGanttProject ganttProject) {\r\n    myGanttProject = ganttProject;\r\n}"},
 {"id":243, "parametername":"TaskScheduleEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent", "parameterclass":624, "classid":97, "classname":"net.sourceforge.ganttproject.TaskModelModificationListener", "methodid":1214, "methodname":"net.sourceforge.ganttproject.TaskModelModificationListener.taskScheduleChanged(net.sourceforge.ganttproject.task.event.TaskScheduleEvent)", "isreturn":0, "sourcecode":"public void taskScheduleChanged(TaskScheduleEvent e) {\r\n    myGanttProject.setModified();\r\n}"},
 {"id":244, "parametername":"TaskDependencyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskDependencyEvent", "parameterclass":619, "classid":97, "classname":"net.sourceforge.ganttproject.TaskModelModificationListener", "methodid":1207, "methodname":"net.sourceforge.ganttproject.TaskModelModificationListener.dependencyAdded(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "isreturn":0, "sourcecode":"public void dependencyAdded(TaskDependencyEvent e) {\r\n    myGanttProject.setModified();\r\n}"},
 {"id":245, "parametername":"TaskDependencyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskDependencyEvent", "parameterclass":619, "classid":97, "classname":"net.sourceforge.ganttproject.TaskModelModificationListener", "methodid":1208, "methodname":"net.sourceforge.ganttproject.TaskModelModificationListener.dependencyRemoved(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "isreturn":0, "sourcecode":"public void dependencyRemoved(TaskDependencyEvent e) {\r\n    myGanttProject.setModified();\r\n}"},
 {"id":246, "parametername":"TaskHierarchyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "parameterclass":620, "classid":97, "classname":"net.sourceforge.ganttproject.TaskModelModificationListener", "methodid":1209, "methodname":"net.sourceforge.ganttproject.TaskModelModificationListener.taskAdded(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "isreturn":0, "sourcecode":"public void taskAdded(TaskHierarchyEvent e) {\r\n    myGanttProject.setModified();\r\n}"},
 {"id":247, "parametername":"TaskHierarchyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "parameterclass":620, "classid":97, "classname":"net.sourceforge.ganttproject.TaskModelModificationListener", "methodid":1213, "methodname":"net.sourceforge.ganttproject.TaskModelModificationListener.taskRemoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "isreturn":0, "sourcecode":"public void taskRemoved(TaskHierarchyEvent e) {\r\n    myGanttProject.setModified();\r\n}"},
 {"id":248, "parametername":"TaskHierarchyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "parameterclass":620, "classid":97, "classname":"net.sourceforge.ganttproject.TaskModelModificationListener", "methodid":1210, "methodname":"net.sourceforge.ganttproject.TaskModelModificationListener.taskMoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "isreturn":0, "sourcecode":"public void taskMoved(TaskHierarchyEvent e) {\r\n    myGanttProject.setModified();\r\n}"},
 {"id":249, "parametername":"TaskPropertyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskPropertyEvent", "parameterclass":623, "classid":97, "classname":"net.sourceforge.ganttproject.TaskModelModificationListener", "methodid":1212, "methodname":"net.sourceforge.ganttproject.TaskModelModificationListener.taskPropertiesChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "isreturn":0, "sourcecode":"public void taskPropertiesChanged(TaskPropertyEvent e) {\r\n    myGanttProject.setModified();\r\n}"},
 {"id":250, "parametername":"TaskPropertyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskPropertyEvent", "parameterclass":623, "classid":97, "classname":"net.sourceforge.ganttproject.TaskModelModificationListener", "methodid":1211, "methodname":"net.sourceforge.ganttproject.TaskModelModificationListener.taskProgressChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "isreturn":0, "sourcecode":"public void taskProgressChanged(TaskPropertyEvent e) {\r\n    myGanttProject.setModified();\r\n    e.getTask().getManager().getAlgorithmCollection().getRecalculateTaskCompletionPercentageAlgorithm().run(e.getTask());\r\n}"},
 {"id":251, "parametername":"GanttTree2 treeView", "parametertype":"net.sourceforge.ganttproject.GanttTree2", "parameterclass":73, "classid":98, "classname":"net.sourceforge.ganttproject.TaskTreeImageGenerator", "methodid":1215, "methodname":"net.sourceforge.ganttproject.TaskTreeImageGenerator.-init-(net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"TaskTreeImageGenerator(GanttTree2 treeView, UIConfiguration uiConfiguration) {\r\n    myTreeView = treeView;\r\n    myUIConfiguration = uiConfiguration;\r\n}"},
 {"id":252, "parametername":"UIConfiguration uiConfiguration", "parametertype":"net.sourceforge.ganttproject.gui.UIConfiguration", "parameterclass":335, "classid":98, "classname":"net.sourceforge.ganttproject.TaskTreeImageGenerator", "methodid":1215, "methodname":"net.sourceforge.ganttproject.TaskTreeImageGenerator.-init-(net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"TaskTreeImageGenerator(GanttTree2 treeView, UIConfiguration uiConfiguration) {\r\n    myTreeView = treeView;\r\n    myUIConfiguration = uiConfiguration;\r\n}"},
 {"id":253, "parametername":"GanttExportSettings settings", "parametertype":"net.sourceforge.ganttproject.GanttExportSettings", "parameterclass":27, "classid":98, "classname":"net.sourceforge.ganttproject.TaskTreeImageGenerator", "methodid":1217, "methodname":"net.sourceforge.ganttproject.TaskTreeImageGenerator.getPrintableNodes(net.sourceforge.ganttproject.GanttExportSettings)", "isreturn":0, "sourcecode":"List getPrintableNodes(GanttExportSettings settings) {\r\n    List myItemsToConsider;\r\n    if (settings.isOnlySelectedItem()) {\r\n        myItemsToConsider = Arrays.asList(getTree().getSelectedNodes());\r\n    } else {\r\n        myItemsToConsider = getTree().getAllVisibleNodes();\r\n    }\r\n    System.out.println((\"TaskToConsider.size = \" + (myItemsToConsider.size())));\r\n    for (int i = 0; i < (myItemsToConsider.size()); i++) {\r\n        if (((DefaultMutableTreeNode) (myItemsToConsider.get(i))).isRoot()) {\r\n            myItemsToConsider.remove(i);\r\n            break;\r\n        }\r\n    }\r\n    return myItemsToConsider;\r\n}"},
 {"id":254, "parametername":"Task thetask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":98, "classname":"net.sourceforge.ganttproject.TaskTreeImageGenerator", "methodid":1220, "methodname":"net.sourceforge.ganttproject.TaskTreeImageGenerator.isVisible(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"private boolean isVisible(Task thetask) {\r\n    boolean res = true;\r\n    DefaultMutableTreeNode father = getTree().getFatherNode(thetask);\r\n    if (father == null) {\r\n        return false;\r\n    }\r\n    while (father != null) {\r\n        Task taskFather = ((Task) (father.getUserObject()));\r\n        if (!(taskFather.getExpand())) {\r\n            res = false;\r\n        }\r\n        father = ((DefaultMutableTreeNode) (father.getParent()));\r\n    } \r\n    return res;\r\n}"},
 {"id":255, "parametername":"GanttStatusBar statusBar", "parametertype":"net.sourceforge.ganttproject.gui.GanttStatusBar", "parameterclass":310, "classid":103, "classname":"net.sourceforge.ganttproject.UIFacadeImpl", "methodid":1233, "methodname":"net.sourceforge.ganttproject.UIFacadeImpl.-init-(javax.swing.JFrame,net.sourceforge.ganttproject.gui.GanttStatusBar,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"UIFacadeImpl(JFrame mainFrame, GanttStatusBar statusBar, IGanttProject project, UIFacade fallbackDelegate) {\r\n    myMainFrame = mainFrame;\r\n    myScrollingManager = new ScrollingManagerImpl();\r\n    myZoomManager = new ZoomManager(project.getTimeUnitStack());\r\n    myStatusBar = statusBar;\r\n    myFallbackDelegate = fallbackDelegate;\r\n    Platform.getJobManager().setProgressProvider(this);\r\n    myErrorNotifier = new ErrorNotifier(this);\r\n}"},
 {"id":256, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":103, "classname":"net.sourceforge.ganttproject.UIFacadeImpl", "methodid":1233, "methodname":"net.sourceforge.ganttproject.UIFacadeImpl.-init-(javax.swing.JFrame,net.sourceforge.ganttproject.gui.GanttStatusBar,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"UIFacadeImpl(JFrame mainFrame, GanttStatusBar statusBar, IGanttProject project, UIFacade fallbackDelegate) {\r\n    myMainFrame = mainFrame;\r\n    myScrollingManager = new ScrollingManagerImpl();\r\n    myZoomManager = new ZoomManager(project.getTimeUnitStack());\r\n    myStatusBar = statusBar;\r\n    myFallbackDelegate = fallbackDelegate;\r\n    Platform.getJobManager().setProgressProvider(this);\r\n    myErrorNotifier = new ErrorNotifier(this);\r\n}"},
 {"id":257, "parametername":"UIFacade fallbackDelegate", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":103, "classname":"net.sourceforge.ganttproject.UIFacadeImpl", "methodid":1233, "methodname":"net.sourceforge.ganttproject.UIFacadeImpl.-init-(javax.swing.JFrame,net.sourceforge.ganttproject.gui.GanttStatusBar,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"UIFacadeImpl(JFrame mainFrame, GanttStatusBar statusBar, IGanttProject project, UIFacade fallbackDelegate) {\r\n    myMainFrame = mainFrame;\r\n    myScrollingManager = new ScrollingManagerImpl();\r\n    myZoomManager = new ZoomManager(project.getTimeUnitStack());\r\n    myStatusBar = statusBar;\r\n    myFallbackDelegate = fallbackDelegate;\r\n    Platform.getJobManager().setProgressProvider(this);\r\n    myErrorNotifier = new ErrorNotifier(this);\r\n}"},
 {"id":258, "parametername":"final UIFacadeImpl.Commiter commiter", "parametertype":"net.sourceforge.ganttproject.UIFacadeImpl$Commiter", "parameterclass":100, "classid":102, "classname":"net.sourceforge.ganttproject.UIFacadeImpl$ProxyOkAction", "methodid":1279, "methodname":"net.sourceforge.ganttproject.UIFacadeImpl$ProxyOkAction.-init-(javax.swing.Action,javax.swing.JDialog,net.sourceforge.ganttproject.UIFacadeImpl$Commiter)", "isreturn":0, "sourcecode":"private ProxyOkAction(final Action realAction, final JDialog dialog, final UIFacadeImpl.Commiter commiter) {\r\n    realAction.addPropertyChangeListener(this);\r\n    myRealAction = realAction;\r\n    myDialog = dialog;\r\n    myCommiter = commiter;\r\n    setEnabled(realAction.isEnabled());\r\n}"},
 {"id":259, "parametername":"final UIFacadeImpl.Commiter commiter", "parametertype":"net.sourceforge.ganttproject.UIFacadeImpl$Commiter", "parameterclass":100, "classid":103, "classname":"net.sourceforge.ganttproject.UIFacadeImpl", "methodid":1241, "methodname":"net.sourceforge.ganttproject.UIFacadeImpl.createOkAction(javax.swing.Action,javax.swing.JDialog,net.sourceforge.ganttproject.UIFacadeImpl$Commiter)", "isreturn":0, "sourcecode":"private Action createOkAction(final Action realAction, final JDialog dialog, final UIFacadeImpl.Commiter commiter) {\r\n    return new UIFacadeImpl.ProxyOkAction(realAction, dialog, commiter);\r\n}"},
 {"id":260, "parametername":"final UIFacadeImpl.Commiter commiter", "parametertype":"net.sourceforge.ganttproject.UIFacadeImpl$Commiter", "parameterclass":100, "classid":103, "classname":"net.sourceforge.ganttproject.UIFacadeImpl", "methodid":1237, "methodname":"net.sourceforge.ganttproject.UIFacadeImpl.createCancelAction(javax.swing.Action,javax.swing.JDialog,net.sourceforge.ganttproject.UIFacadeImpl$Commiter)", "isreturn":0, "sourcecode":"private Action createCancelAction(final Action realAction, final JDialog result, final UIFacadeImpl.Commiter commiter) {\r\n    return new CancelAction() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            realAction.actionPerformed(e);\r\n            commiter.commit();\r\n            result.setVisible(false);\r\n            result.dispose();\r\n        }\r\n    };\r\n}"},
 {"id":261, "parametername":"GanttTree2 ganttTree", "parametertype":"net.sourceforge.ganttproject.GanttTree2", "parameterclass":73, "classid":104, "classname":"net.sourceforge.ganttproject.action.AddBlankLineAction", "methodid":1282, "methodname":"net.sourceforge.ganttproject.action.AddBlankLineAction.-init-(net.sourceforge.ganttproject.GanttTree2)", "isreturn":0, "sourcecode":"public AddBlankLineAction(GanttTree2 ganttTree) {\r\n    myGanttTree = ganttTree;\r\n}"},
 {"id":262, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":105, "classname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction", "methodid":1287, "methodname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttOptions,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public CalculateCriticalPathAction(TaskManager taskManager, GanttTree2 tree, GanttOptions options, UIConfiguration uiConfiguration, GanttProject appli) {\r\n    super(null, options.getIconSize());\r\n    this.taskManager = taskManager;\r\n    this.tree = tree;\r\n    myUIConfiguration = uiConfiguration;\r\n    myOptions = options;\r\n    this.appli = appli;\r\n}"},
 {"id":263, "parametername":"GanttTree2 tree", "parametertype":"net.sourceforge.ganttproject.GanttTree2", "parameterclass":73, "classid":105, "classname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction", "methodid":1287, "methodname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttOptions,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public CalculateCriticalPathAction(TaskManager taskManager, GanttTree2 tree, GanttOptions options, UIConfiguration uiConfiguration, GanttProject appli) {\r\n    super(null, options.getIconSize());\r\n    this.taskManager = taskManager;\r\n    this.tree = tree;\r\n    myUIConfiguration = uiConfiguration;\r\n    myOptions = options;\r\n    this.appli = appli;\r\n}"},
 {"id":264, "parametername":"GanttOptions options", "parametertype":"net.sourceforge.ganttproject.GanttOptions", "parameterclass":48, "classid":105, "classname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction", "methodid":1287, "methodname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttOptions,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public CalculateCriticalPathAction(TaskManager taskManager, GanttTree2 tree, GanttOptions options, UIConfiguration uiConfiguration, GanttProject appli) {\r\n    super(null, options.getIconSize());\r\n    this.taskManager = taskManager;\r\n    this.tree = tree;\r\n    myUIConfiguration = uiConfiguration;\r\n    myOptions = options;\r\n    this.appli = appli;\r\n}"},
 {"id":265, "parametername":"UIConfiguration uiConfiguration", "parametertype":"net.sourceforge.ganttproject.gui.UIConfiguration", "parameterclass":335, "classid":105, "classname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction", "methodid":1287, "methodname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttOptions,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public CalculateCriticalPathAction(TaskManager taskManager, GanttTree2 tree, GanttOptions options, UIConfiguration uiConfiguration, GanttProject appli) {\r\n    super(null, options.getIconSize());\r\n    this.taskManager = taskManager;\r\n    this.tree = tree;\r\n    myUIConfiguration = uiConfiguration;\r\n    myOptions = options;\r\n    this.appli = appli;\r\n}"},
 {"id":266, "parametername":"GanttProject appli", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":105, "classname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction", "methodid":1287, "methodname":"net.sourceforge.ganttproject.action.CalculateCriticalPathAction.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttOptions,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public CalculateCriticalPathAction(TaskManager taskManager, GanttTree2 tree, GanttOptions options, UIConfiguration uiConfiguration, GanttProject appli) {\r\n    super(null, options.getIconSize());\r\n    this.taskManager = taskManager;\r\n    this.tree = tree;\r\n    myUIConfiguration = uiConfiguration;\r\n    myOptions = options;\r\n    this.appli = appli;\r\n}"},
 {"id":267, "parametername":"ResourceManager hrManager", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":107, "classname":"net.sourceforge.ganttproject.action.DeleteAssignmentAction", "methodid":1295, "methodname":"net.sourceforge.ganttproject.action.DeleteAssignmentAction.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.AssignmentContext,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public DeleteAssignmentAction(ResourceManager hrManager, AssignmentContext context, GanttProject projectFrame) {\r\n    myProjectFrame = projectFrame;\r\n    // this.putValue(AbstractAction.NAME, GanttProject\r\n    // .correctLabel(getLanguage().getText(\"deleteAssignment\")));\r\n    myContext = context;\r\n}"},
 {"id":268, "parametername":"AssignmentContext context", "parametertype":"net.sourceforge.ganttproject.resource.AssignmentContext", "parameterclass":496, "classid":107, "classname":"net.sourceforge.ganttproject.action.DeleteAssignmentAction", "methodid":1295, "methodname":"net.sourceforge.ganttproject.action.DeleteAssignmentAction.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.AssignmentContext,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public DeleteAssignmentAction(ResourceManager hrManager, AssignmentContext context, GanttProject projectFrame) {\r\n    myProjectFrame = projectFrame;\r\n    // this.putValue(AbstractAction.NAME, GanttProject\r\n    // .correctLabel(getLanguage().getText(\"deleteAssignment\")));\r\n    myContext = context;\r\n}"},
 {"id":269, "parametername":"GanttProject projectFrame", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":107, "classname":"net.sourceforge.ganttproject.action.DeleteAssignmentAction", "methodid":1295, "methodname":"net.sourceforge.ganttproject.action.DeleteAssignmentAction.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.AssignmentContext,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public DeleteAssignmentAction(ResourceManager hrManager, AssignmentContext context, GanttProject projectFrame) {\r\n    myProjectFrame = projectFrame;\r\n    // this.putValue(AbstractAction.NAME, GanttProject\r\n    // .correctLabel(getLanguage().getText(\"deleteAssignment\")));\r\n    myContext = context;\r\n}"},
 {"id":270, "parametername":"ResourceManager hrManager", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":108, "classname":"net.sourceforge.ganttproject.action.DeleteHumanAction", "methodid":1302, "methodname":"net.sourceforge.ganttproject.action.DeleteHumanAction.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.ResourceContext,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public DeleteHumanAction(ResourceManager hrManager, ResourceContext context, GanttProject projectFrame, UIFacade uiFacade) {\r\n    super(hrManager);\r\n    myUIFacade = uiFacade;\r\n    myProjectFrame = projectFrame;\r\n    this.putValue(AbstractAction.NAME, GanttProject.correctLabel(getLanguage().getText(\"deleteHuman\")));\r\n    this.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_J, MENU_MASK));\r\n    URL iconUrl = this.getClass().getClassLoader().getResource(DeleteHumanAction.ICON_URL);\r\n    if (iconUrl != null) {\r\n        this.putValue(Action.SMALL_ICON, new ImageIcon(iconUrl));\r\n    }\r\n    myContext = context;\r\n}"},
 {"id":271, "parametername":"ResourceContext context", "parametertype":"net.sourceforge.ganttproject.resource.ResourceContext", "parameterclass":507, "classid":108, "classname":"net.sourceforge.ganttproject.action.DeleteHumanAction", "methodid":1302, "methodname":"net.sourceforge.ganttproject.action.DeleteHumanAction.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.ResourceContext,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public DeleteHumanAction(ResourceManager hrManager, ResourceContext context, GanttProject projectFrame, UIFacade uiFacade) {\r\n    super(hrManager);\r\n    myUIFacade = uiFacade;\r\n    myProjectFrame = projectFrame;\r\n    this.putValue(AbstractAction.NAME, GanttProject.correctLabel(getLanguage().getText(\"deleteHuman\")));\r\n    this.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_J, MENU_MASK));\r\n    URL iconUrl = this.getClass().getClassLoader().getResource(DeleteHumanAction.ICON_URL);\r\n    if (iconUrl != null) {\r\n        this.putValue(Action.SMALL_ICON, new ImageIcon(iconUrl));\r\n    }\r\n    myContext = context;\r\n}"},
 {"id":272, "parametername":"GanttProject projectFrame", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":108, "classname":"net.sourceforge.ganttproject.action.DeleteHumanAction", "methodid":1302, "methodname":"net.sourceforge.ganttproject.action.DeleteHumanAction.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.ResourceContext,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public DeleteHumanAction(ResourceManager hrManager, ResourceContext context, GanttProject projectFrame, UIFacade uiFacade) {\r\n    super(hrManager);\r\n    myUIFacade = uiFacade;\r\n    myProjectFrame = projectFrame;\r\n    this.putValue(AbstractAction.NAME, GanttProject.correctLabel(getLanguage().getText(\"deleteHuman\")));\r\n    this.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_J, MENU_MASK));\r\n    URL iconUrl = this.getClass().getClassLoader().getResource(DeleteHumanAction.ICON_URL);\r\n    if (iconUrl != null) {\r\n        this.putValue(Action.SMALL_ICON, new ImageIcon(iconUrl));\r\n    }\r\n    myContext = context;\r\n}"},
 {"id":273, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":108, "classname":"net.sourceforge.ganttproject.action.DeleteHumanAction", "methodid":1302, "methodname":"net.sourceforge.ganttproject.action.DeleteHumanAction.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.ResourceContext,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public DeleteHumanAction(ResourceManager hrManager, ResourceContext context, GanttProject projectFrame, UIFacade uiFacade) {\r\n    super(hrManager);\r\n    myUIFacade = uiFacade;\r\n    myProjectFrame = projectFrame;\r\n    this.putValue(AbstractAction.NAME, GanttProject.correctLabel(getLanguage().getText(\"deleteHuman\")));\r\n    this.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_J, MENU_MASK));\r\n    URL iconUrl = this.getClass().getClassLoader().getResource(DeleteHumanAction.ICON_URL);\r\n    if (iconUrl != null) {\r\n        this.putValue(Action.SMALL_ICON, new ImageIcon(iconUrl));\r\n    }\r\n    myContext = context;\r\n}"},
 {"id":274, "parametername":"GanttLanguage.Event event", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage$Event", "parameterclass":459, "classid":109, "classname":"net.sourceforge.ganttproject.action.GPAction", "methodid":1321, "methodname":"net.sourceforge.ganttproject.action.GPAction.languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "isreturn":0, "sourcecode":"public void languageChanged(GanttLanguage.Event event) {\r\n    updateName();\r\n    updateTooltip();\r\n}"},
 {"id":275, "parametername":"ResourceManager resourceManager", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":110, "classname":"net.sourceforge.ganttproject.action.ImportResources", "methodid":1326, "methodname":"net.sourceforge.ganttproject.action.ImportResources.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public ImportResources(ResourceManager resourceManager, TaskManager taskManager, RoleManager roleManager, GanttProject project) {\r\n    myTaskManager = taskManager;\r\n    myRoleManager = roleManager;\r\n    GanttLanguage language = GanttLanguage.getInstance();\r\n    this.putValue(AbstractAction.NAME, language.getText(\"importResources\"));\r\n    myResourceManager = resourceManager;\r\n    URL iconUrl = this.getClass().getClassLoader().getResource(\"icons/impres_16.gif\");\r\n    if (iconUrl != null) {\r\n        this.putValue(Action.SMALL_ICON, new ImageIcon(iconUrl));\r\n    }\r\n    myproject = project;\r\n}"},
 {"id":276, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":110, "classname":"net.sourceforge.ganttproject.action.ImportResources", "methodid":1326, "methodname":"net.sourceforge.ganttproject.action.ImportResources.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public ImportResources(ResourceManager resourceManager, TaskManager taskManager, RoleManager roleManager, GanttProject project) {\r\n    myTaskManager = taskManager;\r\n    myRoleManager = roleManager;\r\n    GanttLanguage language = GanttLanguage.getInstance();\r\n    this.putValue(AbstractAction.NAME, language.getText(\"importResources\"));\r\n    myResourceManager = resourceManager;\r\n    URL iconUrl = this.getClass().getClassLoader().getResource(\"icons/impres_16.gif\");\r\n    if (iconUrl != null) {\r\n        this.putValue(Action.SMALL_ICON, new ImageIcon(iconUrl));\r\n    }\r\n    myproject = project;\r\n}"},
 {"id":277, "parametername":"RoleManager roleManager", "parametertype":"net.sourceforge.ganttproject.roles.RoleManager", "parameterclass":517, "classid":110, "classname":"net.sourceforge.ganttproject.action.ImportResources", "methodid":1326, "methodname":"net.sourceforge.ganttproject.action.ImportResources.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public ImportResources(ResourceManager resourceManager, TaskManager taskManager, RoleManager roleManager, GanttProject project) {\r\n    myTaskManager = taskManager;\r\n    myRoleManager = roleManager;\r\n    GanttLanguage language = GanttLanguage.getInstance();\r\n    this.putValue(AbstractAction.NAME, language.getText(\"importResources\"));\r\n    myResourceManager = resourceManager;\r\n    URL iconUrl = this.getClass().getClassLoader().getResource(\"icons/impres_16.gif\");\r\n    if (iconUrl != null) {\r\n        this.putValue(Action.SMALL_ICON, new ImageIcon(iconUrl));\r\n    }\r\n    myproject = project;\r\n}"},
 {"id":278, "parametername":"GanttProject project", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":110, "classname":"net.sourceforge.ganttproject.action.ImportResources", "methodid":1326, "methodname":"net.sourceforge.ganttproject.action.ImportResources.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public ImportResources(ResourceManager resourceManager, TaskManager taskManager, RoleManager roleManager, GanttProject project) {\r\n    myTaskManager = taskManager;\r\n    myRoleManager = roleManager;\r\n    GanttLanguage language = GanttLanguage.getInstance();\r\n    this.putValue(AbstractAction.NAME, language.getText(\"importResources\"));\r\n    myResourceManager = resourceManager;\r\n    URL iconUrl = this.getClass().getClassLoader().getResource(\"icons/impres_16.gif\");\r\n    if (iconUrl != null) {\r\n        this.putValue(Action.SMALL_ICON, new ImageIcon(iconUrl));\r\n    }\r\n    myproject = project;\r\n}"},
 {"id":279, "parametername":"NewArtefactAction.ActiveActionProvider provider", "parametertype":"net.sourceforge.ganttproject.action.NewArtefactAction$ActiveActionProvider", "parameterclass":111, "classid":112, "classname":"net.sourceforge.ganttproject.action.NewArtefactAction", "methodid":1330, "methodname":"net.sourceforge.ganttproject.action.NewArtefactAction.-init-(net.sourceforge.ganttproject.action.NewArtefactAction$ActiveActionProvider,java.lang.String)", "isreturn":0, "sourcecode":"public NewArtefactAction(NewArtefactAction.ActiveActionProvider provider, String iconSize) {\r\n    super(\"\", iconSize);\r\n    myProvider = provider;\r\n}"},
 {"id":280, "parametername":"ResourceManager hrManager", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":113, "classname":"net.sourceforge.ganttproject.action.NewHumanAction", "methodid":1335, "methodname":"net.sourceforge.ganttproject.action.NewHumanAction.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.roles.RoleManager,javax.swing.JFrame,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public NewHumanAction(ResourceManager hrManager, RoleManager roleManager, JFrame projectFrame, GanttProject project) {\r\n    super(hrManager);\r\n    myRoleManager = roleManager;\r\n    myProjectFrame = projectFrame;\r\n    myProject = project;\r\n    this.putValue(AbstractAction.NAME, GanttProject.correctLabel(getLanguage().getText(\"newHuman\")));\r\n    this.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_H, MENU_MASK));\r\n    URL iconUrl = this.getClass().getClassLoader().getResource(\"icons/insert_16.gif\");\r\n    if (iconUrl != null) {\r\n        this.putValue(Action.SMALL_ICON, new ImageIcon(iconUrl));\r\n    }\r\n}"},
 {"id":281, "parametername":"RoleManager roleManager", "parametertype":"net.sourceforge.ganttproject.roles.RoleManager", "parameterclass":517, "classid":113, "classname":"net.sourceforge.ganttproject.action.NewHumanAction", "methodid":1335, "methodname":"net.sourceforge.ganttproject.action.NewHumanAction.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.roles.RoleManager,javax.swing.JFrame,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public NewHumanAction(ResourceManager hrManager, RoleManager roleManager, JFrame projectFrame, GanttProject project) {\r\n    super(hrManager);\r\n    myRoleManager = roleManager;\r\n    myProjectFrame = projectFrame;\r\n    myProject = project;\r\n    this.putValue(AbstractAction.NAME, GanttProject.correctLabel(getLanguage().getText(\"newHuman\")));\r\n    this.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_H, MENU_MASK));\r\n    URL iconUrl = this.getClass().getClassLoader().getResource(\"icons/insert_16.gif\");\r\n    if (iconUrl != null) {\r\n        this.putValue(Action.SMALL_ICON, new ImageIcon(iconUrl));\r\n    }\r\n}"},
 {"id":282, "parametername":"GanttProject project", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":113, "classname":"net.sourceforge.ganttproject.action.NewHumanAction", "methodid":1335, "methodname":"net.sourceforge.ganttproject.action.NewHumanAction.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.roles.RoleManager,javax.swing.JFrame,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public NewHumanAction(ResourceManager hrManager, RoleManager roleManager, JFrame projectFrame, GanttProject project) {\r\n    super(hrManager);\r\n    myRoleManager = roleManager;\r\n    myProjectFrame = projectFrame;\r\n    myProject = project;\r\n    this.putValue(AbstractAction.NAME, GanttProject.correctLabel(getLanguage().getText(\"newHuman\")));\r\n    this.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_H, MENU_MASK));\r\n    URL iconUrl = this.getClass().getClassLoader().getResource(\"icons/insert_16.gif\");\r\n    if (iconUrl != null) {\r\n        this.putValue(Action.SMALL_ICON, new ImageIcon(iconUrl));\r\n    }\r\n}"},
 {"id":283, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":114, "classname":"net.sourceforge.ganttproject.action.NewTaskAction", "methodid":1339, "methodname":"net.sourceforge.ganttproject.action.NewTaskAction.-init-(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"public NewTaskAction(IGanttProject project) {\r\n    myProject = project;\r\n    setText(project.getI18n());\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_T, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));\r\n    URL iconUrl = this.getClass().getClassLoader().getResource(\"icons/insert_16.gif\");\r\n    if (iconUrl != null) {\r\n        this.putValue(Action.SMALL_ICON, new ImageIcon(iconUrl));\r\n    }\r\n    project.getI18n().addListener(this);\r\n}"},
 {"id":284, "parametername":"GanttLanguage.Event event", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage$Event", "parameterclass":459, "classid":114, "classname":"net.sourceforge.ganttproject.action.NewTaskAction", "methodid":1342, "methodname":"net.sourceforge.ganttproject.action.NewTaskAction.languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "isreturn":0, "sourcecode":"public void languageChanged(GanttLanguage.Event event) {\r\n    setText(event.getLanguage());\r\n}"},
 {"id":285, "parametername":"GanttLanguage language", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage", "parameterclass":461, "classid":114, "classname":"net.sourceforge.ganttproject.action.NewTaskAction", "methodid":1343, "methodname":"net.sourceforge.ganttproject.action.NewTaskAction.setText(net.sourceforge.ganttproject.language.GanttLanguage)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param language\r\n * \t\t\r\n */\r\nprivate void setText(GanttLanguage language) {\r\n    this.putValue(AbstractAction.NAME, GanttProject.correctLabel(language.getText(\"newTask\")));\r\n}"},
 {"id":286, "parametername":"GPUndoManager undoManager", "parametertype":"net.sourceforge.ganttproject.undo.GPUndoManager", "parameterclass":657, "classid":116, "classname":"net.sourceforge.ganttproject.action.RedoAction", "methodid":1345, "methodname":"net.sourceforge.ganttproject.action.RedoAction.-init-(net.sourceforge.ganttproject.undo.GPUndoManager,java.lang.String,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public RedoAction(GPUndoManager undoManager, String iconSize, GanttProject appli) {\r\n    super(null, iconSize);\r\n    myUndoManager = undoManager;\r\n    myUndoManager.addUndoableEditListener(this);\r\n    this.appli = appli;\r\n    setEnabled(myUndoManager.canRedo());\r\n}"},
 {"id":287, "parametername":"GanttProject appli", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":116, "classname":"net.sourceforge.ganttproject.action.RedoAction", "methodid":1345, "methodname":"net.sourceforge.ganttproject.action.RedoAction.-init-(net.sourceforge.ganttproject.undo.GPUndoManager,java.lang.String,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public RedoAction(GPUndoManager undoManager, String iconSize, GanttProject appli) {\r\n    super(null, iconSize);\r\n    myUndoManager = undoManager;\r\n    myUndoManager.addUndoableEditListener(this);\r\n    this.appli = appli;\r\n    setEnabled(myUndoManager.canRedo());\r\n}"},
 {"id":288, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":117, "classname":"net.sourceforge.ganttproject.action.RefreshViewAction", "methodid":1352, "methodname":"net.sourceforge.ganttproject.action.RefreshViewAction.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public RefreshViewAction(UIFacade uiFacade, GanttOptions options) {\r\n    super(null, options.getIconSize());\r\n    myUIFacade = uiFacade;\r\n    this.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_R, GPAction.MENU_MASK));\r\n}"},
 {"id":289, "parametername":"GanttOptions options", "parametertype":"net.sourceforge.ganttproject.GanttOptions", "parameterclass":48, "classid":117, "classname":"net.sourceforge.ganttproject.action.RefreshViewAction", "methodid":1352, "methodname":"net.sourceforge.ganttproject.action.RefreshViewAction.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public RefreshViewAction(UIFacade uiFacade, GanttOptions options) {\r\n    super(null, options.getIconSize());\r\n    myUIFacade = uiFacade;\r\n    this.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_R, GPAction.MENU_MASK));\r\n}"},
 {"id":290, "parametername":"ResourceManager hrManager", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":118, "classname":"net.sourceforge.ganttproject.action.ResourceAction", "methodid":1357, "methodname":"net.sourceforge.ganttproject.action.ResourceAction.-init-(net.sourceforge.ganttproject.resource.ResourceManager)", "isreturn":0, "sourcecode":"public ResourceAction(ResourceManager hrManager) {\r\n    myManager = hrManager;\r\n}"},
 {"id":291, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":119, "classname":"net.sourceforge.ganttproject.action.ResourceActionSet", "methodid":1360, "methodname":"net.sourceforge.ganttproject.action.ResourceActionSet.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.resource.ResourceContext,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public ResourceActionSet(IGanttProject project, ResourceContext context, GanttProject projectFrame, UIFacade uiFacade) {\r\n    myManager = project.getHumanResourceManager();\r\n    myRoleManager = project.getRoleManager();\r\n    myContext = context;\r\n    myProjectFrame = projectFrame;\r\n    myUIFacade = uiFacade;\r\n    myDeleteHumanAction = new DeleteHumanAction(myManager, myContext, myProjectFrame, myUIFacade);\r\n}"},
 {"id":292, "parametername":"ResourceContext context", "parametertype":"net.sourceforge.ganttproject.resource.ResourceContext", "parameterclass":507, "classid":119, "classname":"net.sourceforge.ganttproject.action.ResourceActionSet", "methodid":1360, "methodname":"net.sourceforge.ganttproject.action.ResourceActionSet.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.resource.ResourceContext,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public ResourceActionSet(IGanttProject project, ResourceContext context, GanttProject projectFrame, UIFacade uiFacade) {\r\n    myManager = project.getHumanResourceManager();\r\n    myRoleManager = project.getRoleManager();\r\n    myContext = context;\r\n    myProjectFrame = projectFrame;\r\n    myUIFacade = uiFacade;\r\n    myDeleteHumanAction = new DeleteHumanAction(myManager, myContext, myProjectFrame, myUIFacade);\r\n}"},
 {"id":293, "parametername":"GanttProject projectFrame", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":119, "classname":"net.sourceforge.ganttproject.action.ResourceActionSet", "methodid":1360, "methodname":"net.sourceforge.ganttproject.action.ResourceActionSet.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.resource.ResourceContext,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public ResourceActionSet(IGanttProject project, ResourceContext context, GanttProject projectFrame, UIFacade uiFacade) {\r\n    myManager = project.getHumanResourceManager();\r\n    myRoleManager = project.getRoleManager();\r\n    myContext = context;\r\n    myProjectFrame = projectFrame;\r\n    myUIFacade = uiFacade;\r\n    myDeleteHumanAction = new DeleteHumanAction(myManager, myContext, myProjectFrame, myUIFacade);\r\n}"},
 {"id":294, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":119, "classname":"net.sourceforge.ganttproject.action.ResourceActionSet", "methodid":1360, "methodname":"net.sourceforge.ganttproject.action.ResourceActionSet.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.resource.ResourceContext,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public ResourceActionSet(IGanttProject project, ResourceContext context, GanttProject projectFrame, UIFacade uiFacade) {\r\n    myManager = project.getHumanResourceManager();\r\n    myRoleManager = project.getRoleManager();\r\n    myContext = context;\r\n    myProjectFrame = projectFrame;\r\n    myUIFacade = uiFacade;\r\n    myDeleteHumanAction = new DeleteHumanAction(myManager, myContext, myProjectFrame, myUIFacade);\r\n}"},
 {"id":295, "parametername":"ScrollingManager scrollingManager", "parametertype":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager", "parameterclass":409, "classid":121, "classname":"net.sourceforge.ganttproject.action.ScrollGanttChartLeftAction", "methodid":1366, "methodname":"net.sourceforge.ganttproject.action.ScrollGanttChartLeftAction.-init-(net.sourceforge.ganttproject.gui.scrolling.ScrollingManager,java.lang.String)", "isreturn":0, "sourcecode":"public ScrollGanttChartLeftAction(ScrollingManager scrollingManager, String iconSize) {\r\n    super(\"ScrollLeft\", iconSize);\r\n    myScrollingManager = scrollingManager;\r\n}"},
 {"id":296, "parametername":"ScrollingManager scrollingManager", "parametertype":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager", "parameterclass":409, "classid":122, "classname":"net.sourceforge.ganttproject.action.ScrollGanttChartRightAction", "methodid":1370, "methodname":"net.sourceforge.ganttproject.action.ScrollGanttChartRightAction.-init-(net.sourceforge.ganttproject.gui.scrolling.ScrollingManager,java.lang.String)", "isreturn":0, "sourcecode":"public ScrollGanttChartRightAction(ScrollingManager scrollingManager, String iconSize) {\r\n    super(\"ScrollRight\", iconSize);\r\n    myScrollingManager = scrollingManager;\r\n}"},
 {"id":297, "parametername":"GanttProject project", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":123, "classname":"net.sourceforge.ganttproject.action.SwitchViewAction", "methodid":1374, "methodname":"net.sourceforge.ganttproject.action.SwitchViewAction.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public SwitchViewAction(GanttProject project) {\r\n    tabbedPane = project.getTabs();\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_F7, GPAction.MENU_MASK));\r\n}"},
 {"id":298, "parametername":"GPUndoManager undoManager", "parametertype":"net.sourceforge.ganttproject.undo.GPUndoManager", "parameterclass":657, "classid":124, "classname":"net.sourceforge.ganttproject.action.UndoAction", "methodid":1376, "methodname":"net.sourceforge.ganttproject.action.UndoAction.-init-(net.sourceforge.ganttproject.undo.GPUndoManager,java.lang.String,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public UndoAction(GPUndoManager undoManager, String iconSize, GanttProject appli) {\r\n    super(null, iconSize);\r\n    myUndoManager = undoManager;\r\n    myUndoManager.addUndoableEditListener(this);\r\n    this.appli = appli;\r\n    setEnabled(myUndoManager.canUndo());\r\n}"},
 {"id":299, "parametername":"GanttProject appli", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":124, "classname":"net.sourceforge.ganttproject.action.UndoAction", "methodid":1376, "methodname":"net.sourceforge.ganttproject.action.UndoAction.-init-(net.sourceforge.ganttproject.undo.GPUndoManager,java.lang.String,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public UndoAction(GPUndoManager undoManager, String iconSize, GanttProject appli) {\r\n    super(null, iconSize);\r\n    myUndoManager = undoManager;\r\n    myUndoManager.addUndoableEditListener(this);\r\n    this.appli = appli;\r\n    setEnabled(myUndoManager.canUndo());\r\n}"},
 {"id":300, "parametername":"ZoomManager zoomManager", "parametertype":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "parameterclass":425, "classid":125, "classname":"net.sourceforge.ganttproject.action.ZoomInAction", "methodid":1383, "methodname":"net.sourceforge.ganttproject.action.ZoomInAction.-init-(net.sourceforge.ganttproject.gui.zoom.ZoomManager,java.lang.String)", "isreturn":0, "sourcecode":"public ZoomInAction(ZoomManager zoomManager, String iconSize) {\r\n    super(\"ZoomIn\", iconSize);\r\n    myZoomManager = zoomManager;\r\n    myZoomManager.addZoomListener(this);\r\n}"},
 {"id":301, "parametername":"ZoomEvent e", "parametertype":"net.sourceforge.ganttproject.gui.zoom.ZoomEvent", "parameterclass":422, "classid":125, "classname":"net.sourceforge.ganttproject.action.ZoomInAction", "methodid":1387, "methodname":"net.sourceforge.ganttproject.action.ZoomInAction.zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "isreturn":0, "sourcecode":"public void zoomChanged(ZoomEvent e) {\r\n    setEnabled(myZoomManager.canZoomIn());\r\n}"},
 {"id":302, "parametername":"ZoomManager zoomManager", "parametertype":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "parameterclass":425, "classid":126, "classname":"net.sourceforge.ganttproject.action.ZoomOutAction", "methodid":1388, "methodname":"net.sourceforge.ganttproject.action.ZoomOutAction.-init-(net.sourceforge.ganttproject.gui.zoom.ZoomManager,java.lang.String)", "isreturn":0, "sourcecode":"public ZoomOutAction(ZoomManager zoomManager, String iconSize) {\r\n    super(\"ZoomOut\", iconSize);\r\n    myZoomManager = zoomManager;\r\n    myZoomManager.addZoomListener(this);\r\n}"},
 {"id":303, "parametername":"ZoomEvent e", "parametertype":"net.sourceforge.ganttproject.gui.zoom.ZoomEvent", "parameterclass":422, "classid":126, "classname":"net.sourceforge.ganttproject.action.ZoomOutAction", "methodid":1393, "methodname":"net.sourceforge.ganttproject.action.ZoomOutAction.zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "isreturn":0, "sourcecode":"public void zoomChanged(ZoomEvent e) {\r\n    setEnabled(myZoomManager.canZoomOut());\r\n}"},
 {"id":304, "parametername":"GanttProject mainFrame", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":127, "classname":"net.sourceforge.ganttproject.action.project.ExitAction", "methodid":1394, "methodname":"net.sourceforge.ganttproject.action.project.ExitAction.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"ExitAction(GanttProject mainFrame) {\r\n    super(\"quit\");\r\n    myMainFrame = mainFrame;\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_Q, GPAction.MENU_MASK));\r\n}"},
 {"id":305, "parametername":"GanttProject mainFrame", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":128, "classname":"net.sourceforge.ganttproject.action.project.NewProjectAction", "methodid":1399, "methodname":"net.sourceforge.ganttproject.action.project.NewProjectAction.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public NewProjectAction(GanttProject mainFrame) {\r\n    super(\"newProject\", \"16\");\r\n    myMainFrame = mainFrame;\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_N, GPAction.MENU_MASK));\r\n}"},
 {"id":306, "parametername":"GanttProject mainFrame", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":129, "classname":"net.sourceforge.ganttproject.action.project.OpenProjectAction", "methodid":1403, "methodname":"net.sourceforge.ganttproject.action.project.OpenProjectAction.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"OpenProjectAction(GanttProject mainFrame) {\r\n    super(\"openProject\", \"16\");\r\n    myMainFrame = mainFrame;\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_O, GPAction.MENU_MASK));\r\n}"},
 {"id":307, "parametername":"GanttProject mainFrame", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":130, "classname":"net.sourceforge.ganttproject.action.project.OpenURLAction", "methodid":1407, "methodname":"net.sourceforge.ganttproject.action.project.OpenURLAction.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"OpenURLAction(GanttProject mainFrame) {\r\n    myMainFrame = mainFrame;\r\n}"},
 {"id":308, "parametername":"GanttProject mainFrame", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":131, "classname":"net.sourceforge.ganttproject.action.project.PrintAction", "methodid":1412, "methodname":"net.sourceforge.ganttproject.action.project.PrintAction.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"PrintAction(GanttProject mainFrame) {\r\n    super(\"print\");\r\n    myMainFrame = mainFrame;\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_P, GPAction.MENU_MASK));\r\n}"},
 {"id":309, "parametername":"GanttProject mainFrame", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":132, "classname":"net.sourceforge.ganttproject.action.project.ProjectMenu", "methodid":1416, "methodname":"net.sourceforge.ganttproject.action.project.ProjectMenu.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public ProjectMenu(GanttProject mainFrame) {\r\n    myMainFrame = mainFrame;\r\n    myNewProjectAction = new NewProjectAction(mainFrame);\r\n    myOpenProjectAction = new OpenProjectAction(mainFrame);\r\n    mySaveProjectAction = new SaveProjectAction(mainFrame);\r\n    mySaveProjectAsAction = new SaveProjectAsAction(mainFrame);\r\n    myOpenURLAction = new OpenURLAction(mainFrame);\r\n    mySaveURLAction = new SaveURLAction(mainFrame);\r\n    myPrintAction = new PrintAction(mainFrame);\r\n    myExitAction = new ExitAction(mainFrame);\r\n}"},
 {"id":310, "parametername":"GanttProject mainFrame", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":133, "classname":"net.sourceforge.ganttproject.action.project.SaveProjectAction", "methodid":1425, "methodname":"net.sourceforge.ganttproject.action.project.SaveProjectAction.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"SaveProjectAction(GanttProject mainFrame) {\r\n    super(\"saveProject\", \"16\");\r\n    myMainFrame = mainFrame;\r\n    mainFrame.addProjectEventListener(this);\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_S, GPAction.MENU_MASK));\r\n    setEnabled(false);\r\n}"},
 {"id":311, "parametername":"GanttProject mainFrame", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":134, "classname":"net.sourceforge.ganttproject.action.project.SaveProjectAsAction", "methodid":1433, "methodname":"net.sourceforge.ganttproject.action.project.SaveProjectAsAction.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"SaveProjectAsAction(GanttProject mainFrame) {\r\n    super(\"saveas\");\r\n    myMainFrame = mainFrame;\r\n}"},
 {"id":312, "parametername":"GanttProject mainFrame", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":135, "classname":"net.sourceforge.ganttproject.action.project.SaveURLAction", "methodid":1437, "methodname":"net.sourceforge.ganttproject.action.project.SaveURLAction.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"SaveURLAction(GanttProject mainFrame) {\r\n    myMainFrame = mainFrame;\r\n}"},
 {"id":313, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":136, "classname":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction", "methodid":1441, "methodname":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public ResourcePropertiesAction(IGanttProject project, UIFacade uiFacade) {\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.ALT_DOWN_MASK));\r\n}"},
 {"id":314, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":136, "classname":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction", "methodid":1441, "methodname":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public ResourcePropertiesAction(IGanttProject project, UIFacade uiFacade) {\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, KeyEvent.ALT_DOWN_MASK));\r\n}"},
 {"id":315, "parametername":"ResourceContext context", "parametertype":"net.sourceforge.ganttproject.resource.ResourceContext", "parameterclass":507, "classid":136, "classname":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction", "methodid":1449, "methodname":"net.sourceforge.ganttproject.action.resource.ResourcePropertiesAction.setContext(net.sourceforge.ganttproject.resource.ResourceContext)", "isreturn":0, "sourcecode":"public void setContext(ResourceContext context) {\r\n    ProjectResource[] resources = context.getResources();\r\n    if ((resources.length) == 1) {\r\n        mySelectedResource = ((HumanResource) (resources[0]));\r\n        setEnabled(true);\r\n    } else {\r\n        setEnabled(false);\r\n    }\r\n}"},
 {"id":316, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":137, "classname":"net.sourceforge.ganttproject.action.task.LinkTasksAction", "methodid":1450, "methodname":"net.sourceforge.ganttproject.action.task.LinkTasksAction.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public LinkTasksAction(TaskManager taskManager, TaskSelectionManager selectionManager, UIFacade uiFacade) {\r\n    super(taskManager, selectionManager, uiFacade);\r\n}"},
 {"id":317, "parametername":"TaskSelectionManager selectionManager", "parametertype":"net.sourceforge.ganttproject.task.TaskSelectionManager", "parameterclass":575, "classid":137, "classname":"net.sourceforge.ganttproject.action.task.LinkTasksAction", "methodid":1450, "methodname":"net.sourceforge.ganttproject.action.task.LinkTasksAction.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public LinkTasksAction(TaskManager taskManager, TaskSelectionManager selectionManager, UIFacade uiFacade) {\r\n    super(taskManager, selectionManager, uiFacade);\r\n}"},
 {"id":318, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":137, "classname":"net.sourceforge.ganttproject.action.task.LinkTasksAction", "methodid":1450, "methodname":"net.sourceforge.ganttproject.action.task.LinkTasksAction.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public LinkTasksAction(TaskManager taskManager, TaskSelectionManager selectionManager, UIFacade uiFacade) {\r\n    super(taskManager, selectionManager, uiFacade);\r\n}"},
 {"id":319, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":138, "classname":"net.sourceforge.ganttproject.action.task.TaskActionBase", "methodid":1455, "methodname":"net.sourceforge.ganttproject.action.task.TaskActionBase.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"protected TaskActionBase(TaskManager taskManager, TaskSelectionManager selectionManager, UIFacade uiFacade) {\r\n    myTaskManager = taskManager;\r\n    selectionManager.addSelectionListener(this);\r\n    selectionChanged(selectionManager.getSelectedTasks());\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":320, "parametername":"TaskSelectionManager selectionManager", "parametertype":"net.sourceforge.ganttproject.task.TaskSelectionManager", "parameterclass":575, "classid":138, "classname":"net.sourceforge.ganttproject.action.task.TaskActionBase", "methodid":1455, "methodname":"net.sourceforge.ganttproject.action.task.TaskActionBase.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"protected TaskActionBase(TaskManager taskManager, TaskSelectionManager selectionManager, UIFacade uiFacade) {\r\n    myTaskManager = taskManager;\r\n    selectionManager.addSelectionListener(this);\r\n    selectionChanged(selectionManager.getSelectedTasks());\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":321, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":138, "classname":"net.sourceforge.ganttproject.action.task.TaskActionBase", "methodid":1455, "methodname":"net.sourceforge.ganttproject.action.task.TaskActionBase.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"protected TaskActionBase(TaskManager taskManager, TaskSelectionManager selectionManager, UIFacade uiFacade) {\r\n    myTaskManager = taskManager;\r\n    selectionManager.addSelectionListener(this);\r\n    selectionChanged(selectionManager.getSelectedTasks());\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":322, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":139, "classname":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction", "methodid":1464, "methodname":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public TaskPropertiesAction(IGanttProject project, TaskSelectionManager selectionManager, UIFacade uiFacade) {\r\n    super(project.getTaskManager(), selectionManager, uiFacade);\r\n    myProject = project;\r\n    mySelectionManager = selectionManager;\r\n    myHumanManager = ((HumanResourceManager) (project.getHumanResourceManager()));\r\n    myRoleManager = project.getRoleManager();\r\n}"},
 {"id":323, "parametername":"TaskSelectionManager selectionManager", "parametertype":"net.sourceforge.ganttproject.task.TaskSelectionManager", "parameterclass":575, "classid":139, "classname":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction", "methodid":1464, "methodname":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public TaskPropertiesAction(IGanttProject project, TaskSelectionManager selectionManager, UIFacade uiFacade) {\r\n    super(project.getTaskManager(), selectionManager, uiFacade);\r\n    myProject = project;\r\n    mySelectionManager = selectionManager;\r\n    myHumanManager = ((HumanResourceManager) (project.getHumanResourceManager()));\r\n    myRoleManager = project.getRoleManager();\r\n}"},
 {"id":324, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":139, "classname":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction", "methodid":1464, "methodname":"net.sourceforge.ganttproject.action.task.TaskPropertiesAction.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public TaskPropertiesAction(IGanttProject project, TaskSelectionManager selectionManager, UIFacade uiFacade) {\r\n    super(project.getTaskManager(), selectionManager, uiFacade);\r\n    myProject = project;\r\n    mySelectionManager = selectionManager;\r\n    myHumanManager = ((HumanResourceManager) (project.getHumanResourceManager()));\r\n    myRoleManager = project.getRoleManager();\r\n}"},
 {"id":325, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":140, "classname":"net.sourceforge.ganttproject.action.task.UnlinkTasksAction", "methodid":1470, "methodname":"net.sourceforge.ganttproject.action.task.UnlinkTasksAction.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public UnlinkTasksAction(TaskManager taskManager, TaskSelectionManager selectionManager, UIFacade uiFacade) {\r\n    super(taskManager, selectionManager, uiFacade);\r\n}"},
 {"id":326, "parametername":"TaskSelectionManager selectionManager", "parametertype":"net.sourceforge.ganttproject.task.TaskSelectionManager", "parameterclass":575, "classid":140, "classname":"net.sourceforge.ganttproject.action.task.UnlinkTasksAction", "methodid":1470, "methodname":"net.sourceforge.ganttproject.action.task.UnlinkTasksAction.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public UnlinkTasksAction(TaskManager taskManager, TaskSelectionManager selectionManager, UIFacade uiFacade) {\r\n    super(taskManager, selectionManager, uiFacade);\r\n}"},
 {"id":327, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":140, "classname":"net.sourceforge.ganttproject.action.task.UnlinkTasksAction", "methodid":1470, "methodname":"net.sourceforge.ganttproject.action.task.UnlinkTasksAction.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.TaskSelectionManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public UnlinkTasksAction(TaskManager taskManager, TaskSelectionManager selectionManager, UIFacade uiFacade) {\r\n    super(taskManager, selectionManager, uiFacade);\r\n}"},
 {"id":328, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":142, "classname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "methodid":1482, "methodname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.getActivitiesForward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "isreturn":0, "sourcecode":"protected List getActivitiesForward(Date startDate, TimeUnit timeUnit, long l) {\r\n    Date activityStart = timeUnit.adjustLeft(startDate);\r\n    Date activityEnd = activityStart;\r\n    for (; l > 0; l--) {\r\n        activityEnd = timeUnit.adjustRight(activityEnd);\r\n    }\r\n    return Collections.singletonList(new CalendarActivityImpl(activityStart, activityEnd, true));\r\n}"},
 {"id":329, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":142, "classname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "methodid":1481, "methodname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.getActivitiesBackward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "isreturn":0, "sourcecode":"protected List getActivitiesBackward(Date startDate, TimeUnit timeUnit, long unitCount) {\r\n    Date activityEnd = timeUnit.adjustLeft(startDate);\r\n    Date activityStart = activityEnd;\r\n    while ((unitCount--) > 0) {\r\n        activityStart = timeUnit.jumpLeft(activityStart);\r\n    } \r\n    return Collections.singletonList(new CalendarActivityImpl(activityStart, activityEnd, true));\r\n}"},
 {"id":330, "parametername":"GPCalendar.DayType type", "parametertype":"net.sourceforge.ganttproject.calendar.GPCalendar$DayType", "parameterclass":145, "classid":142, "classname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "methodid":1491, "methodname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.setWeekDayType(int,net.sourceforge.ganttproject.calendar.GPCalendar$DayType)", "isreturn":0, "sourcecode":"public void setWeekDayType(int day, GPCalendar.DayType type) {\r\n    if (type == (GPCalendar.DayType.WEEKEND)) {\r\n        throw new IllegalArgumentException(\"I am always working time calendar, I dont accept holidays!\");\r\n    }\r\n}"},
 {"id":331, "parametername":"GanttProject gp", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":142, "classname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "methodid":1490, "methodname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.setPublicHolidays(java.net.URL,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public void setPublicHolidays(URL calendar, GanttProject gp) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":332, "parametername":"TaskLength period", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":142, "classname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl", "methodid":1480, "methodname":"net.sourceforge.ganttproject.calendar.AlwaysWorkingTimeCalendarImpl.getActivities(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"public List getActivities(Date startingFrom, TaskLength period) {\r\n    return getActivities(startingFrom, period.getTimeUnit(), period.getLength());\r\n}"},
 {"id":333, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":146, "classname":"net.sourceforge.ganttproject.calendar.GPCalendar", "methodid":1502, "methodname":"net.sourceforge.ganttproject.calendar.GPCalendar.getActivities(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "isreturn":0, "sourcecode":"List getActivities(Date startDate, TimeUnit timeUnit, long l);"},
 {"id":334, "parametername":"GPCalendar.DayType type", "parametertype":"net.sourceforge.ganttproject.calendar.GPCalendar$DayType", "parameterclass":145, "classid":146, "classname":"net.sourceforge.ganttproject.calendar.GPCalendar", "methodid":1511, "methodname":"net.sourceforge.ganttproject.calendar.GPCalendar.setWeekDayType(int,net.sourceforge.ganttproject.calendar.GPCalendar$DayType)", "isreturn":0, "sourcecode":"void setWeekDayType(int day, GPCalendar.DayType type);"},
 {"id":335, "parametername":"GanttProject gp", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":146, "classname":"net.sourceforge.ganttproject.calendar.GPCalendar", "methodid":1510, "methodname":"net.sourceforge.ganttproject.calendar.GPCalendar.setPublicHolidays(java.net.URL,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public void setPublicHolidays(URL calendar, GanttProject gp);"},
 {"id":336, "parametername":"TaskLength shift", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":146, "classname":"net.sourceforge.ganttproject.calendar.GPCalendar", "methodid":1512, "methodname":"net.sourceforge.ganttproject.calendar.GPCalendar.shiftDate(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"/**\r\n * Adds <code>shift</code> period to <code>input</code> date taking into\r\n * account this calendar working/non-working time If input date corresponds\r\n * to friday midnight and this calendar if configured to have a weekend on\r\n * saturday and sunday then adding a shift of \"1 day\" will result to the\r\n * midnight of the next monday\r\n */\r\nDate shiftDate(Date input, TaskLength shift);"},
 {"id":337, "parametername":"TaskLength shift", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":148, "classname":"net.sourceforge.ganttproject.calendar.GPCalendarBase", "methodid":1522, "methodname":"net.sourceforge.ganttproject.calendar.GPCalendarBase.shiftDate(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"public Date shiftDate(Date input, TaskLength shift) {\r\n    List activities = getActivities(input, shift);\r\n    if (activities.isEmpty()) {\r\n        throw new RuntimeException((((\"FIXME: Failed to compute calendar activities in time period=\" + shift) + \" starting from \") + input));\r\n    }\r\n    Date result;\r\n    if ((shift.getValue()) >= 0) {\r\n        GPCalendarActivity lastActivity = ((GPCalendarActivity) (activities.get(((activities.size()) - 1))));\r\n        result = lastActivity.getEnd();\r\n    } else {\r\n        GPCalendarActivity firstActivity = ((GPCalendarActivity) (activities.get(0)));\r\n        result = firstActivity.getStart();\r\n    }\r\n    return result;\r\n}"},
 {"id":338, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":148, "classname":"net.sourceforge.ganttproject.calendar.GPCalendarBase", "methodid":1519, "methodname":"net.sourceforge.ganttproject.calendar.GPCalendarBase.getActivities(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "isreturn":0, "sourcecode":"public List getActivities(Date startDate, TimeUnit timeUnit, long unitCount) {\r\n    return unitCount > 0 ? getActivitiesForward(startDate, timeUnit, unitCount) : getActivitiesBackward(startDate, timeUnit, (-unitCount));\r\n}"},
 {"id":339, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":148, "classname":"net.sourceforge.ganttproject.calendar.GPCalendarBase", "methodid":1520, "methodname":"net.sourceforge.ganttproject.calendar.GPCalendarBase.getActivitiesBackward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "isreturn":0, "sourcecode":"protected abstract List getActivitiesBackward(Date startDate, TimeUnit timeUnit, long l);"},
 {"id":340, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":148, "classname":"net.sourceforge.ganttproject.calendar.GPCalendarBase", "methodid":1521, "methodname":"net.sourceforge.ganttproject.calendar.GPCalendarBase.getActivitiesForward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "isreturn":0, "sourcecode":"protected abstract List getActivitiesForward(Date startDate, TimeUnit timeUnit, long l);"},
 {"id":341, "parametername":"TaskLength period", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":148, "classname":"net.sourceforge.ganttproject.calendar.GPCalendarBase", "methodid":1518, "methodname":"net.sourceforge.ganttproject.calendar.GPCalendarBase.getActivities(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"public List getActivities(/* <GPCalendarActivity> */\r\nDate startingFrom, TaskLength period) {\r\n    return getActivities(startingFrom, period.getTimeUnit(), period.getLength());\r\n}"},
 {"id":342, "parametername":"GanttCalendar start", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":149, "classname":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "methodid":1524, "methodname":"net.sourceforge.ganttproject.calendar.GanttDaysOff.-init-(net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public GanttDaysOff(GanttCalendar start, GanttCalendar finish) {\r\n    myStart = new GanttCalendar(start.getYear(), start.getMonth(), start.getDate());\r\n    myFinish = finish;\r\n}"},
 {"id":343, "parametername":"GanttCalendar finish", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":149, "classname":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "methodid":1524, "methodname":"net.sourceforge.ganttproject.calendar.GanttDaysOff.-init-(net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public GanttDaysOff(GanttCalendar start, GanttCalendar finish) {\r\n    myStart = new GanttCalendar(start.getYear(), start.getMonth(), start.getDate());\r\n    myFinish = finish;\r\n}"},
 {"id":344, "parametername":"GanttDaysOff dayOffs", "parametertype":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "parameterclass":149, "classid":149, "classname":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "methodid":1526, "methodname":"net.sourceforge.ganttproject.calendar.GanttDaysOff.equals(net.sourceforge.ganttproject.calendar.GanttDaysOff)", "isreturn":0, "sourcecode":"public boolean equals(GanttDaysOff dayOffs) {\r\n    return (dayOffs.getStart().equals(myStart)) && (dayOffs.getFinish().equals(myFinish));\r\n}"},
 {"id":345, "parametername":"GanttCalendar date", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":149, "classname":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "methodid":1531, "methodname":"net.sourceforge.ganttproject.calendar.GanttDaysOff.isADayOff(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public boolean isADayOff(GanttCalendar date) {\r\n    return ((date.equals(myStart)) || (date.equals(myFinish))) || ((date.before(myFinish)) && (date.after(myStart)));\r\n}"},
 {"id":346, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":150, "classname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "methodid":1543, "methodname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.getStateChangeDate(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,boolean,boolean)", "isreturn":0, "sourcecode":"private Date getStateChangeDate(Date startDate, TimeUnit timeUnit, boolean changeToWeekend, boolean moveRightNotLeft) {\r\n    Date nextUnitStart = (moveRightNotLeft) ? timeUnit.adjustRight(startDate) : timeUnit.jumpLeft(startDate);\r\n    if (!(changeToWeekend ^ (isNonWorkingDay(nextUnitStart)))) {\r\n        return nextUnitStart;\r\n    } else {\r\n        return getStateChangeDate(nextUnitStart, timeUnit, changeToWeekend, moveRightNotLeft);\r\n    }\r\n}"},
 {"id":347, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":150, "classname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "methodid":1539, "methodname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.getActivitiesForward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "isreturn":0, "sourcecode":"protected List getActivitiesForward(Date startDate, TimeUnit timeUnit, long unitCount) {\r\n    List result = new ArrayList();\r\n    Date unitStart = timeUnit.adjustLeft(startDate);\r\n    while (unitCount > 0) {\r\n        boolean isWeekendState = isNonWorkingDay(unitStart);\r\n        if (isWeekendState) {\r\n            Date workingUnitStart = getStateChangeDate(unitStart, timeUnit, false, true);\r\n            result.add(new CalendarActivityImpl(unitStart, workingUnitStart, false));\r\n            unitStart = workingUnitStart;\r\n            continue;\r\n        }\r\n        Date nextUnitStart = timeUnit.adjustRight(unitStart);\r\n        result.add(new CalendarActivityImpl(unitStart, nextUnitStart, true));\r\n        unitStart = nextUnitStart;\r\n        unitCount--;\r\n    } \r\n    return result;\r\n}"},
 {"id":348, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":150, "classname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "methodid":1538, "methodname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.getActivitiesBackward(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,long)", "isreturn":0, "sourcecode":"protected List getActivitiesBackward(Date startDate, TimeUnit timeUnit, long unitCount) {\r\n    List result = new LinkedList();\r\n    Date unitStart = timeUnit.adjustLeft(startDate);\r\n    while (unitCount > 0) {\r\n        Date prevUnitStart = timeUnit.jumpLeft(unitStart);\r\n        boolean isWeekendState = isNonWorkingDay(prevUnitStart);\r\n        if (isWeekendState) {\r\n            Date lastWorkingUnitStart = getStateChangeDate(prevUnitStart, timeUnit, false, false);\r\n            Date firstWeekendUnitStart = timeUnit.adjustRight(lastWorkingUnitStart);\r\n            Date lastWeekendUnitEnd = unitStart;\r\n            result.add(0, new CalendarActivityImpl(firstWeekendUnitStart, lastWeekendUnitEnd, false));\r\n            unitStart = firstWeekendUnitStart;\r\n        } else {\r\n            result.add(0, new CalendarActivityImpl(prevUnitStart, unitStart, true));\r\n            unitCount--;\r\n            unitStart = prevUnitStart;\r\n        }\r\n    } \r\n    return result;\r\n}"},
 {"id":349, "parametername":"GPCalendar.DayType type", "parametertype":"net.sourceforge.ganttproject.calendar.GPCalendar$DayType", "parameterclass":145, "classid":150, "classname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "methodid":1551, "methodname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.setWeekDayType(int,net.sourceforge.ganttproject.calendar.GPCalendar$DayType)", "isreturn":0, "sourcecode":"public void setWeekDayType(int day, GPCalendar.DayType type) {\r\n    if (type != (myTypes[(day - 1)])) {\r\n        myWeekendDaysCount += (type == (GPCalendar.DayType.WEEKEND)) ? 1 : -1;\r\n    }\r\n    myTypes[(day - 1)] = type;\r\n}"},
 {"id":350, "parametername":"GanttProject gp", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":150, "classname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "methodid":1550, "methodname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.setPublicHolidays(java.net.URL,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public void setPublicHolidays(URL calendar, GanttProject gp) {\r\n    publicHolidaysArray.clear();\r\n    if (calendar != null) {\r\n        XMLCalendarOpen opener = new XMLCalendarOpen();\r\n        HolidayTagHandler dependencyHandler = new HolidayTagHandler(gp);\r\n        opener.addTagHandler(dependencyHandler);\r\n        opener.addParsingListener(dependencyHandler);\r\n        try {\r\n            opener.load(calendar.openStream());\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}"},
 {"id":351, "parametername":"TaskLength period", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":150, "classname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl", "methodid":1537, "methodname":"net.sourceforge.ganttproject.calendar.WeekendCalendarImpl.getActivities(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"public List getActivities(Date startingFrom, TaskLength period) {\r\n    return getActivities(startingFrom, period.getTimeUnit(), period.getLength());\r\n}"},
 {"id":352, "parametername":"TagHandler handler", "parametertype":"net.sourceforge.ganttproject.parser.TagHandler", "parameterclass":481, "classid":154, "classname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen", "methodid":1555, "methodname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen.addTagHandler(net.sourceforge.ganttproject.parser.TagHandler)", "isreturn":0, "sourcecode":"void addTagHandler(TagHandler handler) {\r\n    myTagHandlers.add(handler);\r\n}"},
 {"id":353, "parametername":"ParsingListener listener", "parametertype":"net.sourceforge.ganttproject.parser.ParsingListener", "parameterclass":477, "classid":154, "classname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen", "methodid":1554, "methodname":"net.sourceforge.ganttproject.calendar.XMLCalendarOpen.addParsingListener(net.sourceforge.ganttproject.parser.ParsingListener)", "isreturn":0, "sourcecode":"void addParsingListener(ParsingListener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":354, "parametername":"ChartModelBase model", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase", "parameterclass":170, "classid":155, "classname":"net.sourceforge.ganttproject.chart.BackgroundRendererImpl", "methodid":1573, "methodname":"net.sourceforge.ganttproject.chart.BackgroundRendererImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelBase)", "isreturn":0, "sourcecode":"public BackgroundRendererImpl(ChartModelBase model) {\r\n    super(model);\r\n}"},
 {"id":355, "parametername":"ChartModelBase model", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase", "parameterclass":170, "classid":156, "classname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl", "methodid":1575, "methodname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"public BottomUnitLineRendererImpl(ChartModelBase model, UIConfiguration projectConfig) {\r\n    this(model, new GraphicPrimitiveContainer(), projectConfig);\r\n}"},
 {"id":356, "parametername":"UIConfiguration projectConfig", "parametertype":"net.sourceforge.ganttproject.gui.UIConfiguration", "parameterclass":335, "classid":156, "classname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl", "methodid":1575, "methodname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"public BottomUnitLineRendererImpl(ChartModelBase model, UIConfiguration projectConfig) {\r\n    this(model, new GraphicPrimitiveContainer(), projectConfig);\r\n}"},
 {"id":357, "parametername":"ChartModelBase model", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase", "parameterclass":170, "classid":156, "classname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl", "methodid":1576, "methodname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"public BottomUnitLineRendererImpl(ChartModelBase model, GraphicPrimitiveContainer primitiveContainer, UIConfiguration projectConfig) {\r\n    super(model);\r\n    myPrimitiveContainer = primitiveContainer;\r\n    myRedlineOption = projectConfig.getRedlineOption();\r\n    myProjectDatesOption = projectConfig.getProjectBoundariesOption();\r\n}"},
 {"id":358, "parametername":"GraphicPrimitiveContainer primitiveContainer", "parametertype":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "parameterclass":192, "classid":156, "classname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl", "methodid":1576, "methodname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"public BottomUnitLineRendererImpl(ChartModelBase model, GraphicPrimitiveContainer primitiveContainer, UIConfiguration projectConfig) {\r\n    super(model);\r\n    myPrimitiveContainer = primitiveContainer;\r\n    myRedlineOption = projectConfig.getRedlineOption();\r\n    myProjectDatesOption = projectConfig.getProjectBoundariesOption();\r\n}"},
 {"id":359, "parametername":"UIConfiguration projectConfig", "parametertype":"net.sourceforge.ganttproject.gui.UIConfiguration", "parameterclass":335, "classid":156, "classname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl", "methodid":1576, "methodname":"net.sourceforge.ganttproject.chart.BottomUnitLineRendererImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"public BottomUnitLineRendererImpl(ChartModelBase model, GraphicPrimitiveContainer primitiveContainer, UIConfiguration projectConfig) {\r\n    super(model);\r\n    myPrimitiveContainer = primitiveContainer;\r\n    myRedlineOption = projectConfig.getRedlineOption();\r\n    myProjectDatesOption = projectConfig.getProjectBoundariesOption();\r\n}"},
 {"id":360, "parametername":"TimeUnitStack timeUnitStack", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitStack", "parameterclass":639, "classid":158, "classname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl", "methodid":1585, "methodname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl.-init-(net.sourceforge.ganttproject.time.TimeUnitStack)", "isreturn":0, "sourcecode":"CachingOffsetCalculatorImpl(TimeUnitStack timeUnitStack) {\r\n    myCalculator = new OffsetCalculatorImpl(timeUnitStack);\r\n}"},
 {"id":361, "parametername":"TimeUnit mainUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":157, "classname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl$UnitPair", "methodid":1589, "methodname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl$UnitPair.-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"private UnitPair(TimeUnit mainUnit, TimeUnit offsetUnit) {\r\n    myMainUnit = mainUnit;\r\n    myOffsetUnit = offsetUnit;\r\n}"},
 {"id":362, "parametername":"TimeUnit offsetUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":157, "classname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl$UnitPair", "methodid":1589, "methodname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl$UnitPair.-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"private UnitPair(TimeUnit mainUnit, TimeUnit offsetUnit) {\r\n    myMainUnit = mainUnit;\r\n    myOffsetUnit = offsetUnit;\r\n}"},
 {"id":363, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":158, "classname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl", "methodid":1587, "methodname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl.calculateOffsets(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"ChartModelBase.Offset[] calculateOffsets(TimeFrame timeFrame, TimeUnit frameBottomUnit, Date bottomUnitStartDate, TimeUnit offsetUnit, int frameBottomUnitWidth) {\r\n    ChartModelBase.Offset[] result = null;\r\n    CachingOffsetCalculatorImpl.UnitPair unitPair = new CachingOffsetCalculatorImpl.UnitPair(frameBottomUnit, offsetUnit);\r\n    LinkedHashMap startDate_Offsets = ((LinkedHashMap) (myUnitPair_StartDate.get(unitPair)));\r\n    if (startDate_Offsets == null) {\r\n        startDate_Offsets = new LinkedHashMap();\r\n        myUnitPair_StartDate.put(unitPair, startDate_Offsets);\r\n    }\r\n    result = ((ChartModelBase.Offset[]) (startDate_Offsets.get(bottomUnitStartDate)));\r\n    if (result == null) {\r\n        result = myCalculator.calculateOffsets(timeFrame, frameBottomUnit, bottomUnitStartDate, offsetUnit, frameBottomUnitWidth);\r\n        startDate_Offsets.put(bottomUnitStartDate, result);\r\n        if ((startDate_Offsets.size()) > (CachingOffsetCalculatorImpl.MAX_CACHE_SIZE)) {\r\n            Iterator iter = startDate_Offsets.entrySet().iterator();\r\n            iter.next();\r\n            iter.remove();\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":364, "parametername":"TimeUnit frameBottomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":158, "classname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl", "methodid":1587, "methodname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl.calculateOffsets(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"ChartModelBase.Offset[] calculateOffsets(TimeFrame timeFrame, TimeUnit frameBottomUnit, Date bottomUnitStartDate, TimeUnit offsetUnit, int frameBottomUnitWidth) {\r\n    ChartModelBase.Offset[] result = null;\r\n    CachingOffsetCalculatorImpl.UnitPair unitPair = new CachingOffsetCalculatorImpl.UnitPair(frameBottomUnit, offsetUnit);\r\n    LinkedHashMap startDate_Offsets = ((LinkedHashMap) (myUnitPair_StartDate.get(unitPair)));\r\n    if (startDate_Offsets == null) {\r\n        startDate_Offsets = new LinkedHashMap();\r\n        myUnitPair_StartDate.put(unitPair, startDate_Offsets);\r\n    }\r\n    result = ((ChartModelBase.Offset[]) (startDate_Offsets.get(bottomUnitStartDate)));\r\n    if (result == null) {\r\n        result = myCalculator.calculateOffsets(timeFrame, frameBottomUnit, bottomUnitStartDate, offsetUnit, frameBottomUnitWidth);\r\n        startDate_Offsets.put(bottomUnitStartDate, result);\r\n        if ((startDate_Offsets.size()) > (CachingOffsetCalculatorImpl.MAX_CACHE_SIZE)) {\r\n            Iterator iter = startDate_Offsets.entrySet().iterator();\r\n            iter.next();\r\n            iter.remove();\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":365, "parametername":"TimeUnit offsetUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":158, "classname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl", "methodid":1587, "methodname":"net.sourceforge.ganttproject.chart.CachingOffsetCalculatorImpl.calculateOffsets(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"ChartModelBase.Offset[] calculateOffsets(TimeFrame timeFrame, TimeUnit frameBottomUnit, Date bottomUnitStartDate, TimeUnit offsetUnit, int frameBottomUnitWidth) {\r\n    ChartModelBase.Offset[] result = null;\r\n    CachingOffsetCalculatorImpl.UnitPair unitPair = new CachingOffsetCalculatorImpl.UnitPair(frameBottomUnit, offsetUnit);\r\n    LinkedHashMap startDate_Offsets = ((LinkedHashMap) (myUnitPair_StartDate.get(unitPair)));\r\n    if (startDate_Offsets == null) {\r\n        startDate_Offsets = new LinkedHashMap();\r\n        myUnitPair_StartDate.put(unitPair, startDate_Offsets);\r\n    }\r\n    result = ((ChartModelBase.Offset[]) (startDate_Offsets.get(bottomUnitStartDate)));\r\n    if (result == null) {\r\n        result = myCalculator.calculateOffsets(timeFrame, frameBottomUnit, bottomUnitStartDate, offsetUnit, frameBottomUnitWidth);\r\n        startDate_Offsets.put(bottomUnitStartDate, result);\r\n        if ((startDate_Offsets.size()) > (CachingOffsetCalculatorImpl.MAX_CACHE_SIZE)) {\r\n            Iterator iter = startDate_Offsets.entrySet().iterator();\r\n            iter.next();\r\n            iter.remove();\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":366, "parametername":"GanttExportSettings settings", "parametertype":"net.sourceforge.ganttproject.GanttExportSettings", "parameterclass":27, "classid":159, "classname":"net.sourceforge.ganttproject.chart.Chart", "methodid":1600, "methodname":"net.sourceforge.ganttproject.chart.Chart.getRenderedImage(net.sourceforge.ganttproject.GanttExportSettings)", "isreturn":0, "sourcecode":"public RenderedImage getRenderedImage(GanttExportSettings settings);"},
 {"id":367, "parametername":"GanttExportSettings settings", "parametertype":"net.sourceforge.ganttproject.GanttExportSettings", "parameterclass":27, "classid":159, "classname":"net.sourceforge.ganttproject.chart.Chart", "methodid":1595, "methodname":"net.sourceforge.ganttproject.chart.Chart.getChart(net.sourceforge.ganttproject.GanttExportSettings)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @deprecated Use getRenderedImage\r\n */\r\npublic BufferedImage getChart(GanttExportSettings settings);"},
 {"id":368, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":159, "classname":"net.sourceforge.ganttproject.chart.Chart", "methodid":1606, "methodname":"net.sourceforge.ganttproject.chart.Chart.setTaskManager(net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"public void setTaskManager(TaskManager taskManager);"},
 {"id":369, "parametername":"ChartSelection selection", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelection", "parameterclass":177, "classid":159, "classname":"net.sourceforge.ganttproject.chart.Chart", "methodid":1593, "methodname":"net.sourceforge.ganttproject.chart.Chart.canPaste(net.sourceforge.ganttproject.chart.ChartSelection)", "isreturn":0, "sourcecode":"public IStatus canPaste(ChartSelection selection);"},
 {"id":370, "parametername":"ChartSelection selection", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelection", "parameterclass":177, "classid":159, "classname":"net.sourceforge.ganttproject.chart.Chart", "methodid":1603, "methodname":"net.sourceforge.ganttproject.chart.Chart.paste(net.sourceforge.ganttproject.chart.ChartSelection)", "isreturn":0, "sourcecode":"public void paste(ChartSelection selection);"},
 {"id":371, "parametername":"ChartSelectionListener listener", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelectionListener", "parameterclass":178, "classid":159, "classname":"net.sourceforge.ganttproject.chart.Chart", "methodid":1592, "methodname":"net.sourceforge.ganttproject.chart.Chart.addSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "isreturn":0, "sourcecode":"public void addSelectionListener(ChartSelectionListener listener);"},
 {"id":372, "parametername":"ChartSelectionListener listener", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelectionListener", "parameterclass":178, "classid":159, "classname":"net.sourceforge.ganttproject.chart.Chart", "methodid":1604, "methodname":"net.sourceforge.ganttproject.chart.Chart.removeSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "isreturn":0, "sourcecode":"public void removeSelectionListener(ChartSelectionListener listener);"},
 {"id":373, "parametername":"ChartModelBase chartModel", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase", "parameterclass":170, "classid":160, "classname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "methodid":1607, "methodname":"net.sourceforge.ganttproject.chart.ChartGridImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"public ChartGridImpl(ChartModelBase chartModel, final UIConfiguration projectConfig) {\r\n    super(chartModel);\r\n    myRedlineOption = projectConfig.getRedlineOption();\r\n    myProjectDatesOption = projectConfig.getProjectBoundariesOption();\r\n    myOptions = new ChartOptionGroup(\"ganttChartGridDetails\", new GPOption[]{ myRedlineOption, myProjectDatesOption }, chartModel.getOptionEventDispatcher());\r\n}"},
 {"id":374, "parametername":"final UIConfiguration projectConfig", "parametertype":"net.sourceforge.ganttproject.gui.UIConfiguration", "parameterclass":335, "classid":160, "classname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "methodid":1607, "methodname":"net.sourceforge.ganttproject.chart.ChartGridImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"public ChartGridImpl(ChartModelBase chartModel, final UIConfiguration projectConfig) {\r\n    super(chartModel);\r\n    myRedlineOption = projectConfig.getRedlineOption();\r\n    myProjectDatesOption = projectConfig.getProjectBoundariesOption();\r\n    myOptions = new ChartOptionGroup(\"ganttChartGridDetails\", new GPOption[]{ myRedlineOption, myProjectDatesOption }, chartModel.getOptionEventDispatcher());\r\n}"},
 {"id":375, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":160, "classname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "methodid":1616, "methodname":"net.sourceforge.ganttproject.chart.ChartGridImpl.startTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"public void startTimeFrame(TimeFrame timeFrame) {\r\n    myCurrentFrame = timeFrame;\r\n}"},
 {"id":376, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":160, "classname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "methodid":1611, "methodname":"net.sourceforge.ganttproject.chart.ChartGridImpl.endTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"public void endTimeFrame(TimeFrame timeFrame) {\r\n    myCurrentFrame = null;\r\n}"},
 {"id":377, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":160, "classname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "methodid":1617, "methodname":"net.sourceforge.ganttproject.chart.ChartGridImpl.startUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public void startUnitLine(TimeUnit timeUnit) {\r\n    if (timeUnit == (myCurrentFrame.getBottomUnit())) {\r\n        areUnitsAccepted = true;\r\n        myCurrentUnit = timeUnit;\r\n    }\r\n}"},
 {"id":378, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":160, "classname":"net.sourceforge.ganttproject.chart.ChartGridImpl", "methodid":1612, "methodname":"net.sourceforge.ganttproject.chart.ChartGridImpl.endUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public void endUnitLine(TimeUnit timeUnit) {\r\n    areUnitsAccepted = false;\r\n    myCurrentUnit = null;\r\n}"},
 {"id":379, "parametername":"ChartModelBase model", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase", "parameterclass":170, "classid":162, "classname":"net.sourceforge.ganttproject.chart.ChartHeaderImpl", "methodid":1618, "methodname":"net.sourceforge.ganttproject.chart.ChartHeaderImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"ChartHeaderImpl(ChartModelBase model, final UIConfiguration projectConfig) {\r\n    super(model);\r\n    myRedlineOption = projectConfig.getRedlineOption();\r\n    myProjectDatesOption = projectConfig.getProjectBoundariesOption();\r\n    myOptions = new ChartOptionGroup(\"ganttChartGridDetails\", new GPOption[]{ myRedlineOption, myProjectDatesOption }, model.getOptionEventDispatcher());\r\n    myPrimitiveContainer = new GraphicPrimitiveContainer();\r\n}"},
 {"id":380, "parametername":"final UIConfiguration projectConfig", "parametertype":"net.sourceforge.ganttproject.gui.UIConfiguration", "parameterclass":335, "classid":162, "classname":"net.sourceforge.ganttproject.chart.ChartHeaderImpl", "methodid":1618, "methodname":"net.sourceforge.ganttproject.chart.ChartHeaderImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"ChartHeaderImpl(ChartModelBase model, final UIConfiguration projectConfig) {\r\n    super(model);\r\n    myRedlineOption = projectConfig.getRedlineOption();\r\n    myProjectDatesOption = projectConfig.getProjectBoundariesOption();\r\n    myOptions = new ChartOptionGroup(\"ganttChartGridDetails\", new GPOption[]{ myRedlineOption, myProjectDatesOption }, model.getOptionEventDispatcher());\r\n    myPrimitiveContainer = new GraphicPrimitiveContainer();\r\n}"},
 {"id":381, "parametername":"TimeUnit topTimeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":163, "classname":"net.sourceforge.ganttproject.chart.ChartModel", "methodid":1641, "methodname":"net.sourceforge.ganttproject.chart.ChartModel.setTopTimeUnit(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"void setTopTimeUnit(TimeUnit topTimeUnit);"},
 {"id":382, "parametername":"TimeUnit bottomTimeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":163, "classname":"net.sourceforge.ganttproject.chart.ChartModel", "methodid":1635, "methodname":"net.sourceforge.ganttproject.chart.ChartModel.setBottomTimeUnit(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"void setBottomTimeUnit(TimeUnit bottomTimeUnit);"},
 {"id":383, "parametername":"TaskContainmentHierarchyFacade taskContainment", "parametertype":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "parameterclass":552, "classid":163, "classname":"net.sourceforge.ganttproject.chart.ChartModel", "methodid":1640, "methodname":"net.sourceforge.ganttproject.chart.ChartModel.setTaskContainment(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "isreturn":0, "sourcecode":"void setTaskContainment(TaskContainmentHierarchyFacade taskContainment);"},
 {"id":384, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":163, "classname":"net.sourceforge.ganttproject.chart.ChartModel", "methodid":1630, "methodname":"net.sourceforge.ganttproject.chart.ChartModel.getBoundingRectangle(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"Rectangle getBoundingRectangle(Task task);"},
 {"id":385, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1644, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"public ChartModelBase(TaskManager taskManager, TimeUnitStack timeUnitStack, UIConfiguration projectConfig) {\r\n    myTaskManager = taskManager;\r\n    myProjectConfig = projectConfig;\r\n    myChartUIConfiguration = new ChartUIConfiguration(projectConfig);\r\n    myPainter = new StyledPainterImpl(myChartUIConfiguration);\r\n    myTimeUnitStack = timeUnitStack;\r\n    myChartHeader = new ChartHeaderImpl(this, projectConfig);\r\n    myChartGrid = new ChartGridImpl(this, projectConfig);\r\n    // myBottomUnitLineRenderer = new BottomUnitLineRendererImpl(this);\r\n    myBackgroundRenderer = new BackgroundRendererImpl(this);\r\n    myTimeUnitVisitors.add(myChartGrid);\r\n    // myTimeUnitVisitors.add(myBottomUnitLineRenderer);\r\n    myCachingOffsetCalculator = new CachingOffsetCalculatorImpl(myTimeUnitStack);\r\n}"},
 {"id":386, "parametername":"TimeUnitStack timeUnitStack", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitStack", "parameterclass":639, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1644, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"public ChartModelBase(TaskManager taskManager, TimeUnitStack timeUnitStack, UIConfiguration projectConfig) {\r\n    myTaskManager = taskManager;\r\n    myProjectConfig = projectConfig;\r\n    myChartUIConfiguration = new ChartUIConfiguration(projectConfig);\r\n    myPainter = new StyledPainterImpl(myChartUIConfiguration);\r\n    myTimeUnitStack = timeUnitStack;\r\n    myChartHeader = new ChartHeaderImpl(this, projectConfig);\r\n    myChartGrid = new ChartGridImpl(this, projectConfig);\r\n    // myBottomUnitLineRenderer = new BottomUnitLineRendererImpl(this);\r\n    myBackgroundRenderer = new BackgroundRendererImpl(this);\r\n    myTimeUnitVisitors.add(myChartGrid);\r\n    // myTimeUnitVisitors.add(myBottomUnitLineRenderer);\r\n    myCachingOffsetCalculator = new CachingOffsetCalculatorImpl(myTimeUnitStack);\r\n}"},
 {"id":387, "parametername":"UIConfiguration projectConfig", "parametertype":"net.sourceforge.ganttproject.gui.UIConfiguration", "parameterclass":335, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1644, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"public ChartModelBase(TaskManager taskManager, TimeUnitStack timeUnitStack, UIConfiguration projectConfig) {\r\n    myTaskManager = taskManager;\r\n    myProjectConfig = projectConfig;\r\n    myChartUIConfiguration = new ChartUIConfiguration(projectConfig);\r\n    myPainter = new StyledPainterImpl(myChartUIConfiguration);\r\n    myTimeUnitStack = timeUnitStack;\r\n    myChartHeader = new ChartHeaderImpl(this, projectConfig);\r\n    myChartGrid = new ChartGridImpl(this, projectConfig);\r\n    // myBottomUnitLineRenderer = new BottomUnitLineRendererImpl(this);\r\n    myBackgroundRenderer = new BackgroundRendererImpl(this);\r\n    myTimeUnitVisitors.add(myChartGrid);\r\n    // myTimeUnitVisitors.add(myBottomUnitLineRenderer);\r\n    myCachingOffsetCalculator = new CachingOffsetCalculatorImpl(myTimeUnitStack);\r\n}"},
 {"id":388, "parametername":"ChartModelBase.Offset startOffset", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "parameterclass":164, "classid":166, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase$Range", "methodid":1717, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase$Range.-init-(net.sourceforge.ganttproject.chart.ChartModelBase$Offset,net.sourceforge.ganttproject.chart.ChartModelBase$Offset)", "isreturn":0, "sourcecode":"public Range(ChartModelBase.Offset startOffset, ChartModelBase.Offset endOffset) {\r\n    start = startOffset;\r\n    end = endOffset;\r\n}"},
 {"id":389, "parametername":"ChartModelBase.Offset endOffset", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "parameterclass":164, "classid":166, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase$Range", "methodid":1717, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase$Range.-init-(net.sourceforge.ganttproject.chart.ChartModelBase$Offset,net.sourceforge.ganttproject.chart.ChartModelBase$Offset)", "isreturn":0, "sourcecode":"public Range(ChartModelBase.Offset startOffset, ChartModelBase.Offset endOffset) {\r\n    start = startOffset;\r\n    end = endOffset;\r\n}"},
 {"id":390, "parametername":"TimeUnit offsetUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":164, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "methodid":1706, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset.-init-(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,java.util.Date,int,net.sourceforge.ganttproject.calendar.GPCalendar$DayType)", "isreturn":0, "sourcecode":"Offset(TimeUnit offsetUnit, Date offsetAnchor, Date offsetEnd, int offsetPixels, GPCalendar.DayType dayType) {\r\n    myOffsetAnchor = offsetAnchor;\r\n    myOffsetEnd = offsetEnd;\r\n    myOffsetPixels = offsetPixels;\r\n    myOffsetUnit = offsetUnit;\r\n    myDayType = dayType;\r\n}"},
 {"id":391, "parametername":"GPCalendar.DayType dayType", "parametertype":"net.sourceforge.ganttproject.calendar.GPCalendar$DayType", "parameterclass":145, "classid":164, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "methodid":1706, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset.-init-(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,java.util.Date,int,net.sourceforge.ganttproject.calendar.GPCalendar$DayType)", "isreturn":0, "sourcecode":"Offset(TimeUnit offsetUnit, Date offsetAnchor, Date offsetEnd, int offsetPixels, GPCalendar.DayType dayType) {\r\n    myOffsetAnchor = offsetAnchor;\r\n    myOffsetEnd = offsetEnd;\r\n    myOffsetPixels = offsetPixels;\r\n    myOffsetUnit = offsetUnit;\r\n    myDayType = dayType;\r\n}"},
 {"id":392, "parametername":"/* <Offset> */\r\nChartModelBase.Offset startOffset", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "parameterclass":164, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1676, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.getDefaultUnitOffsetsInRange(net.sourceforge.ganttproject.chart.ChartModelBase$Offset,net.sourceforge.ganttproject.chart.ChartModelBase$Offset)", "isreturn":0, "sourcecode":"List getDefaultUnitOffsetsInRange(/* <Offset> */\r\nChartModelBase.Offset startOffset, ChartModelBase.Offset endOffset) {\r\n    ChartModelBase.Range range = new ChartModelBase.Range(startOffset, endOffset);\r\n    /* <Offset> */\r\n    List result = ((List) (myRange2DefaultUnitOffsets.get(range)));\r\n    if (result != null) {\r\n        return result;\r\n    }\r\n    /* <Offset> */\r\n    ArrayList tmpOffsets = /* <Offset> */\r\n    new ArrayList();\r\n    result = /* <Offset> */\r\n    new ArrayList();\r\n    int initialEnd = (startOffset == null) ? 0 : startOffset.getOffsetPixels();\r\n    Date startDate = (startOffset == null) ? myStartDate : startOffset.getOffsetEnd();\r\n    RegularFrameOffsetBuilder offsetBuilder = new RegularFrameOffsetBuilder(getTimeUnitStack(), myTaskManager.getCalendar(), endOffset.getOffsetUnit(), getTimeUnitStack().getDefaultTimeUnit(), startDate, getBottomUnitWidth(), endOffset.getOffsetPixels(), 1.0F) {\r\n        protected float getOffsetStep(TimeFrame timeFrame) {\r\n            int offsetUnitCount = timeFrame.getUnitCount(getTimeUnitStack().getDefaultTimeUnit());\r\n            return 1.0F / offsetUnitCount;\r\n        }\r\n    };\r\n    offsetBuilder.constructOffsets(tmpOffsets, result, initialEnd);\r\n    myRange2DefaultUnitOffsets.put(range, result);\r\n    // System.err.println(\"For start offstet[\"+startOffset+\"] end offset[\"+endOffset+\"]\");\r\n    // for (Offset t : result) {\r\n    // System.err.println(t);\r\n    // }\r\n    return result;\r\n}"},
 {"id":393, "parametername":"ChartModelBase.Offset endOffset", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "parameterclass":164, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1676, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.getDefaultUnitOffsetsInRange(net.sourceforge.ganttproject.chart.ChartModelBase$Offset,net.sourceforge.ganttproject.chart.ChartModelBase$Offset)", "isreturn":0, "sourcecode":"List getDefaultUnitOffsetsInRange(/* <Offset> */\r\nChartModelBase.Offset startOffset, ChartModelBase.Offset endOffset) {\r\n    ChartModelBase.Range range = new ChartModelBase.Range(startOffset, endOffset);\r\n    /* <Offset> */\r\n    List result = ((List) (myRange2DefaultUnitOffsets.get(range)));\r\n    if (result != null) {\r\n        return result;\r\n    }\r\n    /* <Offset> */\r\n    ArrayList tmpOffsets = /* <Offset> */\r\n    new ArrayList();\r\n    result = /* <Offset> */\r\n    new ArrayList();\r\n    int initialEnd = (startOffset == null) ? 0 : startOffset.getOffsetPixels();\r\n    Date startDate = (startOffset == null) ? myStartDate : startOffset.getOffsetEnd();\r\n    RegularFrameOffsetBuilder offsetBuilder = new RegularFrameOffsetBuilder(getTimeUnitStack(), myTaskManager.getCalendar(), endOffset.getOffsetUnit(), getTimeUnitStack().getDefaultTimeUnit(), startDate, getBottomUnitWidth(), endOffset.getOffsetPixels(), 1.0F) {\r\n        protected float getOffsetStep(TimeFrame timeFrame) {\r\n            int offsetUnitCount = timeFrame.getUnitCount(getTimeUnitStack().getDefaultTimeUnit());\r\n            return 1.0F / offsetUnitCount;\r\n        }\r\n    };\r\n    offsetBuilder.constructOffsets(tmpOffsets, result, initialEnd);\r\n    myRange2DefaultUnitOffsets.put(range, result);\r\n    // System.err.println(\"For start offstet[\"+startOffset+\"] end offset[\"+endOffset+\"]\");\r\n    // for (Offset t : result) {\r\n    // System.err.println(t);\r\n    // }\r\n    return result;\r\n}"},
 {"id":394, "parametername":"Painter p", "parametertype":"net.sourceforge.ganttproject.chart.Painter", "parameterclass":196, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1691, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.paintMainArea(java.awt.Graphics,net.sourceforge.ganttproject.chart.Painter)", "isreturn":0, "sourcecode":"protected void paintMainArea(Graphics mainArea, Painter p) {\r\n    myChartGrid.getPrimitiveContainer().paint(p, mainArea);\r\n}"},
 {"id":395, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1660, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.fireFrameStarted(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"void fireFrameStarted(TimeFrame timeFrame) {\r\n    for (int i = 0; i < (myTimeUnitVisitors.size()); i++) {\r\n        TimeUnitVisitor nextVisitor = ((TimeUnitVisitor) (myTimeUnitVisitors.get(i)));\r\n        if (!(nextVisitor.isEnabled())) {\r\n            continue;\r\n        }\r\n        nextVisitor.startTimeFrame(timeFrame);\r\n    }\r\n}"},
 {"id":396, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1659, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.fireFrameFinished(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"void fireFrameFinished(TimeFrame timeFrame) {\r\n    for (int i = 0; i < (myTimeUnitVisitors.size()); i++) {\r\n        TimeUnitVisitor nextVisitor = ((TimeUnitVisitor) (myTimeUnitVisitors.get(i)));\r\n        if (!(nextVisitor.isEnabled())) {\r\n            continue;\r\n        }\r\n        nextVisitor.endTimeFrame(timeFrame);\r\n    }\r\n}"},
 {"id":397, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1663, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.fireUnitLineStarted(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"void fireUnitLineStarted(TimeUnit timeUnit) {\r\n    for (int i = 0; i < (myTimeUnitVisitors.size()); i++) {\r\n        TimeUnitVisitor nextVisitor = ((TimeUnitVisitor) (myTimeUnitVisitors.get(i)));\r\n        if (!(nextVisitor.isEnabled())) {\r\n            continue;\r\n        }\r\n        nextVisitor.startUnitLine(timeUnit);\r\n    }\r\n}"},
 {"id":398, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1662, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.fireUnitLineFinished(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"void fireUnitLineFinished(TimeUnit timeUnit) {\r\n    for (int i = 0; i < (myTimeUnitVisitors.size()); i++) {\r\n        TimeUnitVisitor nextVisitor = ((TimeUnitVisitor) (myTimeUnitVisitors.get(i)));\r\n        if (!(nextVisitor.isEnabled())) {\r\n            continue;\r\n        }\r\n        nextVisitor.endUnitLine(timeUnit);\r\n    }\r\n}"},
 {"id":399, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1704, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.visitTimeUnits(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"void visitTimeUnits(TimeFrame timeFrame, TimeUnit timeUnit) {\r\n    for (int j = 0; j < (timeFrame.getUnitCount(timeUnit)); j++) {\r\n        for (int i = 0; i < (myTimeUnitVisitors.size()); i++) {\r\n            TimeUnitVisitor nextVisitor = ((TimeUnitVisitor) (myTimeUnitVisitors.get(i)));\r\n            if (!(nextVisitor.isEnabled())) {\r\n                continue;\r\n            }\r\n            nextVisitor.nextTimeUnit(j);\r\n        }\r\n    }\r\n}"},
 {"id":400, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1704, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.visitTimeUnits(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"void visitTimeUnits(TimeFrame timeFrame, TimeUnit timeUnit) {\r\n    for (int j = 0; j < (timeFrame.getUnitCount(timeUnit)); j++) {\r\n        for (int i = 0; i < (myTimeUnitVisitors.size()); i++) {\r\n            TimeUnitVisitor nextVisitor = ((TimeUnitVisitor) (myTimeUnitVisitors.get(i)));\r\n            if (!(nextVisitor.isEnabled())) {\r\n                continue;\r\n            }\r\n            nextVisitor.nextTimeUnit(j);\r\n        }\r\n    }\r\n}"},
 {"id":401, "parametername":"TimeUnit topTimeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1700, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.setTopTimeUnit(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public void setTopTimeUnit(TimeUnit topTimeUnit) {\r\n    setTopUnit(topTimeUnit);\r\n    myTimeFrames = null;\r\n}"},
 {"id":402, "parametername":"TimeUnit bottomTimeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1694, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.setBottomTimeUnit(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public void setBottomTimeUnit(TimeUnit bottomTimeUnit) {\r\n    myBottomUnit = bottomTimeUnit;\r\n    myTimeFrames = null;\r\n}"},
 {"id":403, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1673, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.getDayType(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"public GPCalendar.DayType getDayType(TimeFrame timeFrame, TimeUnit timeUnit, int unitIndex) {\r\n    Date startDate = timeFrame.getUnitStart(timeUnit, unitIndex);\r\n    Date endDate = timeFrame.getUnitFinish(timeUnit, unitIndex);\r\n    Calendar c = CalendarFactory.newCalendar();\r\n    c.setTime(startDate);\r\n    int startDayOfWeek = c.get(Calendar.DAY_OF_WEEK);\r\n    c.setTime(endDate);\r\n    int endDayOfWeek = c.get(Calendar.DAY_OF_WEEK);\r\n    // return startDayOfWeek==Calendar.SATURDAY ||\r\n    // startDayOfWeek==Calendar.SUNDAY;\r\n    // return getTaskManager().getCalendar().getWeekDayType(startDayOfWeek);\r\n    return getTaskManager().getCalendar().getDayTypeDate(startDate);\r\n}"},
 {"id":404, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1673, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.getDayType(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"public GPCalendar.DayType getDayType(TimeFrame timeFrame, TimeUnit timeUnit, int unitIndex) {\r\n    Date startDate = timeFrame.getUnitStart(timeUnit, unitIndex);\r\n    Date endDate = timeFrame.getUnitFinish(timeUnit, unitIndex);\r\n    Calendar c = CalendarFactory.newCalendar();\r\n    c.setTime(startDate);\r\n    int startDayOfWeek = c.get(Calendar.DAY_OF_WEEK);\r\n    c.setTime(endDate);\r\n    int endDayOfWeek = c.get(Calendar.DAY_OF_WEEK);\r\n    // return startDayOfWeek==Calendar.SATURDAY ||\r\n    // startDayOfWeek==Calendar.SUNDAY;\r\n    // return getTaskManager().getCalendar().getWeekDayType(startDayOfWeek);\r\n    return getTaskManager().getCalendar().getDayTypeDate(startDate);\r\n}"},
 {"id":405, "parametername":"ChartViewState.ViewStateEvent e", "parametertype":"net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent", "parameterclass":181, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1703, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.startDateChanged(net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent)", "isreturn":0, "sourcecode":"public void startDateChanged(ChartViewState.ViewStateEvent e) {\r\n    setStartDate(((Date) (e.getNewValue())));\r\n}"},
 {"id":406, "parametername":"ZoomEvent e", "parametertype":"net.sourceforge.ganttproject.gui.zoom.ZoomEvent", "parameterclass":422, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1705, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "isreturn":0, "sourcecode":"public void zoomChanged(ZoomEvent e) {\r\n}"},
 {"id":407, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":169, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase$TimeFrameWidthFunction", "methodid":1725, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase$TimeFrameWidthFunction.getTimeFrameWidth(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"int getTimeFrameWidth(TimeFrame timeFrame);"},
 {"id":408, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1674, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.getDayTypeAlternance(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"protected DayTypeAlternance[] getDayTypeAlternance(TimeFrame timeFrame, TimeUnit timeUnit, int unitIndex) {\r\n    class AlternanceFactory {\r\n        private Calendar c = CalendarFactory.newCalendar();\r\n\r\n        DayTypeAlternance createAlternance(TimeUnit timeUnit, Date startDate, Date endDate) {\r\n            c.setTime(startDate);\r\n            int startDayOfWeek = c.get(Calendar.DAY_OF_WEEK);\r\n            c.setTime(endDate);\r\n            int endDayOfWeek = c.get(Calendar.DAY_OF_WEEK);\r\n            TaskLength duration = myTaskManager.createLength(timeUnit, startDate, endDate);\r\n            GPCalendar.DayType dayType = getTaskManager().getCalendar().getWeekDayType(startDayOfWeek);\r\n            dayType = getTaskManager().getCalendar().getDayTypeDate(startDate);\r\n            return new DayTypeAlternance(dayType, duration, endDate);\r\n        }\r\n\r\n        void createAlternance(TimeUnit timeUnit, TimeFrame timeFrame, List output) {\r\n            GPCalendar.DayType startType = null;\r\n            Date startDate = null;\r\n            int unitCount = timeFrame.getUnitCount(timeUnit);\r\n            for (int i = 0; i < unitCount; i++) {\r\n                Date start = timeFrame.getUnitStart(timeUnit, i);\r\n                c.setTime(start);\r\n                int startDayOfWeek = c.get(Calendar.DAY_OF_WEEK);\r\n                GPCalendar.DayType dayType = getTaskManager().getCalendar().getWeekDayType(startDayOfWeek);\r\n                if (startType == null) {\r\n                    startType = dayType;\r\n                    startDate = start;\r\n                }\r\n                if (startType != dayType) {\r\n                    Date end = timeFrame.getUnitFinish(timeUnit, (i - 1));\r\n                    TaskLength duration = myTaskManager.createLength(timeUnit, startDate, end);\r\n                    output.add(new DayTypeAlternance(startType, duration, end));\r\n                    startType = dayType;\r\n                    startDate = start;\r\n                }\r\n            }\r\n            Date end = timeFrame.getUnitFinish(timeUnit, (unitCount - 1));\r\n            TaskLength duration = myTaskManager.createLength(timeUnit, startDate, end);\r\n            output.add(new DayTypeAlternance(startType, duration, end));\r\n        }\r\n    }\r\n    AlternanceFactory f = new AlternanceFactory();\r\n    DayTypeAlternance[] result;\r\n    Date startDate = timeFrame.getUnitStart(timeUnit, unitIndex);\r\n    Date endDate = timeFrame.getUnitFinish(timeUnit, unitIndex);\r\n    if (timeUnit.equals(myTimeUnitStack.getDefaultTimeUnit())) {\r\n        result = new DayTypeAlternance[]{ f.createAlternance(timeUnit, startDate, endDate) };\r\n    } else\r\n        if (timeUnit.isConstructedFrom(myTimeUnitStack.getDefaultTimeUnit())) {\r\n            List buf = new ArrayList();\r\n            TimeUnit defaultUnit = myTimeUnitStack.getDefaultTimeUnit();\r\n            TimeFrame innerFrame = myTimeUnitStack.createTimeFrame(startDate, timeUnit, defaultUnit);\r\n            // System.err.println(\"[ChartModelImpl] topUnit=\"+timeUnit+\"\r\n            // bottom=\"+defaultUnit+\"\r\n            // count=\"+innerFrame.getUnitCount(defaultUnit));\r\n            f.createAlternance(defaultUnit, innerFrame, buf);\r\n            result = ((DayTypeAlternance[]) (buf.toArray(new DayTypeAlternance[buf.size()])));\r\n        } else {\r\n            throw new RuntimeException(\"We should not be here\");\r\n        }\r\n\r\n    // System.err.println(\"from \"+startDate+\" to\r\n    // \"+endDate+\"\n\"+java.util.Arrays.asList(result));\r\n    return result;\r\n}"},
 {"id":409, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1674, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.getDayTypeAlternance(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"protected DayTypeAlternance[] getDayTypeAlternance(TimeFrame timeFrame, TimeUnit timeUnit, int unitIndex) {\r\n    class AlternanceFactory {\r\n        private Calendar c = CalendarFactory.newCalendar();\r\n\r\n        DayTypeAlternance createAlternance(TimeUnit timeUnit, Date startDate, Date endDate) {\r\n            c.setTime(startDate);\r\n            int startDayOfWeek = c.get(Calendar.DAY_OF_WEEK);\r\n            c.setTime(endDate);\r\n            int endDayOfWeek = c.get(Calendar.DAY_OF_WEEK);\r\n            TaskLength duration = myTaskManager.createLength(timeUnit, startDate, endDate);\r\n            GPCalendar.DayType dayType = getTaskManager().getCalendar().getWeekDayType(startDayOfWeek);\r\n            dayType = getTaskManager().getCalendar().getDayTypeDate(startDate);\r\n            return new DayTypeAlternance(dayType, duration, endDate);\r\n        }\r\n\r\n        void createAlternance(TimeUnit timeUnit, TimeFrame timeFrame, List output) {\r\n            GPCalendar.DayType startType = null;\r\n            Date startDate = null;\r\n            int unitCount = timeFrame.getUnitCount(timeUnit);\r\n            for (int i = 0; i < unitCount; i++) {\r\n                Date start = timeFrame.getUnitStart(timeUnit, i);\r\n                c.setTime(start);\r\n                int startDayOfWeek = c.get(Calendar.DAY_OF_WEEK);\r\n                GPCalendar.DayType dayType = getTaskManager().getCalendar().getWeekDayType(startDayOfWeek);\r\n                if (startType == null) {\r\n                    startType = dayType;\r\n                    startDate = start;\r\n                }\r\n                if (startType != dayType) {\r\n                    Date end = timeFrame.getUnitFinish(timeUnit, (i - 1));\r\n                    TaskLength duration = myTaskManager.createLength(timeUnit, startDate, end);\r\n                    output.add(new DayTypeAlternance(startType, duration, end));\r\n                    startType = dayType;\r\n                    startDate = start;\r\n                }\r\n            }\r\n            Date end = timeFrame.getUnitFinish(timeUnit, (unitCount - 1));\r\n            TaskLength duration = myTaskManager.createLength(timeUnit, startDate, end);\r\n            output.add(new DayTypeAlternance(startType, duration, end));\r\n        }\r\n    }\r\n    AlternanceFactory f = new AlternanceFactory();\r\n    DayTypeAlternance[] result;\r\n    Date startDate = timeFrame.getUnitStart(timeUnit, unitIndex);\r\n    Date endDate = timeFrame.getUnitFinish(timeUnit, unitIndex);\r\n    if (timeUnit.equals(myTimeUnitStack.getDefaultTimeUnit())) {\r\n        result = new DayTypeAlternance[]{ f.createAlternance(timeUnit, startDate, endDate) };\r\n    } else\r\n        if (timeUnit.isConstructedFrom(myTimeUnitStack.getDefaultTimeUnit())) {\r\n            List buf = new ArrayList();\r\n            TimeUnit defaultUnit = myTimeUnitStack.getDefaultTimeUnit();\r\n            TimeFrame innerFrame = myTimeUnitStack.createTimeFrame(startDate, timeUnit, defaultUnit);\r\n            // System.err.println(\"[ChartModelImpl] topUnit=\"+timeUnit+\"\r\n            // bottom=\"+defaultUnit+\"\r\n            // count=\"+innerFrame.getUnitCount(defaultUnit));\r\n            f.createAlternance(defaultUnit, innerFrame, buf);\r\n            result = ((DayTypeAlternance[]) (buf.toArray(new DayTypeAlternance[buf.size()])));\r\n        } else {\r\n            throw new RuntimeException(\"We should not be here\");\r\n        }\r\n\r\n    // System.err.println(\"from \"+startDate+\" to\r\n    // \"+endDate+\"\n\"+java.util.Arrays.asList(result));\r\n    return result;\r\n}"},
 {"id":410, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1652, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.calculateOffsets(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"ChartModelBase.Offset[] calculateOffsets(TimeFrame timeFrame, TimeUnit frameBottomUnit, Date bottomUnitStartDate, TimeUnit offsetUnit, int frameBottomUnitWidth) {\r\n    return myCachingOffsetCalculator.calculateOffsets(timeFrame, frameBottomUnit, bottomUnitStartDate, offsetUnit, frameBottomUnitWidth);\r\n}"},
 {"id":411, "parametername":"TimeUnit frameBottomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1652, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.calculateOffsets(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"ChartModelBase.Offset[] calculateOffsets(TimeFrame timeFrame, TimeUnit frameBottomUnit, Date bottomUnitStartDate, TimeUnit offsetUnit, int frameBottomUnitWidth) {\r\n    return myCachingOffsetCalculator.calculateOffsets(timeFrame, frameBottomUnit, bottomUnitStartDate, offsetUnit, frameBottomUnitWidth);\r\n}"},
 {"id":412, "parametername":"TimeUnit offsetUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1652, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.calculateOffsets(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"ChartModelBase.Offset[] calculateOffsets(TimeFrame timeFrame, TimeUnit frameBottomUnit, Date bottomUnitStartDate, TimeUnit offsetUnit, int frameBottomUnitWidth) {\r\n    return myCachingOffsetCalculator.calculateOffsets(timeFrame, frameBottomUnit, bottomUnitStartDate, offsetUnit, frameBottomUnitWidth);\r\n}"},
 {"id":413, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":167, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase$RegularFramesWithFunction", "methodid":1721, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase$RegularFramesWithFunction.getTimeFrameWidth(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"public int getTimeFrameWidth(TimeFrame timeFrame) {\r\n    return (timeFrame.getUnitCount(myBottomUnit)) * (myAtomUnitPixels);\r\n}"},
 {"id":414, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":168, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase$SkewedFramesWidthFunction", "methodid":1723, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase$SkewedFramesWidthFunction.getTimeFrameWidth(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"public int getTimeFrameWidth(TimeFrame timeFrame) {\r\n    int defaultUnitsPerTopUnit = timeFrame.getUnitCount(myTimeUnitStack.getDefaultTimeUnit());\r\n    return ((int) (defaultUnitsPerTopUnit * (myWidthPerDefaultUnit)));\r\n}"},
 {"id":415, "parametername":"TimeFrame nextFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1667, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.getBottomUnitWidth(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"int getBottomUnitWidth(TimeFrame nextFrame) {\r\n    int frameWidth = myFrameWidthFunction.getTimeFrameWidth(nextFrame);\r\n    int bottomUnitsCount = nextFrame.getUnitCount(nextFrame.getBottomUnit());\r\n    // System.err.println(\"ChartModelImpl: getBottomUnitWidth:\r\n    // nextFrame=\"+nextFrame+\" width=\"+frameWidth+\"\r\n    // bottomUnitsCount=\"+bottomUnitsCount);\r\n    return frameWidth / bottomUnitsCount;\r\n}"},
 {"id":416, "parametername":"TimeUnit myTopUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1701, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.setTopUnit(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"private void setTopUnit(TimeUnit myTopUnit) {\r\n    this.myTopUnit = myTopUnit;\r\n}"},
 {"id":417, "parametername":"GPOptionChangeListener listener", "parametertype":"net.sourceforge.ganttproject.gui.options.model.GPOptionChangeListener", "parameterclass":388, "classid":170, "classname":"net.sourceforge.ganttproject.chart.ChartModelBase", "methodid":1649, "methodname":"net.sourceforge.ganttproject.chart.ChartModelBase.addOptionChangeListener(net.sourceforge.ganttproject.gui.options.model.GPOptionChangeListener)", "isreturn":0, "sourcecode":"public void addOptionChangeListener(GPOptionChangeListener listener) {\r\n    myOptionListeners.add(listener);\r\n}"},
 {"id":418, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":172, "classname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "methodid":1727, "methodname":"net.sourceforge.ganttproject.chart.ChartModelImpl.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"public ChartModelImpl(TaskManager taskManager, TimeUnitStack timeUnitStack, final UIConfiguration projectConfig) {\r\n    super(taskManager, timeUnitStack, projectConfig);\r\n    this.taskManager = taskManager;\r\n    myTaskRendererImpl = new TaskRendererImpl(this);\r\n    myTaskGridRendererImpl = new TaskGridRendererImpl(this);\r\n    // myResourcesRendererImpl = new ResourcesRendererImpl(this);\r\n    // myTaskProgressRendererImpl = new TaskProgressRendererImpl(this);\r\n    myTimeUnitVisitors.add(myTaskGridRendererImpl);\r\n    myTimeUnitVisitors.add(myTaskRendererImpl);\r\n    class NewTaskColorOption extends DefaultColorOption implements GP1XOptionConverter {\r\n        private NewTaskColorOption() {\r\n            super(\"newTaskDefaultColor\");\r\n        }\r\n\r\n        public String getTagName() {\r\n            return \"colors\";\r\n        }\r\n\r\n        public String getAttributeName() {\r\n            return \"tasks\";\r\n        }\r\n\r\n        public void loadValue(String legacyValue) {\r\n            lock();\r\n            loadPersistentValue(legacyValue);\r\n            commit();\r\n        }\r\n\r\n        public void commit() {\r\n            super.commit();\r\n            projectConfig.setTaskColor(getValue());\r\n        }\r\n    }\r\n    myTaskDefaultColorOption = new NewTaskColorOption();\r\n    myDefaultColorOptions = new ChartOptionGroup(\"ganttChartDefaultColors\", new GPOption[]{ myTaskDefaultColorOption, projectConfig.getWeekendAlphaRenderingOption() }, getOptionEventDispatcher());\r\n    {\r\n        myTaskAheadOfScheduleColor = new DefaultColorOption(\"ganttChartStateDiffColors.taskAheadOfScheduleColor\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setEarlierPreviousTaskColor(getValue());\r\n            }\r\n        };\r\n        myTaskAheadOfScheduleColor.lock();\r\n        myTaskAheadOfScheduleColor.setValue(new Color(50, 229, 50));\r\n        myTaskAheadOfScheduleColor.commit();\r\n        // \r\n        myTaskBehindScheduleColor = new DefaultColorOption(\"ganttChartStateDiffColors.taskBehindScheduleColor\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setLaterPreviousTaskColor(getValue());\r\n            }\r\n        };\r\n        myTaskBehindScheduleColor.lock();\r\n        myTaskBehindScheduleColor.setValue(new Color(229, 50, 50));\r\n        myTaskBehindScheduleColor.commit();\r\n        // \r\n        myTaskOnScheduleColor = new DefaultColorOption(\"ganttChartStateDiffColors.taskOnScheduleColor\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setPreviousTaskColor(getValue());\r\n            }\r\n        };\r\n        myTaskOnScheduleColor.lock();\r\n        myTaskOnScheduleColor.setValue(Color.LIGHT_GRAY);\r\n        myTaskOnScheduleColor.commit();\r\n        // \r\n        myStateDiffOptions = new ChartOptionGroup(\"ganttChartStateDiffColors\", new GPOption[]{ myTaskOnScheduleColor, myTaskAheadOfScheduleColor, myTaskBehindScheduleColor }, getOptionEventDispatcher());\r\n    }\r\n}"},
 {"id":419, "parametername":"TimeUnitStack timeUnitStack", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitStack", "parameterclass":639, "classid":172, "classname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "methodid":1727, "methodname":"net.sourceforge.ganttproject.chart.ChartModelImpl.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"public ChartModelImpl(TaskManager taskManager, TimeUnitStack timeUnitStack, final UIConfiguration projectConfig) {\r\n    super(taskManager, timeUnitStack, projectConfig);\r\n    this.taskManager = taskManager;\r\n    myTaskRendererImpl = new TaskRendererImpl(this);\r\n    myTaskGridRendererImpl = new TaskGridRendererImpl(this);\r\n    // myResourcesRendererImpl = new ResourcesRendererImpl(this);\r\n    // myTaskProgressRendererImpl = new TaskProgressRendererImpl(this);\r\n    myTimeUnitVisitors.add(myTaskGridRendererImpl);\r\n    myTimeUnitVisitors.add(myTaskRendererImpl);\r\n    class NewTaskColorOption extends DefaultColorOption implements GP1XOptionConverter {\r\n        private NewTaskColorOption() {\r\n            super(\"newTaskDefaultColor\");\r\n        }\r\n\r\n        public String getTagName() {\r\n            return \"colors\";\r\n        }\r\n\r\n        public String getAttributeName() {\r\n            return \"tasks\";\r\n        }\r\n\r\n        public void loadValue(String legacyValue) {\r\n            lock();\r\n            loadPersistentValue(legacyValue);\r\n            commit();\r\n        }\r\n\r\n        public void commit() {\r\n            super.commit();\r\n            projectConfig.setTaskColor(getValue());\r\n        }\r\n    }\r\n    myTaskDefaultColorOption = new NewTaskColorOption();\r\n    myDefaultColorOptions = new ChartOptionGroup(\"ganttChartDefaultColors\", new GPOption[]{ myTaskDefaultColorOption, projectConfig.getWeekendAlphaRenderingOption() }, getOptionEventDispatcher());\r\n    {\r\n        myTaskAheadOfScheduleColor = new DefaultColorOption(\"ganttChartStateDiffColors.taskAheadOfScheduleColor\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setEarlierPreviousTaskColor(getValue());\r\n            }\r\n        };\r\n        myTaskAheadOfScheduleColor.lock();\r\n        myTaskAheadOfScheduleColor.setValue(new Color(50, 229, 50));\r\n        myTaskAheadOfScheduleColor.commit();\r\n        // \r\n        myTaskBehindScheduleColor = new DefaultColorOption(\"ganttChartStateDiffColors.taskBehindScheduleColor\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setLaterPreviousTaskColor(getValue());\r\n            }\r\n        };\r\n        myTaskBehindScheduleColor.lock();\r\n        myTaskBehindScheduleColor.setValue(new Color(229, 50, 50));\r\n        myTaskBehindScheduleColor.commit();\r\n        // \r\n        myTaskOnScheduleColor = new DefaultColorOption(\"ganttChartStateDiffColors.taskOnScheduleColor\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setPreviousTaskColor(getValue());\r\n            }\r\n        };\r\n        myTaskOnScheduleColor.lock();\r\n        myTaskOnScheduleColor.setValue(Color.LIGHT_GRAY);\r\n        myTaskOnScheduleColor.commit();\r\n        // \r\n        myStateDiffOptions = new ChartOptionGroup(\"ganttChartStateDiffColors\", new GPOption[]{ myTaskOnScheduleColor, myTaskAheadOfScheduleColor, myTaskBehindScheduleColor }, getOptionEventDispatcher());\r\n    }\r\n}"},
 {"id":420, "parametername":"final UIConfiguration projectConfig", "parametertype":"net.sourceforge.ganttproject.gui.UIConfiguration", "parameterclass":335, "classid":172, "classname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "methodid":1727, "methodname":"net.sourceforge.ganttproject.chart.ChartModelImpl.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"public ChartModelImpl(TaskManager taskManager, TimeUnitStack timeUnitStack, final UIConfiguration projectConfig) {\r\n    super(taskManager, timeUnitStack, projectConfig);\r\n    this.taskManager = taskManager;\r\n    myTaskRendererImpl = new TaskRendererImpl(this);\r\n    myTaskGridRendererImpl = new TaskGridRendererImpl(this);\r\n    // myResourcesRendererImpl = new ResourcesRendererImpl(this);\r\n    // myTaskProgressRendererImpl = new TaskProgressRendererImpl(this);\r\n    myTimeUnitVisitors.add(myTaskGridRendererImpl);\r\n    myTimeUnitVisitors.add(myTaskRendererImpl);\r\n    class NewTaskColorOption extends DefaultColorOption implements GP1XOptionConverter {\r\n        private NewTaskColorOption() {\r\n            super(\"newTaskDefaultColor\");\r\n        }\r\n\r\n        public String getTagName() {\r\n            return \"colors\";\r\n        }\r\n\r\n        public String getAttributeName() {\r\n            return \"tasks\";\r\n        }\r\n\r\n        public void loadValue(String legacyValue) {\r\n            lock();\r\n            loadPersistentValue(legacyValue);\r\n            commit();\r\n        }\r\n\r\n        public void commit() {\r\n            super.commit();\r\n            projectConfig.setTaskColor(getValue());\r\n        }\r\n    }\r\n    myTaskDefaultColorOption = new NewTaskColorOption();\r\n    myDefaultColorOptions = new ChartOptionGroup(\"ganttChartDefaultColors\", new GPOption[]{ myTaskDefaultColorOption, projectConfig.getWeekendAlphaRenderingOption() }, getOptionEventDispatcher());\r\n    {\r\n        myTaskAheadOfScheduleColor = new DefaultColorOption(\"ganttChartStateDiffColors.taskAheadOfScheduleColor\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setEarlierPreviousTaskColor(getValue());\r\n            }\r\n        };\r\n        myTaskAheadOfScheduleColor.lock();\r\n        myTaskAheadOfScheduleColor.setValue(new Color(50, 229, 50));\r\n        myTaskAheadOfScheduleColor.commit();\r\n        // \r\n        myTaskBehindScheduleColor = new DefaultColorOption(\"ganttChartStateDiffColors.taskBehindScheduleColor\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setLaterPreviousTaskColor(getValue());\r\n            }\r\n        };\r\n        myTaskBehindScheduleColor.lock();\r\n        myTaskBehindScheduleColor.setValue(new Color(229, 50, 50));\r\n        myTaskBehindScheduleColor.commit();\r\n        // \r\n        myTaskOnScheduleColor = new DefaultColorOption(\"ganttChartStateDiffColors.taskOnScheduleColor\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setPreviousTaskColor(getValue());\r\n            }\r\n        };\r\n        myTaskOnScheduleColor.lock();\r\n        myTaskOnScheduleColor.setValue(Color.LIGHT_GRAY);\r\n        myTaskOnScheduleColor.commit();\r\n        // \r\n        myStateDiffOptions = new ChartOptionGroup(\"ganttChartStateDiffColors\", new GPOption[]{ myTaskOnScheduleColor, myTaskAheadOfScheduleColor, myTaskBehindScheduleColor }, getOptionEventDispatcher());\r\n    }\r\n}"},
 {"id":421, "parametername":"Painter p", "parametertype":"net.sourceforge.ganttproject.chart.Painter", "parameterclass":196, "classid":172, "classname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "methodid":1750, "methodname":"net.sourceforge.ganttproject.chart.ChartModelImpl.paintMainArea(java.awt.Graphics,net.sourceforge.ganttproject.chart.Painter)", "isreturn":0, "sourcecode":"protected void paintMainArea(Graphics mainArea, Painter p) {\r\n    super.paintMainArea(mainArea, p);\r\n    mainArea.translate(0, (-(getVerticalOffset())));\r\n    myTaskRendererImpl.getPrimitiveContainer().paint(p, mainArea);\r\n    myTaskGridRendererImpl.getPrimitiveContainer().paint(p, mainArea);\r\n    myTaskRendererImpl.getPrimitiveContainer().getLayer(1).paint(p, mainArea);\r\n    myTaskRendererImpl.getPrimitiveContainer().getLayer(2).paint(p, mainArea);\r\n    // \r\n    // myTaskRendererImpl.getPrimitiveContainer().paint(p, mainArea);\r\n    // myTaskRendererImpl.getPrimitiveContainer().getLayer(1).paint(p,\r\n    // mainArea);\r\n    // super.paintMainArea(mainArea, p);\r\n    // myTaskRendererImpl.getPrimitiveContainer().getLayer(2).paint(p,\r\n    // mainArea);\r\n    // myTaskGridRendererImpl.getPrimitiveContainer().paint(p, mainArea);\r\n}"},
 {"id":422, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":172, "classname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "methodid":1736, "methodname":"net.sourceforge.ganttproject.chart.ChartModelImpl.getBoundingRectangle(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public Rectangle getBoundingRectangle(Task task) {\r\n    Rectangle result = null;\r\n    TaskActivity[] activities = task.getActivities();\r\n    for (int i = 0; i < (activities.length); i++) {\r\n        GraphicPrimitiveContainer.Rectangle nextRectangle = ((GraphicPrimitiveContainer.Rectangle) (myTaskRendererImpl.getPrimitive(activities[i])));\r\n        if (nextRectangle != null) {\r\n            Rectangle nextAwtRectangle = new Rectangle(nextRectangle.myLeftX, nextRectangle.myTopY, nextRectangle.myWidth, nextRectangle.myHeight);\r\n            if (result == null) {\r\n                result = nextAwtRectangle;\r\n            } else {\r\n                result = result.union(nextAwtRectangle);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":423, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":172, "classname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "methodid":1740, "methodname":"net.sourceforge.ganttproject.chart.ChartModelImpl.getTaskActivityRectangles(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"GraphicPrimitiveContainer.Rectangle[] getTaskActivityRectangles(Task task) {\r\n    List result = new ArrayList();\r\n    TaskActivity[] activities = task.getActivities();\r\n    for (int i = 0; i < (activities.length); i++) {\r\n        GraphicPrimitiveContainer.Rectangle nextRectangle = ((GraphicPrimitiveContainer.Rectangle) (myTaskRendererImpl.getPrimitive(activities[i])));\r\n        if (nextRectangle != null) {\r\n            result.add(nextRectangle);\r\n        }\r\n    }\r\n    return ((GraphicPrimitiveContainer.Rectangle[]) (result.toArray(new GraphicPrimitiveContainer.Rectangle[0])));\r\n}"},
 {"id":424, "parametername":"TaskContainmentHierarchyFacade taskContainment", "parametertype":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "parameterclass":552, "classid":172, "classname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "methodid":1754, "methodname":"net.sourceforge.ganttproject.chart.ChartModelImpl.setTaskContainment(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "isreturn":0, "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.chart.ChartModel#setTaskContainment(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)\n */\r\npublic void setTaskContainment(TaskContainmentHierarchyFacade taskContainment) {\r\n    myTaskContainment = taskContainment;\r\n}"},
 {"id":425, "parametername":"ChartModelImpl.TuningOptions tuningOptions", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelImpl$TuningOptions", "parameterclass":171, "classid":172, "classname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "methodid":1755, "methodname":"net.sourceforge.ganttproject.chart.ChartModelImpl.setTuningOptions(net.sourceforge.ganttproject.chart.ChartModelImpl$TuningOptions)", "isreturn":0, "sourcecode":"public void setTuningOptions(ChartModelImpl.TuningOptions tuningOptions) {\r\n    myTaskRendererImpl.setProgressRenderingEnabled(tuningOptions.renderProgress);\r\n    myTaskRendererImpl.setDependenciesRenderingEnabled(tuningOptions.renderDependencies);\r\n}"},
 {"id":426, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":172, "classname":"net.sourceforge.ganttproject.chart.ChartModelImpl", "methodid":1744, "methodname":"net.sourceforge.ganttproject.chart.ChartModelImpl.isExplicitlyHidden(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public boolean isExplicitlyHidden(Task task) {\r\n    return (myHiddenTasks) == null ? false : myHiddenTasks.contains(task);\r\n}"},
 {"id":427, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":174, "classname":"net.sourceforge.ganttproject.chart.ChartModelResource", "methodid":1759, "methodname":"net.sourceforge.ganttproject.chart.ChartModelResource.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.resource.HumanResourceManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.chart.ResourceChart)", "isreturn":0, "sourcecode":"public ChartModelResource(TaskManager taskManager, HumanResourceManager resourceManager, TimeUnitStack timeUnitStack, final UIConfiguration projectConfig, ResourceChart resourceChart) {\r\n    super(taskManager, timeUnitStack, projectConfig);\r\n    myResourceLoadRenderer = new ResourceLoadRenderer(this, resourceChart);\r\n    myBottomLineRenderer = new BottomUnitLineRendererImpl(this, projectConfig);\r\n    myManager = resourceManager;\r\n    {\r\n        myResourceNormalLoadOption = new ChartModelResource.ResourceLoadOption(\"resourceChartColors.normalLoad\", \"colors\", \"resources\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceColor(getValue());\r\n            }\r\n        };\r\n        myResourceNormalLoadOption.lock();\r\n        myResourceNormalLoadOption.setValue(new Color(140, 182, 206));\r\n        myResourceNormalLoadOption.commit();\r\n    }\r\n    {\r\n        myResourceOverloadOption = new ChartModelResource.ResourceLoadOption(\"resourceChartColors.overLoad\", \"colors\", \"resourceOverload\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceOverloadColor(getValue());\r\n            }\r\n        };\r\n        myResourceOverloadOption.lock();\r\n        myResourceOverloadOption.setValue(new Color(229, 50, 50));\r\n        myResourceOverloadOption.commit();\r\n    }\r\n    {\r\n        myResourceUnderloadOption = new DefaultColorOption(\"resourceChartColors.underLoad\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceUnderloadColor(getValue());\r\n            }\r\n        };\r\n        myResourceUnderloadOption.lock();\r\n        myResourceUnderloadOption.setValue(new Color(50, 229, 50));\r\n        myResourceUnderloadOption.commit();\r\n    }\r\n    {\r\n        myDayOffOption = new DefaultColorOption(\"resourceChartColors.dayOff\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setDayOffColor(getValue());\r\n            }\r\n        };\r\n        myDayOffOption.lock();\r\n        myDayOffOption.setValue(new Color(0.9F, 1.0F, 0.17F));\r\n        myDayOffOption.commit();\r\n    }\r\n    myColorOptions = new GPOptionGroup(\"resourceChartColors\", new GPOption[]{ myResourceNormalLoadOption, myResourceOverloadOption, myResourceUnderloadOption, myDayOffOption });\r\n}"},
 {"id":428, "parametername":"HumanResourceManager resourceManager", "parametertype":"net.sourceforge.ganttproject.resource.HumanResourceManager", "parameterclass":501, "classid":174, "classname":"net.sourceforge.ganttproject.chart.ChartModelResource", "methodid":1759, "methodname":"net.sourceforge.ganttproject.chart.ChartModelResource.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.resource.HumanResourceManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.chart.ResourceChart)", "isreturn":0, "sourcecode":"public ChartModelResource(TaskManager taskManager, HumanResourceManager resourceManager, TimeUnitStack timeUnitStack, final UIConfiguration projectConfig, ResourceChart resourceChart) {\r\n    super(taskManager, timeUnitStack, projectConfig);\r\n    myResourceLoadRenderer = new ResourceLoadRenderer(this, resourceChart);\r\n    myBottomLineRenderer = new BottomUnitLineRendererImpl(this, projectConfig);\r\n    myManager = resourceManager;\r\n    {\r\n        myResourceNormalLoadOption = new ChartModelResource.ResourceLoadOption(\"resourceChartColors.normalLoad\", \"colors\", \"resources\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceColor(getValue());\r\n            }\r\n        };\r\n        myResourceNormalLoadOption.lock();\r\n        myResourceNormalLoadOption.setValue(new Color(140, 182, 206));\r\n        myResourceNormalLoadOption.commit();\r\n    }\r\n    {\r\n        myResourceOverloadOption = new ChartModelResource.ResourceLoadOption(\"resourceChartColors.overLoad\", \"colors\", \"resourceOverload\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceOverloadColor(getValue());\r\n            }\r\n        };\r\n        myResourceOverloadOption.lock();\r\n        myResourceOverloadOption.setValue(new Color(229, 50, 50));\r\n        myResourceOverloadOption.commit();\r\n    }\r\n    {\r\n        myResourceUnderloadOption = new DefaultColorOption(\"resourceChartColors.underLoad\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceUnderloadColor(getValue());\r\n            }\r\n        };\r\n        myResourceUnderloadOption.lock();\r\n        myResourceUnderloadOption.setValue(new Color(50, 229, 50));\r\n        myResourceUnderloadOption.commit();\r\n    }\r\n    {\r\n        myDayOffOption = new DefaultColorOption(\"resourceChartColors.dayOff\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setDayOffColor(getValue());\r\n            }\r\n        };\r\n        myDayOffOption.lock();\r\n        myDayOffOption.setValue(new Color(0.9F, 1.0F, 0.17F));\r\n        myDayOffOption.commit();\r\n    }\r\n    myColorOptions = new GPOptionGroup(\"resourceChartColors\", new GPOption[]{ myResourceNormalLoadOption, myResourceOverloadOption, myResourceUnderloadOption, myDayOffOption });\r\n}"},
 {"id":429, "parametername":"TimeUnitStack timeUnitStack", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitStack", "parameterclass":639, "classid":174, "classname":"net.sourceforge.ganttproject.chart.ChartModelResource", "methodid":1759, "methodname":"net.sourceforge.ganttproject.chart.ChartModelResource.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.resource.HumanResourceManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.chart.ResourceChart)", "isreturn":0, "sourcecode":"public ChartModelResource(TaskManager taskManager, HumanResourceManager resourceManager, TimeUnitStack timeUnitStack, final UIConfiguration projectConfig, ResourceChart resourceChart) {\r\n    super(taskManager, timeUnitStack, projectConfig);\r\n    myResourceLoadRenderer = new ResourceLoadRenderer(this, resourceChart);\r\n    myBottomLineRenderer = new BottomUnitLineRendererImpl(this, projectConfig);\r\n    myManager = resourceManager;\r\n    {\r\n        myResourceNormalLoadOption = new ChartModelResource.ResourceLoadOption(\"resourceChartColors.normalLoad\", \"colors\", \"resources\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceColor(getValue());\r\n            }\r\n        };\r\n        myResourceNormalLoadOption.lock();\r\n        myResourceNormalLoadOption.setValue(new Color(140, 182, 206));\r\n        myResourceNormalLoadOption.commit();\r\n    }\r\n    {\r\n        myResourceOverloadOption = new ChartModelResource.ResourceLoadOption(\"resourceChartColors.overLoad\", \"colors\", \"resourceOverload\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceOverloadColor(getValue());\r\n            }\r\n        };\r\n        myResourceOverloadOption.lock();\r\n        myResourceOverloadOption.setValue(new Color(229, 50, 50));\r\n        myResourceOverloadOption.commit();\r\n    }\r\n    {\r\n        myResourceUnderloadOption = new DefaultColorOption(\"resourceChartColors.underLoad\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceUnderloadColor(getValue());\r\n            }\r\n        };\r\n        myResourceUnderloadOption.lock();\r\n        myResourceUnderloadOption.setValue(new Color(50, 229, 50));\r\n        myResourceUnderloadOption.commit();\r\n    }\r\n    {\r\n        myDayOffOption = new DefaultColorOption(\"resourceChartColors.dayOff\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setDayOffColor(getValue());\r\n            }\r\n        };\r\n        myDayOffOption.lock();\r\n        myDayOffOption.setValue(new Color(0.9F, 1.0F, 0.17F));\r\n        myDayOffOption.commit();\r\n    }\r\n    myColorOptions = new GPOptionGroup(\"resourceChartColors\", new GPOption[]{ myResourceNormalLoadOption, myResourceOverloadOption, myResourceUnderloadOption, myDayOffOption });\r\n}"},
 {"id":430, "parametername":"final UIConfiguration projectConfig", "parametertype":"net.sourceforge.ganttproject.gui.UIConfiguration", "parameterclass":335, "classid":174, "classname":"net.sourceforge.ganttproject.chart.ChartModelResource", "methodid":1759, "methodname":"net.sourceforge.ganttproject.chart.ChartModelResource.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.resource.HumanResourceManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.chart.ResourceChart)", "isreturn":0, "sourcecode":"public ChartModelResource(TaskManager taskManager, HumanResourceManager resourceManager, TimeUnitStack timeUnitStack, final UIConfiguration projectConfig, ResourceChart resourceChart) {\r\n    super(taskManager, timeUnitStack, projectConfig);\r\n    myResourceLoadRenderer = new ResourceLoadRenderer(this, resourceChart);\r\n    myBottomLineRenderer = new BottomUnitLineRendererImpl(this, projectConfig);\r\n    myManager = resourceManager;\r\n    {\r\n        myResourceNormalLoadOption = new ChartModelResource.ResourceLoadOption(\"resourceChartColors.normalLoad\", \"colors\", \"resources\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceColor(getValue());\r\n            }\r\n        };\r\n        myResourceNormalLoadOption.lock();\r\n        myResourceNormalLoadOption.setValue(new Color(140, 182, 206));\r\n        myResourceNormalLoadOption.commit();\r\n    }\r\n    {\r\n        myResourceOverloadOption = new ChartModelResource.ResourceLoadOption(\"resourceChartColors.overLoad\", \"colors\", \"resourceOverload\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceOverloadColor(getValue());\r\n            }\r\n        };\r\n        myResourceOverloadOption.lock();\r\n        myResourceOverloadOption.setValue(new Color(229, 50, 50));\r\n        myResourceOverloadOption.commit();\r\n    }\r\n    {\r\n        myResourceUnderloadOption = new DefaultColorOption(\"resourceChartColors.underLoad\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceUnderloadColor(getValue());\r\n            }\r\n        };\r\n        myResourceUnderloadOption.lock();\r\n        myResourceUnderloadOption.setValue(new Color(50, 229, 50));\r\n        myResourceUnderloadOption.commit();\r\n    }\r\n    {\r\n        myDayOffOption = new DefaultColorOption(\"resourceChartColors.dayOff\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setDayOffColor(getValue());\r\n            }\r\n        };\r\n        myDayOffOption.lock();\r\n        myDayOffOption.setValue(new Color(0.9F, 1.0F, 0.17F));\r\n        myDayOffOption.commit();\r\n    }\r\n    myColorOptions = new GPOptionGroup(\"resourceChartColors\", new GPOption[]{ myResourceNormalLoadOption, myResourceOverloadOption, myResourceUnderloadOption, myDayOffOption });\r\n}"},
 {"id":431, "parametername":"ResourceChart resourceChart", "parametertype":"net.sourceforge.ganttproject.chart.ResourceChart", "parameterclass":202, "classid":174, "classname":"net.sourceforge.ganttproject.chart.ChartModelResource", "methodid":1759, "methodname":"net.sourceforge.ganttproject.chart.ChartModelResource.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.resource.HumanResourceManager,net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.chart.ResourceChart)", "isreturn":0, "sourcecode":"public ChartModelResource(TaskManager taskManager, HumanResourceManager resourceManager, TimeUnitStack timeUnitStack, final UIConfiguration projectConfig, ResourceChart resourceChart) {\r\n    super(taskManager, timeUnitStack, projectConfig);\r\n    myResourceLoadRenderer = new ResourceLoadRenderer(this, resourceChart);\r\n    myBottomLineRenderer = new BottomUnitLineRendererImpl(this, projectConfig);\r\n    myManager = resourceManager;\r\n    {\r\n        myResourceNormalLoadOption = new ChartModelResource.ResourceLoadOption(\"resourceChartColors.normalLoad\", \"colors\", \"resources\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceColor(getValue());\r\n            }\r\n        };\r\n        myResourceNormalLoadOption.lock();\r\n        myResourceNormalLoadOption.setValue(new Color(140, 182, 206));\r\n        myResourceNormalLoadOption.commit();\r\n    }\r\n    {\r\n        myResourceOverloadOption = new ChartModelResource.ResourceLoadOption(\"resourceChartColors.overLoad\", \"colors\", \"resourceOverload\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceOverloadColor(getValue());\r\n            }\r\n        };\r\n        myResourceOverloadOption.lock();\r\n        myResourceOverloadOption.setValue(new Color(229, 50, 50));\r\n        myResourceOverloadOption.commit();\r\n    }\r\n    {\r\n        myResourceUnderloadOption = new DefaultColorOption(\"resourceChartColors.underLoad\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setResourceUnderloadColor(getValue());\r\n            }\r\n        };\r\n        myResourceUnderloadOption.lock();\r\n        myResourceUnderloadOption.setValue(new Color(50, 229, 50));\r\n        myResourceUnderloadOption.commit();\r\n    }\r\n    {\r\n        myDayOffOption = new DefaultColorOption(\"resourceChartColors.dayOff\") {\r\n            public void commit() {\r\n                super.commit();\r\n                projectConfig.setDayOffColor(getValue());\r\n            }\r\n        };\r\n        myDayOffOption.lock();\r\n        myDayOffOption.setValue(new Color(0.9F, 1.0F, 0.17F));\r\n        myDayOffOption.commit();\r\n    }\r\n    myColorOptions = new GPOptionGroup(\"resourceChartColors\", new GPOption[]{ myResourceNormalLoadOption, myResourceOverloadOption, myResourceUnderloadOption, myDayOffOption });\r\n}"},
 {"id":432, "parametername":"ChartModelBase.OptionEventDispatcher eventDispatcher", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase$OptionEventDispatcher", "parameterclass":165, "classid":175, "classname":"net.sourceforge.ganttproject.chart.ChartOptionGroup", "methodid":1768, "methodname":"net.sourceforge.ganttproject.chart.ChartOptionGroup.-init-(java.lang.String,net.sourceforge.ganttproject.gui.options.model.GPOption[],net.sourceforge.ganttproject.chart.ChartModelBase$OptionEventDispatcher)", "isreturn":0, "sourcecode":"public ChartOptionGroup(String id, GPOption[] options, ChartModelBase.OptionEventDispatcher eventDispatcher) {\r\n    super(id, options);\r\n    myEventDispatcher = eventDispatcher;\r\n}"},
 {"id":433, "parametername":"ChartModelBase model", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase", "parameterclass":170, "classid":176, "classname":"net.sourceforge.ganttproject.chart.ChartRendererBase", "methodid":1770, "methodname":"net.sourceforge.ganttproject.chart.ChartRendererBase.-init-(net.sourceforge.ganttproject.chart.ChartModelBase)", "isreturn":0, "sourcecode":"public ChartRendererBase(ChartModelBase model) {\r\n    myPrimitiveContainer = new GraphicPrimitiveContainer();\r\n    myChartModel = model;\r\n}"},
 {"id":434, "parametername":"UIConfiguration projectConfig", "parametertype":"net.sourceforge.ganttproject.gui.UIConfiguration", "parameterclass":335, "classid":179, "classname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "methodid":1789, "methodname":"net.sourceforge.ganttproject.chart.ChartUIConfiguration.-init-(net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"ChartUIConfiguration(UIConfiguration projectConfig) {\r\n    mySpanningRowTextFont = Fonts.TOP_UNIT_FONT;\r\n    myBottomUnitFont = projectConfig.getChartMainFont();\r\n    mySpanningHeaderBackgroundColor = new Color(0.93F, 0.93F, 0.93F);\r\n    myHeaderBorderColor = new Color(0.482F, 0.482F, 0.482F);\r\n    myWorkingTimeBackgroundColor = Color.WHITE;\r\n    myHolidayTimeBackgroundColor = new Color(0.93F, 0.93F, 0.93F);\r\n    myPublicHolidayTimeBackgroundColor = new Color(240, 220, 240);\r\n    // myHeaderBorderColor = new Color(0f, 1f, 0f);\r\n    myBottomUnitGridColor = new Color(0.482F, 0.482F, 0.482F);\r\n    myProjectConfig = projectConfig;\r\n}"},
 {"id":435, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":182, "classname":"net.sourceforge.ganttproject.chart.ChartViewState", "methodid":1821, "methodname":"net.sourceforge.ganttproject.chart.ChartViewState.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public ChartViewState(IGanttProject project, UIFacade uiFacade) {\r\n    iProject = project;\r\n    myUIFacade = uiFacade;\r\n    myTimeUnitStack = project.getTimeUnitStack();\r\n    myStartDate = CalendarFactory.newCalendar().getTime();\r\n    uiFacade.getZoomManager().addZoomListener(this);\r\n    myCurrentTimeFrame = myTimeUnitStack.createTimeFrame(myStartDate, getTopTimeUnit(), getBottomTimeUnit());\r\n    // setDefaultBottomUnitWidth();\r\n}"},
 {"id":436, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":182, "classname":"net.sourceforge.ganttproject.chart.ChartViewState", "methodid":1821, "methodname":"net.sourceforge.ganttproject.chart.ChartViewState.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public ChartViewState(IGanttProject project, UIFacade uiFacade) {\r\n    iProject = project;\r\n    myUIFacade = uiFacade;\r\n    myTimeUnitStack = project.getTimeUnitStack();\r\n    myStartDate = CalendarFactory.newCalendar().getTime();\r\n    uiFacade.getZoomManager().addZoomListener(this);\r\n    myCurrentTimeFrame = myTimeUnitStack.createTimeFrame(myStartDate, getTopTimeUnit(), getBottomTimeUnit());\r\n    // setDefaultBottomUnitWidth();\r\n}"},
 {"id":437, "parametername":"ChartViewState viewState", "parametertype":"net.sourceforge.ganttproject.chart.ChartViewState", "parameterclass":182, "classid":181, "classname":"net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent", "methodid":1840, "methodname":"net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent.-init-(net.sourceforge.ganttproject.chart.ChartViewState,java.lang.Object,java.lang.Object)", "isreturn":0, "sourcecode":"public ViewStateEvent(ChartViewState viewState, Object oldValue, Object newValue) {\r\n    super(viewState);\r\n    myOldValue = oldValue;\r\n    myNewValue = newValue;\r\n}"},
 {"id":438, "parametername":"ChartViewState.ViewStateEvent e", "parametertype":"net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent", "parameterclass":181, "classid":182, "classname":"net.sourceforge.ganttproject.chart.ChartViewState", "methodid":1825, "methodname":"net.sourceforge.ganttproject.chart.ChartViewState.fireStartDateChanged(net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent)", "isreturn":0, "sourcecode":"private void fireStartDateChanged(ChartViewState.ViewStateEvent e) {\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        ChartViewState.Listener nextListener = ((ChartViewState.Listener) (myListeners.get(i)));\r\n        nextListener.startDateChanged(e);\r\n    }\r\n}"},
 {"id":439, "parametername":"ZoomEvent e", "parametertype":"net.sourceforge.ganttproject.gui.zoom.ZoomEvent", "parameterclass":422, "classid":182, "classname":"net.sourceforge.ganttproject.chart.ChartViewState", "methodid":1837, "methodname":"net.sourceforge.ganttproject.chart.ChartViewState.zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "isreturn":0, "sourcecode":"public void zoomChanged(ZoomEvent e) {\r\n    myCurrentZoomState = e.getNewZoomState();\r\n    Date date = null;\r\n    if ((myUIFacade.getViewIndex()) == (UIFacade.GANTT_INDEX)) {\r\n        Date d = Mediator.getTaskSelectionManager().getEarliestStart();\r\n        // boolean zoomin = e.getZoomValue() < e.getOldValue();\r\n        // if (zoomin && myZoomStateIndex>0) {\r\n        // myZoomStateIndex--;\r\n        // }\r\n        // else if (!zoomin && myZoomStateIndex<myZoomStates.length-1) {\r\n        // myZoomStateIndex++;\r\n        // }\r\n        // myCurrentTimeFrame = scrollTimeFrame(d==null ? getStartDate() :\r\n        // d);\r\n        date = (d == null) ? getStartDate() : d;\r\n    } else\r\n        date = getStartDate();\r\n\r\n    setStartDate(date);\r\n}"},
 {"id":440, "parametername":"ChartViewState.Listener listener", "parametertype":"net.sourceforge.ganttproject.chart.ChartViewState$Listener", "parameterclass":180, "classid":182, "classname":"net.sourceforge.ganttproject.chart.ChartViewState", "methodid":1824, "methodname":"net.sourceforge.ganttproject.chart.ChartViewState.addStateListener(net.sourceforge.ganttproject.chart.ChartViewState$Listener)", "isreturn":0, "sourcecode":"public void addStateListener(ChartViewState.Listener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":441, "parametername":"ChartViewState.Listener listener", "parametertype":"net.sourceforge.ganttproject.chart.ChartViewState$Listener", "parameterclass":180, "classid":182, "classname":"net.sourceforge.ganttproject.chart.ChartViewState", "methodid":1831, "methodname":"net.sourceforge.ganttproject.chart.ChartViewState.removeStateListener(net.sourceforge.ganttproject.chart.ChartViewState$Listener)", "isreturn":0, "sourcecode":"public void removeStateListener(ChartViewState.Listener listener) {\r\n    myListeners.remove(listener);\r\n}"},
 {"id":442, "parametername":"ChartViewState.ViewStateEvent e", "parametertype":"net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent", "parameterclass":181, "classid":180, "classname":"net.sourceforge.ganttproject.chart.ChartViewState$Listener", "methodid":1838, "methodname":"net.sourceforge.ganttproject.chart.ChartViewState$Listener.startDateChanged(net.sourceforge.ganttproject.chart.ChartViewState$ViewStateEvent)", "isreturn":0, "sourcecode":"public void startDateChanged(ChartViewState.ViewStateEvent e);"},
 {"id":443, "parametername":"ZoomEvent e", "parametertype":"net.sourceforge.ganttproject.gui.zoom.ZoomEvent", "parameterclass":422, "classid":180, "classname":"net.sourceforge.ganttproject.chart.ChartViewState$Listener", "methodid":1839, "methodname":"net.sourceforge.ganttproject.chart.ChartViewState$Listener.zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "isreturn":0, "sourcecode":"public void zoomChanged(ZoomEvent e);"},
 {"id":444, "parametername":"GPCalendar.DayType dayType", "parametertype":"net.sourceforge.ganttproject.calendar.GPCalendar$DayType", "parameterclass":145, "classid":183, "classname":"net.sourceforge.ganttproject.chart.DayTypeAlternance", "methodid":1843, "methodname":"net.sourceforge.ganttproject.chart.DayTypeAlternance.-init-(net.sourceforge.ganttproject.calendar.GPCalendar$DayType,net.sourceforge.ganttproject.task.TaskLength,java.util.Date)", "isreturn":0, "sourcecode":"DayTypeAlternance(GPCalendar.DayType dayType, TaskLength duration, Date endDate) {\r\n    myDayType = dayType;\r\n    myDuration = duration;\r\n    myEnd = endDate;\r\n}"},
 {"id":445, "parametername":"TaskLength duration", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":183, "classname":"net.sourceforge.ganttproject.chart.DayTypeAlternance", "methodid":1843, "methodname":"net.sourceforge.ganttproject.chart.DayTypeAlternance.-init-(net.sourceforge.ganttproject.calendar.GPCalendar$DayType,net.sourceforge.ganttproject.task.TaskLength,java.util.Date)", "isreturn":0, "sourcecode":"DayTypeAlternance(GPCalendar.DayType dayType, TaskLength duration, Date endDate) {\r\n    myDayType = dayType;\r\n    myDuration = duration;\r\n    myEnd = endDate;\r\n}"},
 {"id":446, "parametername":"GraphicPrimitiveContainer.HAlignment halignment", "parametertype":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$HAlignment", "parameterclass":187, "classid":190, "classname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text", "methodid":1894, "methodname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text.setAlignment(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$HAlignment,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$VAlignment)", "isreturn":0, "sourcecode":"public void setAlignment(GraphicPrimitiveContainer.HAlignment halignment, GraphicPrimitiveContainer.VAlignment valignment) {\r\n    myHAlignment = halignment;\r\n    myVAlignment = valignment;\r\n}"},
 {"id":447, "parametername":"GraphicPrimitiveContainer.VAlignment valignment", "parametertype":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$VAlignment", "parameterclass":191, "classid":190, "classname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text", "methodid":1894, "methodname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text.setAlignment(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$HAlignment,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$VAlignment)", "isreturn":0, "sourcecode":"public void setAlignment(GraphicPrimitiveContainer.HAlignment halignment, GraphicPrimitiveContainer.VAlignment valignment) {\r\n    myHAlignment = halignment;\r\n    myVAlignment = valignment;\r\n}"},
 {"id":448, "parametername":"Painter painter", "parametertype":"net.sourceforge.ganttproject.chart.Painter", "parameterclass":196, "classid":192, "classname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "methodid":1868, "methodname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer.paint(net.sourceforge.ganttproject.chart.Painter,java.awt.Graphics)", "isreturn":0, "sourcecode":"void paint(Painter painter, Graphics g) {\r\n    for (int i = 0; i < (myRectangles.size()); i++) {\r\n        GraphicPrimitiveContainer.Rectangle next = ((GraphicPrimitiveContainer.Rectangle) (myRectangles.get(i)));\r\n        painter.paint(next);\r\n    }\r\n    for (int i = 0; i < (myLines.size()); i++) {\r\n        GraphicPrimitiveContainer.Line next = ((GraphicPrimitiveContainer.Line) (myLines.get(i)));\r\n        Color foreColor = next.getForegroundColor();\r\n        if (foreColor == null) {\r\n            foreColor = Color.BLACK;\r\n        }\r\n        g.setColor(foreColor);\r\n        g.drawLine(next.myStartX, next.myStartY, next.myFinishX, next.myFinishY);\r\n    }\r\n    for (int i = 0; i < (myTexts.size()); i++) {\r\n        GraphicPrimitiveContainer.Text next = ((GraphicPrimitiveContainer.Text) (myTexts.get(i)));\r\n        painter.paint(next);\r\n    }\r\n}"},
 {"id":449, "parametername":"GraphicPrimitiveContainer.GraphicPrimitive primitive", "parametertype":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive", "parameterclass":186, "classid":192, "classname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "methodid":1858, "methodname":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer.bind(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,java.lang.Object)", "isreturn":0, "sourcecode":"void bind(GraphicPrimitiveContainer.GraphicPrimitive primitive, Object modelObject) {\r\n    myModelObject2primitive.put(modelObject, primitive);\r\n    primitive.setModelObject(modelObject);\r\n}"},
 {"id":450, "parametername":"TimeUnitStack timeunitStack", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitStack", "parameterclass":639, "classid":194, "classname":"net.sourceforge.ganttproject.chart.OffsetCalculatorImpl", "methodid":1903, "methodname":"net.sourceforge.ganttproject.chart.OffsetCalculatorImpl.-init-(net.sourceforge.ganttproject.time.TimeUnitStack)", "isreturn":0, "sourcecode":"public OffsetCalculatorImpl(TimeUnitStack timeunitStack) {\r\n    myStack = timeunitStack;\r\n}"},
 {"id":451, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":194, "classname":"net.sourceforge.ganttproject.chart.OffsetCalculatorImpl", "methodid":1904, "methodname":"net.sourceforge.ganttproject.chart.OffsetCalculatorImpl.calculateOffsets(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"public ChartModelBase.Offset[] calculateOffsets(TimeFrame timeFrame, TimeUnit frameBottomUnit, Date bottomUnitStartDate, TimeUnit offsetUnit, int frameBottomUnitWidth) {\r\n    ChartModelBase.Offset[] result;\r\n    // Date bottomUnitEndDate = timeFrame.getUnitFinish(frameBottomUnit, unitIndex);\r\n    if (offsetUnit.equals(frameBottomUnit)) {\r\n        result = new ChartModelBase.Offset[]{ new ChartModelBase.Offset(offsetUnit, bottomUnitStartDate, bottomUnitStartDate, 0, null) };\r\n    } else\r\n        if (frameBottomUnit.isConstructedFrom(offsetUnit)) {\r\n            // java.util.List buf = new ArrayList();\r\n            int outerFrameUnitCount = timeFrame.getUnitCount(offsetUnit);\r\n            TimeFrame innerFrame = myStack.createTimeFrame(bottomUnitStartDate, frameBottomUnit, offsetUnit);\r\n            int offsetUnitCount = innerFrame.getUnitCount(offsetUnit);\r\n            result = new ChartModelBase.Offset[offsetUnitCount];\r\n            for (int i = 0; i < offsetUnitCount; i++) {\r\n                Date offsetEnd = innerFrame.getUnitFinish(offsetUnit, i);\r\n                int offsetPixels = ((i + 1) * frameBottomUnitWidth) / outerFrameUnitCount;\r\n                result[i] = new ChartModelBase.Offset(offsetUnit, bottomUnitStartDate, offsetEnd, offsetPixels, null);\r\n            }\r\n        } else {\r\n            throw new RuntimeException(\"We should not be here\");\r\n        }\r\n\r\n    return result;\r\n}"},
 {"id":452, "parametername":"TimeUnit frameBottomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":194, "classname":"net.sourceforge.ganttproject.chart.OffsetCalculatorImpl", "methodid":1904, "methodname":"net.sourceforge.ganttproject.chart.OffsetCalculatorImpl.calculateOffsets(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"public ChartModelBase.Offset[] calculateOffsets(TimeFrame timeFrame, TimeUnit frameBottomUnit, Date bottomUnitStartDate, TimeUnit offsetUnit, int frameBottomUnitWidth) {\r\n    ChartModelBase.Offset[] result;\r\n    // Date bottomUnitEndDate = timeFrame.getUnitFinish(frameBottomUnit, unitIndex);\r\n    if (offsetUnit.equals(frameBottomUnit)) {\r\n        result = new ChartModelBase.Offset[]{ new ChartModelBase.Offset(offsetUnit, bottomUnitStartDate, bottomUnitStartDate, 0, null) };\r\n    } else\r\n        if (frameBottomUnit.isConstructedFrom(offsetUnit)) {\r\n            // java.util.List buf = new ArrayList();\r\n            int outerFrameUnitCount = timeFrame.getUnitCount(offsetUnit);\r\n            TimeFrame innerFrame = myStack.createTimeFrame(bottomUnitStartDate, frameBottomUnit, offsetUnit);\r\n            int offsetUnitCount = innerFrame.getUnitCount(offsetUnit);\r\n            result = new ChartModelBase.Offset[offsetUnitCount];\r\n            for (int i = 0; i < offsetUnitCount; i++) {\r\n                Date offsetEnd = innerFrame.getUnitFinish(offsetUnit, i);\r\n                int offsetPixels = ((i + 1) * frameBottomUnitWidth) / outerFrameUnitCount;\r\n                result[i] = new ChartModelBase.Offset(offsetUnit, bottomUnitStartDate, offsetEnd, offsetPixels, null);\r\n            }\r\n        } else {\r\n            throw new RuntimeException(\"We should not be here\");\r\n        }\r\n\r\n    return result;\r\n}"},
 {"id":453, "parametername":"TimeUnit offsetUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":194, "classname":"net.sourceforge.ganttproject.chart.OffsetCalculatorImpl", "methodid":1904, "methodname":"net.sourceforge.ganttproject.chart.OffsetCalculatorImpl.calculateOffsets(net.sourceforge.ganttproject.time.TimeFrame,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"public ChartModelBase.Offset[] calculateOffsets(TimeFrame timeFrame, TimeUnit frameBottomUnit, Date bottomUnitStartDate, TimeUnit offsetUnit, int frameBottomUnitWidth) {\r\n    ChartModelBase.Offset[] result;\r\n    // Date bottomUnitEndDate = timeFrame.getUnitFinish(frameBottomUnit, unitIndex);\r\n    if (offsetUnit.equals(frameBottomUnit)) {\r\n        result = new ChartModelBase.Offset[]{ new ChartModelBase.Offset(offsetUnit, bottomUnitStartDate, bottomUnitStartDate, 0, null) };\r\n    } else\r\n        if (frameBottomUnit.isConstructedFrom(offsetUnit)) {\r\n            // java.util.List buf = new ArrayList();\r\n            int outerFrameUnitCount = timeFrame.getUnitCount(offsetUnit);\r\n            TimeFrame innerFrame = myStack.createTimeFrame(bottomUnitStartDate, frameBottomUnit, offsetUnit);\r\n            int offsetUnitCount = innerFrame.getUnitCount(offsetUnit);\r\n            result = new ChartModelBase.Offset[offsetUnitCount];\r\n            for (int i = 0; i < offsetUnitCount; i++) {\r\n                Date offsetEnd = innerFrame.getUnitFinish(offsetUnit, i);\r\n                int offsetPixels = ((i + 1) * frameBottomUnitWidth) / outerFrameUnitCount;\r\n                result[i] = new ChartModelBase.Offset(offsetUnit, bottomUnitStartDate, offsetEnd, offsetPixels, null);\r\n            }\r\n        } else {\r\n            throw new RuntimeException(\"We should not be here\");\r\n        }\r\n\r\n    return result;\r\n}"},
 {"id":454, "parametername":"UIFacade uifacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":195, "classname":"net.sourceforge.ganttproject.chart.OptionsDialogAction", "methodid":1905, "methodname":"net.sourceforge.ganttproject.chart.OptionsDialogAction.-init-(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup[],net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public OptionsDialogAction(GPOptionGroup[] groups, UIFacade uifacade) {\r\n    super(GanttLanguage.getInstance().getText(\"chartOptions\"));\r\n    myGroups = groups;\r\n    myUIFacade = uifacade;\r\n    this.putValue(Action.SMALL_ICON, new ImageIcon(getClass().getResource(\"/icons/chartOptions_16.gif\")));\r\n}"},
 {"id":455, "parametername":"GraphicPrimitiveContainer.Rectangle rectangle", "parametertype":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle", "parameterclass":189, "classid":196, "classname":"net.sourceforge.ganttproject.chart.Painter", "methodid":1914, "methodname":"net.sourceforge.ganttproject.chart.Painter.paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "isreturn":0, "sourcecode":"void paint(GraphicPrimitiveContainer.Rectangle rectangle);"},
 {"id":456, "parametername":"GraphicPrimitiveContainer.Text next", "parametertype":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text", "parameterclass":190, "classid":196, "classname":"net.sourceforge.ganttproject.chart.Painter", "methodid":1915, "methodname":"net.sourceforge.ganttproject.chart.Painter.paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text)", "isreturn":0, "sourcecode":"void paint(GraphicPrimitiveContainer.Text next);"},
 {"id":457, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":197, "classname":"net.sourceforge.ganttproject.chart.PublicHolidayDialogAction", "methodid":1916, "methodname":"net.sourceforge.ganttproject.chart.PublicHolidayDialogAction.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public PublicHolidayDialogAction(IGanttProject project, UIFacade uiFacade) {\r\n    super(GanttProject.correctLabel(PublicHolidayDialogAction.language.getText(\"editPublicHolidays\")));\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    this.putValue(Action.SMALL_ICON, new ImageIcon(getClass().getResource(\"/icons/holidays_16.gif\")));\r\n}"},
 {"id":458, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":197, "classname":"net.sourceforge.ganttproject.chart.PublicHolidayDialogAction", "methodid":1916, "methodname":"net.sourceforge.ganttproject.chart.PublicHolidayDialogAction.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public PublicHolidayDialogAction(IGanttProject project, UIFacade uiFacade) {\r\n    super(GanttProject.correctLabel(PublicHolidayDialogAction.language.getText(\"editPublicHolidays\")));\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    this.putValue(Action.SMALL_ICON, new ImageIcon(getClass().getResource(\"/icons/holidays_16.gif\")));\r\n}"},
 {"id":459, "parametername":"TimeUnitStack timeUnitStack", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitStack", "parameterclass":639, "classid":198, "classname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder", "methodid":1920, "methodname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder.-init-(net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,int,int,float)", "isreturn":0, "sourcecode":"RegularFrameOffsetBuilder(TimeUnitStack timeUnitStack, GPCalendar calendar, TimeUnit topUnit, TimeUnit bottomUnit, Date startDate, int bottomUnitWidth, int chartWidth, float weekendDecreaseFactor) {\r\n    myTimeUnitStack = timeUnitStack;\r\n    myCalendar = calendar;\r\n    myStartDate = startDate;\r\n    myTopUnit = topUnit;\r\n    myBottomUnit = bottomUnit;\r\n    myBottomUnitWidth = bottomUnitWidth;\r\n    myChartWidth = chartWidth;\r\n    myWeekendDecreaseFactor = weekendDecreaseFactor;\r\n}"},
 {"id":460, "parametername":"GPCalendar calendar", "parametertype":"net.sourceforge.ganttproject.calendar.GPCalendar", "parameterclass":146, "classid":198, "classname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder", "methodid":1920, "methodname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder.-init-(net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,int,int,float)", "isreturn":0, "sourcecode":"RegularFrameOffsetBuilder(TimeUnitStack timeUnitStack, GPCalendar calendar, TimeUnit topUnit, TimeUnit bottomUnit, Date startDate, int bottomUnitWidth, int chartWidth, float weekendDecreaseFactor) {\r\n    myTimeUnitStack = timeUnitStack;\r\n    myCalendar = calendar;\r\n    myStartDate = startDate;\r\n    myTopUnit = topUnit;\r\n    myBottomUnit = bottomUnit;\r\n    myBottomUnitWidth = bottomUnitWidth;\r\n    myChartWidth = chartWidth;\r\n    myWeekendDecreaseFactor = weekendDecreaseFactor;\r\n}"},
 {"id":461, "parametername":"TimeUnit topUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":198, "classname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder", "methodid":1920, "methodname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder.-init-(net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,int,int,float)", "isreturn":0, "sourcecode":"RegularFrameOffsetBuilder(TimeUnitStack timeUnitStack, GPCalendar calendar, TimeUnit topUnit, TimeUnit bottomUnit, Date startDate, int bottomUnitWidth, int chartWidth, float weekendDecreaseFactor) {\r\n    myTimeUnitStack = timeUnitStack;\r\n    myCalendar = calendar;\r\n    myStartDate = startDate;\r\n    myTopUnit = topUnit;\r\n    myBottomUnit = bottomUnit;\r\n    myBottomUnitWidth = bottomUnitWidth;\r\n    myChartWidth = chartWidth;\r\n    myWeekendDecreaseFactor = weekendDecreaseFactor;\r\n}"},
 {"id":462, "parametername":"TimeUnit bottomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":198, "classname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder", "methodid":1920, "methodname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder.-init-(net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,int,int,float)", "isreturn":0, "sourcecode":"RegularFrameOffsetBuilder(TimeUnitStack timeUnitStack, GPCalendar calendar, TimeUnit topUnit, TimeUnit bottomUnit, Date startDate, int bottomUnitWidth, int chartWidth, float weekendDecreaseFactor) {\r\n    myTimeUnitStack = timeUnitStack;\r\n    myCalendar = calendar;\r\n    myStartDate = startDate;\r\n    myTopUnit = topUnit;\r\n    myBottomUnit = bottomUnit;\r\n    myBottomUnitWidth = bottomUnitWidth;\r\n    myChartWidth = chartWidth;\r\n    myWeekendDecreaseFactor = weekendDecreaseFactor;\r\n}"},
 {"id":463, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":198, "classname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder", "methodid":1927, "methodname":"net.sourceforge.ganttproject.chart.RegularFrameOffsetBuilder.getOffsetStep(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"protected float getOffsetStep(TimeFrame timeFrame) {\r\n    return 1;\r\n}"},
 {"id":464, "parametername":"ChartModelBase chartModel", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase", "parameterclass":170, "classid":199, "classname":"net.sourceforge.ganttproject.chart.RenderedChartImage", "methodid":1931, "methodname":"net.sourceforge.ganttproject.chart.RenderedChartImage.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,java.awt.image.BufferedImage,int,int)", "isreturn":0, "sourcecode":"public RenderedChartImage(ChartModelBase chartModel, BufferedImage taskImage, int chartWidth, int chartHeight) {\r\n    myChartModel = chartModel;\r\n    myTaskImage = taskImage;\r\n    sampleModel = myColorModel.createCompatibleSampleModel(chartWidth, chartHeight);\r\n    colorModel = myColorModel;\r\n    minX = 0;\r\n    minY = 0;\r\n    width = chartWidth + (taskImage.getWidth());\r\n    height = chartHeight;\r\n    tileWidth = width;\r\n    tileHeight = 32;\r\n}"},
 {"id":465, "parametername":"ChartModelBase chartModel", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase", "parameterclass":170, "classid":200, "classname":"net.sourceforge.ganttproject.chart.RenderedGanttChartImage", "methodid":1936, "methodname":"net.sourceforge.ganttproject.chart.RenderedGanttChartImage.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation,java.util.List,java.awt.image.BufferedImage,int,int)", "isreturn":0, "sourcecode":"public RenderedGanttChartImage(ChartModelBase chartModel, GanttGraphicArea.ChartImplementation chartImplementation, List tasks, BufferedImage taskImage, int chartWidth, int chartHeight) {\r\n    super(chartModel, taskImage, chartWidth, chartHeight);\r\n    myVisibleTasks = tasks;\r\n    myChartImplementation = chartImplementation;\r\n    // TODO Auto-generated constructor stub\r\n}"},
 {"id":466, "parametername":"GanttGraphicArea.ChartImplementation chartImplementation", "parametertype":"net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation", "parameterclass":32, "classid":200, "classname":"net.sourceforge.ganttproject.chart.RenderedGanttChartImage", "methodid":1936, "methodname":"net.sourceforge.ganttproject.chart.RenderedGanttChartImage.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.GanttGraphicArea$ChartImplementation,java.util.List,java.awt.image.BufferedImage,int,int)", "isreturn":0, "sourcecode":"public RenderedGanttChartImage(ChartModelBase chartModel, GanttGraphicArea.ChartImplementation chartImplementation, List tasks, BufferedImage taskImage, int chartWidth, int chartHeight) {\r\n    super(chartModel, taskImage, chartWidth, chartHeight);\r\n    myVisibleTasks = tasks;\r\n    myChartImplementation = chartImplementation;\r\n    // TODO Auto-generated constructor stub\r\n}"},
 {"id":467, "parametername":"ChartModelBase chartModel", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase", "parameterclass":170, "classid":201, "classname":"net.sourceforge.ganttproject.chart.RenderedResourceChartImage", "methodid":1938, "methodname":"net.sourceforge.ganttproject.chart.RenderedResourceChartImage.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation,java.awt.image.BufferedImage,int,int)", "isreturn":0, "sourcecode":"public RenderedResourceChartImage(ChartModelBase chartModel, ChartComponentBase.AbstractChartImplementation chartImplementation, BufferedImage resourceTreeImage, int chartWidth, int chartHeight) {\r\n    super(chartModel, resourceTreeImage, chartWidth, chartHeight);\r\n    myChartImplementation = chartImplementation;\r\n    // TODO Auto-generated constructor stub\r\n}"},
 {"id":468, "parametername":"ChartComponentBase.AbstractChartImplementation chartImplementation", "parametertype":"net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation", "parameterclass":1, "classid":201, "classname":"net.sourceforge.ganttproject.chart.RenderedResourceChartImage", "methodid":1938, "methodname":"net.sourceforge.ganttproject.chart.RenderedResourceChartImage.-init-(net.sourceforge.ganttproject.chart.ChartModelBase,net.sourceforge.ganttproject.ChartComponentBase$AbstractChartImplementation,java.awt.image.BufferedImage,int,int)", "isreturn":0, "sourcecode":"public RenderedResourceChartImage(ChartModelBase chartModel, ChartComponentBase.AbstractChartImplementation chartImplementation, BufferedImage resourceTreeImage, int chartWidth, int chartHeight) {\r\n    super(chartModel, resourceTreeImage, chartWidth, chartHeight);\r\n    myChartImplementation = chartImplementation;\r\n    // TODO Auto-generated constructor stub\r\n}"},
 {"id":469, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":202, "classname":"net.sourceforge.ganttproject.chart.ResourceChart", "methodid":1940, "methodname":"net.sourceforge.ganttproject.chart.ResourceChart.isExpanded(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"boolean isExpanded(ProjectResource resource);"},
 {"id":470, "parametername":"ChartModelResource model", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelResource", "parameterclass":174, "classid":204, "classname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "methodid":1941, "methodname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.-init-(net.sourceforge.ganttproject.chart.ChartModelResource,net.sourceforge.ganttproject.chart.ResourceChart)", "isreturn":0, "sourcecode":"public ResourceLoadRenderer(ChartModelResource model, ResourceChart resourceChart) {\r\n    super(model);\r\n    myResourcechart = resourceChart;\r\n}"},
 {"id":471, "parametername":"ResourceChart resourceChart", "parametertype":"net.sourceforge.ganttproject.chart.ResourceChart", "parameterclass":202, "classid":204, "classname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "methodid":1941, "methodname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.-init-(net.sourceforge.ganttproject.chart.ChartModelResource,net.sourceforge.ganttproject.chart.ResourceChart)", "isreturn":0, "sourcecode":"public ResourceLoadRenderer(ChartModelResource model, ResourceChart resourceChart) {\r\n    super(model);\r\n    myResourcechart = resourceChart;\r\n}"},
 {"id":472, "parametername":"LoadDistribution distribution", "parametertype":"net.sourceforge.ganttproject.resource.LoadDistribution", "parameterclass":503, "classid":204, "classname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "methodid":1952, "methodname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.renderLoadDetails(net.sourceforge.ganttproject.resource.LoadDistribution,int)", "isreturn":0, "sourcecode":"/**\r\n * Renders resource load details, that is, tasks where the resource\r\n * is assigned to, with that resource load percentage\r\n */\r\nprivate void renderLoadDetails(LoadDistribution distribution, int ypos) {\r\n    int yPos2 = ypos;\r\n    /* <Task, List<Load>> */\r\n    Map task2loads = distribution.getSeparatedTaskLoads();\r\n    ResourceAssignment[] assignments = distribution.getResource().getAssignments();\r\n    for (int i = 0; i < (assignments.length); i++) {\r\n        ResourceAssignment assignment = assignments[i];\r\n        List nextLoads = ((List) (task2loads.get(assignment.getTask())));\r\n        yPos2 += getConfig().getRowHeight();\r\n        if (nextLoads == null) {\r\n            continue;\r\n        }\r\n        buildTasksLoadsRectangles(nextLoads, yPos2);\r\n    }\r\n}"},
 {"id":473, "parametername":"LoadDistribution.Load prevLoad", "parametertype":"net.sourceforge.ganttproject.resource.LoadDistribution$Load", "parameterclass":502, "classid":204, "classname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "methodid":1954, "methodname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.renderLoads(net.sourceforge.ganttproject.resource.LoadDistribution$Load,net.sourceforge.ganttproject.resource.LoadDistribution$Load,java.util.LinkedList,int,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Renders prevLoad, with curLoad serving as a load right border marker and style hint\r\n */\r\nprivate void renderLoads(LoadDistribution.Load prevLoad, LoadDistribution.Load curLoad, LinkedList offsets, /* <Offset> */\r\nint ypos, String suffix) {\r\n    final Date prevEnd = curLoad.startDate;\r\n    final Date prevStart = prevLoad.startDate;\r\n    GraphicPrimitiveContainer.Rectangle nextRect = createRectangle(offsets, prevStart, prevEnd, ypos);\r\n    if (nextRect == null) {\r\n        return;\r\n    }\r\n    String style;\r\n    if (prevLoad.isResourceUnavailable()) {\r\n        style = \"dayoff\";\r\n    } else {\r\n        suffix += ((curLoad.load) == 0) ? \".last\" : \"\";\r\n        if ((prevLoad.load) < 100.0F) {\r\n            style = \"load.underload\";\r\n        } else\r\n            if ((prevLoad.load) > 100.0F) {\r\n                style = \"load.overload\";\r\n            } else {\r\n                style = \"load.normal\";\r\n            }\r\n\r\n        style += suffix;\r\n    }\r\n    nextRect.setStyle(style);\r\n    nextRect.setModelObject(new ResourceLoadRenderer.ResourceLoad(prevLoad.load));\r\n}"},
 {"id":474, "parametername":"LoadDistribution.Load curLoad", "parametertype":"net.sourceforge.ganttproject.resource.LoadDistribution$Load", "parameterclass":502, "classid":204, "classname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "methodid":1954, "methodname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.renderLoads(net.sourceforge.ganttproject.resource.LoadDistribution$Load,net.sourceforge.ganttproject.resource.LoadDistribution$Load,java.util.LinkedList,int,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Renders prevLoad, with curLoad serving as a load right border marker and style hint\r\n */\r\nprivate void renderLoads(LoadDistribution.Load prevLoad, LoadDistribution.Load curLoad, LinkedList offsets, /* <Offset> */\r\nint ypos, String suffix) {\r\n    final Date prevEnd = curLoad.startDate;\r\n    final Date prevStart = prevLoad.startDate;\r\n    GraphicPrimitiveContainer.Rectangle nextRect = createRectangle(offsets, prevStart, prevEnd, ypos);\r\n    if (nextRect == null) {\r\n        return;\r\n    }\r\n    String style;\r\n    if (prevLoad.isResourceUnavailable()) {\r\n        style = \"dayoff\";\r\n    } else {\r\n        suffix += ((curLoad.load) == 0) ? \".last\" : \"\";\r\n        if ((prevLoad.load) < 100.0F) {\r\n            style = \"load.underload\";\r\n        } else\r\n            if ((prevLoad.load) > 100.0F) {\r\n                style = \"load.overload\";\r\n            } else {\r\n                style = \"load.normal\";\r\n            }\r\n\r\n        style += suffix;\r\n    }\r\n    nextRect.setStyle(style);\r\n    nextRect.setModelObject(new ResourceLoadRenderer.ResourceLoad(prevLoad.load));\r\n}"},
 {"id":475, "parametername":"/* <Offset> */\r\nChartModelBase.Offset offsetBefore", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "parameterclass":164, "classid":204, "classname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "methodid":1949, "methodname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.getDefaultOffsetsInRange(net.sourceforge.ganttproject.chart.ChartModelBase$Offset,net.sourceforge.ganttproject.chart.ChartModelBase$Offset)", "isreturn":0, "sourcecode":"private LinkedList getDefaultOffsetsInRange(/* <Offset> */\r\nChartModelBase.Offset offsetBefore, ChartModelBase.Offset offsetAfter) {\r\n    /* <Offset> */\r\n    LinkedList result = /* <Offset> */\r\n    new LinkedList(getChartModel().getDefaultUnitOffsetsInRange(offsetBefore, offsetAfter));\r\n    if (offsetBefore != null) {\r\n        result.addFirst(offsetBefore);\r\n    }\r\n    return result;\r\n}"},
 {"id":476, "parametername":"ChartModelBase.Offset offsetAfter", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelBase$Offset", "parameterclass":164, "classid":204, "classname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "methodid":1949, "methodname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.getDefaultOffsetsInRange(net.sourceforge.ganttproject.chart.ChartModelBase$Offset,net.sourceforge.ganttproject.chart.ChartModelBase$Offset)", "isreturn":0, "sourcecode":"private LinkedList getDefaultOffsetsInRange(/* <Offset> */\r\nChartModelBase.Offset offsetBefore, ChartModelBase.Offset offsetAfter) {\r\n    /* <Offset> */\r\n    LinkedList result = /* <Offset> */\r\n    new LinkedList(getChartModel().getDefaultUnitOffsetsInRange(offsetBefore, offsetAfter));\r\n    if (offsetBefore != null) {\r\n        result.addFirst(offsetBefore);\r\n    }\r\n    return result;\r\n}"},
 {"id":477, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":204, "classname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer", "methodid":1945, "methodname":"net.sourceforge.ganttproject.chart.ResourceLoadRenderer.calculateGap(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"private int calculateGap(ProjectResource resource) {\r\n    return (resource.getAssignments().length) * (getConfig().getRowHeight());\r\n}"},
 {"id":478, "parametername":"ChartModelImpl model", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelImpl", "parameterclass":172, "classid":205, "classname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl", "methodid":1958, "methodname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelImpl)", "isreturn":0, "sourcecode":"public ResourcesRendererImpl(ChartModelImpl model) {\r\n    super(model);\r\n    // TODO Auto-generated constructor stub\r\n}"},
 {"id":479, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":205, "classname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl", "methodid":1964, "methodname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl.startTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"public void startTimeFrame(TimeFrame timeFrame) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":480, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":205, "classname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl", "methodid":1961, "methodname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl.endTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"public void endTimeFrame(TimeFrame timeFrame) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":481, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":205, "classname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl", "methodid":1965, "methodname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl.startUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public void startUnitLine(TimeUnit timeUnit) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":482, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":205, "classname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl", "methodid":1962, "methodname":"net.sourceforge.ganttproject.chart.ResourcesRendererImpl.endUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public void endUnitLine(TimeUnit timeUnit) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":483, "parametername":"TimeUnitStack timeUnitStack", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitStack", "parameterclass":639, "classid":208, "classname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder", "methodid":2001, "methodname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder.-init-(net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,int,int)", "isreturn":0, "sourcecode":"SkewedFrameOffsetBuilder(TimeUnitStack timeUnitStack, GPCalendar calendar, TimeUnit topUnit, TimeUnit bottomUnit, Date startDate, int bottomUnitWidth, int chartWidth) {\r\n    myTimeUnitStack = timeUnitStack;\r\n    myCalendar = calendar;\r\n    myStartDate = startDate;\r\n    myTopUnit = topUnit;\r\n    myBottomUnit = bottomUnit;\r\n    myBottomUnitWidth = bottomUnitWidth;\r\n    myChartWidth = chartWidth;\r\n}"},
 {"id":484, "parametername":"GPCalendar calendar", "parametertype":"net.sourceforge.ganttproject.calendar.GPCalendar", "parameterclass":146, "classid":208, "classname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder", "methodid":2001, "methodname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder.-init-(net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,int,int)", "isreturn":0, "sourcecode":"SkewedFrameOffsetBuilder(TimeUnitStack timeUnitStack, GPCalendar calendar, TimeUnit topUnit, TimeUnit bottomUnit, Date startDate, int bottomUnitWidth, int chartWidth) {\r\n    myTimeUnitStack = timeUnitStack;\r\n    myCalendar = calendar;\r\n    myStartDate = startDate;\r\n    myTopUnit = topUnit;\r\n    myBottomUnit = bottomUnit;\r\n    myBottomUnitWidth = bottomUnitWidth;\r\n    myChartWidth = chartWidth;\r\n}"},
 {"id":485, "parametername":"TimeUnit topUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":208, "classname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder", "methodid":2001, "methodname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder.-init-(net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,int,int)", "isreturn":0, "sourcecode":"SkewedFrameOffsetBuilder(TimeUnitStack timeUnitStack, GPCalendar calendar, TimeUnit topUnit, TimeUnit bottomUnit, Date startDate, int bottomUnitWidth, int chartWidth) {\r\n    myTimeUnitStack = timeUnitStack;\r\n    myCalendar = calendar;\r\n    myStartDate = startDate;\r\n    myTopUnit = topUnit;\r\n    myBottomUnit = bottomUnit;\r\n    myBottomUnitWidth = bottomUnitWidth;\r\n    myChartWidth = chartWidth;\r\n}"},
 {"id":486, "parametername":"TimeUnit bottomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":208, "classname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder", "methodid":2001, "methodname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder.-init-(net.sourceforge.ganttproject.time.TimeUnitStack,net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,int,int)", "isreturn":0, "sourcecode":"SkewedFrameOffsetBuilder(TimeUnitStack timeUnitStack, GPCalendar calendar, TimeUnit topUnit, TimeUnit bottomUnit, Date startDate, int bottomUnitWidth, int chartWidth) {\r\n    myTimeUnitStack = timeUnitStack;\r\n    myCalendar = calendar;\r\n    myStartDate = startDate;\r\n    myTopUnit = topUnit;\r\n    myBottomUnit = bottomUnit;\r\n    myBottomUnitWidth = bottomUnitWidth;\r\n    myChartWidth = chartWidth;\r\n}"},
 {"id":487, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":207, "classname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder$SkewedFramesWidthFunction", "methodid":2011, "methodname":"net.sourceforge.ganttproject.chart.SkewedFrameOffsetBuilder$SkewedFramesWidthFunction.getTimeFrameWidth(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"public int getTimeFrameWidth(TimeFrame timeFrame) {\r\n    int defaultUnitsPerTopUnit = timeFrame.getUnitCount(myTimeUnitStack.getDefaultTimeUnit());\r\n    return ((int) (defaultUnitsPerTopUnit * (myWidthPerDefaultUnit)));\r\n}"},
 {"id":488, "parametername":"ChartUIConfiguration configuration", "parametertype":"net.sourceforge.ganttproject.chart.ChartUIConfiguration", "parameterclass":179, "classid":212, "classname":"net.sourceforge.ganttproject.chart.StyledPainterImpl", "methodid":2013, "methodname":"net.sourceforge.ganttproject.chart.StyledPainterImpl.-init-(net.sourceforge.ganttproject.chart.ChartUIConfiguration)", "isreturn":0, "sourcecode":"public StyledPainterImpl(ChartUIConfiguration configuration) {\r\n    // myGraphics = g;\r\n    myStyle2painter.put(\"task\", myTaskRectanglePainter);\r\n    myStyle2painter.put(\"task.start\", myTaskStartRectanglePainter);\r\n    myStyle2painter.put(\"task.end\", myTaskEndRectanglePainter);\r\n    myStyle2painter.put(\"task.startend\", myTaskStartEndRectanglePainter);\r\n    myConfig = configuration;\r\n    myStyle2painter.put(\"calendar.holiday\", myCalendarHolidayPainter);\r\n    myStyle2painter.put(\"task.milestone\", myMilestonePanter);\r\n    myStyle2painter.put(\"task.holiday\", myTaskHolidayRectanglePainter);\r\n    myStyle2painter.put(\"task.supertask\", myTaskSupertaskRectanglePainter);\r\n    myStyle2painter.put(\"task.supertask.start\", mySupertaskStartPainter);\r\n    myStyle2painter.put(\"task.supertask.end\", mySupertaskEndPainter);\r\n    myStyle2painter.put(\"task.projectTask\", myTaskProjectTaskRectanglePainter);\r\n    myStyle2painter.put(\"task.projectTask.start\", myProjectTaskStartPainter);\r\n    myStyle2painter.put(\"task.projectTask.end\", myProjectTaskEndPainter);\r\n    myStyle2painter.put(\"task.progress\", new StyledPainterImpl.ColouredRectanglePainter(Color.BLACK));\r\n    myStyle2painter.put(\"task.progress.end\", new StyledPainterImpl.ColouredRectanglePainter(Color.BLACK));\r\n    myStyle2painter.put(\"load.normal\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.normal.first\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.normal.last\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.normal.first.last\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.overload\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"dependency.arrow.down\", myArrowDownPainter);\r\n    myStyle2painter.put(\"load.overload.first\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.overload.last\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.overload.first.last\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"dependency.arrow.up\", myArrowUpPainter);\r\n    myStyle2painter.put(\"dependency.arrow.left\", myArrowLeftPainter);\r\n    myStyle2painter.put(\"dependency.arrow.right\", myArrowRightPainter);\r\n    myStyle2painter.put(\"dayoff\", myDayOffPainter);\r\n    myStyle2painter.put(\"load.underload\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.underload.first\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.underload.last\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"load.underload.first.last\", myResourceLoadPainter);\r\n    myStyle2painter.put(\"previousStateTask\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.earlier\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.later\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.milestone\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.milestone.earlier\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.milestone.later\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.super\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.super.earlier\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.super.later\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.super.apart\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.super.apart.earlier\", myPreviousStateTaskRectanglePainter);\r\n    myStyle2painter.put(\"previousStateTask.super.apart.later\", myPreviousStateTaskRectanglePainter);\r\n    myTextLengthCalculator = new TextLengthCalculatorImpl(myGraphics);\r\n    margin = myConfig.getMargin();\r\n}"},
 {"id":489, "parametername":"GraphicPrimitiveContainer.Rectangle next", "parametertype":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle", "parameterclass":189, "classid":212, "classname":"net.sourceforge.ganttproject.chart.StyledPainterImpl", "methodid":2016, "methodname":"net.sourceforge.ganttproject.chart.StyledPainterImpl.paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "isreturn":0, "sourcecode":"public void paint(GraphicPrimitiveContainer.Rectangle next) {\r\n    if ((myGraphics) == null) {\r\n        throw new RuntimeException(\"Graphics is null\");\r\n    }\r\n    Graphics g = myGraphics;\r\n    StyledPainterImpl.RectanglePainter painter = ((StyledPainterImpl.RectanglePainter) (myStyle2painter.get(next.getStyle())));\r\n    if (painter != null) {\r\n        painter.paint(next);\r\n    } else {\r\n        if ((next.getBackgroundColor()) == null) {\r\n            Color foreColor = next.getForegroundColor();\r\n            if (foreColor == null) {\r\n                foreColor = Color.BLACK;\r\n            }\r\n            g.setColor(foreColor);\r\n            g.drawRect(next.myLeftX, next.myTopY, next.myWidth, next.myHeight);\r\n        } else {\r\n            g.setColor(next.getBackgroundColor());\r\n            g.fillRect(next.myLeftX, next.myTopY, next.myWidth, next.myHeight);\r\n        }\r\n    }\r\n}"},
 {"id":490, "parametername":"GraphicPrimitiveContainer.Rectangle next", "parametertype":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle", "parameterclass":189, "classid":211, "classname":"net.sourceforge.ganttproject.chart.StyledPainterImpl$TaskRectanglePainter", "methodid":2026, "methodname":"net.sourceforge.ganttproject.chart.StyledPainterImpl$TaskRectanglePainter.paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "isreturn":0, "sourcecode":"public void paint(GraphicPrimitiveContainer.Rectangle next) {\r\n    Object modelObject = next.getModelObject();\r\n    if ((modelObject instanceof TaskActivity) == false) {\r\n        throw new RuntimeException(\"Model object is expected to be TaskActivity \");\r\n    }\r\n    Task task = ((TaskActivity) (modelObject)).getTask();\r\n    Color c = task.getColor();\r\n    if (c == null) {\r\n        c = getDefaultColor();\r\n    }\r\n    Graphics2D g = ((Graphics2D) (myGraphics));\r\n    g.setColor(c);\r\n    ShapePaint shapePaint = task.getShape();\r\n    if ((myConfig.isCriticalPathOn()) && (task.isCritical())) {\r\n        shapePaint = new ShapePaint(ShapeConstants.THICK_BACKSLASH, Color.BLACK, c);\r\n    }\r\n    if (shapePaint != null) {\r\n        g.setPaint(shapePaint);\r\n    }\r\n    g.fillRect(next.myLeftX, next.myTopY, next.myWidth, next.myHeight);\r\n    g.setColor(Color.black);\r\n    drawBorder(g, next);\r\n}"},
 {"id":491, "parametername":"GraphicPrimitiveContainer.Rectangle next", "parametertype":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle", "parameterclass":189, "classid":211, "classname":"net.sourceforge.ganttproject.chart.StyledPainterImpl$TaskRectanglePainter", "methodid":2023, "methodname":"net.sourceforge.ganttproject.chart.StyledPainterImpl$TaskRectanglePainter.drawBorder(java.awt.Graphics,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "isreturn":0, "sourcecode":"protected void drawBorder(Graphics g, GraphicPrimitiveContainer.Rectangle next) {\r\n    g.drawLine(((next.myLeftX) - (getCorrectionShift())), next.myTopY, ((next.getRightX()) - (getCorrectionShift())), next.myTopY);\r\n    g.drawLine(((next.myLeftX) - (getCorrectionShift())), next.getBottomY(), ((next.getRightX()) - (getCorrectionShift())), next.getBottomY());\r\n}"},
 {"id":492, "parametername":"GraphicPrimitiveContainer.Rectangle next", "parametertype":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle", "parameterclass":189, "classid":210, "classname":"net.sourceforge.ganttproject.chart.StyledPainterImpl$RectanglePainter", "methodid":2021, "methodname":"net.sourceforge.ganttproject.chart.StyledPainterImpl$RectanglePainter.paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "isreturn":0, "sourcecode":"public void paint(GraphicPrimitiveContainer.Rectangle next);"},
 {"id":493, "parametername":"GraphicPrimitiveContainer.Rectangle next", "parametertype":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle", "parameterclass":189, "classid":209, "classname":"net.sourceforge.ganttproject.chart.StyledPainterImpl$ColouredRectanglePainter", "methodid":2020, "methodname":"net.sourceforge.ganttproject.chart.StyledPainterImpl$ColouredRectanglePainter.paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "isreturn":0, "sourcecode":"public void paint(GraphicPrimitiveContainer.Rectangle next) {\r\n    Graphics g = myGraphics;\r\n    g.setColor(myColor);\r\n    g.fillRect(next.myLeftX, next.myTopY, next.myWidth, next.myHeight);\r\n}"},
 {"id":494, "parametername":"GraphicPrimitiveContainer.Text next", "parametertype":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text", "parameterclass":190, "classid":212, "classname":"net.sourceforge.ganttproject.chart.StyledPainterImpl", "methodid":2017, "methodname":"net.sourceforge.ganttproject.chart.StyledPainterImpl.paint(net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Text)", "isreturn":0, "sourcecode":"public void paint(GraphicPrimitiveContainer.Text next) {\r\n    Font graphicFont = myGraphics.getFont();\r\n    int requestedMaxLength = next.getMaxLength();\r\n    Color foreColor = next.getForegroundColor();\r\n    if (foreColor == null) {\r\n        foreColor = Color.BLACK;\r\n    }\r\n    myGraphics.setColor(foreColor);\r\n    if ((next.getFont()) != null) {\r\n        myGraphics.setFont(next.getFont());\r\n    } else {\r\n        myGraphics.setFont(myConfig.getChartFont());\r\n    }\r\n    // myGraphics.setFont(myConfig.getChartFont().deriveFont(10f));\r\n    if (((next.getStyle()) != null) && (next.getStyle().equals(\"text.ganttinfo\")))\r\n        myGraphics.setFont(myConfig.getChartFont());\r\n\r\n    int actualLength;\r\n    String nextTextString = next.getText();\r\n    if ((next.getModelObject()) != null) {\r\n        TimeUnitText nextText = ((TimeUnitText) (next.getModelObject()));\r\n        nextTextString = nextText.getText(requestedMaxLength, myTextLengthCalculator);\r\n        actualLength = requestedMaxLength;\r\n    } else {\r\n        actualLength = TextLengthCalculatorImpl.getTextLength(myGraphics, next.getText());\r\n        if ((requestedMaxLength >= 0) && (actualLength > requestedMaxLength)) {\r\n            return;\r\n        }\r\n    }\r\n    int fontHeight = myGraphics.getFont().getSize();\r\n    int xleft = next.getLeftX();\r\n    int ybottom = next.getBottomY();\r\n    if ((GraphicPrimitiveContainer.HAlignment.CENTER) == (next.getHAlignment())) {\r\n        xleft -= actualLength / 2;\r\n    }\r\n    if ((GraphicPrimitiveContainer.HAlignment.RIGHT) == (next.getHAlignment())) {\r\n        xleft -= actualLength;\r\n    }\r\n    if ((GraphicPrimitiveContainer.VAlignment.CENTER) == (next.getVAlignment())) {\r\n        ybottom += fontHeight / 2;\r\n    }\r\n    if ((GraphicPrimitiveContainer.VAlignment.TOP) == (next.getVAlignment())) {\r\n        ybottom += fontHeight;\r\n    }\r\n    myGraphics.drawString(nextTextString, xleft, ybottom);\r\n    myGraphics.setFont(graphicFont);\r\n}"},
 {"id":495, "parametername":"ChartModelImpl model", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelImpl", "parameterclass":172, "classid":213, "classname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl", "methodid":2027, "methodname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelImpl)", "isreturn":0, "sourcecode":"public TaskGridRendererImpl(ChartModelImpl model) {\r\n    super(model);\r\n}"},
 {"id":496, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":213, "classname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl", "methodid":2034, "methodname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl.startTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"public void startTimeFrame(TimeFrame timeFrame) {\r\n}"},
 {"id":497, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":213, "classname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl", "methodid":2030, "methodname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl.endTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"public void endTimeFrame(TimeFrame timeFrame) {\r\n}"},
 {"id":498, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":213, "classname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl", "methodid":2035, "methodname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl.startUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public void startUnitLine(TimeUnit timeUnit) {\r\n}"},
 {"id":499, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":213, "classname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl", "methodid":2031, "methodname":"net.sourceforge.ganttproject.chart.TaskGridRendererImpl.endUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public void endUnitLine(TimeUnit timeUnit) {\r\n}"},
 {"id":500, "parametername":"ChartModelImpl model", "parametertype":"net.sourceforge.ganttproject.chart.ChartModelImpl", "parameterclass":172, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2043, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.-init-(net.sourceforge.ganttproject.chart.ChartModelImpl)", "isreturn":0, "sourcecode":"public TaskRendererImpl(ChartModelImpl model) {\r\n    super(model);\r\n    this.myModel = model;\r\n    getPrimitiveContainer().newLayer();\r\n    getPrimitiveContainer().newLayer();\r\n    DefaultEnumerationOption deo0 = new DefaultEnumerationOption(\"taskLabelUp\", TaskRendererImpl.ourInfoList);\r\n    DefaultEnumerationOption deo1 = new DefaultEnumerationOption(\"taskLabelDown\", TaskRendererImpl.ourInfoList);\r\n    DefaultEnumerationOption deo2 = new DefaultEnumerationOption(\"taskLabelLeft\", TaskRendererImpl.ourInfoList);\r\n    DefaultEnumerationOption deo3 = new DefaultEnumerationOption(\"taskLabelRight\", TaskRendererImpl.ourInfoList);\r\n    Mediator.addChangeValueDispatcher(deo0);\r\n    Mediator.addChangeValueDispatcher(deo1);\r\n    Mediator.addChangeValueDispatcher(deo2);\r\n    Mediator.addChangeValueDispatcher(deo3);\r\n    myLabelOptions = new EnumerationOption[]{ deo0, deo1, deo2, deo3 };\r\n    myOptionGroups = new GPOptionGroup[1];\r\n    updateOptions();\r\n}"},
 {"id":501, "parametername":"TaskDependency dependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":215, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$DependencyDrawData", "methodid":2090, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$DependencyDrawData.-init-(net.sourceforge.ganttproject.task.dependency.TaskDependency,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector)", "isreturn":0, "sourcecode":"public DependencyDrawData(TaskDependency dependency, GraphicPrimitiveContainer.GraphicPrimitive dependantPrimitive, GraphicPrimitiveContainer.GraphicPrimitive dependeePrimitive, TaskRendererImpl.PointVector dependantVector, TaskRendererImpl.PointVector dependeeVector) {\r\n    myDependency = dependency;\r\n    myDependantRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependantPrimitive));\r\n    myDependeeRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependeePrimitive));\r\n    myDependantVector = dependantVector;\r\n    myDependeeVector = dependeeVector;\r\n}"},
 {"id":502, "parametername":"GraphicPrimitiveContainer.GraphicPrimitive dependantPrimitive", "parametertype":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive", "parameterclass":186, "classid":215, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$DependencyDrawData", "methodid":2090, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$DependencyDrawData.-init-(net.sourceforge.ganttproject.task.dependency.TaskDependency,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector)", "isreturn":0, "sourcecode":"public DependencyDrawData(TaskDependency dependency, GraphicPrimitiveContainer.GraphicPrimitive dependantPrimitive, GraphicPrimitiveContainer.GraphicPrimitive dependeePrimitive, TaskRendererImpl.PointVector dependantVector, TaskRendererImpl.PointVector dependeeVector) {\r\n    myDependency = dependency;\r\n    myDependantRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependantPrimitive));\r\n    myDependeeRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependeePrimitive));\r\n    myDependantVector = dependantVector;\r\n    myDependeeVector = dependeeVector;\r\n}"},
 {"id":503, "parametername":"GraphicPrimitiveContainer.GraphicPrimitive dependeePrimitive", "parametertype":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive", "parameterclass":186, "classid":215, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$DependencyDrawData", "methodid":2090, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$DependencyDrawData.-init-(net.sourceforge.ganttproject.task.dependency.TaskDependency,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector)", "isreturn":0, "sourcecode":"public DependencyDrawData(TaskDependency dependency, GraphicPrimitiveContainer.GraphicPrimitive dependantPrimitive, GraphicPrimitiveContainer.GraphicPrimitive dependeePrimitive, TaskRendererImpl.PointVector dependantVector, TaskRendererImpl.PointVector dependeeVector) {\r\n    myDependency = dependency;\r\n    myDependantRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependantPrimitive));\r\n    myDependeeRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependeePrimitive));\r\n    myDependantVector = dependantVector;\r\n    myDependeeVector = dependeeVector;\r\n}"},
 {"id":504, "parametername":"TaskRendererImpl.PointVector dependantVector", "parametertype":"net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector", "parameterclass":217, "classid":215, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$DependencyDrawData", "methodid":2090, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$DependencyDrawData.-init-(net.sourceforge.ganttproject.task.dependency.TaskDependency,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector)", "isreturn":0, "sourcecode":"public DependencyDrawData(TaskDependency dependency, GraphicPrimitiveContainer.GraphicPrimitive dependantPrimitive, GraphicPrimitiveContainer.GraphicPrimitive dependeePrimitive, TaskRendererImpl.PointVector dependantVector, TaskRendererImpl.PointVector dependeeVector) {\r\n    myDependency = dependency;\r\n    myDependantRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependantPrimitive));\r\n    myDependeeRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependeePrimitive));\r\n    myDependantVector = dependantVector;\r\n    myDependeeVector = dependeeVector;\r\n}"},
 {"id":505, "parametername":"TaskRendererImpl.PointVector dependeeVector", "parametertype":"net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector", "parameterclass":217, "classid":215, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$DependencyDrawData", "methodid":2090, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl$DependencyDrawData.-init-(net.sourceforge.ganttproject.task.dependency.TaskDependency,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$GraphicPrimitive,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector,net.sourceforge.ganttproject.chart.TaskRendererImpl$PointVector)", "isreturn":0, "sourcecode":"public DependencyDrawData(TaskDependency dependency, GraphicPrimitiveContainer.GraphicPrimitive dependantPrimitive, GraphicPrimitiveContainer.GraphicPrimitive dependeePrimitive, TaskRendererImpl.PointVector dependantVector, TaskRendererImpl.PointVector dependeeVector) {\r\n    myDependency = dependency;\r\n    myDependantRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependantPrimitive));\r\n    myDependeeRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependeePrimitive));\r\n    myDependantVector = dependantVector;\r\n    myDependeeVector = dependeeVector;\r\n}"},
 {"id":506, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2068, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.isPathExpanded(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"private boolean isPathExpanded(Task task) {\r\n    boolean result = true;\r\n    TaskContainmentHierarchyFacade taskHierarchy = getChartModel().getTaskManager().getTaskHierarchy();\r\n    for (Task supertask = taskHierarchy.getContainer(task); (supertask != null) && (supertask != (getChartModel().getTaskManager().getRootTask())); supertask = taskHierarchy.getContainer(supertask)) {\r\n        if (!(supertask.getExpand())) {\r\n            result = false;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":507, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2087, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.startTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"public void startTimeFrame(TimeFrame timeFrame) {\r\n    myCurrentTimeFrame = timeFrame;\r\n}"},
 {"id":508, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2056, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.endTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"public void endTimeFrame(TimeFrame timeFrame) {\r\n    myCurrentTimeFrame = null;\r\n}"},
 {"id":509, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2088, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.startUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public void startUnitLine(TimeUnit timeUnit) {\r\n    if ((myCurrentTimeFrame.getBottomUnit()) == timeUnit) {\r\n        myCurrentUnit = timeUnit;\r\n    }\r\n}"},
 {"id":510, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2057, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.endUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public void endUnitLine(TimeUnit timeUnit) {\r\n    myCurrentUnit = null;\r\n}"},
 {"id":511, "parametername":"TaskActivity nextStarted", "parametertype":"net.sourceforge.ganttproject.task.TaskActivity", "parameterclass":549, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2075, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.processActivity(net.sourceforge.ganttproject.task.TaskActivity)", "isreturn":0, "sourcecode":"private void processActivity(TaskActivity nextStarted) {\r\n    if (nextStarted.isLast()) {\r\n        processLastActivity(nextStarted);\r\n    } else\r\n        if (nextStarted.isFirst()) {\r\n            processFirstActivity(nextStarted);\r\n        } else {\r\n            processRegularActivity(nextStarted);\r\n        }\r\n\r\n}"},
 {"id":512, "parametername":"TaskActivity nextStarted", "parametertype":"net.sourceforge.ganttproject.task.TaskActivity", "parameterclass":549, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2078, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.processRegularActivity(net.sourceforge.ganttproject.task.TaskActivity)", "isreturn":0, "sourcecode":"private GraphicPrimitiveContainer.Rectangle processRegularActivity(TaskActivity nextStarted) {\r\n    Task nextTask = nextStarted.getTask();\r\n    if ((nextTask.isMilestone()) && (!(nextStarted.isFirst()))) {\r\n        return null;\r\n    }\r\n    Rectangle nextBounds = getBoundingRectangle(nextStarted);\r\n    int nextLength = ((int) (nextBounds.width));\r\n    int topy = nextBounds.y;\r\n    topy = topy + (((getRowHeight()) - 20) / 2);\r\n    if (myModel.isOnlyDown())\r\n        topy = topy - 6;\r\n    else\r\n        if (myModel.isOnlyUp())\r\n            topy = topy + 6;\r\n\r\n\r\n    if (myModel.isPrevious())\r\n        topy = topy - 5;\r\n\r\n    // int posX = myPosX;\r\n    GraphicPrimitiveContainer.Rectangle nextRectangle;\r\n    // // if (nextStarted.getStart().compareTo(myUnitStart)>=0) {\r\n    // TaskLength deltaLength = nextTask.getManager().createLength(\r\n    // getChartModel().getTimeUnitStack().getDefaultTimeUnit(),\r\n    // myUnitStart, nextStarted.getStart());\r\n    // \r\n    // int deltaX = (int) (deltaLength.getLength(myCurrentUnit) * getChartModel()\r\n    // .getBottomUnitWidth());\r\n    // posX += deltaX;\r\n    // System.err.println(\"[TaskRendererImpl] myUnitStart=\"+myUnitStart+\"\r\n    // nextActivity=\"+nextStarted+\" deltaX=\"+deltaX+\"\r\n    // deltaLength=\"+deltaLength.getLength(myCurrentUnit));\r\n    // }\r\n    // else {\r\n    // nextRectangle =\r\n    // getPrimitiveContainer().createRectangle(myPosX+getChartModel().getBottomUnitWidth()-nextLength,\r\n    // topy, nextLength, getRowHeight()*3/5);\r\n    // }\r\n    boolean nextHasNested = ((ChartModelImpl) (getChartModel())).getTaskContainment().hasNestedTasks(nextTask);// JA Switch to\r\n\r\n    GraphicPrimitiveContainer container = getContainerFor(nextTask);\r\n    nextRectangle = container.createRectangle(nextBounds.x, topy, ((int) (nextLength)), 12);// CodeReview: why 12, not 15?\r\n\r\n    // System.err.println(\"task=\"+nextStarted.getTask()+\" nested tasks\r\n    // length=\"+nextStarted.getTask().getNestedTasks().length);\r\n    if (nextStarted.getTask().isMilestone()) {\r\n        nextRectangle.setStyle(\"task.milestone\");\r\n    } else\r\n        if (nextTask.isProjectTask()) {\r\n            nextRectangle.setStyle(\"task.projectTask\");\r\n            if (nextStarted.isFirst()) {\r\n                // CodeReview: why 12, not 15?\r\n                GraphicPrimitiveContainer.Rectangle supertaskStart = container.createRectangle(nextRectangle.myLeftX, topy, ((int) (nextLength)), 12);\r\n                supertaskStart.setStyle(\"task.projectTask.start\");\r\n            }\r\n            if (nextStarted.isLast()) {\r\n                GraphicPrimitiveContainer.Rectangle supertaskEnd = container.createRectangle(((myPosX) - 1), topy, ((int) (nextLength)), 12);\r\n                supertaskEnd.setStyle(\"task.projectTask.end\");\r\n            }\r\n        } else\r\n            if (nextHasNested) {\r\n                nextRectangle.setStyle(\"task.supertask\");\r\n                if (nextStarted.isFirst()) {\r\n                    // CodeReview: why 12, not 15?\r\n                    GraphicPrimitiveContainer.Rectangle supertaskStart = container.createRectangle(nextRectangle.myLeftX, topy, ((int) (nextLength)), 12);\r\n                    supertaskStart.setStyle(\"task.supertask.start\");\r\n                }\r\n                if (nextStarted.isLast()) {\r\n                    // CodeReview: why 12, not 15?\r\n                    GraphicPrimitiveContainer.Rectangle supertaskEnd = container.createRectangle(nextRectangle.myLeftX, topy, ((int) (nextLength)), 12);\r\n                    supertaskEnd.setStyle(\"task.supertask.end\");\r\n                }\r\n            } else\r\n                if ((nextStarted.getIntensity()) == 0.0F) {\r\n                    nextRectangle.setStyle(\"task.holiday\");\r\n                } else {\r\n                    if ((nextStarted.isFirst()) && (nextStarted.isLast())) {\r\n                        nextRectangle.setStyle(\"task.startend\");\r\n                    } else\r\n                        if ((false == (nextStarted.isFirst())) ^ (nextStarted.isLast())) {\r\n                            nextRectangle.setStyle(\"task\");\r\n                        } else\r\n                            if (nextStarted.isFirst()) {\r\n                                nextRectangle.setStyle(\"task.start\");\r\n                            } else\r\n                                if (nextStarted.isLast()) {\r\n                                    nextRectangle.setStyle(\"task.end\");\r\n                                }\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n    if (((myProgressRenderingEnabled) && (!(nextTask.isMilestone()))) && (!nextHasNested)) {\r\n        renderProgressBar(nextStarted, nextRectangle);\r\n    }\r\n    if ((!(\"task.holiday\".equals(nextRectangle.getStyle()))) && (!(\"task.supertask\".equals(nextRectangle.getStyle())))) {\r\n        nextRectangle.setBackgroundColor(nextStarted.getTask().getColor());\r\n    }\r\n    container.bind(nextRectangle, nextStarted);\r\n    return nextRectangle;\r\n}"},
 {"id":513, "parametername":"TaskActivity nextStarted", "parametertype":"net.sourceforge.ganttproject.task.TaskActivity", "parameterclass":549, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2082, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.renderProgressBar(net.sourceforge.ganttproject.task.TaskActivity,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "isreturn":0, "sourcecode":"private void renderProgressBar(TaskActivity nextStarted, GraphicPrimitiveContainer.Rectangle nextActivityRectangle) {\r\n    if ((nextStarted.getIntensity()) == 0) {\r\n        return;\r\n    }\r\n    Task nextTask = nextStarted.getTask();\r\n    int nextLength = nextActivityRectangle.myWidth;\r\n    Long workingRectanglesLength = ((Long) (myTask_WorkingRectanglesLength.get(nextTask)));\r\n    if (workingRectanglesLength != null) {\r\n        long nextProgressLength = nextLength;\r\n        String style;\r\n        if ((workingRectanglesLength.longValue()) > nextLength) {\r\n            myTask_WorkingRectanglesLength.put(nextTask, new Long(((workingRectanglesLength.longValue()) - nextLength)));\r\n            style = \"task.progress\";\r\n        } else {\r\n            nextProgressLength = workingRectanglesLength.longValue();\r\n            myTask_WorkingRectanglesLength.remove(nextTask);\r\n            style = \"task.progress.end\";\r\n        }\r\n        int nextMidY = nextActivityRectangle.getMiddleY();\r\n        GraphicPrimitiveContainer.GraphicPrimitive nextProgressRect = getPrimitiveContainer().getLayer(1).createRectangle(nextActivityRectangle.myLeftX, (nextMidY - 1), ((int) (nextProgressLength)), 3);\r\n        nextProgressRect.setStyle(style);\r\n        getPrimitiveContainer().getLayer(1).bind(nextProgressRect, nextTask);\r\n    }\r\n}"},
 {"id":514, "parametername":"GraphicPrimitiveContainer.Rectangle nextActivityRectangle", "parametertype":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle", "parameterclass":189, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2082, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.renderProgressBar(net.sourceforge.ganttproject.task.TaskActivity,net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer$Rectangle)", "isreturn":0, "sourcecode":"private void renderProgressBar(TaskActivity nextStarted, GraphicPrimitiveContainer.Rectangle nextActivityRectangle) {\r\n    if ((nextStarted.getIntensity()) == 0) {\r\n        return;\r\n    }\r\n    Task nextTask = nextStarted.getTask();\r\n    int nextLength = nextActivityRectangle.myWidth;\r\n    Long workingRectanglesLength = ((Long) (myTask_WorkingRectanglesLength.get(nextTask)));\r\n    if (workingRectanglesLength != null) {\r\n        long nextProgressLength = nextLength;\r\n        String style;\r\n        if ((workingRectanglesLength.longValue()) > nextLength) {\r\n            myTask_WorkingRectanglesLength.put(nextTask, new Long(((workingRectanglesLength.longValue()) - nextLength)));\r\n            style = \"task.progress\";\r\n        } else {\r\n            nextProgressLength = workingRectanglesLength.longValue();\r\n            myTask_WorkingRectanglesLength.remove(nextTask);\r\n            style = \"task.progress.end\";\r\n        }\r\n        int nextMidY = nextActivityRectangle.getMiddleY();\r\n        GraphicPrimitiveContainer.GraphicPrimitive nextProgressRect = getPrimitiveContainer().getLayer(1).createRectangle(nextActivityRectangle.myLeftX, (nextMidY - 1), ((int) (nextProgressLength)), 3);\r\n        nextProgressRect.setStyle(style);\r\n        getPrimitiveContainer().getLayer(1).bind(nextProgressRect, nextTask);\r\n    }\r\n}"},
 {"id":515, "parametername":"TaskActivity taskActivity", "parametertype":"net.sourceforge.ganttproject.task.TaskActivity", "parameterclass":549, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2076, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.processFirstActivity(net.sourceforge.ganttproject.task.TaskActivity)", "isreturn":0, "sourcecode":"private void processFirstActivity(TaskActivity taskActivity) {\r\n    boolean stop = (taskActivity.getIntensity()) == 0.0F;\r\n    if (!stop) {\r\n        processRegularActivity(taskActivity);\r\n    }\r\n}"},
 {"id":516, "parametername":"TaskActivity taskActivity", "parametertype":"net.sourceforge.ganttproject.task.TaskActivity", "parameterclass":549, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2052, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.createRightSideText(net.sourceforge.ganttproject.task.TaskActivity)", "isreturn":0, "sourcecode":"private void createRightSideText(TaskActivity taskActivity) {\r\n    Rectangle bounds = getBoundingRectangle(taskActivity);\r\n    String text = \"\";\r\n    int xText;\r\n    int yText;\r\n    text = getTaskLabel(taskActivity.getTask(), TaskRendererImpl.RIGHT);\r\n    xText = ((int) (bounds.getMaxX())) + 9;\r\n    yText = ((int) (myModel.getBoundingRectangle(taskActivity.getTask()).getMaxY())) - 3;\r\n    GraphicPrimitiveContainer.Text textPrimitive = processText(xText, yText, text);\r\n}"},
 {"id":517, "parametername":"TaskActivity taskActivity", "parametertype":"net.sourceforge.ganttproject.task.TaskActivity", "parameterclass":549, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2050, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.createDownSideText(net.sourceforge.ganttproject.task.TaskActivity)", "isreturn":0, "sourcecode":"private void createDownSideText(TaskActivity taskActivity) {\r\n    String text;\r\n    text = getTaskLabel(taskActivity.getTask(), TaskRendererImpl.DOWN);\r\n    if ((text.length()) > 0) {\r\n        Rectangle taskRectangle = myModel.getBoundingRectangle(taskActivity.getTask());\r\n        int xOrigin = ((int) (taskRectangle.getMinX())) + (((int) (taskRectangle.getWidth())) / 2);\r\n        int yOrigin = ((int) (taskRectangle.getMaxY())) + 2;\r\n        GraphicPrimitiveContainer.Text textPrimitive = processText(xOrigin, yOrigin, text);\r\n        textPrimitive.setAlignment(GraphicPrimitiveContainer.HAlignment.CENTER, GraphicPrimitiveContainer.VAlignment.TOP);\r\n    }\r\n}"},
 {"id":518, "parametername":"TaskActivity taskActivity", "parametertype":"net.sourceforge.ganttproject.task.TaskActivity", "parameterclass":549, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2053, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.createUpSideText(net.sourceforge.ganttproject.task.TaskActivity)", "isreturn":0, "sourcecode":"private void createUpSideText(TaskActivity taskActivity) {\r\n    String text;\r\n    text = getTaskLabel(taskActivity.getTask(), TaskRendererImpl.UP);\r\n    if ((text.length()) > 0) {\r\n        Rectangle taskRectangle = myModel.getBoundingRectangle(taskActivity.getTask());\r\n        int xOrigin = ((int) (taskRectangle.getMinX())) + (((int) (taskRectangle.getWidth())) / 2);\r\n        int yOrigin = ((int) (taskRectangle.getMinY())) - 3;\r\n        GraphicPrimitiveContainer.Text textPrimitive = processText(xOrigin, yOrigin, text);\r\n        textPrimitive.setAlignment(GraphicPrimitiveContainer.HAlignment.CENTER, GraphicPrimitiveContainer.VAlignment.BOTTOM);\r\n    }\r\n}"},
 {"id":519, "parametername":"TaskActivity taskActivity", "parametertype":"net.sourceforge.ganttproject.task.TaskActivity", "parameterclass":549, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2051, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.createLeftSideText(net.sourceforge.ganttproject.task.TaskActivity)", "isreturn":0, "sourcecode":"private void createLeftSideText(TaskActivity taskActivity) {\r\n    String text;\r\n    text = getTaskLabel(taskActivity.getTask(), TaskRendererImpl.LEFT);\r\n    if ((text.length()) > 0) {\r\n        Rectangle taskRectangle = myModel.getBoundingRectangle(taskActivity.getTask());\r\n        int xOrigin = ((int) (taskRectangle.getMinX())) - 9;\r\n        int yOrigin = ((int) ((taskRectangle.getMaxY()) - 3));\r\n        GraphicPrimitiveContainer.Text textPrimitive = processText(xOrigin, yOrigin, text);\r\n        textPrimitive.setAlignment(GraphicPrimitiveContainer.HAlignment.RIGHT, GraphicPrimitiveContainer.VAlignment.BOTTOM);\r\n    }\r\n}"},
 {"id":520, "parametername":"TaskActivity taskActivity", "parametertype":"net.sourceforge.ganttproject.task.TaskActivity", "parameterclass":549, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2077, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.processLastActivity(net.sourceforge.ganttproject.task.TaskActivity)", "isreturn":0, "sourcecode":"private void processLastActivity(TaskActivity taskActivity) {\r\n    if ((taskActivity.getIntensity()) != 0.0F) {\r\n        processRegularActivity(taskActivity);\r\n    }\r\n    if (taskActivity.getTask().isMilestone()) {\r\n        return;\r\n    }\r\n    createRightSideText(taskActivity);\r\n    createDownSideText(taskActivity);\r\n    createUpSideText(taskActivity);\r\n    createLeftSideText(taskActivity);\r\n    // \r\n    // drawProjectBoundaries();\r\n}"},
 {"id":521, "parametername":"GanttPreviousStateTask task", "parametertype":"net.sourceforge.ganttproject.GanttPreviousStateTask", "parameterclass":50, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2055, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.drawPreviousStateTask(net.sourceforge.ganttproject.GanttPreviousStateTask,int)", "isreturn":0, "sourcecode":"// [dbarashev] This method violates the rule: rendering model knows (almost)\r\n// nothing about\r\n// specific rendering library (such as java.awt.*) and knows absolutely\r\n// nothing about\r\n// application framework (such as GanttGraphicArea)\r\n// I understand that it is nice to render coordinators with bold font and\r\n// linebreak. However,\r\n// there exist other ways of doing this\r\n/* private void processText(int xInit, int yInit, String text) { String save =\ntext; boolean startNew = false; StringTokenizer st = new\nStringTokenizer(text, \"{}\", true); while (st.hasMoreTokens()) { String\ntoken = st.nextToken(); if (token.equals(\"{\")) { startNew = true;\ncontinue; } if (token.equals(\"}\")) { startNew = false; continue; } if\n(startNew) { Text t =\ngetPrimitiveContainer().getLayer(2).createText(xInit, yInit, token);\nxInit += TextLengthCalculatorImpl.getTextLength(myModel\n.getArea().getGraphics(), token); t.setFont(new Font(null, Font.BOLD,\n9)); continue; } getPrimitiveContainer().getLayer(2).createText(xInit,\nyInit, token); xInit +=\nTextLengthCalculatorImpl.getTextLength(myModel.getArea() .getGraphics(),\ntoken); } }\n */\r\nprivate void drawPreviousStateTask(GanttPreviousStateTask task, int row) {\r\n    int topy = ((row * (getRowHeight())) + (getRowHeight())) - 8;\r\n    int posX = myPosX;\r\n    if ((task.getStart().getTime().compareTo(myUnitStart)) >= 0) {\r\n        TaskLength deltaLength = myModel.getTaskManager().createLength(getChartModel().getTimeUnitStack().getDefaultTimeUnit(), myUnitStart, task.getStart().getTime());\r\n        int deltaX = ((int) ((deltaLength.getLength(myCurrentUnit)) * (getChartModel().getBottomUnitWidth())));\r\n        posX += deltaX;\r\n    }\r\n    int duration = task.getEnd(myModel.getTaskManager().getCalendar()).diff(task.getStart());\r\n    TaskLength tl = myModel.getTaskManager().createLength(duration);\r\n    int length = ((int) ((tl.getLength(myCurrentUnit)) * (getChartModel().getBottomUnitWidth())));\r\n    Integer nextOrdNumber = ((Integer) (myActivity2ordinalNumber.get(task)));\r\n    GraphicPrimitiveContainer container = getPrimitiveContainer();\r\n    GraphicPrimitiveContainer.Rectangle rect = container.createRectangle(posX, topy, length, 6);\r\n    String style = \"\";\r\n    if (task.isMilestone()) {\r\n        style = \"previousStateTask.milestone\";\r\n    } else\r\n        if (task.hasNested()) {\r\n            style = \"previousStateTask.super\";\r\n            if (task.isAPart())\r\n                style = \"previousStateTask.super.apart\";\r\n\r\n        } else {\r\n            style = \"previousStateTask\";\r\n        }\r\n\r\n    if ((task.getState()) == (GanttPreviousStateTask.EARLIER))\r\n        style = style + \".earlier\";\r\n    else\r\n        if ((task.getState()) == (GanttPreviousStateTask.LATER))\r\n            style = style + \".later\";\r\n\r\n\r\n    rect.setStyle(style);\r\n}"},
 {"id":522, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2067, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.getTaskLabel(net.sourceforge.ganttproject.task.Task,int)", "isreturn":0, "sourcecode":"private String getTaskLabel(Task task, int position) {\r\n    StringBuffer result = new StringBuffer();\r\n    Object property = TaskProperties.getProperty(task, myLabelOptions[position].getValue());\r\n    if (property != null) {\r\n        if (property instanceof Boolean)\r\n            if (((Boolean) (property)).booleanValue())\r\n                result.append(lang.getText(\"yes\"));\r\n            else\r\n                result.append(lang.getText(\"no\"));\r\n\r\n        else\r\n            result.append(property);\r\n\r\n    }\r\n    return result.toString();\r\n}"},
 {"id":523, "parametername":"TaskActivity activity", "parametertype":"net.sourceforge.ganttproject.task.TaskActivity", "parameterclass":549, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2058, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.getBoundingRectangle(net.sourceforge.ganttproject.task.TaskActivity)", "isreturn":0, "sourcecode":"private Rectangle getBoundingRectangle(TaskActivity activity) {\r\n    // System.err.println(\"[TaskRendererImpl] getBoundingRectangle():\nunit start=\"+myUnitStart+\"\nactivity=\"+activity);\r\n    int posX = myPosX;\r\n    int length;\r\n    if (false == (activity.getStart().equals(myUnitStart))) {\r\n        int deltaX = 0;\r\n        if (activity.getStart().before(myUnitStart)) {\r\n            deltaX = ((int) (getNegativeOffset(activity.getStart(), myUnitStart)));\r\n        } else\r\n            if (activity.getStart().after(myUnitStart)) {\r\n                deltaX = ((int) (getPositiveOffset(activity.getStart(), myUnitStart)));\r\n            }\r\n\r\n        posX += deltaX;\r\n        length = ((int) (getPositiveOffset(activity.getEnd(), myUnitStart))) - deltaX;\r\n        // System.err.println(\"[TaskRendererImpl] getBoundingRectangle(): delta=\"+deltaX+\" length=\"+length);\r\n    } else {\r\n        length = ((int) ((activity.getDuration().getLength(myCurrentUnit)) * (getChartModel().getBottomUnitWidth())));\r\n    }\r\n    Integer nextOrdNumber = ((Integer) (myActivity2ordinalNumber.get(activity)));\r\n    int topy = ((nextOrdNumber.intValue()) * (getRowHeight())) + 4;// JA Added\r\n\r\n    // 4 so that\r\n    // it draws\r\n    // in middle\r\n    // of row\r\n    return new Rectangle(posX, topy, length, getRowHeight());\r\n}"},
 {"id":524, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2074, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.prepareDependencyDrawData(net.sourceforge.ganttproject.task.Task,java.util.List)", "isreturn":0, "sourcecode":"private void prepareDependencyDrawData(Task task, List result) {\r\n    TaskDependency[] deps = task.getDependencies().toArray();\r\n    for (int i = 0; i < (deps.length); i++) {\r\n        TaskDependency next = deps[i];\r\n        TaskDependency.ActivityBinding activityBinding = next.getActivityBinding();\r\n        TaskActivity dependant = activityBinding.getDependantActivity();\r\n        GraphicPrimitiveContainer dependantContainer = getContainerFor(dependant.getTask());\r\n        GraphicPrimitiveContainer.Rectangle dependantRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependantContainer.getPrimitive(dependant)));\r\n        if (dependantRectangle == null) {\r\n            // System.out.println(\"dependantRectangle == null\");\r\n            continue;\r\n        }\r\n        TaskActivity dependee = activityBinding.getDependeeActivity();\r\n        GraphicPrimitiveContainer dependeeContainer = getContainerFor(dependee.getTask());\r\n        GraphicPrimitiveContainer.Rectangle dependeeRectangle = ((GraphicPrimitiveContainer.Rectangle) (dependeeContainer.getPrimitive(dependee)));\r\n        if (dependeeRectangle == null) {\r\n            // System.out.println(\"dependeeRectangle == null\");\r\n            continue;\r\n        }\r\n        Date[] bounds = activityBinding.getAlignedBounds();\r\n        TaskRendererImpl.PointVector dependantVector;\r\n        if (bounds[0].equals(dependant.getStart())) {\r\n            dependantVector = new TaskRendererImpl.WestPointVector(new Point(dependantRectangle.myLeftX, dependantRectangle.getMiddleY()));\r\n        } else\r\n            if (bounds[0].equals(dependant.getEnd())) {\r\n                dependantVector = new TaskRendererImpl.EastPointVector(new Point(dependantRectangle.getRightX(), dependantRectangle.getMiddleY()));\r\n            } else {\r\n                throw new RuntimeException();\r\n            }\r\n\r\n        // \r\n        TaskRendererImpl.PointVector dependeeVector;\r\n        if (bounds[1].equals(dependee.getStart())) {\r\n            dependeeVector = new TaskRendererImpl.WestPointVector(new Point(dependeeRectangle.myLeftX, dependeeRectangle.getMiddleY()));\r\n        } else\r\n            if (bounds[1].equals(dependee.getEnd())) {\r\n                dependeeVector = new TaskRendererImpl.EastPointVector(new Point(dependeeRectangle.getRightX(), dependeeRectangle.getMiddleY()));\r\n            } else {\r\n                throw new RuntimeException();\r\n            }\r\n\r\n        TaskRendererImpl.DependencyDrawData data = new TaskRendererImpl.DependencyDrawData(next, dependantRectangle, dependeeRectangle, dependantVector, dependeeVector);\r\n        result.add(data);\r\n    }\r\n}"},
 {"id":525, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2063, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.getPreviousStateTaskIndex(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"// return the index in the List tasks of the previous Task which have the\r\n// same ID as next\r\n// return -1 if there is no previous Task with the next ID\r\nprivate int getPreviousStateTaskIndex(Task task) {\r\n    if ((myPreviousStateTasks) == null)\r\n        return -1;\r\n\r\n    for (int i = 0; i < (myPreviousStateTasks.size()); i++) {\r\n        if ((task.getTaskID()) == (((GanttPreviousStateTask) (myPreviousStateTasks.get(i))).getId()))\r\n            return i;\r\n\r\n    }\r\n    return -1;\r\n}"},
 {"id":526, "parametername":"TaskActivity activity", "parametertype":"net.sourceforge.ganttproject.task.TaskActivity", "parameterclass":549, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2064, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.getPrimitive(net.sourceforge.ganttproject.task.TaskActivity)", "isreturn":0, "sourcecode":"public GraphicPrimitiveContainer.Rectangle getPrimitive(TaskActivity activity) {\r\n    return ((GraphicPrimitiveContainer.Rectangle) (getContainerFor(activity.getTask()).getPrimitive(activity)));\r\n}"},
 {"id":527, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2059, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.getContainerFor(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"private GraphicPrimitiveContainer getContainerFor(Task task) {\r\n    boolean hasNested = ((ChartModelImpl) (getChartModel())).getTaskContainment().hasNestedTasks(task);// JA Switch to\r\n\r\n    return hasNested ? getPrimitiveContainer().getLayer(2) : getPrimitiveContainer();\r\n}"},
 {"id":528, "parametername":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "parametertype":"net.sourceforge.ganttproject.chart.GraphicPrimitiveContainer", "parameterclass":192, "classid":219, "classname":"net.sourceforge.ganttproject.chart.TaskRendererImpl", "methodid":2059, "methodname":"net.sourceforge.ganttproject.chart.TaskRendererImpl.getContainerFor(net.sourceforge.ganttproject.task.Task)", "isreturn":1, "sourcecode":"private GraphicPrimitiveContainer getContainerFor(Task task) {\r\n    boolean hasNested = ((ChartModelImpl) (getChartModel())).getTaskContainment().hasNestedTasks(task);// JA Switch to\r\n\r\n    return hasNested ? getPrimitiveContainer().getLayer(2) : getPrimitiveContainer();\r\n}"},
 {"id":529, "parametername":"GanttExportSettings settings", "parametertype":"net.sourceforge.ganttproject.GanttExportSettings", "parameterclass":27, "classid":220, "classname":"net.sourceforge.ganttproject.chart.TestChart", "methodid":2109, "methodname":"net.sourceforge.ganttproject.chart.TestChart.getChart(net.sourceforge.ganttproject.GanttExportSettings)", "isreturn":0, "sourcecode":"public BufferedImage getChart(GanttExportSettings settings) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":530, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":220, "classname":"net.sourceforge.ganttproject.chart.TestChart", "methodid":2120, "methodname":"net.sourceforge.ganttproject.chart.TestChart.setTaskManager(net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"public void setTaskManager(TaskManager taskManager) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":531, "parametername":"GanttExportSettings settings", "parametertype":"net.sourceforge.ganttproject.GanttExportSettings", "parameterclass":27, "classid":220, "classname":"net.sourceforge.ganttproject.chart.TestChart", "methodid":2114, "methodname":"net.sourceforge.ganttproject.chart.TestChart.getRenderedImage(net.sourceforge.ganttproject.GanttExportSettings)", "isreturn":0, "sourcecode":"public RenderedImage getRenderedImage(GanttExportSettings settings) {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":532, "parametername":"ChartSelection selection", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelection", "parameterclass":177, "classid":220, "classname":"net.sourceforge.ganttproject.chart.TestChart", "methodid":2106, "methodname":"net.sourceforge.ganttproject.chart.TestChart.canPaste(net.sourceforge.ganttproject.chart.ChartSelection)", "isreturn":0, "sourcecode":"public IStatus canPaste(ChartSelection selection) {\r\n    // TODO Auto-generated method stub\r\n    return null;\r\n}"},
 {"id":533, "parametername":"ChartSelection selection", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelection", "parameterclass":177, "classid":220, "classname":"net.sourceforge.ganttproject.chart.TestChart", "methodid":2117, "methodname":"net.sourceforge.ganttproject.chart.TestChart.paste(net.sourceforge.ganttproject.chart.ChartSelection)", "isreturn":0, "sourcecode":"public void paste(ChartSelection selection) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":534, "parametername":"ChartSelectionListener listener", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelectionListener", "parameterclass":178, "classid":220, "classname":"net.sourceforge.ganttproject.chart.TestChart", "methodid":2105, "methodname":"net.sourceforge.ganttproject.chart.TestChart.addSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "isreturn":0, "sourcecode":"public void addSelectionListener(ChartSelectionListener listener) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":535, "parametername":"ChartSelectionListener listener", "parametertype":"net.sourceforge.ganttproject.chart.ChartSelectionListener", "parameterclass":178, "classid":220, "classname":"net.sourceforge.ganttproject.chart.TestChart", "methodid":2118, "methodname":"net.sourceforge.ganttproject.chart.TestChart.removeSelectionListener(net.sourceforge.ganttproject.chart.ChartSelectionListener)", "isreturn":0, "sourcecode":"public void removeSelectionListener(ChartSelectionListener listener) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":536, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":221, "classname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor", "methodid":2128, "methodname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor.startTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"void startTimeFrame(TimeFrame timeFrame);"},
 {"id":537, "parametername":"TimeFrame timeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":221, "classname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor", "methodid":2123, "methodname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor.endTimeFrame(net.sourceforge.ganttproject.time.TimeFrame)", "isreturn":0, "sourcecode":"void endTimeFrame(TimeFrame timeFrame);"},
 {"id":538, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":221, "classname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor", "methodid":2129, "methodname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor.startUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"void startUnitLine(TimeUnit timeUnit);"},
 {"id":539, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":221, "classname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor", "methodid":2124, "methodname":"net.sourceforge.ganttproject.chart.TimeUnitVisitor.endUnitLine(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"void endUnitLine(TimeUnit timeUnit);"},
 {"id":540, "parametername":"Chart chart", "parametertype":"net.sourceforge.ganttproject.chart.Chart", "parameterclass":159, "classid":222, "classname":"net.sourceforge.ganttproject.chart.ToggleChartAction", "methodid":2130, "methodname":"net.sourceforge.ganttproject.chart.ToggleChartAction.-init-(net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GPViewManager)", "isreturn":0, "sourcecode":"public ToggleChartAction(Chart chart, GPViewManager viewManager) {\r\n    myChart = chart;\r\n    putValue(Action.NAME, getLocalizedName());\r\n    // putValue(Action.SMALL_ICON,chart.getIcon());\r\n    myView = viewManager.createView(chart, chart.getIcon());\r\n    myViewManager = viewManager;\r\n}"},
 {"id":541, "parametername":"GPViewManager viewManager", "parametertype":"net.sourceforge.ganttproject.GPViewManager", "parameterclass":23, "classid":222, "classname":"net.sourceforge.ganttproject.chart.ToggleChartAction", "methodid":2130, "methodname":"net.sourceforge.ganttproject.chart.ToggleChartAction.-init-(net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GPViewManager)", "isreturn":0, "sourcecode":"public ToggleChartAction(Chart chart, GPViewManager viewManager) {\r\n    myChart = chart;\r\n    putValue(Action.NAME, getLocalizedName());\r\n    // putValue(Action.SMALL_ICON,chart.getIcon());\r\n    myView = viewManager.createView(chart, chart.getIcon());\r\n    myViewManager = viewManager;\r\n}"},
 {"id":542, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":224, "classname":"net.sourceforge.ganttproject.chart.item.ChartItem", "methodid":2136, "methodname":"net.sourceforge.ganttproject.chart.item.ChartItem.-init-(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"protected ChartItem(Task task) {\r\n    myTask = task;\r\n}"},
 {"id":543, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":225, "classname":"net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem", "methodid":2138, "methodname":"net.sourceforge.ganttproject.chart.item.TaskBoundaryChartItem.-init-(net.sourceforge.ganttproject.task.Task,boolean)", "isreturn":0, "sourcecode":"public TaskBoundaryChartItem(Task task, boolean isStart) {\r\n    super(task);\r\n    this.isStart = isStart;\r\n    // TODO Auto-generated constructor stub\r\n}"},
 {"id":544, "parametername":"TimeUnit bottomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":226, "classname":"net.sourceforge.ganttproject.chart.item.TaskProgressChartItem", "methodid":2140, "methodname":"net.sourceforge.ganttproject.chart.item.TaskProgressChartItem.-init-(int,int,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public TaskProgressChartItem(int posX, int unitWidth, TimeUnit bottomUnit, Task task) {\r\n    super(task);\r\n    myPosX = posX;\r\n    myUnitWidth = unitWidth;\r\n    myTimeUnit = bottomUnit;\r\n    myTaskLength = task.getDuration().getLength(bottomUnit);\r\n}"},
 {"id":545, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":226, "classname":"net.sourceforge.ganttproject.chart.item.TaskProgressChartItem", "methodid":2140, "methodname":"net.sourceforge.ganttproject.chart.item.TaskProgressChartItem.-init-(int,int,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public TaskProgressChartItem(int posX, int unitWidth, TimeUnit bottomUnit, Task task) {\r\n    super(task);\r\n    myPosX = posX;\r\n    myUnitWidth = unitWidth;\r\n    myTimeUnit = bottomUnit;\r\n    myTaskLength = task.getDuration().getLength(bottomUnit);\r\n}"},
 {"id":546, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":227, "classname":"net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem", "methodid":2142, "methodname":"net.sourceforge.ganttproject.chart.item.TaskRegularAreaChartItem.-init-(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public TaskRegularAreaChartItem(Task task) {\r\n    super(task);\r\n    // TODO Auto-generated constructor stub\r\n}"},
 {"id":547, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":229, "classname":"net.sourceforge.ganttproject.delay.DelayManager", "methodid":2147, "methodname":"net.sourceforge.ganttproject.delay.DelayManager.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.GanttTree2)", "isreturn":0, "sourcecode":"public DelayManager(TaskManager taskManager, GanttTree2 tree) {\r\n    myObservers = new ArrayList();\r\n    myTaskManager = taskManager;\r\n    myRoot = ((TaskNode) (tree.getRoot()));\r\n    myTree = tree;\r\n    Mediator.getUndoManager().addUndoableEditListener(this);\r\n}"},
 {"id":548, "parametername":"GanttTree2 tree", "parametertype":"net.sourceforge.ganttproject.GanttTree2", "parameterclass":73, "classid":229, "classname":"net.sourceforge.ganttproject.delay.DelayManager", "methodid":2147, "methodname":"net.sourceforge.ganttproject.delay.DelayManager.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.GanttTree2)", "isreturn":0, "sourcecode":"public DelayManager(TaskManager taskManager, GanttTree2 tree) {\r\n    myObservers = new ArrayList();\r\n    myTaskManager = taskManager;\r\n    myRoot = ((TaskNode) (tree.getRoot()));\r\n    myTree = tree;\r\n    Mediator.getUndoManager().addUndoableEditListener(this);\r\n}"},
 {"id":549, "parametername":"DelayObserver observer", "parametertype":"net.sourceforge.ganttproject.delay.DelayObserver", "parameterclass":230, "classid":229, "classname":"net.sourceforge.ganttproject.delay.DelayManager", "methodid":2148, "methodname":"net.sourceforge.ganttproject.delay.DelayManager.addObserver(net.sourceforge.ganttproject.delay.DelayObserver)", "isreturn":0, "sourcecode":"public void addObserver(DelayObserver observer) {\r\n    myObservers.add(observer);\r\n}"},
 {"id":550, "parametername":"DelayObserver observer", "parametertype":"net.sourceforge.ganttproject.delay.DelayObserver", "parameterclass":230, "classid":229, "classname":"net.sourceforge.ganttproject.delay.DelayManager", "methodid":2153, "methodname":"net.sourceforge.ganttproject.delay.DelayManager.removeObserver(net.sourceforge.ganttproject.delay.DelayObserver)", "isreturn":0, "sourcecode":"public void removeObserver(DelayObserver observer) {\r\n    myObservers.remove(observer);\r\n}"},
 {"id":551, "parametername":"Task t", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":229, "classname":"net.sourceforge.ganttproject.delay.DelayManager", "methodid":2149, "methodname":"net.sourceforge.ganttproject.delay.DelayManager.calculateDelay(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n * The delay is calculated as follow : The reference date is today. The\r\n * check is performed on the end date of the task. There could be a delay\r\n * only if percentage completion is not equal to 100%. If task end date <\r\n * today && completion < 100 there is a delay. The delay is critical is the\r\n * task is critical.\r\n *\r\n * @param t\r\n * \t\tThe task.\r\n * @return The calculated delay\r\n */\r\nprivate Delay calculateDelay(Task t) {\r\n    Delay res = Delay.getDelay(Delay.NONE);\r\n    int completionPercentage = t.getCompletionPercentage();\r\n    if ((t.isMilestone()) || (completionPercentage == 100))\r\n        return res;\r\n\r\n    Date endDate = t.getEnd().getTime();\r\n    if (endDate.before(myToday))\r\n        if (t.isCritical())\r\n            res.setType(Delay.CRITICAL);\r\n        else\r\n            res.setType(Delay.NORMAL);\r\n\r\n\r\n    return res;\r\n}"},
 {"id":552, "parametername":"net.sourceforge.ganttproject.delay.Delay", "parametertype":"net.sourceforge.ganttproject.delay.Delay", "parameterclass":228, "classid":229, "classname":"net.sourceforge.ganttproject.delay.DelayManager", "methodid":2149, "methodname":"net.sourceforge.ganttproject.delay.DelayManager.calculateDelay(net.sourceforge.ganttproject.task.Task)", "isreturn":1, "sourcecode":"/**\r\n * The delay is calculated as follow : The reference date is today. The\r\n * check is performed on the end date of the task. There could be a delay\r\n * only if percentage completion is not equal to 100%. If task end date <\r\n * today && completion < 100 there is a delay. The delay is critical is the\r\n * task is critical.\r\n *\r\n * @param t\r\n * \t\tThe task.\r\n * @return The calculated delay\r\n */\r\nprivate Delay calculateDelay(Task t) {\r\n    Delay res = Delay.getDelay(Delay.NONE);\r\n    int completionPercentage = t.getCompletionPercentage();\r\n    if ((t.isMilestone()) || (completionPercentage == 100))\r\n        return res;\r\n\r\n    Date endDate = t.getEnd().getTime();\r\n    if (endDate.before(myToday))\r\n        if (t.isCritical())\r\n            res.setType(Delay.CRITICAL);\r\n        else\r\n            res.setType(Delay.NORMAL);\r\n\r\n\r\n    return res;\r\n}"},
 {"id":553, "parametername":"TaskScheduleEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent", "parameterclass":624, "classid":229, "classname":"net.sourceforge.ganttproject.delay.DelayManager", "methodid":2159, "methodname":"net.sourceforge.ganttproject.delay.DelayManager.taskScheduleChanged(net.sourceforge.ganttproject.task.event.TaskScheduleEvent)", "isreturn":0, "sourcecode":"public void taskScheduleChanged(TaskScheduleEvent e) {\r\n    if (!(e.getNewFinishDate().equals(e.getOldFinishDate()))) {\r\n        // ourCriticProcess = false;\r\n        fireDelayObservation();\r\n    }\r\n}"},
 {"id":554, "parametername":"TaskDependencyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskDependencyEvent", "parameterclass":619, "classid":229, "classname":"net.sourceforge.ganttproject.delay.DelayManager", "methodid":2150, "methodname":"net.sourceforge.ganttproject.delay.DelayManager.dependencyAdded(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "isreturn":0, "sourcecode":"public void dependencyAdded(TaskDependencyEvent e) {\r\n    // ourCriticProcess = true;\r\n    fireDelayObservation();\r\n}"},
 {"id":555, "parametername":"TaskDependencyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskDependencyEvent", "parameterclass":619, "classid":229, "classname":"net.sourceforge.ganttproject.delay.DelayManager", "methodid":2151, "methodname":"net.sourceforge.ganttproject.delay.DelayManager.dependencyRemoved(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "isreturn":0, "sourcecode":"public void dependencyRemoved(TaskDependencyEvent e) {\r\n    // ourCriticProcess = true;\r\n    fireDelayObservation();\r\n}"},
 {"id":556, "parametername":"TaskHierarchyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "parameterclass":620, "classid":229, "classname":"net.sourceforge.ganttproject.delay.DelayManager", "methodid":2154, "methodname":"net.sourceforge.ganttproject.delay.DelayManager.taskAdded(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "isreturn":0, "sourcecode":"public void taskAdded(TaskHierarchyEvent e) {\r\n    // ourCriticProcess = true;\r\n    fireDelayObservation();\r\n}"},
 {"id":557, "parametername":"TaskHierarchyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "parameterclass":620, "classid":229, "classname":"net.sourceforge.ganttproject.delay.DelayManager", "methodid":2158, "methodname":"net.sourceforge.ganttproject.delay.DelayManager.taskRemoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "isreturn":0, "sourcecode":"public void taskRemoved(TaskHierarchyEvent e) {\r\n    // ourCriticProcess = true;\r\n    fireDelayObservation();\r\n}"},
 {"id":558, "parametername":"TaskHierarchyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "parameterclass":620, "classid":229, "classname":"net.sourceforge.ganttproject.delay.DelayManager", "methodid":2155, "methodname":"net.sourceforge.ganttproject.delay.DelayManager.taskMoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "isreturn":0, "sourcecode":"public void taskMoved(TaskHierarchyEvent e) {\r\n}"},
 {"id":559, "parametername":"TaskPropertyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskPropertyEvent", "parameterclass":623, "classid":229, "classname":"net.sourceforge.ganttproject.delay.DelayManager", "methodid":2157, "methodname":"net.sourceforge.ganttproject.delay.DelayManager.taskPropertiesChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "isreturn":0, "sourcecode":"public void taskPropertiesChanged(TaskPropertyEvent e) {\r\n}"},
 {"id":560, "parametername":"TaskPropertyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskPropertyEvent", "parameterclass":623, "classid":229, "classname":"net.sourceforge.ganttproject.delay.DelayManager", "methodid":2156, "methodname":"net.sourceforge.ganttproject.delay.DelayManager.taskProgressChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "isreturn":0, "sourcecode":"public void taskProgressChanged(TaskPropertyEvent e) {\r\n    fireDelayObservation();\r\n}"},
 {"id":561, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":230, "classname":"net.sourceforge.ganttproject.delay.DelayObserver", "methodid":2162, "methodname":"net.sourceforge.ganttproject.delay.DelayObserver.setDelay(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.delay.Delay)", "isreturn":0, "sourcecode":"public void setDelay(Task task, Delay delay);"},
 {"id":562, "parametername":"Delay delay", "parametertype":"net.sourceforge.ganttproject.delay.Delay", "parameterclass":228, "classid":230, "classname":"net.sourceforge.ganttproject.delay.DelayObserver", "methodid":2162, "methodname":"net.sourceforge.ganttproject.delay.DelayObserver.setDelay(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.delay.Delay)", "isreturn":0, "sourcecode":"public void setDelay(Task task, Delay delay);"},
 {"id":563, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":235, "classname":"net.sourceforge.ganttproject.document.DocumentCreator", "methodid":2197, "methodname":"net.sourceforge.ganttproject.document.DocumentCreator.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "isreturn":0, "sourcecode":"public DocumentCreator(IGanttProject project, UIFacade uiFacade, ParserFactory parserFactory) {\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    setParserFactory(parserFactory);\r\n}"},
 {"id":564, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":235, "classname":"net.sourceforge.ganttproject.document.DocumentCreator", "methodid":2197, "methodname":"net.sourceforge.ganttproject.document.DocumentCreator.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "isreturn":0, "sourcecode":"public DocumentCreator(IGanttProject project, UIFacade uiFacade, ParserFactory parserFactory) {\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    setParserFactory(parserFactory);\r\n}"},
 {"id":565, "parametername":"ParserFactory parserFactory", "parametertype":"net.sourceforge.ganttproject.parser.ParserFactory", "parameterclass":475, "classid":235, "classname":"net.sourceforge.ganttproject.document.DocumentCreator", "methodid":2197, "methodname":"net.sourceforge.ganttproject.document.DocumentCreator.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "isreturn":0, "sourcecode":"public DocumentCreator(IGanttProject project, UIFacade uiFacade, ParserFactory parserFactory) {\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    setParserFactory(parserFactory);\r\n}"},
 {"id":566, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":235, "classname":"net.sourceforge.ganttproject.document.DocumentCreator", "methodid":2200, "methodname":"net.sourceforge.ganttproject.document.DocumentCreator.addToRecentDocuments(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"public void addToRecentDocuments(Document document) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":567, "parametername":"ParserFactory myParserFactory", "parametertype":"net.sourceforge.ganttproject.parser.ParserFactory", "parameterclass":475, "classid":235, "classname":"net.sourceforge.ganttproject.document.DocumentCreator", "methodid":2215, "methodname":"net.sourceforge.ganttproject.document.DocumentCreator.setParserFactory(net.sourceforge.ganttproject.parser.ParserFactory)", "isreturn":0, "sourcecode":"protected void setParserFactory(ParserFactory myParserFactory) {\r\n    this.myParserFactory = myParserFactory;\r\n}"},
 {"id":568, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":237, "classname":"net.sourceforge.ganttproject.document.DocumentManager", "methodid":2221, "methodname":"net.sourceforge.ganttproject.document.DocumentManager.addToRecentDocuments(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"void addToRecentDocuments(Document document);"},
 {"id":569, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":238, "classname":"net.sourceforge.ganttproject.document.DocumentsMRU", "methodid":2236, "methodname":"net.sourceforge.ganttproject.document.DocumentsMRU.add(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"/**\r\n * Adds a Document at the top of the list of Documents MRU. If the list is\r\n * already full, an old entry is removed, to make place for this new\r\n * document.\r\n *\r\n * @param document\r\n * \t\tthe Document that should be added\r\n * @return wether the list has changed through the addition\r\n */\r\npublic boolean add(Document document) {\r\n    // if the document is invalid, we dont add it\r\n    if (!(document.isValidForMRU()))\r\n        return false;\r\n\r\n    int i = documents.indexOf(document);\r\n    // if the document is already on the top,\r\n    // nothing needs to change.\r\n    if (0 == i)\r\n        return false;\r\n\r\n    if (0 < i) {\r\n        documents.remove(i);\r\n    } else {\r\n        while ((documents.size()) >= (maxSize))\r\n            documents.remove(((maxSize) - 1));\r\n\r\n    }\r\n    documents.add(0, document);\r\n    return true;\r\n}"},
 {"id":570, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":238, "classname":"net.sourceforge.ganttproject.document.DocumentsMRU", "methodid":2237, "methodname":"net.sourceforge.ganttproject.document.DocumentsMRU.append(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"/**\r\n * Appends a Document to the list of Documents MRU. If the list is already\r\n * full, the document will <b>not</b> be appended.\r\n *\r\n * @param document\r\n * \t\tthe Document that should be added\r\n * @return wether the list has changed through the addition\r\n */\r\npublic boolean append(Document document) {\r\n    // if the document is invalid, we dont add it\r\n    if (!(document.isValidForMRU()))\r\n        return false;\r\n\r\n    int i = documents.indexOf(document);\r\n    // if the document is already at the bottom,\r\n    // nothing needs to change.\r\n    if (i == ((maxSize) - 1))\r\n        return false;\r\n\r\n    if (i != (-1)) {\r\n        documents.remove(i);\r\n    }\r\n    if ((documents.size()) < (maxSize)) {\r\n        documents.add(document);\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}"},
 {"id":571, "parametername":"StringOption ftpUser", "parametertype":"net.sourceforge.ganttproject.gui.options.model.StringOption", "parameterclass":391, "classid":240, "classname":"net.sourceforge.ganttproject.document.FtpDocument", "methodid":2253, "methodname":"net.sourceforge.ganttproject.document.FtpDocument.-init-(java.lang.String,net.sourceforge.ganttproject.gui.options.model.StringOption,net.sourceforge.ganttproject.gui.options.model.StringOption)", "isreturn":0, "sourcecode":"FtpDocument(String urlAsString, StringOption ftpUser, StringOption ftpPassword) {\r\n    assert urlAsString != null;\r\n    try {\r\n        URI url = new URI(urlAsString);\r\n        String userInfo = url.getUserInfo();\r\n        if ((userInfo == null) || (FtpDocument.EMPTY_STRING.equals(userInfo))) {\r\n            StringBuffer buf = new StringBuffer();\r\n            if ((ftpUser.getValue()) != null) {\r\n                buf.append(ftpUser.getValue());\r\n            }\r\n            if ((ftpPassword.getValue()) != null) {\r\n                buf.append(:).append(ftpPassword.getValue());\r\n            }\r\n            myURI = new URI(\"ftp\", buf.toString(), url.getHost(), url.getPort(), url.getPath(), url.getQuery(), url.getFragment());\r\n        } else {\r\n            myURI = url;\r\n        }\r\n        urlAsString = myURI.toString();\r\n        myURI.toURL().openConnection().connect();\r\n    } catch (URISyntaxException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n        throw new RuntimeException((\"Failed to create FTP document addressed by URL=\" + urlAsString), e);\r\n    } catch (MalformedURLException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace();\r\n        }\r\n        throw new RuntimeException((\"Failed to create FTP document addressed by URL=\" + urlAsString), e);\r\n    } catch (IOException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace();\r\n        }\r\n        throw new RuntimeException((\"Failed to create FTP document addressed by URL=\" + urlAsString), e);\r\n    }\r\n}"},
 {"id":572, "parametername":"StringOption ftpPassword", "parametertype":"net.sourceforge.ganttproject.gui.options.model.StringOption", "parameterclass":391, "classid":240, "classname":"net.sourceforge.ganttproject.document.FtpDocument", "methodid":2253, "methodname":"net.sourceforge.ganttproject.document.FtpDocument.-init-(java.lang.String,net.sourceforge.ganttproject.gui.options.model.StringOption,net.sourceforge.ganttproject.gui.options.model.StringOption)", "isreturn":0, "sourcecode":"FtpDocument(String urlAsString, StringOption ftpUser, StringOption ftpPassword) {\r\n    assert urlAsString != null;\r\n    try {\r\n        URI url = new URI(urlAsString);\r\n        String userInfo = url.getUserInfo();\r\n        if ((userInfo == null) || (FtpDocument.EMPTY_STRING.equals(userInfo))) {\r\n            StringBuffer buf = new StringBuffer();\r\n            if ((ftpUser.getValue()) != null) {\r\n                buf.append(ftpUser.getValue());\r\n            }\r\n            if ((ftpPassword.getValue()) != null) {\r\n                buf.append(:).append(ftpPassword.getValue());\r\n            }\r\n            myURI = new URI(\"ftp\", buf.toString(), url.getHost(), url.getPort(), url.getPath(), url.getQuery(), url.getFragment());\r\n        } else {\r\n            myURI = url;\r\n        }\r\n        urlAsString = myURI.toString();\r\n        myURI.toURL().openConnection().connect();\r\n    } catch (URISyntaxException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n        throw new RuntimeException((\"Failed to create FTP document addressed by URL=\" + urlAsString), e);\r\n    } catch (MalformedURLException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace();\r\n        }\r\n        throw new RuntimeException((\"Failed to create FTP document addressed by URL=\" + urlAsString), e);\r\n    } catch (IOException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace();\r\n        }\r\n        throw new RuntimeException((\"Failed to create FTP document addressed by URL=\" + urlAsString), e);\r\n    }\r\n}"},
 {"id":573, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":243, "classname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider", "methodid":2289, "methodname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider.getOptionGroups(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public GPOptionGroup[] getOptionGroups(IGanttProject project, UIFacade uiFacade) {\r\n    return project.getDocumentManager().getNetworkOptionGroups();\r\n}"},
 {"id":574, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":243, "classname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider", "methodid":2289, "methodname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider.getOptionGroups(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public GPOptionGroup[] getOptionGroups(IGanttProject project, UIFacade uiFacade) {\r\n    return project.getDocumentManager().getNetworkOptionGroups();\r\n}"},
 {"id":575, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":243, "classname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider", "methodid":2287, "methodname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider.buildPageComponent(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public Component buildPageComponent(IGanttProject project, final UIFacade uiFacade) {\r\n    OptionsPageBuilder builder = new OptionsPageBuilder();\r\n    builder.setI18N(new OptionsPageBuilder.I18N() {\r\n        public String getPageTitle(String pageID) {\r\n            return getValue(\"ftpexport\");\r\n        }\r\n\r\n        public String getPageDescription(String pageID) {\r\n            return getValue(\"settingsFTPExport\");\r\n        }\r\n\r\n        public String getOptionGroupLabel(GPOptionGroup group) {\r\n            return getValue(\"ftpexport\");\r\n        }\r\n\r\n        public String getOptionLabel(GPOption option) {\r\n            final String id = option.getID();\r\n            if (DocumentCreator.DIRECTORYNAME_OPTION_ID.equals(id)) {\r\n                return getValue(\"ftpdirectory\");\r\n            }\r\n            if (DocumentCreator.PASSWORD_OPTION_ID.equals(id)) {\r\n                return getValue(\"ftppwd\");\r\n            }\r\n            if (DocumentCreator.SERVERNAME_OPTION_ID.equals(id)) {\r\n                return getValue(\"ftpserver\");\r\n            }\r\n            if (DocumentCreator.USERNAME_OPTION_ID.equals(id)) {\r\n                return getValue(\"ftpuser\");\r\n            }\r\n            return super.getOptionLabel(option);\r\n        }\r\n    });\r\n    final GPOptionGroup ftpGroup = project.getDocumentManager().getNetworkOptionGroups()[0];\r\n    final DefaultStringOption usernameOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.USERNAME_OPTION_ID)));\r\n    final DefaultStringOption servernameOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.SERVERNAME_OPTION_ID)));\r\n    final DefaultStringOption dirnameOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.DIRECTORYNAME_OPTION_ID)));\r\n    final DefaultStringOption passwordOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.PASSWORD_OPTION_ID)));\r\n    final JComponent optionsPane = builder.buildPage(project.getDocumentManager().getNetworkOptionGroups(), getPageID());\r\n    final Action testConnectionAction = new AbstractAction() {\r\n        {\r\n            putValue(Action.NAME, GanttLanguage.getInstance().getText(\"testFTPConnection\"));\r\n            setEnabled(canEnableTestAction(ftpGroup));\r\n        }\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            StringBuffer urlString = new StringBuffer();\r\n            urlString.append(\"ftp://\");\r\n            urlString.append(((usernameOption.getUncommitedValue()) == null ? \"\" : usernameOption.getUncommitedValue()));\r\n            urlString.append(((passwordOption.getUncommitedValue()) == null ? \"\" : \":\" + (passwordOption.getUncommitedValue())));\r\n            urlString.append(\"@\");\r\n            urlString.append(servernameOption.getUncommitedValue());\r\n            urlString.append(\"/\");\r\n            urlString.append(dirnameOption.getUncommitedValue());\r\n            urlString.append(\"/\");\r\n            URL url = null;\r\n            try {\r\n                url = new URL(((urlString.toString()) + \"test.txt\"));\r\n                URLConnection urlc = url.openConnection();\r\n                OutputStream os = urlc.getOutputStream();\r\n                os.write(\"This is GanttProject +++ I was here!\".getBytes());\r\n                os.close();\r\n                JOptionPane.showMessageDialog(optionsPane, GanttLanguage.getInstance().getText(\"successFTPConnection\"), GanttLanguage.getInstance().getText(\"success\"), JOptionPane.INFORMATION_MESSAGE);\r\n            } catch (IOException e2) {\r\n                uiFacade.showErrorDialog(e2);\r\n                // JOptionPane.showMessageDialog(, GanttLanguage\r\n                // .getInstance().getText(\"errorFTPConnection\"),\r\n                // GanttLanguage.getInstance().getText(\"error\"),\r\n                // JOptionPane.ERROR_MESSAGE);\r\n            } finally {\r\n            }\r\n        }\r\n    };\r\n    ChangeValueListener listener = new ChangeValueListener() {\r\n        public void changeValue(ChangeValueEvent event) {\r\n            testConnectionAction.setEnabled(canEnableTestAction(ftpGroup));\r\n        }\r\n    };\r\n    servernameOption.addChangeValueListener(listener);\r\n    usernameOption.addChangeValueListener(listener);\r\n    passwordOption.addChangeValueListener(listener);\r\n    Box result = Box.createVerticalBox();\r\n    result.add(optionsPane);\r\n    result.add(new JButton(testConnectionAction));\r\n    return result;\r\n}"},
 {"id":576, "parametername":"final UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":243, "classname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider", "methodid":2287, "methodname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider.buildPageComponent(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public Component buildPageComponent(IGanttProject project, final UIFacade uiFacade) {\r\n    OptionsPageBuilder builder = new OptionsPageBuilder();\r\n    builder.setI18N(new OptionsPageBuilder.I18N() {\r\n        public String getPageTitle(String pageID) {\r\n            return getValue(\"ftpexport\");\r\n        }\r\n\r\n        public String getPageDescription(String pageID) {\r\n            return getValue(\"settingsFTPExport\");\r\n        }\r\n\r\n        public String getOptionGroupLabel(GPOptionGroup group) {\r\n            return getValue(\"ftpexport\");\r\n        }\r\n\r\n        public String getOptionLabel(GPOption option) {\r\n            final String id = option.getID();\r\n            if (DocumentCreator.DIRECTORYNAME_OPTION_ID.equals(id)) {\r\n                return getValue(\"ftpdirectory\");\r\n            }\r\n            if (DocumentCreator.PASSWORD_OPTION_ID.equals(id)) {\r\n                return getValue(\"ftppwd\");\r\n            }\r\n            if (DocumentCreator.SERVERNAME_OPTION_ID.equals(id)) {\r\n                return getValue(\"ftpserver\");\r\n            }\r\n            if (DocumentCreator.USERNAME_OPTION_ID.equals(id)) {\r\n                return getValue(\"ftpuser\");\r\n            }\r\n            return super.getOptionLabel(option);\r\n        }\r\n    });\r\n    final GPOptionGroup ftpGroup = project.getDocumentManager().getNetworkOptionGroups()[0];\r\n    final DefaultStringOption usernameOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.USERNAME_OPTION_ID)));\r\n    final DefaultStringOption servernameOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.SERVERNAME_OPTION_ID)));\r\n    final DefaultStringOption dirnameOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.DIRECTORYNAME_OPTION_ID)));\r\n    final DefaultStringOption passwordOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.PASSWORD_OPTION_ID)));\r\n    final JComponent optionsPane = builder.buildPage(project.getDocumentManager().getNetworkOptionGroups(), getPageID());\r\n    final Action testConnectionAction = new AbstractAction() {\r\n        {\r\n            putValue(Action.NAME, GanttLanguage.getInstance().getText(\"testFTPConnection\"));\r\n            setEnabled(canEnableTestAction(ftpGroup));\r\n        }\r\n\r\n        public void actionPerformed(ActionEvent e) {\r\n            StringBuffer urlString = new StringBuffer();\r\n            urlString.append(\"ftp://\");\r\n            urlString.append(((usernameOption.getUncommitedValue()) == null ? \"\" : usernameOption.getUncommitedValue()));\r\n            urlString.append(((passwordOption.getUncommitedValue()) == null ? \"\" : \":\" + (passwordOption.getUncommitedValue())));\r\n            urlString.append(\"@\");\r\n            urlString.append(servernameOption.getUncommitedValue());\r\n            urlString.append(\"/\");\r\n            urlString.append(dirnameOption.getUncommitedValue());\r\n            urlString.append(\"/\");\r\n            URL url = null;\r\n            try {\r\n                url = new URL(((urlString.toString()) + \"test.txt\"));\r\n                URLConnection urlc = url.openConnection();\r\n                OutputStream os = urlc.getOutputStream();\r\n                os.write(\"This is GanttProject +++ I was here!\".getBytes());\r\n                os.close();\r\n                JOptionPane.showMessageDialog(optionsPane, GanttLanguage.getInstance().getText(\"successFTPConnection\"), GanttLanguage.getInstance().getText(\"success\"), JOptionPane.INFORMATION_MESSAGE);\r\n            } catch (IOException e2) {\r\n                uiFacade.showErrorDialog(e2);\r\n                // JOptionPane.showMessageDialog(, GanttLanguage\r\n                // .getInstance().getText(\"errorFTPConnection\"),\r\n                // GanttLanguage.getInstance().getText(\"error\"),\r\n                // JOptionPane.ERROR_MESSAGE);\r\n            } finally {\r\n            }\r\n        }\r\n    };\r\n    ChangeValueListener listener = new ChangeValueListener() {\r\n        public void changeValue(ChangeValueEvent event) {\r\n            testConnectionAction.setEnabled(canEnableTestAction(ftpGroup));\r\n        }\r\n    };\r\n    servernameOption.addChangeValueListener(listener);\r\n    usernameOption.addChangeValueListener(listener);\r\n    passwordOption.addChangeValueListener(listener);\r\n    Box result = Box.createVerticalBox();\r\n    result.add(optionsPane);\r\n    result.add(new JButton(testConnectionAction));\r\n    return result;\r\n}"},
 {"id":577, "parametername":"GPOptionGroup ftpGroup", "parametertype":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup", "parameterclass":389, "classid":243, "classname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider", "methodid":2288, "methodname":"net.sourceforge.ganttproject.document.NetworkOptionPageProvider.canEnableTestAction(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup)", "isreturn":0, "sourcecode":"private boolean canEnableTestAction(GPOptionGroup ftpGroup) {\r\n    final DefaultStringOption usernameOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.USERNAME_OPTION_ID)));\r\n    final DefaultStringOption servernameOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.SERVERNAME_OPTION_ID)));\r\n    final DefaultStringOption passwordOption = ((DefaultStringOption) (ftpGroup.getOption(DocumentCreator.PASSWORD_OPTION_ID)));\r\n    return (((servernameOption.getUncommitedValue()) != null) && ((usernameOption.getUncommitedValue()) != null)) && ((passwordOption.getUncommitedValue()) != null);\r\n}"},
 {"id":578, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":244, "classname":"net.sourceforge.ganttproject.document.OpenDocumentAction", "methodid":2293, "methodname":"net.sourceforge.ganttproject.document.OpenDocumentAction.-init-(int,net.sourceforge.ganttproject.document.Document,java.awt.event.ActionListener)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new action, that stores the specified document and invokes the\r\n * specified listener.\r\n */\r\npublic OpenDocumentAction(int index, Document document, ActionListener listener) {\r\n    super(((index + \". \") + (document.getDescription())));\r\n    this.document = document;\r\n    this.listener = listener;\r\n    if (index < (OpenDocumentAction.MNEMONIC_KEYS.length)) {\r\n        putValue(Action.MNEMONIC_KEY, new Integer(OpenDocumentAction.MNEMONIC_KEYS[(index - 1)]));\r\n    }\r\n    if (index < (OpenDocumentAction.SHORTCUT_KEYS.length))\r\n        putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(OpenDocumentAction.SHORTCUT_KEYS[(index - 1)], OpenDocumentAction.MENU_MASK));\r\n\r\n}"},
 {"id":579, "parametername":"DocumentCreator creator", "parametertype":"net.sourceforge.ganttproject.document.DocumentCreator", "parameterclass":235, "classid":253, "classname":"net.sourceforge.ganttproject.document.ProxyDocument", "methodid":2296, "methodname":"net.sourceforge.ganttproject.document.ProxyDocument.-init-(net.sourceforge.ganttproject.document.DocumentCreator,net.sourceforge.ganttproject.document.Document,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.TableHeaderUIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "isreturn":0, "sourcecode":"ProxyDocument(DocumentCreator creator, Document physicalDocument, IGanttProject project, UIFacade uiFacade, TableHeaderUIFacade visibleFields, ParserFactory parserFactory) {\r\n    myPhysicalDocument = physicalDocument;\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myParserFactory = parserFactory;\r\n    myCreator = creator;\r\n    myVisibleFields = visibleFields;\r\n}"},
 {"id":580, "parametername":"Document physicalDocument", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":253, "classname":"net.sourceforge.ganttproject.document.ProxyDocument", "methodid":2296, "methodname":"net.sourceforge.ganttproject.document.ProxyDocument.-init-(net.sourceforge.ganttproject.document.DocumentCreator,net.sourceforge.ganttproject.document.Document,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.TableHeaderUIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "isreturn":0, "sourcecode":"ProxyDocument(DocumentCreator creator, Document physicalDocument, IGanttProject project, UIFacade uiFacade, TableHeaderUIFacade visibleFields, ParserFactory parserFactory) {\r\n    myPhysicalDocument = physicalDocument;\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myParserFactory = parserFactory;\r\n    myCreator = creator;\r\n    myVisibleFields = visibleFields;\r\n}"},
 {"id":581, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":253, "classname":"net.sourceforge.ganttproject.document.ProxyDocument", "methodid":2296, "methodname":"net.sourceforge.ganttproject.document.ProxyDocument.-init-(net.sourceforge.ganttproject.document.DocumentCreator,net.sourceforge.ganttproject.document.Document,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.TableHeaderUIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "isreturn":0, "sourcecode":"ProxyDocument(DocumentCreator creator, Document physicalDocument, IGanttProject project, UIFacade uiFacade, TableHeaderUIFacade visibleFields, ParserFactory parserFactory) {\r\n    myPhysicalDocument = physicalDocument;\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myParserFactory = parserFactory;\r\n    myCreator = creator;\r\n    myVisibleFields = visibleFields;\r\n}"},
 {"id":582, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":253, "classname":"net.sourceforge.ganttproject.document.ProxyDocument", "methodid":2296, "methodname":"net.sourceforge.ganttproject.document.ProxyDocument.-init-(net.sourceforge.ganttproject.document.DocumentCreator,net.sourceforge.ganttproject.document.Document,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.TableHeaderUIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "isreturn":0, "sourcecode":"ProxyDocument(DocumentCreator creator, Document physicalDocument, IGanttProject project, UIFacade uiFacade, TableHeaderUIFacade visibleFields, ParserFactory parserFactory) {\r\n    myPhysicalDocument = physicalDocument;\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myParserFactory = parserFactory;\r\n    myCreator = creator;\r\n    myVisibleFields = visibleFields;\r\n}"},
 {"id":583, "parametername":"TableHeaderUIFacade visibleFields", "parametertype":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade", "parameterclass":324, "classid":253, "classname":"net.sourceforge.ganttproject.document.ProxyDocument", "methodid":2296, "methodname":"net.sourceforge.ganttproject.document.ProxyDocument.-init-(net.sourceforge.ganttproject.document.DocumentCreator,net.sourceforge.ganttproject.document.Document,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.TableHeaderUIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "isreturn":0, "sourcecode":"ProxyDocument(DocumentCreator creator, Document physicalDocument, IGanttProject project, UIFacade uiFacade, TableHeaderUIFacade visibleFields, ParserFactory parserFactory) {\r\n    myPhysicalDocument = physicalDocument;\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myParserFactory = parserFactory;\r\n    myCreator = creator;\r\n    myVisibleFields = visibleFields;\r\n}"},
 {"id":584, "parametername":"ParserFactory parserFactory", "parametertype":"net.sourceforge.ganttproject.parser.ParserFactory", "parameterclass":475, "classid":253, "classname":"net.sourceforge.ganttproject.document.ProxyDocument", "methodid":2296, "methodname":"net.sourceforge.ganttproject.document.ProxyDocument.-init-(net.sourceforge.ganttproject.document.DocumentCreator,net.sourceforge.ganttproject.document.Document,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.TableHeaderUIFacade,net.sourceforge.ganttproject.parser.ParserFactory)", "isreturn":0, "sourcecode":"ProxyDocument(DocumentCreator creator, Document physicalDocument, IGanttProject project, UIFacade uiFacade, TableHeaderUIFacade visibleFields, ParserFactory parserFactory) {\r\n    myPhysicalDocument = physicalDocument;\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myParserFactory = parserFactory;\r\n    myCreator = creator;\r\n    myVisibleFields = visibleFields;\r\n}"},
 {"id":585, "parametername":"ProxyDocument.ParsingState parsing", "parametertype":"net.sourceforge.ganttproject.document.ProxyDocument$ParsingState", "parameterclass":249, "classid":246, "classname":"net.sourceforge.ganttproject.document.ProxyDocument$AcquireLockState", "methodid":2328, "methodname":"net.sourceforge.ganttproject.document.ProxyDocument$AcquireLockState.-init-(net.sourceforge.ganttproject.document.ProxyDocument$ParsingState,net.sourceforge.ganttproject.document.ProxyDocument$OpenCopyConfirmationState)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param parsing\r\n * \t\t\r\n * @param confirmation\r\n * \t\t\r\n */\r\npublic AcquireLockState(ProxyDocument.ParsingState parsing, ProxyDocument.OpenCopyConfirmationState confirmation) {\r\n    myParsingState = parsing;\r\n    myConfirmationState = confirmation;\r\n}"},
 {"id":586, "parametername":"ProxyDocument.OpenCopyConfirmationState confirmation", "parametertype":"net.sourceforge.ganttproject.document.ProxyDocument$OpenCopyConfirmationState", "parameterclass":248, "classid":246, "classname":"net.sourceforge.ganttproject.document.ProxyDocument$AcquireLockState", "methodid":2328, "methodname":"net.sourceforge.ganttproject.document.ProxyDocument$AcquireLockState.-init-(net.sourceforge.ganttproject.document.ProxyDocument$ParsingState,net.sourceforge.ganttproject.document.ProxyDocument$OpenCopyConfirmationState)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param parsing\r\n * \t\t\r\n * @param confirmation\r\n * \t\t\r\n */\r\npublic AcquireLockState(ProxyDocument.ParsingState parsing, ProxyDocument.OpenCopyConfirmationState confirmation) {\r\n    myParsingState = parsing;\r\n    myConfirmationState = confirmation;\r\n}"},
 {"id":587, "parametername":"ProxyDocument.ParsingState parsing", "parametertype":"net.sourceforge.ganttproject.document.ProxyDocument$ParsingState", "parameterclass":249, "classid":248, "classname":"net.sourceforge.ganttproject.document.ProxyDocument$OpenCopyConfirmationState", "methodid":2332, "methodname":"net.sourceforge.ganttproject.document.ProxyDocument$OpenCopyConfirmationState.-init-(net.sourceforge.ganttproject.document.ProxyDocument$ParsingState,net.sourceforge.ganttproject.document.ProxyDocument$FailureState)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param parsing\r\n * \t\t\r\n * @param failure\r\n * \t\t\r\n */\r\npublic OpenCopyConfirmationState(ProxyDocument.ParsingState parsing, ProxyDocument.FailureState failure) {\r\n    myParsingState = parsing;\r\n    myExitState = failure;\r\n}"},
 {"id":588, "parametername":"ProxyDocument.FailureState failure", "parametertype":"net.sourceforge.ganttproject.document.ProxyDocument$FailureState", "parameterclass":247, "classid":248, "classname":"net.sourceforge.ganttproject.document.ProxyDocument$OpenCopyConfirmationState", "methodid":2332, "methodname":"net.sourceforge.ganttproject.document.ProxyDocument$OpenCopyConfirmationState.-init-(net.sourceforge.ganttproject.document.ProxyDocument$ParsingState,net.sourceforge.ganttproject.document.ProxyDocument$FailureState)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param parsing\r\n * \t\t\r\n * @param failure\r\n * \t\t\r\n */\r\npublic OpenCopyConfirmationState(ProxyDocument.ParsingState parsing, ProxyDocument.FailureState failure) {\r\n    myParsingState = parsing;\r\n    myExitState = failure;\r\n}"},
 {"id":589, "parametername":"ProxyDocument.SuccessState success", "parametertype":"net.sourceforge.ganttproject.document.ProxyDocument$SuccessState", "parameterclass":252, "classid":249, "classname":"net.sourceforge.ganttproject.document.ProxyDocument$ParsingState", "methodid":2334, "methodname":"net.sourceforge.ganttproject.document.ProxyDocument$ParsingState.-init-(net.sourceforge.ganttproject.document.ProxyDocument$SuccessState,net.sourceforge.ganttproject.document.ProxyDocument$FailureState)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param success\r\n * \t\t\r\n * @param failure\r\n * \t\t\r\n */\r\npublic ParsingState(ProxyDocument.SuccessState success, ProxyDocument.FailureState failure) {\r\n    mySuccessState = success;\r\n    myFailureState = failure;\r\n}"},
 {"id":590, "parametername":"ProxyDocument.FailureState failure", "parametertype":"net.sourceforge.ganttproject.document.ProxyDocument$FailureState", "parameterclass":247, "classid":249, "classname":"net.sourceforge.ganttproject.document.ProxyDocument$ParsingState", "methodid":2334, "methodname":"net.sourceforge.ganttproject.document.ProxyDocument$ParsingState.-init-(net.sourceforge.ganttproject.document.ProxyDocument$SuccessState,net.sourceforge.ganttproject.document.ProxyDocument$FailureState)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param success\r\n * \t\t\r\n * @param failure\r\n * \t\t\r\n */\r\npublic ParsingState(ProxyDocument.SuccessState success, ProxyDocument.FailureState failure) {\r\n    mySuccessState = success;\r\n    myFailureState = failure;\r\n}"},
 {"id":591, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":250, "classname":"net.sourceforge.ganttproject.document.ProxyDocument$PortfolioImpl", "methodid":2338, "methodname":"net.sourceforge.ganttproject.document.ProxyDocument$PortfolioImpl.setDefaultDocument(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"void setDefaultDocument(Document document) {\r\n    if ((myDefaultDocument) != null) {\r\n        throw new IllegalStateException(\"Dont set default document twice\");\r\n    }\r\n    myDefaultDocument = document;\r\n}"},
 {"id":592, "parametername":"UIFacade realFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":255, "classname":"net.sourceforge.ganttproject.export.ConsoleUIFacade", "methodid":2348, "methodname":"net.sourceforge.ganttproject.export.ConsoleUIFacade.-init-(net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"ConsoleUIFacade(UIFacade realFacade) {\r\n    myRealFacade = realFacade;\r\n}"},
 {"id":593, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":256, "classname":"net.sourceforge.ganttproject.export.DeprecatedProjectExportData", "methodid":2376, "methodname":"net.sourceforge.ganttproject.export.DeprecatedProjectExportData.-init-(net.sourceforge.ganttproject.IGanttProject,java.lang.String,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttExportSettings,java.lang.String)", "isreturn":0, "sourcecode":"public DeprecatedProjectExportData(IGanttProject project, final String myFilename, final Chart myGanttChart, final Chart myResourceChart, final GanttExportSettings myExportOptions, final String myXslFoScript) {\r\n    super();\r\n    this.myProject = project;\r\n    this.myFilename = myFilename;\r\n    this.myGanttChart = myGanttChart;\r\n    this.myResourceChart = myResourceChart;\r\n    this.myExportOptions = myExportOptions;\r\n    this.myXslFoScript = myXslFoScript;\r\n}"},
 {"id":594, "parametername":"final Chart myGanttChart", "parametertype":"net.sourceforge.ganttproject.chart.Chart", "parameterclass":159, "classid":256, "classname":"net.sourceforge.ganttproject.export.DeprecatedProjectExportData", "methodid":2376, "methodname":"net.sourceforge.ganttproject.export.DeprecatedProjectExportData.-init-(net.sourceforge.ganttproject.IGanttProject,java.lang.String,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttExportSettings,java.lang.String)", "isreturn":0, "sourcecode":"public DeprecatedProjectExportData(IGanttProject project, final String myFilename, final Chart myGanttChart, final Chart myResourceChart, final GanttExportSettings myExportOptions, final String myXslFoScript) {\r\n    super();\r\n    this.myProject = project;\r\n    this.myFilename = myFilename;\r\n    this.myGanttChart = myGanttChart;\r\n    this.myResourceChart = myResourceChart;\r\n    this.myExportOptions = myExportOptions;\r\n    this.myXslFoScript = myXslFoScript;\r\n}"},
 {"id":595, "parametername":"final Chart myResourceChart", "parametertype":"net.sourceforge.ganttproject.chart.Chart", "parameterclass":159, "classid":256, "classname":"net.sourceforge.ganttproject.export.DeprecatedProjectExportData", "methodid":2376, "methodname":"net.sourceforge.ganttproject.export.DeprecatedProjectExportData.-init-(net.sourceforge.ganttproject.IGanttProject,java.lang.String,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttExportSettings,java.lang.String)", "isreturn":0, "sourcecode":"public DeprecatedProjectExportData(IGanttProject project, final String myFilename, final Chart myGanttChart, final Chart myResourceChart, final GanttExportSettings myExportOptions, final String myXslFoScript) {\r\n    super();\r\n    this.myProject = project;\r\n    this.myFilename = myFilename;\r\n    this.myGanttChart = myGanttChart;\r\n    this.myResourceChart = myResourceChart;\r\n    this.myExportOptions = myExportOptions;\r\n    this.myXslFoScript = myXslFoScript;\r\n}"},
 {"id":596, "parametername":"final GanttExportSettings myExportOptions", "parametertype":"net.sourceforge.ganttproject.GanttExportSettings", "parameterclass":27, "classid":256, "classname":"net.sourceforge.ganttproject.export.DeprecatedProjectExportData", "methodid":2376, "methodname":"net.sourceforge.ganttproject.export.DeprecatedProjectExportData.-init-(net.sourceforge.ganttproject.IGanttProject,java.lang.String,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttExportSettings,java.lang.String)", "isreturn":0, "sourcecode":"public DeprecatedProjectExportData(IGanttProject project, final String myFilename, final Chart myGanttChart, final Chart myResourceChart, final GanttExportSettings myExportOptions, final String myXslFoScript) {\r\n    super();\r\n    this.myProject = project;\r\n    this.myFilename = myFilename;\r\n    this.myGanttChart = myGanttChart;\r\n    this.myResourceChart = myResourceChart;\r\n    this.myExportOptions = myExportOptions;\r\n    this.myXslFoScript = myXslFoScript;\r\n}"},
 {"id":597, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":258, "classname":"net.sourceforge.ganttproject.export.ExportFileAction", "methodid":2379, "methodname":"net.sourceforge.ganttproject.export.ExportFileAction.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public ExportFileAction(UIFacade uiFacade, IGanttProject project, GanttOptions options) {\r\n    super(null, \"16\");\r\n    /* putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_E,\n    MENU_MASK));\n     */\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myOptions = options;\r\n}"},
 {"id":598, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":258, "classname":"net.sourceforge.ganttproject.export.ExportFileAction", "methodid":2379, "methodname":"net.sourceforge.ganttproject.export.ExportFileAction.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public ExportFileAction(UIFacade uiFacade, IGanttProject project, GanttOptions options) {\r\n    super(null, \"16\");\r\n    /* putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_E,\n    MENU_MASK));\n     */\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myOptions = options;\r\n}"},
 {"id":599, "parametername":"GanttOptions options", "parametertype":"net.sourceforge.ganttproject.GanttOptions", "parameterclass":48, "classid":258, "classname":"net.sourceforge.ganttproject.export.ExportFileAction", "methodid":2379, "methodname":"net.sourceforge.ganttproject.export.ExportFileAction.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public ExportFileAction(UIFacade uiFacade, IGanttProject project, GanttOptions options) {\r\n    super(null, \"16\");\r\n    /* putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_E,\n    MENU_MASK));\n     */\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myOptions = options;\r\n}"},
 {"id":600, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":262, "classname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "methodid":2383, "methodname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public ExportFileWizardImpl(UIFacade uiFacade, IGanttProject project, GanttOptions options) {\r\n    this(uiFacade, project, uiFacade.getGanttChart(), uiFacade.getResourceChart(), uiFacade.getActiveChart(), options);\r\n}"},
 {"id":601, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":262, "classname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "methodid":2383, "methodname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public ExportFileWizardImpl(UIFacade uiFacade, IGanttProject project, GanttOptions options) {\r\n    this(uiFacade, project, uiFacade.getGanttChart(), uiFacade.getResourceChart(), uiFacade.getActiveChart(), options);\r\n}"},
 {"id":602, "parametername":"GanttOptions options", "parametertype":"net.sourceforge.ganttproject.GanttOptions", "parameterclass":48, "classid":262, "classname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "methodid":2383, "methodname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public ExportFileWizardImpl(UIFacade uiFacade, IGanttProject project, GanttOptions options) {\r\n    this(uiFacade, project, uiFacade.getGanttChart(), uiFacade.getResourceChart(), uiFacade.getActiveChart(), options);\r\n}"},
 {"id":603, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":262, "classname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "methodid":2384, "methodname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public ExportFileWizardImpl(UIFacade uiFacade, IGanttProject project, Chart ganttChart, Chart resourceChart, Chart visibleChart, GanttOptions options) {\r\n    super(uiFacade, GanttLanguage.getInstance().getText(\"exportWizard.dialog.title\"));\r\n    myUIFacade = uiFacade;\r\n    myProject = project;\r\n    myGanttChart = ganttChart;\r\n    myResourceChart = resourceChart;\r\n    myVisibleChart = visibleChart;\r\n    myOptions = options;\r\n    myState = new ExportFileWizardImpl.State(project.getDocument());\r\n    if ((ExportFileWizardImpl.ourExporters) == null) {\r\n        ExportFileWizardImpl.ourExporters = Mediator.getPluginManager().getExporters();\r\n    }\r\n    Exporter[] exporters = ExportFileWizardImpl.ourExporters;\r\n    myState.setExporter(((ExportFileWizardImpl.ourLastSelectedExporter) == null ? exporters[0] : ExportFileWizardImpl.ourLastSelectedExporter));\r\n    for (int i = 0; i < (exporters.length); i++) {\r\n        exporters[i].setContext(project, uiFacade);\r\n        if ((exporters[i]) instanceof ExportFileWizardImpl.LegacyOptionsClient) {\r\n            ((ExportFileWizardImpl.LegacyOptionsClient) (exporters[i])).setOptions(myOptions);\r\n        }\r\n    }\r\n    addPage(new ExporterChooserPage(exporters, myState));\r\n    addPage(new FileChooserPage(myState, myProject));\r\n}"},
 {"id":604, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":262, "classname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "methodid":2384, "methodname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public ExportFileWizardImpl(UIFacade uiFacade, IGanttProject project, Chart ganttChart, Chart resourceChart, Chart visibleChart, GanttOptions options) {\r\n    super(uiFacade, GanttLanguage.getInstance().getText(\"exportWizard.dialog.title\"));\r\n    myUIFacade = uiFacade;\r\n    myProject = project;\r\n    myGanttChart = ganttChart;\r\n    myResourceChart = resourceChart;\r\n    myVisibleChart = visibleChart;\r\n    myOptions = options;\r\n    myState = new ExportFileWizardImpl.State(project.getDocument());\r\n    if ((ExportFileWizardImpl.ourExporters) == null) {\r\n        ExportFileWizardImpl.ourExporters = Mediator.getPluginManager().getExporters();\r\n    }\r\n    Exporter[] exporters = ExportFileWizardImpl.ourExporters;\r\n    myState.setExporter(((ExportFileWizardImpl.ourLastSelectedExporter) == null ? exporters[0] : ExportFileWizardImpl.ourLastSelectedExporter));\r\n    for (int i = 0; i < (exporters.length); i++) {\r\n        exporters[i].setContext(project, uiFacade);\r\n        if ((exporters[i]) instanceof ExportFileWizardImpl.LegacyOptionsClient) {\r\n            ((ExportFileWizardImpl.LegacyOptionsClient) (exporters[i])).setOptions(myOptions);\r\n        }\r\n    }\r\n    addPage(new ExporterChooserPage(exporters, myState));\r\n    addPage(new FileChooserPage(myState, myProject));\r\n}"},
 {"id":605, "parametername":"Chart ganttChart", "parametertype":"net.sourceforge.ganttproject.chart.Chart", "parameterclass":159, "classid":262, "classname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "methodid":2384, "methodname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public ExportFileWizardImpl(UIFacade uiFacade, IGanttProject project, Chart ganttChart, Chart resourceChart, Chart visibleChart, GanttOptions options) {\r\n    super(uiFacade, GanttLanguage.getInstance().getText(\"exportWizard.dialog.title\"));\r\n    myUIFacade = uiFacade;\r\n    myProject = project;\r\n    myGanttChart = ganttChart;\r\n    myResourceChart = resourceChart;\r\n    myVisibleChart = visibleChart;\r\n    myOptions = options;\r\n    myState = new ExportFileWizardImpl.State(project.getDocument());\r\n    if ((ExportFileWizardImpl.ourExporters) == null) {\r\n        ExportFileWizardImpl.ourExporters = Mediator.getPluginManager().getExporters();\r\n    }\r\n    Exporter[] exporters = ExportFileWizardImpl.ourExporters;\r\n    myState.setExporter(((ExportFileWizardImpl.ourLastSelectedExporter) == null ? exporters[0] : ExportFileWizardImpl.ourLastSelectedExporter));\r\n    for (int i = 0; i < (exporters.length); i++) {\r\n        exporters[i].setContext(project, uiFacade);\r\n        if ((exporters[i]) instanceof ExportFileWizardImpl.LegacyOptionsClient) {\r\n            ((ExportFileWizardImpl.LegacyOptionsClient) (exporters[i])).setOptions(myOptions);\r\n        }\r\n    }\r\n    addPage(new ExporterChooserPage(exporters, myState));\r\n    addPage(new FileChooserPage(myState, myProject));\r\n}"},
 {"id":606, "parametername":"Chart resourceChart", "parametertype":"net.sourceforge.ganttproject.chart.Chart", "parameterclass":159, "classid":262, "classname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "methodid":2384, "methodname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public ExportFileWizardImpl(UIFacade uiFacade, IGanttProject project, Chart ganttChart, Chart resourceChart, Chart visibleChart, GanttOptions options) {\r\n    super(uiFacade, GanttLanguage.getInstance().getText(\"exportWizard.dialog.title\"));\r\n    myUIFacade = uiFacade;\r\n    myProject = project;\r\n    myGanttChart = ganttChart;\r\n    myResourceChart = resourceChart;\r\n    myVisibleChart = visibleChart;\r\n    myOptions = options;\r\n    myState = new ExportFileWizardImpl.State(project.getDocument());\r\n    if ((ExportFileWizardImpl.ourExporters) == null) {\r\n        ExportFileWizardImpl.ourExporters = Mediator.getPluginManager().getExporters();\r\n    }\r\n    Exporter[] exporters = ExportFileWizardImpl.ourExporters;\r\n    myState.setExporter(((ExportFileWizardImpl.ourLastSelectedExporter) == null ? exporters[0] : ExportFileWizardImpl.ourLastSelectedExporter));\r\n    for (int i = 0; i < (exporters.length); i++) {\r\n        exporters[i].setContext(project, uiFacade);\r\n        if ((exporters[i]) instanceof ExportFileWizardImpl.LegacyOptionsClient) {\r\n            ((ExportFileWizardImpl.LegacyOptionsClient) (exporters[i])).setOptions(myOptions);\r\n        }\r\n    }\r\n    addPage(new ExporterChooserPage(exporters, myState));\r\n    addPage(new FileChooserPage(myState, myProject));\r\n}"},
 {"id":607, "parametername":"Chart visibleChart", "parametertype":"net.sourceforge.ganttproject.chart.Chart", "parameterclass":159, "classid":262, "classname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "methodid":2384, "methodname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public ExportFileWizardImpl(UIFacade uiFacade, IGanttProject project, Chart ganttChart, Chart resourceChart, Chart visibleChart, GanttOptions options) {\r\n    super(uiFacade, GanttLanguage.getInstance().getText(\"exportWizard.dialog.title\"));\r\n    myUIFacade = uiFacade;\r\n    myProject = project;\r\n    myGanttChart = ganttChart;\r\n    myResourceChart = resourceChart;\r\n    myVisibleChart = visibleChart;\r\n    myOptions = options;\r\n    myState = new ExportFileWizardImpl.State(project.getDocument());\r\n    if ((ExportFileWizardImpl.ourExporters) == null) {\r\n        ExportFileWizardImpl.ourExporters = Mediator.getPluginManager().getExporters();\r\n    }\r\n    Exporter[] exporters = ExportFileWizardImpl.ourExporters;\r\n    myState.setExporter(((ExportFileWizardImpl.ourLastSelectedExporter) == null ? exporters[0] : ExportFileWizardImpl.ourLastSelectedExporter));\r\n    for (int i = 0; i < (exporters.length); i++) {\r\n        exporters[i].setContext(project, uiFacade);\r\n        if ((exporters[i]) instanceof ExportFileWizardImpl.LegacyOptionsClient) {\r\n            ((ExportFileWizardImpl.LegacyOptionsClient) (exporters[i])).setOptions(myOptions);\r\n        }\r\n    }\r\n    addPage(new ExporterChooserPage(exporters, myState));\r\n    addPage(new FileChooserPage(myState, myProject));\r\n}"},
 {"id":608, "parametername":"GanttOptions options", "parametertype":"net.sourceforge.ganttproject.GanttOptions", "parameterclass":48, "classid":262, "classname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl", "methodid":2384, "methodname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public ExportFileWizardImpl(UIFacade uiFacade, IGanttProject project, Chart ganttChart, Chart resourceChart, Chart visibleChart, GanttOptions options) {\r\n    super(uiFacade, GanttLanguage.getInstance().getText(\"exportWizard.dialog.title\"));\r\n    myUIFacade = uiFacade;\r\n    myProject = project;\r\n    myGanttChart = ganttChart;\r\n    myResourceChart = resourceChart;\r\n    myVisibleChart = visibleChart;\r\n    myOptions = options;\r\n    myState = new ExportFileWizardImpl.State(project.getDocument());\r\n    if ((ExportFileWizardImpl.ourExporters) == null) {\r\n        ExportFileWizardImpl.ourExporters = Mediator.getPluginManager().getExporters();\r\n    }\r\n    Exporter[] exporters = ExportFileWizardImpl.ourExporters;\r\n    myState.setExporter(((ExportFileWizardImpl.ourLastSelectedExporter) == null ? exporters[0] : ExportFileWizardImpl.ourLastSelectedExporter));\r\n    for (int i = 0; i < (exporters.length); i++) {\r\n        exporters[i].setContext(project, uiFacade);\r\n        if ((exporters[i]) instanceof ExportFileWizardImpl.LegacyOptionsClient) {\r\n            ((ExportFileWizardImpl.LegacyOptionsClient) (exporters[i])).setOptions(myOptions);\r\n        }\r\n    }\r\n    addPage(new ExporterChooserPage(exporters, myState));\r\n    addPage(new FileChooserPage(myState, myProject));\r\n}"},
 {"id":609, "parametername":"Document projectDocument", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":261, "classname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State", "methodid":2394, "methodname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State.-init-(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"State(Document projectDocument) {\r\n    // myProjectDocument = projectDocument;\r\n}"},
 {"id":610, "parametername":"Exporter exporter", "parametertype":"net.sourceforge.ganttproject.export.Exporter", "parameterclass":264, "classid":261, "classname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State", "methodid":2398, "methodname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State.setExporter(net.sourceforge.ganttproject.export.Exporter)", "isreturn":0, "sourcecode":"void setExporter(Exporter exporter) {\r\n    myExporter = exporter;\r\n    ExportFileWizardImpl.ourLastSelectedExporter = exporter;\r\n}"},
 {"id":611, "parametername":"GanttOptions options", "parametertype":"net.sourceforge.ganttproject.GanttOptions", "parameterclass":48, "classid":260, "classname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$LegacyOptionsClient", "methodid":2393, "methodname":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$LegacyOptionsClient.setOptions(net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"void setOptions(GanttOptions options);"},
 {"id":612, "parametername":"ExportFinalizationJob finalizationJob", "parametertype":"net.sourceforge.ganttproject.export.ExportFinalizationJob", "parameterclass":263, "classid":264, "classname":"net.sourceforge.ganttproject.export.Exporter", "methodid":2407, "methodname":"net.sourceforge.ganttproject.export.Exporter.run(java.io.File,net.sourceforge.ganttproject.export.ExportFinalizationJob)", "isreturn":0, "sourcecode":"void run(File outputFile, ExportFinalizationJob finalizationJob) throws Exception;"},
 {"id":613, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":264, "classname":"net.sourceforge.ganttproject.export.Exporter", "methodid":2408, "methodname":"net.sourceforge.ganttproject.export.Exporter.setContext(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"void setContext(IGanttProject project, UIFacade uiFacade);"},
 {"id":614, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":264, "classname":"net.sourceforge.ganttproject.export.Exporter", "methodid":2408, "methodname":"net.sourceforge.ganttproject.export.Exporter.setContext(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"void setContext(IGanttProject project, UIFacade uiFacade);"},
 {"id":615, "parametername":"ExportFileWizardImpl.State state", "parametertype":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State", "parameterclass":261, "classid":265, "classname":"net.sourceforge.ganttproject.export.ExporterChooserPage", "methodid":2409, "methodname":"net.sourceforge.ganttproject.export.ExporterChooserPage.-init-(net.sourceforge.ganttproject.export.Exporter[],net.sourceforge.ganttproject.export.ExportFileWizardImpl$State)", "isreturn":0, "sourcecode":"/**\r\n *\r\n */\r\nExporterChooserPage(Exporter[] exporters, ExportFileWizardImpl.State state) {\r\n    myExporters = exporters;\r\n    myState = state;\r\n}"},
 {"id":616, "parametername":"ExportFinalizationJob finalizationJob", "parametertype":"net.sourceforge.ganttproject.export.ExportFinalizationJob", "parameterclass":263, "classid":266, "classname":"net.sourceforge.ganttproject.export.ExporterToCSV", "methodid":2421, "methodname":"net.sourceforge.ganttproject.export.ExporterToCSV.run(java.io.File,net.sourceforge.ganttproject.export.ExportFinalizationJob)", "isreturn":0, "sourcecode":"public void run(File outputFile, ExportFinalizationJob finalizationJob) throws Exception {\r\n    // TODO Auto-generated method stub\r\n    if (!(outputFile.exists())) {\r\n        outputFile.createNewFile();\r\n    }\r\n    GanttCSVExport legacyExporter = new GanttCSVExport(myProject, myOptions.getCSVOptions());\r\n    legacyExporter.save(new FileOutputStream(outputFile));\r\n    finalizationJob.run(new File[]{ outputFile });\r\n}"},
 {"id":617, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":266, "classname":"net.sourceforge.ganttproject.export.ExporterToCSV", "methodid":2422, "methodname":"net.sourceforge.ganttproject.export.ExporterToCSV.setContext(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public void setContext(IGanttProject project, UIFacade uiFacade) {\r\n    myProject = project;\r\n}"},
 {"id":618, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":266, "classname":"net.sourceforge.ganttproject.export.ExporterToCSV", "methodid":2422, "methodname":"net.sourceforge.ganttproject.export.ExporterToCSV.setContext(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public void setContext(IGanttProject project, UIFacade uiFacade) {\r\n    myProject = project;\r\n}"},
 {"id":619, "parametername":"GanttOptions options", "parametertype":"net.sourceforge.ganttproject.GanttOptions", "parameterclass":48, "classid":266, "classname":"net.sourceforge.ganttproject.export.ExporterToCSV", "methodid":2423, "methodname":"net.sourceforge.ganttproject.export.ExporterToCSV.setOptions(net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public void setOptions(GanttOptions options) {\r\n    myOptions = options;\r\n}"},
 {"id":620, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":268, "classname":"net.sourceforge.ganttproject.export.ExporterToImage", "methodid":2432, "methodname":"net.sourceforge.ganttproject.export.ExporterToImage.setContext(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public void setContext(IGanttProject project, UIFacade uiFacade) {\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myGanttChart = uiFacade.getGanttChart().createCopy();\r\n}"},
 {"id":621, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":268, "classname":"net.sourceforge.ganttproject.export.ExporterToImage", "methodid":2432, "methodname":"net.sourceforge.ganttproject.export.ExporterToImage.setContext(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public void setContext(IGanttProject project, UIFacade uiFacade) {\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myGanttChart = uiFacade.getGanttChart().createCopy();\r\n}"},
 {"id":622, "parametername":"ExportFinalizationJob finalizationJob", "parametertype":"net.sourceforge.ganttproject.export.ExportFinalizationJob", "parameterclass":263, "classid":268, "classname":"net.sourceforge.ganttproject.export.ExporterToImage", "methodid":2431, "methodname":"net.sourceforge.ganttproject.export.ExporterToImage.run(java.io.File,net.sourceforge.ganttproject.export.ExportFinalizationJob)", "isreturn":0, "sourcecode":"public void run(File outputFile, ExportFinalizationJob finalizationJob) throws Exception {\r\n    Chart chart = myUIFacade.getActiveChart();\r\n    if (chart == null) {\r\n        chart = myUIFacade.getGanttChart();\r\n    }\r\n    RenderedImage renderedImage = chart.getRenderedImage(new GanttExportSettings());\r\n    ImageIO.write(renderedImage, myFileTypeOption.proposeFileExtension(), outputFile);\r\n    finalizationJob.run(new File[]{ outputFile });\r\n}"},
 {"id":623, "parametername":"ExportFileWizardImpl.State state", "parametertype":"net.sourceforge.ganttproject.export.ExportFileWizardImpl$State", "parameterclass":261, "classid":269, "classname":"net.sourceforge.ganttproject.export.FileChooserPage", "methodid":2441, "methodname":"net.sourceforge.ganttproject.export.FileChooserPage.-init-(net.sourceforge.ganttproject.export.ExportFileWizardImpl$State,net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"FileChooserPage(ExportFileWizardImpl.State state, IGanttProject project) {\r\n    myState = state;\r\n    myProject = project;\r\n    myWebPublishingGroup = new GPOptionGroup(\"exporter.webPublishing\", new GPOption[]{ state.getPublishInWebOption() });\r\n    myWebPublishingGroup.setTitled(false);\r\n    // myOptionsBuilder = new OptionsPageBuilder();\r\n}"},
 {"id":624, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":269, "classname":"net.sourceforge.ganttproject.export.FileChooserPage", "methodid":2441, "methodname":"net.sourceforge.ganttproject.export.FileChooserPage.-init-(net.sourceforge.ganttproject.export.ExportFileWizardImpl$State,net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"FileChooserPage(ExportFileWizardImpl.State state, IGanttProject project) {\r\n    myState = state;\r\n    myProject = project;\r\n    myWebPublishingGroup = new GPOptionGroup(\"exporter.webPublishing\", new GPOption[]{ state.getPublishInWebOption() });\r\n    myWebPublishingGroup.setTitled(false);\r\n    // myOptionsBuilder = new OptionsPageBuilder();\r\n}"},
 {"id":625, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":269, "classname":"net.sourceforge.ganttproject.export.FileChooserPage", "methodid":2447, "methodname":"net.sourceforge.ganttproject.export.FileChooserPage.proposeOutputFile(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"public File proposeOutputFile(IGanttProject project) {\r\n    return FileChooserPage.proposeOutputFile(project, myState.getExporter());\r\n}"},
 {"id":626, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":269, "classname":"net.sourceforge.ganttproject.export.FileChooserPage", "methodid":2448, "methodname":"net.sourceforge.ganttproject.export.FileChooserPage.proposeOutputFile(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.export.Exporter)", "isreturn":0, "sourcecode":"static File proposeOutputFile(IGanttProject project, Exporter exporter) {\r\n    String proposedExtension = exporter.proposeFileExtension();\r\n    if (proposedExtension == null) {\r\n        return null;\r\n    }\r\n    if ((FileChooserPage.ourLastSelectedFile) != null) {\r\n        String name = FileChooserPage.ourLastSelectedFile.getAbsolutePath();\r\n        int lastDot = name.lastIndexOf(.);\r\n        String extension = (lastDot >= 0) ? name.substring((lastDot + 1)) : \"\";\r\n        if (extension.equals(proposedExtension)) {\r\n            return FileChooserPage.ourLastSelectedFile;\r\n        }\r\n    }\r\n    File userHome = new File(System.getProperty(\"user.home\"));\r\n    File result = new File(userHome, (((project.getProjectName()) + \".\") + proposedExtension));\r\n    Document projectDocument = project.getDocument();\r\n    if (projectDocument != null) {\r\n        File localFile = new File(projectDocument.getFilePath());\r\n        if (localFile.exists()) {\r\n            String name = localFile.getAbsolutePath();\r\n            int lastDot = name.lastIndexOf(.);\r\n            name = ((name.substring(0, lastDot)) + \".\") + proposedExtension;\r\n            result = new File(name);\r\n        } else {\r\n            File directory = localFile.getParentFile();\r\n            if (directory.exists()) {\r\n                result = new File(directory, (((project.getProjectName()) + \".\") + proposedExtension));\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":627, "parametername":"Exporter exporter", "parametertype":"net.sourceforge.ganttproject.export.Exporter", "parameterclass":264, "classid":269, "classname":"net.sourceforge.ganttproject.export.FileChooserPage", "methodid":2448, "methodname":"net.sourceforge.ganttproject.export.FileChooserPage.proposeOutputFile(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.export.Exporter)", "isreturn":0, "sourcecode":"static File proposeOutputFile(IGanttProject project, Exporter exporter) {\r\n    String proposedExtension = exporter.proposeFileExtension();\r\n    if (proposedExtension == null) {\r\n        return null;\r\n    }\r\n    if ((FileChooserPage.ourLastSelectedFile) != null) {\r\n        String name = FileChooserPage.ourLastSelectedFile.getAbsolutePath();\r\n        int lastDot = name.lastIndexOf(.);\r\n        String extension = (lastDot >= 0) ? name.substring((lastDot + 1)) : \"\";\r\n        if (extension.equals(proposedExtension)) {\r\n            return FileChooserPage.ourLastSelectedFile;\r\n        }\r\n    }\r\n    File userHome = new File(System.getProperty(\"user.home\"));\r\n    File result = new File(userHome, (((project.getProjectName()) + \".\") + proposedExtension));\r\n    Document projectDocument = project.getDocument();\r\n    if (projectDocument != null) {\r\n        File localFile = new File(projectDocument.getFilePath());\r\n        if (localFile.exists()) {\r\n            String name = localFile.getAbsolutePath();\r\n            int lastDot = name.lastIndexOf(.);\r\n            name = ((name.substring(0, lastDot)) + \".\") + proposedExtension;\r\n            result = new File(name);\r\n        } else {\r\n            File directory = localFile.getParentFile();\r\n            if (directory.exists()) {\r\n                result = new File(directory, (((project.getProjectName()) + \".\") + proposedExtension));\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":628, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":270, "classname":"net.sourceforge.ganttproject.export.TaskVisitor", "methodid":2453, "methodname":"net.sourceforge.ganttproject.export.TaskVisitor.visit(net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"public String visit(TaskManager taskManager) throws Exception {\r\n    StringBuffer out = new StringBuffer();\r\n    visit(taskManager.getTaskHierarchy().getRootTask(), 0, out);\r\n    return out.toString();\r\n}"},
 {"id":629, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":270, "classname":"net.sourceforge.ganttproject.export.TaskVisitor", "methodid":2452, "methodname":"net.sourceforge.ganttproject.export.TaskVisitor.visit(net.sourceforge.ganttproject.task.Task,int,java.lang.StringBuffer)", "isreturn":0, "sourcecode":"void visit(Task task, int depth, StringBuffer out) throws Exception {\r\n    Task[] nestedTasks = task.getManager().getTaskHierarchy().getNestedTasks(task);\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        Task next = nestedTasks[i];\r\n        String nextSerialized = serializeTask(next, depth);\r\n        out.append(nextSerialized);\r\n        visit(next, (depth + 1), out);\r\n    }\r\n}"},
 {"id":630, "parametername":"Task t", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":270, "classname":"net.sourceforge.ganttproject.export.TaskVisitor", "methodid":2451, "methodname":"net.sourceforge.ganttproject.export.TaskVisitor.serializeTask(net.sourceforge.ganttproject.task.Task,int)", "isreturn":0, "sourcecode":"protected abstract String serializeTask(Task t, int depth) throws Exception;"},
 {"id":631, "parametername":"final DocumentManager.FTPOptions options", "parametertype":"net.sourceforge.ganttproject.document.DocumentManager$FTPOptions", "parameterclass":236, "classid":271, "classname":"net.sourceforge.ganttproject.export.WebPublisher", "methodid":2457, "methodname":"net.sourceforge.ganttproject.export.WebPublisher.run(java.io.File[],net.sourceforge.ganttproject.document.DocumentManager$FTPOptions,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public void run(final File[] exportFiles, final DocumentManager.FTPOptions options, UIFacade uiFacade) {\r\n    IJobManager jobManager = Platform.getJobManager();\r\n    IProgressMonitor monitor = jobManager.createProgressGroup();\r\n    Job startingJob = new Job(\"starting\") {\r\n        protected IStatus run(IProgressMonitor monitor) {\r\n            monitor.beginTask(\"Publishing files on FTP\", exportFiles.length);\r\n            try {\r\n                final URL baseUrl = buildURL(options);\r\n                if (baseUrl == null) {\r\n                    throw new RuntimeException(\"Failed to discover your FTP settings. Please make sure that you specified server name and user name\");\r\n                }\r\n                for (int i = 0; i < (exportFiles.length); i++) {\r\n                    Job nextJob = createTransferJob(baseUrl, exportFiles[i]);\r\n                    nextJob.setProgressGroup(monitor, 1);\r\n                    nextJob.schedule();\r\n                    nextJob.join();\r\n                }\r\n                Job finishingJob = new Job(\"finishing\") {\r\n                    protected IStatus run(IProgressMonitor monitor) {\r\n                        monitor.done();\r\n                        return Status.OK_STATUS;\r\n                    }\r\n                };\r\n                finishingJob.setProgressGroup(monitor, 0);\r\n                finishingJob.schedule();\r\n                finishingJob.join();\r\n            } catch (IOException e) {\r\n                if (!(GPLogger.log(e))) {\r\n                    e.printStackTrace(System.err);\r\n                }\r\n            } catch (InterruptedException e) {\r\n                if (!(GPLogger.log(e))) {\r\n                    e.printStackTrace(System.err);\r\n                }\r\n            }\r\n            return Status.OK_STATUS;\r\n        }\r\n\r\n        private URL buildURL(DocumentManager.FTPOptions options) {\r\n            if ((options.getServerName().getValue()) == null) {\r\n                return null;\r\n            }\r\n            StringBuffer spec = new StringBuffer(\"ftp://\");\r\n            boolean hasUserSpec = false;\r\n            if ((options.getUserName().getValue()) != null) {\r\n                spec.append(options.getUserName().getValue());\r\n                hasUserSpec = true;\r\n            }\r\n            if ((options.getPassword().getValue()) != null) {\r\n                spec.append(:).append(options.getPassword().getValue());\r\n            }\r\n            if (hasUserSpec) {\r\n                spec.append(@);\r\n            }\r\n            spec.append(options.getServerName().getValue()).append(/);\r\n            if ((options.getDirectoryName().getValue()) != null) {\r\n                spec.append(options.getDirectoryName().getValue()).append(/);\r\n            }\r\n            try {\r\n                URL result = new URL(spec.toString());\r\n                return result;\r\n            } catch (MalformedURLException e) {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    startingJob.setProgressGroup(monitor, 0);\r\n    startingJob.schedule();\r\n}"},
 {"id":632, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":271, "classname":"net.sourceforge.ganttproject.export.WebPublisher", "methodid":2457, "methodname":"net.sourceforge.ganttproject.export.WebPublisher.run(java.io.File[],net.sourceforge.ganttproject.document.DocumentManager$FTPOptions,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public void run(final File[] exportFiles, final DocumentManager.FTPOptions options, UIFacade uiFacade) {\r\n    IJobManager jobManager = Platform.getJobManager();\r\n    IProgressMonitor monitor = jobManager.createProgressGroup();\r\n    Job startingJob = new Job(\"starting\") {\r\n        protected IStatus run(IProgressMonitor monitor) {\r\n            monitor.beginTask(\"Publishing files on FTP\", exportFiles.length);\r\n            try {\r\n                final URL baseUrl = buildURL(options);\r\n                if (baseUrl == null) {\r\n                    throw new RuntimeException(\"Failed to discover your FTP settings. Please make sure that you specified server name and user name\");\r\n                }\r\n                for (int i = 0; i < (exportFiles.length); i++) {\r\n                    Job nextJob = createTransferJob(baseUrl, exportFiles[i]);\r\n                    nextJob.setProgressGroup(monitor, 1);\r\n                    nextJob.schedule();\r\n                    nextJob.join();\r\n                }\r\n                Job finishingJob = new Job(\"finishing\") {\r\n                    protected IStatus run(IProgressMonitor monitor) {\r\n                        monitor.done();\r\n                        return Status.OK_STATUS;\r\n                    }\r\n                };\r\n                finishingJob.setProgressGroup(monitor, 0);\r\n                finishingJob.schedule();\r\n                finishingJob.join();\r\n            } catch (IOException e) {\r\n                if (!(GPLogger.log(e))) {\r\n                    e.printStackTrace(System.err);\r\n                }\r\n            } catch (InterruptedException e) {\r\n                if (!(GPLogger.log(e))) {\r\n                    e.printStackTrace(System.err);\r\n                }\r\n            }\r\n            return Status.OK_STATUS;\r\n        }\r\n\r\n        private URL buildURL(DocumentManager.FTPOptions options) {\r\n            if ((options.getServerName().getValue()) == null) {\r\n                return null;\r\n            }\r\n            StringBuffer spec = new StringBuffer(\"ftp://\");\r\n            boolean hasUserSpec = false;\r\n            if ((options.getUserName().getValue()) != null) {\r\n                spec.append(options.getUserName().getValue());\r\n                hasUserSpec = true;\r\n            }\r\n            if ((options.getPassword().getValue()) != null) {\r\n                spec.append(:).append(options.getPassword().getValue());\r\n            }\r\n            if (hasUserSpec) {\r\n                spec.append(@);\r\n            }\r\n            spec.append(options.getServerName().getValue()).append(/);\r\n            if ((options.getDirectoryName().getValue()) != null) {\r\n                spec.append(options.getDirectoryName().getValue()).append(/);\r\n            }\r\n            try {\r\n                URL result = new URL(spec.toString());\r\n                return result;\r\n            } catch (MalformedURLException e) {\r\n                return null;\r\n            }\r\n        }\r\n    };\r\n    startingJob.setProgressGroup(monitor, 0);\r\n    startingJob.schedule();\r\n}"},
 {"id":633, "parametername":"final DateIntervalListEditor.DateIntervalModel intervalsModel", "parametertype":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateIntervalModel", "parameterclass":285, "classid":288, "classname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor", "methodid":2494, "methodname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor.-init-(net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateIntervalModel)", "isreturn":0, "sourcecode":"public DateIntervalListEditor(final DateIntervalListEditor.DateIntervalModel intervalsModel) {\r\n    super(new BorderLayout());\r\n    myIntervalsModel = intervalsModel;\r\n    myStart = new DefaultDateOption(\"generic.startDate\") {\r\n        public void setValue(Date value) {\r\n            super.setValue(value);\r\n            commit();\r\n            if ((intervalsModel.getMaxIntervalLength()) == 1) {\r\n                DateIntervalListEditor.this.myFinish.setValue(value);\r\n            }\r\n            DateIntervalListEditor.this.updateActions();\r\n            lock();\r\n        }\r\n    };\r\n    myFinish = new DefaultDateOption(\"generic.endDate\") {\r\n        public void setValue(Date value) {\r\n            super.setValue(value);\r\n            commit();\r\n            DateIntervalListEditor.this.updateActions();\r\n            lock();\r\n        }\r\n    };\r\n    myStart.lock();\r\n    myFinish.lock();\r\n    init();\r\n}"},
 {"id":634, "parametername":"DateIntervalListEditor.DateInterval interval", "parametertype":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval", "parameterclass":284, "classid":285, "classname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateIntervalModel", "methodid":2504, "methodname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateIntervalModel.remove(net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval)", "isreturn":0, "sourcecode":"void remove(DateIntervalListEditor.DateInterval interval);"},
 {"id":635, "parametername":"DateIntervalListEditor.DateInterval interval", "parametertype":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval", "parameterclass":284, "classid":285, "classname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateIntervalModel", "methodid":2501, "methodname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateIntervalModel.add(net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval)", "isreturn":0, "sourcecode":"void add(DateIntervalListEditor.DateInterval interval);"},
 {"id":636, "parametername":"DateIntervalListEditor.DateInterval interval", "parametertype":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval", "parameterclass":284, "classid":286, "classname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DefaultDateIntervalModel", "methodid":2509, "methodname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DefaultDateIntervalModel.remove(net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval)", "isreturn":0, "sourcecode":"public void remove(DateIntervalListEditor.DateInterval interval) {\r\n    myIntervals.remove(interval);\r\n}"},
 {"id":637, "parametername":"DateIntervalListEditor.DateInterval interval", "parametertype":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval", "parameterclass":284, "classid":286, "classname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DefaultDateIntervalModel", "methodid":2506, "methodname":"net.sourceforge.ganttproject.gui.DateIntervalListEditor$DefaultDateIntervalModel.add(net.sourceforge.ganttproject.gui.DateIntervalListEditor$DateInterval)", "isreturn":0, "sourcecode":"public void add(DateIntervalListEditor.DateInterval interval) {\r\n    myIntervals.add(interval);\r\n}"},
 {"id":638, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":295, "classname":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn", "methodid":2548, "methodname":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.task.CustomColumn)", "isreturn":0, "sourcecode":"public GanttDialogCustomColumn(UIFacade uiFacade, CustomColumn customCol) {\r\n    myUIFacade = uiFacade;\r\n    customColumn = customCol;\r\n    myOptionGroup.lock();\r\n    myDate.lock();\r\n    myDate.setValue(new Date());\r\n    myName.setValue(\"\");\r\n    myOptionGroup.setTitled(false);\r\n    myDefaultValueOptionGroup.setTitled(false);\r\n    myDefaultValueOptionGroup.lock();\r\n    isOk = false;\r\n}"},
 {"id":639, "parametername":"CustomColumn customCol", "parametertype":"net.sourceforge.ganttproject.task.CustomColumn", "parameterclass":532, "classid":295, "classname":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn", "methodid":2548, "methodname":"net.sourceforge.ganttproject.gui.GanttDialogCustomColumn.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.task.CustomColumn)", "isreturn":0, "sourcecode":"public GanttDialogCustomColumn(UIFacade uiFacade, CustomColumn customCol) {\r\n    myUIFacade = uiFacade;\r\n    customColumn = customCol;\r\n    myOptionGroup.lock();\r\n    myDate.lock();\r\n    myDate.setValue(new Date());\r\n    myName.setValue(\"\");\r\n    myOptionGroup.setTitled(false);\r\n    myDefaultValueOptionGroup.setTitled(false);\r\n    myDefaultValueOptionGroup.lock();\r\n    isOk = false;\r\n}"},
 {"id":640, "parametername":"GanttCalendar date", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":296, "classname":"net.sourceforge.ganttproject.gui.GanttDialogDate", "methodid":2557, "methodname":"net.sourceforge.ganttproject.gui.GanttDialogDate.-init-(javax.swing.JDialog,net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttDialogDate(JDialog parent, GanttCalendar date) {\r\n    this(parent, date, false);\r\n}"},
 {"id":641, "parametername":"GanttCalendar date", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":296, "classname":"net.sourceforge.ganttproject.gui.GanttDialogDate", "methodid":2558, "methodname":"net.sourceforge.ganttproject.gui.GanttDialogDate.-init-(javax.swing.JDialog,net.sourceforge.ganttproject.GanttCalendar,boolean)", "isreturn":0, "sourcecode":"public GanttDialogDate(JDialog parent, GanttCalendar date, boolean showFixedDateCheckBox) {\r\n    super(parent, GanttLanguage.getInstance().getText(\"chooseDate\"), true);\r\n    myFixedDate = date.isFixed();\r\n    setResizable(false);\r\n    panel = new GanttPanelDate(date);\r\n    // Container contentPane = getContentPane();\r\n    JComponent contentPane = Box.createVerticalBox();\r\n    // contentPane.setLayout(new GridLayout(3,1, 5, 5));\r\n    JPanel p = new JPanel();\r\n    JButton ok = new JButton(language.getText(\"ok\"));\r\n    getRootPane().setDefaultButton(ok);\r\n    p.add(ok);\r\n    ok.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            setVisible(false);\r\n            value = GanttDialogDate.OK;\r\n        }\r\n    });\r\n    JButton cancel = new JButton(language.getText(\"cancel\"));\r\n    p.add(cancel);\r\n    cancel.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            setVisible(false);\r\n            panel.cancel();\r\n        }\r\n    });\r\n    contentPane.add(panel);\r\n    if (showFixedDateCheckBox) {\r\n        final JCheckBox fixedDate = new JCheckBox(language.getText(\"fixedDate\"));\r\n        fixedDate.setSelected(myFixedDate);\r\n        fixedDate.addChangeListener(new ChangeListener() {\r\n            public void stateChanged(ChangeEvent e) {\r\n                myFixedDate = fixedDate.isSelected();\r\n            }\r\n        });\r\n        contentPane.add(fixedDate);\r\n    }\r\n    contentPane.add(p);\r\n    getContentPane().add(contentPane);\r\n    addWindowListener(new WindowAdapter() {\r\n        public void windowClosing(WindowEvent arg0) {\r\n            panel.cancel();\r\n        }\r\n    });\r\n    pack();\r\n    setResizable(false);\r\n    DialogAligner.center(this, getParent());\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":642, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":298, "classname":"net.sourceforge.ganttproject.gui.GanttDialogPerson", "methodid":2564, "methodname":"net.sourceforge.ganttproject.gui.GanttDialogPerson.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.language.GanttLanguage,net.sourceforge.ganttproject.resource.HumanResource)", "isreturn":0, "sourcecode":"/**\r\n * Creates new form GanttDialogPerson\r\n */\r\npublic GanttDialogPerson(UIFacade uiFacade, GanttLanguage language, HumanResource person) {\r\n    // super(parent, GanttProject.correctLabel(language.getText(\"human\")),\r\n    // true);\r\n    // \r\n    myUIFacade = uiFacade;\r\n    this.person = person;\r\n    Role[] enabledRoles = net.sourceforge.ganttproject.roles.RoleManager.Access.getInstance().getEnabledRoles();\r\n    String[] roleFieldValues = new String[enabledRoles.length];\r\n    for (int i = 0; i < (enabledRoles.length); i++) {\r\n        roleFieldValues[i] = enabledRoles[i].getName();\r\n    }\r\n    myRoleField = new DefaultEnumerationOption(\"colRole\", roleFieldValues);\r\n    myGroup = new GPOptionGroup(\"\", new GPOption[]{ myNameField, myPhoneField, myMailField, myRoleField });\r\n    myGroup.setTitled(false);\r\n}"},
 {"id":643, "parametername":"GanttLanguage language", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage", "parameterclass":461, "classid":298, "classname":"net.sourceforge.ganttproject.gui.GanttDialogPerson", "methodid":2564, "methodname":"net.sourceforge.ganttproject.gui.GanttDialogPerson.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.language.GanttLanguage,net.sourceforge.ganttproject.resource.HumanResource)", "isreturn":0, "sourcecode":"/**\r\n * Creates new form GanttDialogPerson\r\n */\r\npublic GanttDialogPerson(UIFacade uiFacade, GanttLanguage language, HumanResource person) {\r\n    // super(parent, GanttProject.correctLabel(language.getText(\"human\")),\r\n    // true);\r\n    // \r\n    myUIFacade = uiFacade;\r\n    this.person = person;\r\n    Role[] enabledRoles = net.sourceforge.ganttproject.roles.RoleManager.Access.getInstance().getEnabledRoles();\r\n    String[] roleFieldValues = new String[enabledRoles.length];\r\n    for (int i = 0; i < (enabledRoles.length); i++) {\r\n        roleFieldValues[i] = enabledRoles[i].getName();\r\n    }\r\n    myRoleField = new DefaultEnumerationOption(\"colRole\", roleFieldValues);\r\n    myGroup = new GPOptionGroup(\"\", new GPOption[]{ myNameField, myPhoneField, myMailField, myRoleField });\r\n    myGroup.setTitled(false);\r\n}"},
 {"id":644, "parametername":"HumanResource person", "parametertype":"net.sourceforge.ganttproject.resource.HumanResource", "parameterclass":499, "classid":298, "classname":"net.sourceforge.ganttproject.gui.GanttDialogPerson", "methodid":2564, "methodname":"net.sourceforge.ganttproject.gui.GanttDialogPerson.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.language.GanttLanguage,net.sourceforge.ganttproject.resource.HumanResource)", "isreturn":0, "sourcecode":"/**\r\n * Creates new form GanttDialogPerson\r\n */\r\npublic GanttDialogPerson(UIFacade uiFacade, GanttLanguage language, HumanResource person) {\r\n    // super(parent, GanttProject.correctLabel(language.getText(\"human\")),\r\n    // true);\r\n    // \r\n    myUIFacade = uiFacade;\r\n    this.person = person;\r\n    Role[] enabledRoles = net.sourceforge.ganttproject.roles.RoleManager.Access.getInstance().getEnabledRoles();\r\n    String[] roleFieldValues = new String[enabledRoles.length];\r\n    for (int i = 0; i < (enabledRoles.length); i++) {\r\n        roleFieldValues[i] = enabledRoles[i].getName();\r\n    }\r\n    myRoleField = new DefaultEnumerationOption(\"colRole\", roleFieldValues);\r\n    myGroup = new GPOptionGroup(\"\", new GPOption[]{ myNameField, myPhoneField, myMailField, myRoleField });\r\n    myGroup.setTitled(false);\r\n}"},
 {"id":645, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":299, "classname":"net.sourceforge.ganttproject.gui.GanttDialogProperties", "methodid":2576, "methodname":"net.sourceforge.ganttproject.gui.GanttDialogProperties.show(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public void show(IGanttProject project, final UIFacade uiFacade) {\r\n    // super(parent, GanttLanguage.getInstance().getText(\"propertiesFor\")\r\n    // + \" \" + tasksNames + \"\", true);\r\n    final GanttTaskPropertiesBean taskPropertiesBean = new GanttTaskPropertiesBean(myTasks, project, uiFacade);\r\n    final Action[] actions = new Action[]{ new OkAction() {\r\n        public void actionPerformed(ActionEvent arg0) {\r\n            uiFacade.getUndoManager().undoableEdit(\"Properties changed\", new Runnable() {\r\n                public void run() {\r\n                    Task[] returnTask = taskPropertiesBean.getReturnTask();\r\n                    // System.err.println(\"[GanttDialogProperties]\r\n                    // returnTask=\"+returnTask);\r\n                    // returnTask.setTaskID(this.task.getTaskID());\r\n                    // getTaskManager().setTask(returnTask);\r\n                    // DefaultMutableTreeNode father;\r\n                    // for (int i = 0; i < returnTask.length; i++) {\r\n                    // tree.getNode(myTasks[i].getTaskID())\r\n                    // .setUserObject(returnTask[i]);\r\n                    // // Refresh all father\r\n                    // father = tree.getFatherNode(tree\r\n                    // .getNode(myTasks[i].getTaskID()));\r\n                    // while (father != null) {\r\n                    // tree.forwardScheduling();\r\n                    // father = tree.getFatherNode(father);\r\n                    // }\r\n                    // }\r\n                }\r\n            });\r\n        }\r\n    }, new CancelAction() {\r\n        public void actionPerformed(ActionEvent arg0) {\r\n        }\r\n    } };\r\n    StringBuffer taskNames = new StringBuffer();\r\n    for (int i = 0; i < (myTasks.length); i++) {\r\n        if (i > 0) {\r\n            taskNames.append(,);\r\n        }\r\n        taskNames.append(myTasks[i].getName());\r\n    }\r\n    final String title = (((GanttLanguage.getInstance().getText(\"propertiesFor\")) + \" \") + taskNames) + \"\";\r\n    uiFacade.showDialog(taskPropertiesBean, actions, title);\r\n}"},
 {"id":646, "parametername":"final UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":299, "classname":"net.sourceforge.ganttproject.gui.GanttDialogProperties", "methodid":2576, "methodname":"net.sourceforge.ganttproject.gui.GanttDialogProperties.show(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public void show(IGanttProject project, final UIFacade uiFacade) {\r\n    // super(parent, GanttLanguage.getInstance().getText(\"propertiesFor\")\r\n    // + \" \" + tasksNames + \"\", true);\r\n    final GanttTaskPropertiesBean taskPropertiesBean = new GanttTaskPropertiesBean(myTasks, project, uiFacade);\r\n    final Action[] actions = new Action[]{ new OkAction() {\r\n        public void actionPerformed(ActionEvent arg0) {\r\n            uiFacade.getUndoManager().undoableEdit(\"Properties changed\", new Runnable() {\r\n                public void run() {\r\n                    Task[] returnTask = taskPropertiesBean.getReturnTask();\r\n                    // System.err.println(\"[GanttDialogProperties]\r\n                    // returnTask=\"+returnTask);\r\n                    // returnTask.setTaskID(this.task.getTaskID());\r\n                    // getTaskManager().setTask(returnTask);\r\n                    // DefaultMutableTreeNode father;\r\n                    // for (int i = 0; i < returnTask.length; i++) {\r\n                    // tree.getNode(myTasks[i].getTaskID())\r\n                    // .setUserObject(returnTask[i]);\r\n                    // // Refresh all father\r\n                    // father = tree.getFatherNode(tree\r\n                    // .getNode(myTasks[i].getTaskID()));\r\n                    // while (father != null) {\r\n                    // tree.forwardScheduling();\r\n                    // father = tree.getFatherNode(father);\r\n                    // }\r\n                    // }\r\n                }\r\n            });\r\n        }\r\n    }, new CancelAction() {\r\n        public void actionPerformed(ActionEvent arg0) {\r\n        }\r\n    } };\r\n    StringBuffer taskNames = new StringBuffer();\r\n    for (int i = 0; i < (myTasks.length); i++) {\r\n        if (i > 0) {\r\n            taskNames.append(,);\r\n        }\r\n        taskNames.append(myTasks[i].getName());\r\n    }\r\n    final String title = (((GanttLanguage.getInstance().getText(\"propertiesFor\")) + \" \") + taskNames) + \"\";\r\n    uiFacade.showDialog(taskPropertiesBean, actions, title);\r\n}"},
 {"id":647, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":300, "classname":"net.sourceforge.ganttproject.gui.GanttDialogPublicHoliday", "methodid":2577, "methodname":"net.sourceforge.ganttproject.gui.GanttDialogPublicHoliday.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public GanttDialogPublicHoliday(IGanttProject project, UIFacade uiFacade) {\r\n    publicHolidays = new DateIntervalListEditor.DefaultDateIntervalModel();\r\n    for (Iterator iter = project.getActiveCalendar().getPublicHolidays().iterator(); iter.hasNext();) {\r\n        Date d = ((Date) (iter.next()));\r\n        publicHolidays.add(new DateIntervalListEditor.DateInterval(d, d));\r\n    }\r\n    // publicHolidayBean = new GanttPublicHolidayBean(publicHolidays);\r\n    publicHolidayBean = new DateIntervalListEditor(publicHolidays);\r\n    myUIFacade = uiFacade;\r\n    // publicHolidayBean.addActionListener(this);\r\n}"},
 {"id":648, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":300, "classname":"net.sourceforge.ganttproject.gui.GanttDialogPublicHoliday", "methodid":2577, "methodname":"net.sourceforge.ganttproject.gui.GanttDialogPublicHoliday.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public GanttDialogPublicHoliday(IGanttProject project, UIFacade uiFacade) {\r\n    publicHolidays = new DateIntervalListEditor.DefaultDateIntervalModel();\r\n    for (Iterator iter = project.getActiveCalendar().getPublicHolidays().iterator(); iter.hasNext();) {\r\n        Date d = ((Date) (iter.next()));\r\n        publicHolidays.add(new DateIntervalListEditor.DateInterval(d, d));\r\n    }\r\n    // publicHolidayBean = new GanttPublicHolidayBean(publicHolidays);\r\n    publicHolidayBean = new DateIntervalListEditor(publicHolidays);\r\n    myUIFacade = uiFacade;\r\n    // publicHolidayBean.addActionListener(this);\r\n}"},
 {"id":649, "parametername":"GanttLookAndFeelInfo info", "parametertype":"net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo", "parameterclass":301, "classid":302, "classname":"net.sourceforge.ganttproject.gui.GanttLookAndFeels", "methodid":2584, "methodname":"net.sourceforge.ganttproject.gui.GanttLookAndFeels.addLookAndFeel(net.sourceforge.ganttproject.gui.GanttLookAndFeelInfo)", "isreturn":0, "sourcecode":"protected void addLookAndFeel(GanttLookAndFeelInfo info) {\r\n    if ((info.getName().startsWith(\"Kunststoff\")) && (System.getProperty(\"os.name\").startsWith(\"Mac\"))) {\r\n        System.err.println(\"LookAndFeel not added (Kunststoff is ignored on MacOS).\");\r\n    } else {\r\n        if (!(infoByClass.containsKey(info.getClassName()))) {\r\n            infoByClass.put(info.getClassName(), info);\r\n            infoByName.put(info.getName(), info);\r\n        } else {\r\n            System.err.println(((((\"LookAndFeel \" + info) + \"(\") + (info.getClassName())) + \") already installed.\"));\r\n        }\r\n    }\r\n}"},
 {"id":650, "parametername":"UIConfiguration config", "parametertype":"net.sourceforge.ganttproject.gui.UIConfiguration", "parameterclass":335, "classid":303, "classname":"net.sourceforge.ganttproject.gui.GanttMetalTheme", "methodid":2590, "methodname":"net.sourceforge.ganttproject.gui.GanttMetalTheme.-init-(net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"public GanttMetalTheme(UIConfiguration config) {\r\n    super();\r\n    font = new FontUIResource(config.getMenuFont());\r\n}"},
 {"id":651, "parametername":"GanttCalendar date", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":305, "classname":"net.sourceforge.ganttproject.gui.GanttPanelDate", "methodid":2596, "methodname":"net.sourceforge.ganttproject.gui.GanttPanelDate.-init-(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttPanelDate(GanttCalendar date) {\r\n    // super(parent, GanttLanguage.getInstance().getText(\"chooseDate\"),\r\n    // true);\r\n    // setResizable(false);\r\n    this.save = date.Clone();\r\n    // month = date.getDayMonthLanguage();\r\n    Box vb1 = Box.createVerticalBox();\r\n    Box hb1 = Box.createHorizontalBox();\r\n    jbPrevYear = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/prevyear.gif\")));\r\n    jbPrevYear.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            rollDate(Calendar.YEAR, (-1));\r\n        }\r\n    });\r\n    jbPrevMonth = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/prevmonth.gif\")));\r\n    jbPrevMonth.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            rollDate(Calendar.MONTH, (-1));\r\n        }\r\n    });\r\n    jbNextMonth = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/nextmonth.gif\")));\r\n    jbNextMonth.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            rollDate(Calendar.MONTH, (+1));\r\n        }\r\n    });\r\n    jbNextYear = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/nextyear.gif\")));\r\n    jbNextYear.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            rollDate(Calendar.YEAR, (+1));\r\n        }\r\n    });\r\n    jbPrevYear.setToolTipText(GanttProject.getToolTip(language.getText(\"prevYear\")));\r\n    jbPrevMonth.setToolTipText(GanttProject.getToolTip(language.getText(\"prevMonth\")));\r\n    jbNextMonth.setToolTipText(GanttProject.getToolTip(language.getText(\"nextMonth\")));\r\n    jbNextYear.setToolTipText(GanttProject.getToolTip(language.getText(\"nextYear\")));\r\n    ddd = new GanttPanelDate.GanttDialogDateDay(date, language);\r\n    jtDate = new JFormattedTextField(new SimpleDateFormat(\"MMM yyyy\"));\r\n    jtDate.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            GregorianCalendar tmp = new GregorianCalendar();\r\n            tmp.setTime(((Date) (jtDate.getValue())));\r\n            changeDate(tmp);\r\n        }\r\n    });\r\n    jtDate.setValue(ddd.date.getTime());\r\n    jtDate.setEditable(false);\r\n    hb1.add(jbPrevYear);\r\n    hb1.add(jbPrevMonth);\r\n    hb1.add(jtDate);\r\n    hb1.add(jbNextMonth);\r\n    hb1.add(jbNextYear);\r\n    vb1.add(hb1);\r\n    vb1.add(ddd);\r\n    add(vb1, \"Center\");\r\n}"},
 {"id":652, "parametername":"GanttCalendar date", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":304, "classname":"net.sourceforge.ganttproject.gui.GanttPanelDate$GanttDialogDateDay", "methodid":2603, "methodname":"net.sourceforge.ganttproject.gui.GanttPanelDate$GanttDialogDateDay.-init-(net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.language.GanttLanguage)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttDialogDateDay(GanttCalendar date, GanttLanguage language) {\r\n    this.date = date;\r\n    this.language = language;\r\n    MouseListener ml = new MouseAdapter() {\r\n        public void mousePressed(MouseEvent e) {\r\n            clickFunction(e.getX(), e.getY());\r\n        }\r\n    };\r\n    this.addMouseListener(ml);\r\n}"},
 {"id":653, "parametername":"GanttLanguage language", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage", "parameterclass":461, "classid":304, "classname":"net.sourceforge.ganttproject.gui.GanttPanelDate$GanttDialogDateDay", "methodid":2603, "methodname":"net.sourceforge.ganttproject.gui.GanttPanelDate$GanttDialogDateDay.-init-(net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.language.GanttLanguage)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttDialogDateDay(GanttCalendar date, GanttLanguage language) {\r\n    this.date = date;\r\n    this.language = language;\r\n    MouseListener ml = new MouseAdapter() {\r\n        public void mousePressed(MouseEvent e) {\r\n            clickFunction(e.getX(), e.getY());\r\n        }\r\n    };\r\n    this.addMouseListener(ml);\r\n}"},
 {"id":654, "parametername":"GregorianCalendar newDate", "parametertype":"net.sourceforge.ganttproject.time.gregorian.GregorianCalendar", "parameterclass":646, "classid":305, "classname":"net.sourceforge.ganttproject.gui.GanttPanelDate", "methodid":2600, "methodname":"net.sourceforge.ganttproject.gui.GanttPanelDate.changeDate(net.sourceforge.ganttproject.time.gregorian.GregorianCalendar)", "isreturn":0, "sourcecode":"/**\r\n * Fill the content of the central label *\r\n */\r\nprivate void changeDate(GregorianCalendar newDate) {\r\n    boolean differentMonth = ((ddd.date.get(Calendar.MONTH)) != (newDate.get(Calendar.MONTH))) || ((ddd.date.get(Calendar.YEAR)) != (newDate.get(Calendar.YEAR)));\r\n    ddd.date.setTime(newDate.getTime());\r\n    if (differentMonth) {\r\n        jtDate.setValue(ddd.date.getTime());\r\n        ddd.repaint();\r\n    }\r\n}"},
 {"id":655, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":312, "classname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "methodid":2656, "methodname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.-init-(net.sourceforge.ganttproject.GanttTask[],net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttTaskPropertiesBean(GanttTask[] selectedTasks, IGanttProject project, UIFacade uifacade) {\r\n    this.onlyOneTask = false;\r\n    if ((selectedTasks.length) == 1)\r\n        this.onlyOneTask = true;\r\n\r\n    this.selectedTasks = selectedTasks;\r\n    setInitialValues(selectedTasks[0]);\r\n    myHumanResourceManager = ((HumanResourceManager) (project.getHumanResourceManager()));\r\n    myRoleManager = project.getRoleManager();\r\n    myTaskManager = project.getTaskManager();\r\n    myProject = project;\r\n    myUIfacade = uifacade;\r\n    // setTree(tree);\r\n    init();\r\n    // this.managerHash = managerHash;\r\n    setSelectedTask();\r\n}"},
 {"id":656, "parametername":"UIFacade uifacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":312, "classname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "methodid":2656, "methodname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.-init-(net.sourceforge.ganttproject.GanttTask[],net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic GanttTaskPropertiesBean(GanttTask[] selectedTasks, IGanttProject project, UIFacade uifacade) {\r\n    this.onlyOneTask = false;\r\n    if ((selectedTasks.length) == 1)\r\n        this.onlyOneTask = true;\r\n\r\n    this.selectedTasks = selectedTasks;\r\n    setInitialValues(selectedTasks[0]);\r\n    myHumanResourceManager = ((HumanResourceManager) (project.getHumanResourceManager()));\r\n    myRoleManager = project.getRoleManager();\r\n    myTaskManager = project.getTaskManager();\r\n    myProject = project;\r\n    myUIfacade = uifacade;\r\n    // setTree(tree);\r\n    init();\r\n    // this.managerHash = managerHash;\r\n    setSelectedTask();\r\n}"},
 {"id":657, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":312, "classname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "methodid":2665, "methodname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.constructCustomColumnPanel(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"private void constructCustomColumnPanel(IGanttProject project) {\r\n    myCustomColumnPanel = new CustomColumnsPanel(project.getTaskCustomColumnManager(), project.getCustomColumnsStorage(), myUIfacade);\r\n}"},
 {"id":658, "parametername":"GanttCalendar dstart", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":312, "classname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "methodid":2693, "methodname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.setStart(net.sourceforge.ganttproject.GanttCalendar,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Change the start date of the task\r\n */\r\npublic void setStart(GanttCalendar dstart, boolean test) {\r\n    myStartDatePicker.setDate(dstart.getTime());\r\n    this.start = dstart;\r\n    if (test == true) {\r\n        return;\r\n    }\r\n    // this.setStartFixed(dstart.isFixed());\r\n    if ((this.start.compareTo(this.end)) < 0) {\r\n        adjustLength();\r\n    } else {\r\n        GanttCalendar _end = start.newAdd(this.taskLength);\r\n        this.end = _end;\r\n        // finishDateField1.setText(_end.toString());\r\n        this.myEndDatePicker.setDate(this.end.getTime());\r\n    }\r\n}"},
 {"id":659, "parametername":"GanttCalendar dend", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":312, "classname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "methodid":2689, "methodname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.setEnd(net.sourceforge.ganttproject.GanttCalendar,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Change the end date of the task\r\n */\r\npublic void setEnd(GanttCalendar dend, boolean test) {\r\n    myEndDatePicker.setDate(dend.getTime());\r\n    this.end = dend;\r\n    if (test == true) {\r\n        return;\r\n    }\r\n    // this.setFinishFixed(dend.isFixed());\r\n    if ((this.start.compareTo(this.end)) < 0) {\r\n        adjustLength();\r\n    } else {\r\n        GanttCalendar _start = this.end.newAdd((-(length)));\r\n        this.start = _start;\r\n        startDateField1.setText(_start.toString());\r\n    }\r\n}"},
 {"id":660, "parametername":"GanttCalendar dthird", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":312, "classname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "methodid":2694, "methodname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.setThird(net.sourceforge.ganttproject.GanttCalendar,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Change the third date of the task\r\n */\r\npublic void setThird(GanttCalendar dthird, boolean test) {\r\n    myThirdDatePicker.setDate(dthird.getTime());\r\n    this.third = dthird;\r\n    if (test) {\r\n        return;\r\n    }\r\n    switch (thirdDateComboBox.getSelectedIndex()) {\r\n        case TaskImpl.EARLIESTBEGIN :\r\n            thirdDateButton1.setEnabled(true);\r\n            break;\r\n        case TaskImpl.NONE :\r\n            thirdDateButton1.setEnabled(false);\r\n            break;\r\n    }\r\n}"},
 {"id":661, "parametername":"GanttTask task", "parametertype":"net.sourceforge.ganttproject.GanttTask", "parameterclass":63, "classid":312, "classname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "methodid":2691, "methodname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.setInitialValues(net.sourceforge.ganttproject.GanttTask)", "isreturn":0, "sourcecode":"private void setInitialValues(GanttTask task) {\r\n    this.taskWebLink = task.getWebLink();\r\n    this.taskIsMilestone = task.isMilestone();\r\n    this.taskStartDate = task.getStart();\r\n    this.taskLength = task.getLength();\r\n    this.taskNotes = task.getNotes();\r\n    this.taskCompletionPercentage = task.getCompletionPercentage();\r\n    this.taskPriority = task.getPriority();\r\n    // this.taskIsStartFixed = task.isStartFixed();\r\n    // this.taskIsFinishFixed = task.isFinishFixed();\r\n    this.taskShape = task.getShape();\r\n    this.taskThirdDate = task.getThird();\r\n    this.taskThirdDateConstraint = task.getThirdDateConstraint();\r\n    this.taskIsProjectTask = task.isProjectTask();\r\n}"},
 {"id":662, "parametername":"ResourcesTableModel original", "parametertype":"net.sourceforge.ganttproject.gui.ResourcesTableModel", "parameterclass":321, "classid":312, "classname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "methodid":2670, "methodname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.copyValues(net.sourceforge.ganttproject.gui.ResourcesTableModel,net.sourceforge.ganttproject.gui.ResourcesTableModel)", "isreturn":0, "sourcecode":"private void copyValues(ResourcesTableModel original, ResourcesTableModel clone) {\r\n    for (int i = 0; i < (clone.getRowCount()); i++)\r\n        clone.setValueAt(null, i, 1);\r\n\r\n    for (int j = 0; j < (original.getRowCount()); j++)\r\n        for (int k = 0; k < (original.getColumnCount()); k++)\r\n            clone.setValueAt(original.getValueAt(j, k), j, k);\r\n\r\n\r\n}"},
 {"id":663, "parametername":"ResourcesTableModel clone", "parametertype":"net.sourceforge.ganttproject.gui.ResourcesTableModel", "parameterclass":321, "classid":312, "classname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "methodid":2670, "methodname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.copyValues(net.sourceforge.ganttproject.gui.ResourcesTableModel,net.sourceforge.ganttproject.gui.ResourcesTableModel)", "isreturn":0, "sourcecode":"private void copyValues(ResourcesTableModel original, ResourcesTableModel clone) {\r\n    for (int i = 0; i < (clone.getRowCount()); i++)\r\n        clone.setValueAt(null, i, 1);\r\n\r\n    for (int j = 0; j < (original.getRowCount()); j++)\r\n        for (int k = 0; k < (original.getColumnCount()); k++)\r\n            clone.setValueAt(original.getValueAt(j, k), j, k);\r\n\r\n\r\n}"},
 {"id":664, "parametername":"Task testedTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":312, "classname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "methodid":2661, "methodname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.canBeProjectTask(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "isreturn":0, "sourcecode":"private boolean canBeProjectTask(Task testedTask, TaskContainmentHierarchyFacade taskHierarchy) {\r\n    Task[] nestedTasks = taskHierarchy.getNestedTasks(testedTask);\r\n    if ((nestedTasks.length) == 0) {\r\n        return false;\r\n    }\r\n    for (Task parent = taskHierarchy.getContainer(testedTask); parent != null; parent = taskHierarchy.getContainer(parent)) {\r\n        if (parent.isProjectTask()) {\r\n            return false;\r\n        }\r\n    }\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        if (isProjectTaskOrContainsProjectTask(nestedTasks[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"},
 {"id":665, "parametername":"TaskContainmentHierarchyFacade taskHierarchy", "parametertype":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "parameterclass":552, "classid":312, "classname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "methodid":2661, "methodname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.canBeProjectTask(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "isreturn":0, "sourcecode":"private boolean canBeProjectTask(Task testedTask, TaskContainmentHierarchyFacade taskHierarchy) {\r\n    Task[] nestedTasks = taskHierarchy.getNestedTasks(testedTask);\r\n    if ((nestedTasks.length) == 0) {\r\n        return false;\r\n    }\r\n    for (Task parent = taskHierarchy.getContainer(testedTask); parent != null; parent = taskHierarchy.getContainer(parent)) {\r\n        if (parent.isProjectTask()) {\r\n            return false;\r\n        }\r\n    }\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        if (isProjectTaskOrContainsProjectTask(nestedTasks[i])) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}"},
 {"id":666, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":312, "classname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean", "methodid":2688, "methodname":"net.sourceforge.ganttproject.gui.GanttTaskPropertiesBean.isProjectTaskOrContainsProjectTask(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"private boolean isProjectTaskOrContainsProjectTask(Task task) {\r\n    if (task.isProjectTask()) {\r\n        return true;\r\n    }\r\n    boolean result = false;\r\n    Task[] nestedTasks = task.getNestedTasks();\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        if (isProjectTaskOrContainsProjectTask(nestedTasks[i])) {\r\n            result = true;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":667, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":315, "classname":"net.sourceforge.ganttproject.gui.GeneralDialog", "methodid":2697, "methodname":"net.sourceforge.ganttproject.gui.GeneralDialog.-init-(net.sourceforge.ganttproject.GanttProject,java.lang.String,boolean,net.sourceforge.ganttproject.gui.options.GeneralOptionPanel)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic GeneralDialog(GanttProject parent, String title, boolean modal, GeneralOptionPanel firstPanel) {\r\n    super(parent, GanttProject.correctLabel(title), modal);\r\n    appli = parent;\r\n    // tree section.\r\n    rootNode = new DefaultMutableTreeNode(\"Options\");\r\n    treeModel = new DefaultTreeModel(rootNode);\r\n    treeSections = new JTree(treeModel);\r\n    treeSections.setEditable(false);\r\n    treeSections.setBackground(new Color(1.0F, 1.0F, 1.0F));\r\n    treeSections.setShowsRootHandles(true);\r\n    treeSections.setRowHeight(20);\r\n    treeSections.setRootVisible(false);\r\n    treeSections.setCellRenderer(new GeneralDialog.SettinsDefaultTreeCellRenderer());\r\n    treeSections.addTreeSelectionListener(this);\r\n    JScrollPane scrollpane = new JScrollPane(treeSections);\r\n    JPanel treePanel = new JPanel();\r\n    treePanel.add(scrollpane);\r\n    JPanel mainPanel = new JPanel(new BorderLayout());\r\n    if ((language.getComponentOrientation()) == (ComponentOrientation.LEFT_TO_RIGHT))\r\n        mainPanel.add(treePanel, BorderLayout.WEST);\r\n    else\r\n        mainPanel.add(scrollpane, BorderLayout.EAST);\r\n\r\n    scrollpane.setPreferredSize(new Dimension(150, 450));\r\n    // construct the south panel\r\n    southPanel = new JPanel(new FlowLayout(FlowLayout.TRAILING, 50, 10));\r\n    okButton = new JButton(language.getText(\"ok\"));\r\n    okButton.addActionListener(this);\r\n    southPanel.add(okButton);\r\n    applyButton = new JButton(language.getText(\"apply\"));\r\n    applyButton.addActionListener(this);\r\n    // southPanel.add(applyButton); //dont use the apply button\r\n    cancelButton = new JButton(language.getText(\"cancel\"));\r\n    cancelButton.addActionListener(this);\r\n    southPanel.add(cancelButton);\r\n    southPanel.setPreferredSize(new Dimension(600, 50));\r\n    Box southBox = Box.createVerticalBox();\r\n    southBox.add(new JSeparator());\r\n    southBox.add(southPanel);\r\n    mainPanel.add(southBox, BorderLayout.SOUTH);\r\n    // set the ok button as default action for enter\r\n    if ((getRootPane()) != null)\r\n        getRootPane().setDefaultButton(okButton);\r\n\r\n    // add the main panel into the dialog\r\n    JPanel tmpPanel = new JPanel(new BorderLayout());\r\n    tmpPanel.add(mainPanel, BorderLayout.CENTER);\r\n    getContentPane().add(tmpPanel);\r\n    // construct the sections\r\n    constructSections();\r\n    settingPanel = firstPanel;\r\n    Box vb = Box.createVerticalBox();\r\n    vb.add(new TopPanel((\"  \" + (settingPanel.getTitle())), settingPanel.getComment()));\r\n    vb.add(settingPanel);\r\n    settingPanel.initialize();\r\n    // - add the settingPanel into the main Panel\r\n    mainPanel2.add(vb, 0);\r\n    mainPanel.add(mainPanel2);\r\n    // position the window\r\n    this.pack();\r\n    // setResizable(false);\r\n    DialogAligner.center(this, getParent());\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":668, "parametername":"GeneralOptionPanel firstPanel", "parametertype":"net.sourceforge.ganttproject.gui.options.GeneralOptionPanel", "parameterclass":358, "classid":315, "classname":"net.sourceforge.ganttproject.gui.GeneralDialog", "methodid":2697, "methodname":"net.sourceforge.ganttproject.gui.GeneralDialog.-init-(net.sourceforge.ganttproject.GanttProject,java.lang.String,boolean,net.sourceforge.ganttproject.gui.options.GeneralOptionPanel)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic GeneralDialog(GanttProject parent, String title, boolean modal, GeneralOptionPanel firstPanel) {\r\n    super(parent, GanttProject.correctLabel(title), modal);\r\n    appli = parent;\r\n    // tree section.\r\n    rootNode = new DefaultMutableTreeNode(\"Options\");\r\n    treeModel = new DefaultTreeModel(rootNode);\r\n    treeSections = new JTree(treeModel);\r\n    treeSections.setEditable(false);\r\n    treeSections.setBackground(new Color(1.0F, 1.0F, 1.0F));\r\n    treeSections.setShowsRootHandles(true);\r\n    treeSections.setRowHeight(20);\r\n    treeSections.setRootVisible(false);\r\n    treeSections.setCellRenderer(new GeneralDialog.SettinsDefaultTreeCellRenderer());\r\n    treeSections.addTreeSelectionListener(this);\r\n    JScrollPane scrollpane = new JScrollPane(treeSections);\r\n    JPanel treePanel = new JPanel();\r\n    treePanel.add(scrollpane);\r\n    JPanel mainPanel = new JPanel(new BorderLayout());\r\n    if ((language.getComponentOrientation()) == (ComponentOrientation.LEFT_TO_RIGHT))\r\n        mainPanel.add(treePanel, BorderLayout.WEST);\r\n    else\r\n        mainPanel.add(scrollpane, BorderLayout.EAST);\r\n\r\n    scrollpane.setPreferredSize(new Dimension(150, 450));\r\n    // construct the south panel\r\n    southPanel = new JPanel(new FlowLayout(FlowLayout.TRAILING, 50, 10));\r\n    okButton = new JButton(language.getText(\"ok\"));\r\n    okButton.addActionListener(this);\r\n    southPanel.add(okButton);\r\n    applyButton = new JButton(language.getText(\"apply\"));\r\n    applyButton.addActionListener(this);\r\n    // southPanel.add(applyButton); //dont use the apply button\r\n    cancelButton = new JButton(language.getText(\"cancel\"));\r\n    cancelButton.addActionListener(this);\r\n    southPanel.add(cancelButton);\r\n    southPanel.setPreferredSize(new Dimension(600, 50));\r\n    Box southBox = Box.createVerticalBox();\r\n    southBox.add(new JSeparator());\r\n    southBox.add(southPanel);\r\n    mainPanel.add(southBox, BorderLayout.SOUTH);\r\n    // set the ok button as default action for enter\r\n    if ((getRootPane()) != null)\r\n        getRootPane().setDefaultButton(okButton);\r\n\r\n    // add the main panel into the dialog\r\n    JPanel tmpPanel = new JPanel(new BorderLayout());\r\n    tmpPanel.add(mainPanel, BorderLayout.CENTER);\r\n    getContentPane().add(tmpPanel);\r\n    // construct the sections\r\n    constructSections();\r\n    settingPanel = firstPanel;\r\n    Box vb = Box.createVerticalBox();\r\n    vb.add(new TopPanel((\"  \" + (settingPanel.getTitle())), settingPanel.getComment()));\r\n    vb.add(settingPanel);\r\n    settingPanel.initialize();\r\n    // - add the settingPanel into the main Panel\r\n    mainPanel2.add(vb, 0);\r\n    mainPanel.add(mainPanel2);\r\n    // position the window\r\n    this.pack();\r\n    // setResizable(false);\r\n    DialogAligner.center(this, getParent());\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":669, "parametername":"GanttProject project", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":316, "classname":"net.sourceforge.ganttproject.gui.OpenFileDialog", "methodid":2706, "methodname":"net.sourceforge.ganttproject.gui.OpenFileDialog.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Construtor\r\n */\r\npublic OpenFileDialog(GanttProject project) {\r\n    myStartDirectory = new File(System.getProperty(\"user.home\"));\r\n    myproject = project;\r\n}"},
 {"id":670, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":317, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacade", "methodid":2714, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacade.saveProject(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"void saveProject(IGanttProject project);"},
 {"id":671, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":317, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacade", "methodid":2715, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacade.saveProjectAs(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"void saveProjectAs(IGanttProject project);"},
 {"id":672, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":317, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacade", "methodid":2716, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacade.saveProjectRemotely(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"public void saveProjectRemotely(IGanttProject project);"},
 {"id":673, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":317, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacade", "methodid":2711, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacade.openProject(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"void openProject(IGanttProject project) throws IOException;"},
 {"id":674, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":317, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacade", "methodid":2713, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacade.openRemoteProject(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"void openRemoteProject(IGanttProject project) throws IOException;"},
 {"id":675, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":317, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacade", "methodid":2712, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacade.openProject(net.sourceforge.ganttproject.document.Document,net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"void openProject(Document document, IGanttProject project) throws IOException;"},
 {"id":676, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":317, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacade", "methodid":2712, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacade.openProject(net.sourceforge.ganttproject.document.Document,net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"void openProject(Document document, IGanttProject project) throws IOException;"},
 {"id":677, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":317, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacade", "methodid":2709, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacade.createProject(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"void createProject(IGanttProject project);"},
 {"id":678, "parametername":"UIFacade workbenchFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2717, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.document.DocumentManager,net.sourceforge.ganttproject.undo.GPUndoManager)", "isreturn":0, "sourcecode":"public ProjectUIFacadeImpl(UIFacade workbenchFacade, DocumentManager documentManager, GPUndoManager undoManager) {\r\n    myWorkbenchFacade = workbenchFacade;\r\n    myDocumentManager = documentManager;\r\n    myUndoManager = undoManager;\r\n}"},
 {"id":679, "parametername":"DocumentManager documentManager", "parametertype":"net.sourceforge.ganttproject.document.DocumentManager", "parameterclass":237, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2717, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.document.DocumentManager,net.sourceforge.ganttproject.undo.GPUndoManager)", "isreturn":0, "sourcecode":"public ProjectUIFacadeImpl(UIFacade workbenchFacade, DocumentManager documentManager, GPUndoManager undoManager) {\r\n    myWorkbenchFacade = workbenchFacade;\r\n    myDocumentManager = documentManager;\r\n    myUndoManager = undoManager;\r\n}"},
 {"id":680, "parametername":"GPUndoManager undoManager", "parametertype":"net.sourceforge.ganttproject.undo.GPUndoManager", "parameterclass":657, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2717, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.document.DocumentManager,net.sourceforge.ganttproject.undo.GPUndoManager)", "isreturn":0, "sourcecode":"public ProjectUIFacadeImpl(UIFacade workbenchFacade, DocumentManager documentManager, GPUndoManager undoManager) {\r\n    myWorkbenchFacade = workbenchFacade;\r\n    myDocumentManager = documentManager;\r\n    myUndoManager = undoManager;\r\n}"},
 {"id":681, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2729, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.saveProject(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"public void saveProject(IGanttProject project) {\r\n    if ((project.getDocument()) == null) {\r\n        saveProjectAs(project);\r\n        return;\r\n    }\r\n    Document document = project.getDocument();\r\n    if (!(document.canWrite())) {\r\n        myWorkbenchFacade.showErrorDialog(i18n.getText(\"msg10\"));\r\n        saveProjectAs(project);\r\n        return;\r\n    }\r\n    if (!(document.acquireLock())) {\r\n        myWorkbenchFacade.showErrorDialog(i18n.getText(\"msg14\"));\r\n        saveProjectAs(project);\r\n        return;\r\n    }\r\n    try {\r\n        saveProject(project.getDocument());\r\n        afterSaveProject(project);\r\n    } catch (Throwable e) {\r\n        myWorkbenchFacade.showErrorDialog(e);\r\n    }\r\n}"},
 {"id":682, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2719, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.afterSaveProject(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"private void afterSaveProject(IGanttProject project) {\r\n    Document document = project.getDocument();\r\n    myDocumentManager.addToRecentDocuments(document);\r\n    String title = (((i18n.getText(\"appliTitle\")) + \" [\") + (document.getDescription())) + \"]\";\r\n    myWorkbenchFacade.setWorkbenchTitle(title);\r\n    if (document.isLocal()) {\r\n        URI url = document.getURI();\r\n        if (url != null) {\r\n            File file = new File(url);\r\n            if (file != null) {\r\n                myDocumentManager.changeWorkingDirectory(file.getParentFile());\r\n            }\r\n        }\r\n    }\r\n    project.setModified(false);\r\n}"},
 {"id":683, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2730, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.saveProject(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"private void saveProject(Document document) throws IOException {\r\n    // assert document!=null;\r\n    myWorkbenchFacade.setStatusText((((GanttLanguage.getInstance().getText(\"saving\")) + \" \") + (document.getPath())));\r\n    document.write();\r\n}"},
 {"id":684, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2731, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.saveProjectAs(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"public void saveProjectAs(IGanttProject project) {\r\n    /* if (project.getDocument() instanceof AbstractURLDocument) {\n    saveProjectRemotely(project);\n    return;\n    }\n     */\r\n    JFileChooser fc = new JFileChooser(myDocumentManager.getWorkingDirectory());\r\n    FileFilter ganttFilter = new GanttXMLFileFilter();\r\n    fc.addChoosableFileFilter(ganttFilter);\r\n    // Remove the possibility to use a file filter for all files\r\n    FileFilter[] filefilters = fc.getChoosableFileFilters();\r\n    for (int i = 0; i < (filefilters.length); i++) {\r\n        if ((filefilters[i]) != ganttFilter) {\r\n            fc.removeChoosableFileFilter(filefilters[i]);\r\n        }\r\n    }\r\n    try {\r\n        for (; ;) {\r\n            int userChoice = fc.showSaveDialog(myWorkbenchFacade.getMainFrame());\r\n            if (userChoice != (JFileChooser.APPROVE_OPTION)) {\r\n                break;\r\n            }\r\n            File projectfile = fc.getSelectedFile();\r\n            String extension = FileUtil.getExtension(projectfile).toLowerCase();\r\n            if ((!(\"gan\".equals(extension))) && (!(\"xml\".equals(extension)))) {\r\n                projectfile = FileUtil.replaceExtension(projectfile, \"gan\");\r\n            }\r\n            if (projectfile.exists()) {\r\n                UIFacade.Choice overwritingChoice = myWorkbenchFacade.showConfirmationDialog(((projectfile + \"\n\") + (i18n.getText(\"msg18\"))), i18n.getText(\"warning\"));\r\n                if (overwritingChoice != (UIFacade.Choice.YES)) {\r\n                    continue;\r\n                }\r\n            }\r\n            Document document = myDocumentManager.getDocument(projectfile.getAbsolutePath());\r\n            saveProject(document);\r\n            project.setDocument(document);\r\n            afterSaveProject(project);\r\n            break;\r\n        }\r\n    } catch (Throwable e) {\r\n        myWorkbenchFacade.showErrorDialog(e);\r\n    }\r\n}"},
 {"id":685, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2732, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.saveProjectRemotely(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"public void saveProjectRemotely(IGanttProject project) {\r\n    Document document = showURLDialog(project);\r\n    if (document != null) {\r\n        project.setDocument(document);\r\n        saveProject(project);\r\n    }\r\n}"},
 {"id":686, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2722, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.ensureProjectSaved(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"private boolean ensureProjectSaved(IGanttProject project) {\r\n    if (project.isModified()) {\r\n        UIFacade.Choice saveChoice = myWorkbenchFacade.showConfirmationDialog(i18n.getText(\"msg1\"), i18n.getText(\"warning\"));\r\n        if ((UIFacade.Choice.CANCEL) == saveChoice) {\r\n            return false;\r\n        }\r\n        if ((UIFacade.Choice.YES) == saveChoice) {\r\n            try {\r\n                saveProject(project);\r\n            } catch (Exception e) {\r\n                System.err.println(e);\r\n                myWorkbenchFacade.showErrorDialog(e);\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}"},
 {"id":687, "parametername":"final IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2726, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.openProject(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"public void openProject(final IGanttProject project) throws IOException {\r\n    if (false == (ensureProjectSaved(project))) {\r\n        return;\r\n    }\r\n    JFileChooser fc = new JFileChooser(myDocumentManager.getWorkingDirectory());\r\n    FileFilter ganttFilter = new GanttXMLFileFilter();\r\n    // Remove the possibility to use a file filter for all files\r\n    FileFilter[] filefilters = fc.getChoosableFileFilters();\r\n    for (int i = 0; i < (filefilters.length); i++) {\r\n        fc.removeChoosableFileFilter(filefilters[i]);\r\n    }\r\n    fc.addChoosableFileFilter(ganttFilter);\r\n    int returnVal = fc.showOpenDialog(myWorkbenchFacade.getMainFrame());\r\n    if (returnVal == (JFileChooser.APPROVE_OPTION)) {\r\n        final JFileChooser jfc = fc;\r\n        Document document = getDocumentManager().getDocument(jfc.getSelectedFile().getAbsolutePath());\r\n        openProject(document, project);\r\n    }\r\n}"},
 {"id":688, "parametername":"final IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2728, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.openRemoteProject(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"public void openRemoteProject(final IGanttProject project) throws IOException {\r\n    final Document document = showURLDialog(project);\r\n    if (document != null) {\r\n        openProject(document, project);\r\n    }\r\n}"},
 {"id":689, "parametername":"final Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2727, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.openProject(net.sourceforge.ganttproject.document.Document,net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"public void openProject(final Document document, final IGanttProject project) throws IOException {\r\n    beforeClose();\r\n    project.close();\r\n    project.open(document);\r\n}"},
 {"id":690, "parametername":"final IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2727, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.openProject(net.sourceforge.ganttproject.document.Document,net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"public void openProject(final Document document, final IGanttProject project) throws IOException {\r\n    beforeClose();\r\n    project.close();\r\n    project.open(document);\r\n}"},
 {"id":691, "parametername":"final IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2721, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.createProject(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"public void createProject(final IGanttProject project) {\r\n    if (false == (ensureProjectSaved(project))) {\r\n        return;\r\n    }\r\n    getUndoManager().undoableEdit(\"Init new Project\", new Runnable() {\r\n        public void run() {\r\n            beforeClose();\r\n            project.close();\r\n            myWorkbenchFacade.setStatusText(i18n.getText(\"newProject2\"));\r\n            showNewProjectWizard(project);\r\n        }\r\n    });\r\n}"},
 {"id":692, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2733, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.showNewProjectWizard(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"private void showNewProjectWizard(IGanttProject project) {\r\n    NewProjectWizard wizard = new NewProjectWizard();\r\n    wizard.createNewProject(project, myWorkbenchFacade);\r\n}"},
 {"id":693, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2734, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.showURLDialog(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"private Document showURLDialog(IGanttProject project) {\r\n    Document document = project.getDocument();\r\n    GanttURLChooser uc = new GanttURLChooser(myWorkbenchFacade.getMainFrame(), false, (null != document ? document.getURLPath() : myDocumentManager.getLastWebDAVDocumentOption().getValue()), (null != document ? document.getUsername() : null), (null != document ? document.getPassword() : null));\r\n    uc.show();\r\n    if (uc.change) {\r\n        document = myDocumentManager.getDocument(uc.fileurl, uc.userName, uc.password);\r\n        myDocumentManager.getLastWebDAVDocumentOption().lock();\r\n        myDocumentManager.getLastWebDAVDocumentOption().setValue(uc.fileurl);\r\n        myDocumentManager.getLastWebDAVDocumentOption().commit();\r\n    } else {\r\n        document = null;\r\n    }\r\n    return document;\r\n}"},
 {"id":694, "parametername":"net.sourceforge.ganttproject.document.Document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":318, "classname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl", "methodid":2734, "methodname":"net.sourceforge.ganttproject.gui.ProjectUIFacadeImpl.showURLDialog(net.sourceforge.ganttproject.IGanttProject)", "isreturn":1, "sourcecode":"private Document showURLDialog(IGanttProject project) {\r\n    Document document = project.getDocument();\r\n    GanttURLChooser uc = new GanttURLChooser(myWorkbenchFacade.getMainFrame(), false, (null != document ? document.getURLPath() : myDocumentManager.getLastWebDAVDocumentOption().getValue()), (null != document ? document.getUsername() : null), (null != document ? document.getPassword() : null));\r\n    uc.show();\r\n    if (uc.change) {\r\n        document = myDocumentManager.getDocument(uc.fileurl, uc.userName, uc.password);\r\n        myDocumentManager.getLastWebDAVDocumentOption().lock();\r\n        myDocumentManager.getLastWebDAVDocumentOption().setValue(uc.fileurl);\r\n        myDocumentManager.getLastWebDAVDocumentOption().commit();\r\n    } else {\r\n        document = null;\r\n    }\r\n    return document;\r\n}"},
 {"id":695, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":319, "classname":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn", "methodid":2737, "methodname":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.resource.ResourceColumn)", "isreturn":0, "sourcecode":"public ResourceDialogCustomColumn(UIFacade uiFacade, ResourceColumn col) {\r\n    myUIFacade = uiFacade;\r\n    resourceColumn = col;\r\n    myOptionGroup.lock();\r\n    myDate.lock();\r\n    myOptionGroup.setTitled(false);\r\n}"},
 {"id":696, "parametername":"ResourceColumn col", "parametertype":"net.sourceforge.ganttproject.resource.ResourceColumn", "parameterclass":506, "classid":319, "classname":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn", "methodid":2737, "methodname":"net.sourceforge.ganttproject.gui.ResourceDialogCustomColumn.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.resource.ResourceColumn)", "isreturn":0, "sourcecode":"public ResourceDialogCustomColumn(UIFacade uiFacade, ResourceColumn col) {\r\n    myUIFacade = uiFacade;\r\n    resourceColumn = col;\r\n    myOptionGroup.lock();\r\n    myDate.lock();\r\n    myOptionGroup.setTitled(false);\r\n}"},
 {"id":697, "parametername":"ResourceAssignmentCollection assignmentCollection", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection", "parameterclass":541, "classid":321, "classname":"net.sourceforge.ganttproject.gui.ResourcesTableModel", "methodid":2750, "methodname":"net.sourceforge.ganttproject.gui.ResourcesTableModel.-init-(net.sourceforge.ganttproject.task.ResourceAssignmentCollection)", "isreturn":0, "sourcecode":"public ResourcesTableModel(ResourceAssignmentCollection assignmentCollection) {\r\n    myAssignmentCollection = assignmentCollection;\r\n    myAssignments = new ArrayList(Arrays.asList(assignmentCollection.getAssignments()));\r\n    myMutator = assignmentCollection.createMutator();\r\n}"},
 {"id":698, "parametername":"TableHeaderUIFacade source", "parametertype":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade", "parameterclass":324, "classid":324, "classname":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade", "methodid":2777, "methodname":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade.importData(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "isreturn":0, "sourcecode":"void importData(TableHeaderUIFacade source);"},
 {"id":699, "parametername":"UIConfiguration config", "parametertype":"net.sourceforge.ganttproject.gui.UIConfiguration", "parameterclass":335, "classid":333, "classname":"net.sourceforge.ganttproject.gui.UIConfiguration$AlphaRenderingOption", "methodid":2860, "methodname":"net.sourceforge.ganttproject.gui.UIConfiguration$AlphaRenderingOption.-init-(net.sourceforge.ganttproject.gui.UIConfiguration)", "isreturn":0, "sourcecode":"AlphaRenderingOption(UIConfiguration config) {\r\n    super(\"chart.weekend_alpha_rendering\", UIConfiguration.AlphaRenderingOption.VALUES);\r\n    // for (int i=0; i<VALUES.length; i++) {\r\n    // if (FLOATS[i]==config.getWeekendAlphaValue()) {\r\n    // myIndex = i;\r\n    // break;\r\n    // }\r\n    // }\r\n}"},
 {"id":700, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":341, "classname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel", "methodid":2898, "methodname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic AboutAuthorPanel(GanttProject parent) {\r\n    super(GanttLanguage.getInstance().getText(\"authors\"), GanttLanguage.getInstance().getText(\"settingsAuthors\"), parent);\r\n    JTable jTableAuthors = new JTable();\r\n    AboutAuthorPanel.AuthorsFieldTableModel modelauthors = new AboutAuthorPanel.AuthorsFieldTableModel();\r\n    jTableAuthors.setModel(modelauthors);\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"THOMAS Alexandre\", \"alexthomas@ganttproject.org\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"BARASHEV Dmitry\", \"dbarashev@ganttproject.org\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"AZURE Joe\", \"jazure@fishalaska.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"BARANNE Benoit\", \"bbaranne@users.sourceforge.net\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"BOHN Nicolas\", \"nicolasbohn@users.sourceforge.net\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"LIBS Jean-Marc\", \"jyhem@users.sourceforge.net\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"\", \"\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"BARMEIER Matthias\", \"matthias.barmeier@sourcepark.de\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"MURAS Joanna\", \"zabucha@users.sourceforge.net\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"LU Cui\", \"cuix1@yahoo.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"SCHULZ Maik\", \"post@maikschulz.de\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"HAEUSLER Michael\", \"michael@akatose.de\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"ANDRESEN Roger\", \"Roger@Andresen.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"\", \"\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"LIPINSKI Pawel\", \"pawel.lipinski@javart.com.pl\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"AUDRU C\ufffddric\", \"cedricaudru@yahoo.fr\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"A S Hodel\", \"hodelas@ieee.org\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"BALAZS Major\", \"BMajor@Graphisoft.hu\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"BARZILAI Igor\", \"igor.barzilai@free.fr\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"BREZINA Marek\", \"marek.brezina@seznam.cz\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"BROKER Rick\", \"rick_broker@yahoo.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"CASTILHO Danilo\", \"dncastilho@yahoo.com.br\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"CHRISTENSEN Carsten\", \"coc-kultur@aalborg.dk\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"CROUNSE Brian\", \"brian@crounse.name\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"FERRAZ Nelson\", \"nferraz@phperl.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"GLOEGL Michael\", \"gloegl@fmi.uni-passau.de\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"GIANTSIDIS Nikos\", \"nickgiant@yahoo.com\"));// greek translation\r\n\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"HERRMANN G.\", \"herr@nike.eonet.ne.jp\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"HURSEY John\", \"joshh@cs.earlham.edu\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"ILES Jon\", \"jon.iles@tapsterrock.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"Jiwon Kim\", \"yesdi@users.sourceforge.net\"));// Korean language\r\n\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"KARLGREN Jussi\", \"jussi@sics.se\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"KITSIK Ahti\", \"ahti.kitsik@gmail.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"LIN Kirin\", \"kirinlin@users.sourceforge.net\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"LKENFACK Etienne\", \"etiennelk@hotmail.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"MADSEN Jan\", \"JM-kultur@aalborg.dk\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"MARCH Stephen\", \"steve@enerds.ca\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"MIYATA Yasuhiro\", \"yasuhiro.miyata@ulsystems.co.jp\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"NATHANAEL Uwe\", \"Uwe.Nathanael@t-online.de\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"OGNESS John\", \"john@ogness.net\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"PAOLETTI Tomaso\", \"tom@ipaoletti.net\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"PLUSCHKE Andreas\", \"homepage.plueschke@gmx.de\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"RACINOWSKI Przemyslaw\", \"p.racinowski@wp.pl\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"REY Juan\", \"juanrey@inicia.es\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"SAHIN Cengiz\", \"cengiz@sahinc.de\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"SENIGAGLIESI Paolo\", \"senigagliesi_inf@hotmail.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"SHABTAI Yoav\", \"yoavs@pmp-medical.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"STAVRIDES Paul\", \"pstav@adelie.net\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"VAN DER WIEL Andre\", \"a.vd.wiel@chello.nl\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"VOCI Elio\", \"elio.voci@gawab.com\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"ZAVOLZHSKY Alexandr\", \"zavolzhsky@mail.ru\"));\r\n    modelauthors.addField(new AboutAuthorPanel.AuthorsInfo(\"Zheko Zhekov\", \"zhekov@electrostart.com\"));// bulgarian language\r\n\r\n    JPanel authorsPanel = new JPanel(new BorderLayout());\r\n    authorsPanel.add(new JScrollPane(jTableAuthors), BorderLayout.CENTER);\r\n    authorsPanel.setPreferredSize(new Dimension(400, 350));\r\n    vb.add(authorsPanel);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":701, "parametername":"AboutAuthorPanel.AuthorsInfo w", "parametertype":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsInfo", "parameterclass":340, "classid":339, "classname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel", "methodid":2904, "methodname":"net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsFieldTableModel.addField(net.sourceforge.ganttproject.gui.about.AboutAuthorPanel$AuthorsInfo)", "isreturn":0, "sourcecode":"public void addField(AboutAuthorPanel.AuthorsInfo w) {\r\n    data.addElement(w);\r\n    fireTableRowsInserted(((data.size()) - 1), ((data.size()) - 1));\r\n}"},
 {"id":702, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":342, "classname":"net.sourceforge.ganttproject.gui.about.AboutDialog", "methodid":2914, "methodname":"net.sourceforge.ganttproject.gui.about.AboutDialog.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic AboutDialog(GanttProject parent) {\r\n    super(parent, ((GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"about\"))) + \" - Ganttproject\"), true, new AboutPanel(parent));\r\n    // hide the cancel button\r\n    cancelButton.hide();\r\n}"},
 {"id":703, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":345, "classname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel", "methodid":2917, "methodname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic AboutJavaInfosPanel(GanttProject parent) {\r\n    super(GanttLanguage.getInstance().getText(\"jinfos\"), GanttLanguage.getInstance().getText(\"settingsJavaInfos\"), parent);\r\n    JTable jTableProperties = new JTable();\r\n    AboutJavaInfosPanel.AboutFieldTableModel modelproperties = new AboutJavaInfosPanel.AboutFieldTableModel();\r\n    jTableProperties.setModel(modelproperties);\r\n    try {\r\n        Enumeration props = System.getProperties().propertyNames();\r\n        SortedSet s = new TreeSet();\r\n        while (props.hasMoreElements()) {\r\n            s.add(((String) (props.nextElement())));\r\n        } \r\n        Iterator i = s.iterator();\r\n        while (i.hasNext()) {\r\n            String prop = ((String) (i.next()));\r\n            modelproperties.addField(new AboutJavaInfosPanel.SystemInfo(prop, System.getProperty(prop)));\r\n        } \r\n    } catch (AccessControlException e) {\r\n        // This can happen when running in a sandbox (Java WebStart)\r\n        System.err.println(((e + \": \") + (e.getMessage())));\r\n    }\r\n    JPanel infosPanel = new JPanel(new BorderLayout());\r\n    infosPanel.add(new JScrollPane(jTableProperties), BorderLayout.CENTER);\r\n    infosPanel.setPreferredSize(new Dimension(400, 350));\r\n    vb.add(infosPanel);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":704, "parametername":"AboutJavaInfosPanel.SystemInfo w", "parametertype":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$SystemInfo", "parameterclass":344, "classid":343, "classname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel", "methodid":2923, "methodname":"net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$AboutFieldTableModel.addField(net.sourceforge.ganttproject.gui.about.AboutJavaInfosPanel$SystemInfo)", "isreturn":0, "sourcecode":"public void addField(AboutJavaInfosPanel.SystemInfo w) {\r\n    data.addElement(w);\r\n    fireTableRowsInserted(((data.size()) - 1), ((data.size()) - 1));\r\n}"},
 {"id":705, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":348, "classname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel", "methodid":2933, "methodname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic AboutLibraryPanel(GanttProject parent) {\r\n    super(GanttLanguage.getInstance().getText(\"library\"), GanttLanguage.getInstance().getText(\"settingsLibrary\"), parent);\r\n    JTable jTableLib = new JTable();\r\n    AboutLibraryPanel.LibraryFieldTableModel modellib = new AboutLibraryPanel.LibraryFieldTableModel();\r\n    jTableLib.setModel(modellib);\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(((\"ganttproject-\" + (GanttProject.version)) + \".jar\"), \"ganttproject.biz\", \"Project Manager.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"commons-httpclient.jar\", \"jakarta.apache.org\", \"WebDAV support.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"commons-logging.jar\", \"jakarta.apache.org\", \"WebDAV support.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"jdom-20040226-.jar\", \"jdom.org\", \"WebDAV support.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"webdavlib.jar\", \"jakarta.apache.org\", \"WebDAV support.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"jakarta-slide-webdavlib-2.1b1.jar\", \"webdav.apache.org\", \"WebDAV support.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"helpgui-1.1.jar\", \"helpgui.sf.net\", \"Help viewer in html.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"jgoodies-looks-1.2.2.jar\", \"www.jgoodies.com\", \"Nice LooknFeel.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"avalon.jar\", \"avalon.apache.org\", \"Graphic Export (used for pdf)\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"batik.jar\", \"xml.apache.org\", \"Graphic Export (used for pdf)\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"fop.jar\", \"xml.apache.org\", \"Pdf export library.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"fop-font-metrics.jar\", \"xml.apache.org\", \"Special font use.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"junit-3.8.1.jar\", \"junit.org\", \"Unit tests.\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"jdnc-modifBen.jar\", \"https://jdnc.dev.java.net/\", \"Swing components\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"mpxj_0.0.25_CVS.jar\", \"http://mpxj.sourceforge.net/\", \"Microsoft Project compatibility\"));\r\n    modellib.addField(new AboutLibraryPanel.LibraryInfo(\"icons\", \"eclipse.org\", \"Icons from the Eclipse project (IBM).\"));\r\n    JPanel libraryPanel = new JPanel(new BorderLayout());\r\n    libraryPanel.add(new JScrollPane(jTableLib), BorderLayout.CENTER);\r\n    libraryPanel.setPreferredSize(new Dimension(400, 350));\r\n    vb.add(libraryPanel);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":706, "parametername":"AboutLibraryPanel.LibraryInfo w", "parametertype":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryInfo", "parameterclass":347, "classid":346, "classname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel", "methodid":2939, "methodname":"net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryFieldTableModel.addField(net.sourceforge.ganttproject.gui.about.AboutLibraryPanel$LibraryInfo)", "isreturn":0, "sourcecode":"public void addField(AboutLibraryPanel.LibraryInfo w) {\r\n    data.addElement(w);\r\n    fireTableRowsInserted(((data.size()) - 1), ((data.size()) - 1));\r\n}"},
 {"id":707, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":349, "classname":"net.sourceforge.ganttproject.gui.about.AboutLicensePanel", "methodid":2950, "methodname":"net.sourceforge.ganttproject.gui.about.AboutLicensePanel.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic AboutLicensePanel(GanttProject parent) {\r\n    super(GanttLanguage.getInstance().getText(\"license\"), GanttLanguage.getInstance().getText(\"settingsLicense\"), parent);\r\n    JTextArea taLicense = new JTextArea();\r\n    StringBuffer text = new StringBuffer();\r\n    text.append(\"This program is free software; you can redistribute it and/or modify it under the terms of the GNU General \");\r\n    text.append(\"Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\n\n\");\r\n    text.append(\"This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied \");\r\n    text.append(\"warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n\n\");\r\n    text.append(\"You should have received a copy of the GNU General Public License along with this program; if not, write to the Free \");\r\n    text.append(\"Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.\n\n\");\r\n    text.append(\"Browse the entire GPL license at http://www.gnu.org/copyleft/gpl.html\n\");\r\n    taLicense.setText(text.toString());\r\n    taLicense.setEditable(false);\r\n    taLicense.setLineWrap(true);\r\n    taLicense.setWrapStyleWord(true);\r\n    JPanel licensePanel = new JPanel(new BorderLayout());\r\n    licensePanel.add(new JScrollPane(taLicense), BorderLayout.CENTER);\r\n    licensePanel.setPreferredSize(new Dimension(400, 350));\r\n    vb.add(licensePanel);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":708, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":350, "classname":"net.sourceforge.ganttproject.gui.about.AboutPanel", "methodid":2953, "methodname":"net.sourceforge.ganttproject.gui.about.AboutPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic AboutPanel(GanttProject parent) {\r\n    super(GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"about\")), (((GanttLanguage.getInstance().getText(\"settingsAbout\")) + \" \") + (GanttProject.version)), parent);\r\n    GanttSplash splash = new GanttSplash();\r\n    JLabel jLabelImage = splash.getSplashComponent();\r\n    // JPanel imagePanel = new JPanel(new BorderLayout());\r\n    // imagePanel.add(jLabelImage, BorderLayout.CENTER);\r\n    vb.add(new JPanel());\r\n    vb.add(jLabelImage);\r\n    vb.add(new JPanel());\r\n    JButton bHomePage = new JButton(GanttProject.correctLabel(language.getText(\"webPage\")), new ImageIcon(getClass().getResource(\"/icons/home_16.gif\")));\r\n    bHomePage.setToolTipText(GanttProject.getToolTip((((language.getText(\"goTo\")) + \" \") + \"http://ganttproject.biz\")));// add a simple tool tip\r\n\r\n    // text :)\r\n    bHomePage.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            BrowserControl.displayURL(\"http://ganttproject.biz/\");\r\n        }\r\n    });\r\n    vb.add(bHomePage);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":709, "parametername":"BooleanOption option", "parametertype":"net.sourceforge.ganttproject.gui.options.model.BooleanOption", "parameterclass":373, "classid":351, "classname":"net.sourceforge.ganttproject.gui.options.BooleanOptionAction", "methodid":2957, "methodname":"net.sourceforge.ganttproject.gui.options.BooleanOptionAction.-init-(net.sourceforge.ganttproject.gui.options.model.BooleanOption)", "isreturn":0, "sourcecode":"BooleanOptionAction(BooleanOption option) {\r\n    super(\"\");\r\n    myOption = option;\r\n}"},
 {"id":710, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":352, "classname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel", "methodid":2959, "methodname":"net.sourceforge.ganttproject.gui.options.CSVSettingsPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic CSVSettingsPanel(GanttProject parent) {\r\n    super(GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"csvexport\")), GanttLanguage.getInstance().getText(\"settingsCVSExport\"), parent);\r\n    appli = parent;\r\n    vb.add(new JSeparator());\r\n    JPanel genePanel = new JPanel(new BorderLayout());\r\n    JLabel lblSeparatedField = new JLabel(language.getText(\"separatedFields\"));\r\n    lblSeparatedField.setFont(new Font(lblSeparatedField.getFont().getFontName(), Font.BOLD, lblSeparatedField.getFont().getSize()));\r\n    genePanel.add(lblSeparatedField, BorderLayout.WEST);\r\n    vb.add(genePanel);\r\n    JPanel fixedPanel = new JPanel(new BorderLayout());\r\n    fixedPanel.add((bFixedSize = new JRadioButton()), BorderLayout.WEST);\r\n    // bFixedSize.setEnabled(false);\r\n    bFixedSize.addActionListener(this);\r\n    fixedPanel.add(new JLabel(language.getText(\"fixedWidth\")), BorderLayout.CENTER);\r\n    vb.add(fixedPanel);\r\n    JPanel separatedPanel = new JPanel(new BorderLayout());\r\n    separatedPanel.add((bSeparatedText = new JRadioButton()), BorderLayout.WEST);\r\n    bSeparatedText.addActionListener(this);\r\n    separatedPanel.add(new JLabel(language.getText(\"separated\")), BorderLayout.CENTER);\r\n    vb.add(separatedPanel);\r\n    JPanel separatorFieldPanel = new JPanel(new GridBagLayout());\r\n    vb.add(separatorFieldPanel);\r\n    GridBagConstraints gbc = new GridBagConstraints();\r\n    gbc.anchor = GridBagConstraints.WEST;\r\n    gbc.insets.right = 15;\r\n    gbc.insets.left = 10;\r\n    gbc.insets.top = 10;\r\n    addUsingGBL(separatorFieldPanel, (bDoubleDot = new JRadioButton()), gbc, 0, 0, 1, 1);\r\n    bDoubleDot.addActionListener(this);\r\n    addUsingGBL(separatorFieldPanel, new JLabel(language.getText(\"doubledot\")), gbc, 1, 0, 1, 1);\r\n    addUsingGBL(separatorFieldPanel, (bDotComa = new JRadioButton()), gbc, 3, 0, 1, 1);\r\n    bDotComa.addActionListener(this);\r\n    addUsingGBL(separatorFieldPanel, new JLabel(language.getText(\"dotComa\")), gbc, 4, 0, 1, 1);\r\n    addUsingGBL(separatorFieldPanel, (bComa = new JRadioButton()), gbc, 6, 0, 1, 1);\r\n    bComa.addActionListener(this);\r\n    addUsingGBL(separatorFieldPanel, new JLabel(language.getText(\"coma\")), gbc, 7, 0, 1, 1);\r\n    bSpace = new JRadioButton();\r\n    // addUsingGBL(separatorFieldPanel, bSpace , gbc, 0, 1, 1, 1);\r\n    bSpace.addActionListener(this);\r\n    // addUsingGBL(separatorFieldPanel, new\r\n    // JLabel(language.getText(\"space\")), gbc, 1, 1, 1, 1);\r\n    addUsingGBL(separatorFieldPanel, (bOther = new JRadioButton()), gbc, 6, 1, 1, 1);\r\n    bOther.addActionListener(this);\r\n    addUsingGBL(separatorFieldPanel, new JLabel(language.getText(\"other\")), gbc, 7, 1, 1, 1);\r\n    addUsingGBL(separatorFieldPanel, (tfOther = new JTextField(5)), gbc, 8, 1, 1, 1);\r\n    JPanel textSeparatorFieldPanel = new JPanel(new FlowLayout());\r\n    vb.add(textSeparatorFieldPanel);\r\n    textSeparatorFieldPanel.add(new JLabel(language.getText(\"textSeparator\")));\r\n    cbTextSeparator = new JComboBox(appli.getOptions().getCSVOptions().getSeparatedTextChars());\r\n    textSeparatorFieldPanel.add(new JLabel(\"  \"));\r\n    textSeparatorFieldPanel.add(cbTextSeparator);\r\n    vb.add(new JPanel());\r\n    // /////////////////////////////////////////////////\r\n    vb.add(new JSeparator());\r\n    JPanel taskPanel = new JPanel(new BorderLayout());\r\n    JLabel lblTaskField = new JLabel(language.getText(\"taskFields\"));\r\n    lblTaskField.setFont(new Font(lblTaskField.getFont().getFontName(), Font.BOLD, lblTaskField.getFont().getSize()));\r\n    taskPanel.add(lblTaskField, BorderLayout.WEST);\r\n    vb.add(taskPanel);\r\n    JPanel taskFieldPanel = new JPanel(new GridBagLayout());\r\n    vb.add(taskFieldPanel);\r\n    addUsingGBL(taskFieldPanel, (cbTaskID = new JCheckBox()), gbc, 0, 0, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"id\")), gbc, 1, 0, 1, 1);\r\n    addUsingGBL(taskFieldPanel, (cbTaskName = new JCheckBox()), gbc, 3, 0, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"name\")), gbc, 4, 0, 1, 1);\r\n    addUsingGBL(taskFieldPanel, (cbTaskDuration = new JCheckBox()), gbc, 6, 0, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"length\")), gbc, 7, 0, 1, 1);\r\n    addUsingGBL(taskFieldPanel, (cbStartDate = new JCheckBox()), gbc, 0, 1, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"dateOfBegining\")), gbc, 1, 1, 1, 1);\r\n    addUsingGBL(taskFieldPanel, (cbEndDate = new JCheckBox()), gbc, 3, 1, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"dateOfEnd\")), gbc, 4, 1, 1, 1);\r\n    addUsingGBL(taskFieldPanel, (cbTaskPercent = new JCheckBox()), gbc, 6, 1, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"advancement\")), gbc, 7, 1, 1, 1);\r\n    addUsingGBL(taskFieldPanel, (cbTaskWebLink = new JCheckBox()), gbc, 0, 2, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"webLink\")), gbc, 1, 2, 1, 1);\r\n    addUsingGBL(taskFieldPanel, (cbTaskResources = new JCheckBox()), gbc, 3, 2, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"resources\")), gbc, 4, 2, 1, 1);\r\n    addUsingGBL(taskFieldPanel, (cbTaskNotes = new JCheckBox()), gbc, 6, 2, 1, 1);\r\n    addUsingGBL(taskFieldPanel, new JLabel(language.getText(\"notes\")), gbc, 7, 2, 1, 1);\r\n    vb.add(new JPanel());\r\n    // /////////////////////////////////////////////////\r\n    vb.add(new JSeparator());\r\n    JPanel resPanel = new JPanel(new BorderLayout());\r\n    JLabel lblResField = new JLabel(language.getText(\"resFields\"));\r\n    lblResField.setFont(new Font(lblResField.getFont().getFontName(), Font.BOLD, lblResField.getFont().getSize()));\r\n    resPanel.add(lblResField, BorderLayout.WEST);\r\n    vb.add(resPanel);\r\n    JPanel resFieldPanel = new JPanel(new GridBagLayout());\r\n    vb.add(resFieldPanel);\r\n    addUsingGBL(resFieldPanel, (cbResID = new JCheckBox()), gbc, 0, 0, 1, 1);\r\n    addUsingGBL(resFieldPanel, new JLabel(language.getText(\"id\")), gbc, 1, 0, 1, 1);\r\n    addUsingGBL(resFieldPanel, (cbResName = new JCheckBox()), gbc, 3, 0, 1, 1);\r\n    addUsingGBL(resFieldPanel, new JLabel(language.getText(\"colName\")), gbc, 4, 0, 1, 1);\r\n    addUsingGBL(resFieldPanel, (cbResMail = new JCheckBox()), gbc, 6, 0, 1, 1);\r\n    addUsingGBL(resFieldPanel, new JLabel(language.getText(\"colMail\")), gbc, 7, 0, 1, 1);\r\n    addUsingGBL(resFieldPanel, (cbResPhone = new JCheckBox()), gbc, 0, 1, 1, 1);\r\n    addUsingGBL(resFieldPanel, new JLabel(language.getText(\"colPhone\")), gbc, 1, 1, 1, 1);\r\n    addUsingGBL(resFieldPanel, (cbResRole = new JCheckBox()), gbc, 3, 1, 1, 1);\r\n    addUsingGBL(resFieldPanel, new JLabel(language.getText(\"colRole\")), gbc, 4, 1, 1, 1);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":711, "parametername":"EnumerationOption option", "parametertype":"net.sourceforge.ganttproject.gui.options.model.EnumerationOption", "parameterclass":384, "classid":354, "classname":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel", "methodid":2984, "methodname":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel.-init-(net.sourceforge.ganttproject.gui.options.model.EnumerationOption)", "isreturn":0, "sourcecode":"public EnumerationOptionComboBoxModel(EnumerationOption option) {\r\n    myOption = option;\r\n    String currentValue = option.getValue();\r\n    EnumerationOptionComboBoxModel.Item currentItem = null;\r\n    String[] ids = option.getAvailableValues();\r\n    String[] i18nedValues = geti18nedValues(option);\r\n    myValues = new ArrayList(ids.length);\r\n    for (int i = 0; i < (ids.length); i++) {\r\n        EnumerationOptionComboBoxModel.Item nextItem = new EnumerationOptionComboBoxModel.Item(ids[i], i18nedValues[i]);\r\n        myValues.add(nextItem);\r\n        if (ids[i].equals(currentValue)) {\r\n            currentItem = nextItem;\r\n        }\r\n    }\r\n    if (currentItem != null) {\r\n        setSelectedItem(currentItem);\r\n    }\r\n}"},
 {"id":712, "parametername":"EnumerationOption option", "parametertype":"net.sourceforge.ganttproject.gui.options.model.EnumerationOption", "parameterclass":384, "classid":354, "classname":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel", "methodid":2989, "methodname":"net.sourceforge.ganttproject.gui.options.EnumerationOptionComboBoxModel.geti18nedValues(net.sourceforge.ganttproject.gui.options.model.EnumerationOption)", "isreturn":0, "sourcecode":"String[] geti18nedValues(EnumerationOption option) {\r\n    String[] ids = option.getAvailableValues();\r\n    String[] result = new String[ids.length];\r\n    for (int i = 0; i < (ids.length); i++) {\r\n        result[i] = GanttLanguage.getInstance().getText(((\"optionValue.\" + (ids[i])) + \".label\"));\r\n        if (result[i].startsWith(GanttLanguage.MISSING_RESOURCE)) {\r\n            // System.err.println(result[i]);\r\n            result[i] = ids[i];\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":713, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":355, "classname":"net.sourceforge.ganttproject.gui.options.ExportSettingsPanel", "methodid":2993, "methodname":"net.sourceforge.ganttproject.gui.options.ExportSettingsPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic ExportSettingsPanel(GanttProject parent) {\r\n    super(GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"export\")), GanttLanguage.getInstance().getText(\"settingsExport\"), parent);\r\n    appli = parent;\r\n    // export the name of the task\r\n    JPanel namePanel = new JPanel(new BorderLayout());\r\n    namePanel.add((cbName = new JCheckBox()), BorderLayout.WEST);\r\n    namePanel.add(new JLabel(language.getText(\"name\")), BorderLayout.CENTER);\r\n    vb.add(namePanel);\r\n    vb.add(new JPanel());\r\n    // export the complete percent of the task\r\n    JPanel completePanel = new JPanel(new BorderLayout());\r\n    completePanel.add((cbComplete = new JCheckBox()), BorderLayout.WEST);\r\n    completePanel.add(new JLabel(language.getText(\"advancement\")), BorderLayout.CENTER);\r\n    vb.add(completePanel);\r\n    vb.add(new JPanel());\r\n    // export the relationst of the task\r\n    JPanel relationsPanel = new JPanel(new BorderLayout());\r\n    relationsPanel.add((cbRelations = new JCheckBox()), BorderLayout.WEST);\r\n    relationsPanel.add(new JLabel(language.getText(\"depends\")), BorderLayout.CENTER);\r\n    vb.add(relationsPanel);\r\n    vb.add(new JPanel());\r\n    // export the 3D border of the task\r\n    // JPanel bordersPanel = new JPanel(new BorderLayout());\r\n    // bordersPanel.add(cb3dBorder = new JCheckBox(), BorderLayout.WEST);\r\n    // bordersPanel.add(new JLabel(language.getText(\"border3D\")),\r\n    // BorderLayout.CENTER);\r\n    // vb.add(bordersPanel);\r\n    vb.add(new JPanel());\r\n}"},
 {"id":714, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":357, "classname":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider", "methodid":3008, "methodname":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider.getOptionGroups(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public GPOptionGroup[] getOptionGroups(IGanttProject project, UIFacade uiFacade) {\r\n    return uiFacade.getGanttChart().getOptionGroups();\r\n}"},
 {"id":715, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":357, "classname":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider", "methodid":3008, "methodname":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider.getOptionGroups(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public GPOptionGroup[] getOptionGroups(IGanttProject project, UIFacade uiFacade) {\r\n    return uiFacade.getGanttChart().getOptionGroups();\r\n}"},
 {"id":716, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":357, "classname":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider", "methodid":3007, "methodname":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider.buildPageComponent(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public Component buildPageComponent(IGanttProject project, UIFacade uiFacade) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":717, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":357, "classname":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider", "methodid":3007, "methodname":"net.sourceforge.ganttproject.gui.options.GanttChartOptionPageProvider.buildPageComponent(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public Component buildPageComponent(IGanttProject project, UIFacade uiFacade) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":718, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":359, "classname":"net.sourceforge.ganttproject.gui.options.LanguageSettingsPanel", "methodid":3022, "methodname":"net.sourceforge.ganttproject.gui.options.LanguageSettingsPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic LanguageSettingsPanel(GanttProject parent) {\r\n    super(GanttLanguage.getInstance().getText(\"languages\"), GanttLanguage.getInstance().getText(\"settingsLanguages\"), parent);\r\n    appli = parent;\r\n    // create the combo box with all languages\r\n    cbLanguage = new JComboBox();\r\n    cbLanguage.addItem(\"Traditional Chinese\");\r\n    cbLanguage.addItem(\"Simplified Chinese\");\r\n    cbLanguage.addItem(\"u0411u044au043bu0433u0430u0440u0441u043au0438\");\r\n    cbLanguage.addItem(\"u010cesky\");\r\n    cbLanguage.addItem(\"Dansk\");\r\n    cbLanguage.addItem(\"Deutsch\");\r\n    cbLanguage.addItem(\"English\");\r\n    cbLanguage.addItem(\"English (United Kingdom)\");\r\n    cbLanguage.addItem(\"Espau00f1ol\");\r\n    cbLanguage.addItem(\"Estonian\");\r\n    cbLanguage.addItem(\"Finnish\");\r\n    cbLanguage.addItem(\"Franu00e7ais\");\r\n    cbLanguage.addItem(\"Greek\");\r\n    cbLanguage.addItem(\"Hrvatski\");\r\n    cbLanguage.addItem(\"Hungarian\");\r\n    cbLanguage.addItem(\"Korean\");\r\n    cbLanguage.addItem(\"u05e2u05d1u05e8u05d9u05ea\");\r\n    cbLanguage.addItem(\"Italiano\");\r\n    cbLanguage.addItem(\"Japanese\");\r\n    cbLanguage.addItem(\"Nederlands\");\r\n    cbLanguage.addItem(\"Norsk\");\r\n    cbLanguage.addItem(\"Polski\");\r\n    cbLanguage.addItem(\"Portuguu00eas\");\r\n    cbLanguage.addItem(\"Portuguu00eas do Brasil\");\r\n    cbLanguage.addItem(\"u0420u0443u0441u0441u043au0438u0439\");\r\n    cbLanguage.addItem(\"Romanian\");\r\n    cbLanguage.addItem(\"Slovenu0161u010dina\");\r\n    cbLanguage.addItem(\"Slovensky\");\r\n    cbLanguage.addItem(\"Svenska\");\r\n    cbLanguage.addItem(\"Tu00fcrku00e7e\");\r\n    cbLanguage.addItem(\"Tiu1ebfng anh\");\r\n    cbLanguage.addItemListener(this);\r\n    JPanel languagePanel = new JPanel(new BorderLayout());\r\n    languagePanel.add(cbLanguage, BorderLayout.NORTH);\r\n    vb.add(languagePanel);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":719, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":360, "classname":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel", "methodid":3027, "methodname":"net.sourceforge.ganttproject.gui.options.LnFSettingsPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic LnFSettingsPanel(GanttProject parent) {\r\n    super(GanttLanguage.getInstance().getText(\"looknfeel\"), GanttLanguage.getInstance().getText(\"settingsLooknFeel\"), parent);\r\n    appli = parent;\r\n    // create the combo box with all languages\r\n    cbLnf = new JComboBox();\r\n    cbLnf.setName(\"comboLnf\");\r\n    // cbLnf.addActionListener(this);\r\n    GanttLookAndFeelInfo[] lookAndFeels = GanttLookAndFeels.getGanttLookAndFeels().getInstalledLookAndFeels();\r\n    for (int i = 0; i < (lookAndFeels.length); i++) {\r\n        cbLnf.addItem(lookAndFeels[i]);\r\n    }\r\n    cbLnf.addItemListener(this);\r\n    JPanel languagePanel = new JPanel(new BorderLayout());\r\n    languagePanel.add(cbLnf, BorderLayout.NORTH);\r\n    vb.add(languagePanel);\r\n    vb.add(new JPanel());\r\n    // use small icons\r\n    JPanel iconTextPanel = new JPanel(new FlowLayout());\r\n    iconTextPanel.add(new JLabel(language.getText(\"show\")));\r\n    iconTextPanel.add((cbButtonType = new JComboBox()));\r\n    cbButtonType.addItem(language.getText(\"buttonIcon\"));\r\n    cbButtonType.addItem(language.getText(\"buttonIconText\"));\r\n    cbButtonType.addItem(language.getText(\"buttonText\"));\r\n    iconTextPanel.add(new JLabel(\"  \"));\r\n    iconTextPanel.add((cbSmallIcon = new JCheckBox()));\r\n    iconTextPanel.add(new JLabel(language.getText(\"useSmalIcons\")));\r\n    JPanel iconTextPanel2 = new JPanel(new BorderLayout());\r\n    iconTextPanel2.add(iconTextPanel, BorderLayout.WEST);\r\n    vb.add(iconTextPanel2);\r\n    vb.add(new JPanel());\r\n    // // status bar setting\r\n    // JPanel statusPanel = new JPanel(new BorderLayout());\r\n    // statusPanel.add(cbShowStatus = new JCheckBox(), BorderLayout.WEST);\r\n    // statusPanel.add(new JLabel(language.getText(\"showStatusBar\")),\r\n    // BorderLayout.CENTER);\r\n    // vb.add(statusPanel);\r\n    // vb.add(new JPanel());\r\n    JPanel positionPanel = new JPanel(new FlowLayout());\r\n    JPanel currentPanel = new JPanel(new BorderLayout());\r\n    JPanel deletedPanel = new JPanel(new BorderLayout());\r\n    currentPanel.add(new JLabel(language.getText(\"currentToolBar\")), BorderLayout.NORTH);\r\n    deletedPanel.add(new JLabel(language.getText(\"availableToolBar\")), BorderLayout.NORTH);\r\n    /* iconList = new DefaultListModel (); buttonList = new DefaultListModel\n    (); for (int i = 0 ; i < appli.getButtonList().size() ; i++)\n    buttonList.addElement(appli.getButtonList().getElementAt(i)); for\n    (int i = 0 ; i < buttonList.size() ; i++) { if\n    (buttonList.elementAt(i).equals(language.getText(\"separator\").toUpperCase()))\n    iconList.addElement (buttonList.getElementAt(i)); else { if\n    (((TestGanttRolloverButton)buttonList.getElementAt(i)).getIcon() ==\n    null) iconList.addElement\n    (((TestGanttRolloverButton)buttonList.getElementAt(i)).getText());\n    else iconList.addElement\n    (((TestGanttRolloverButton)buttonList.getElementAt(i)).getIcon()); } }\n     */\r\n    list = new JList();\r\n    listDeleted = new JList();\r\n    listDeleted.setName(\"listDeleted\");\r\n    scrollPane = new JScrollPane(listDeleted);\r\n    scrollPane.setPreferredSize(new Dimension(110, 200));\r\n    deletedPanel.add(scrollPane, BorderLayout.EAST);\r\n    // list = new JList(iconList);\r\n    list.setName(\"list\");\r\n    scrollPane = new JScrollPane(list);\r\n    scrollPane.setPreferredSize(new Dimension(110, 200));\r\n    currentPanel.add(scrollPane, BorderLayout.EAST);\r\n    Box currentButtonBox = Box.createVerticalBox();\r\n    Box deletedButtonBox = Box.createVerticalBox();\r\n    JButton bUp = new JButton();\r\n    bUp.setIcon(new ImageIcon(getClass().getResource(\"/icons/up_16.gif\")));\r\n    bUp.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"upTask\"))));\r\n    bUp.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            upButtonActionPerformed(evt);\r\n        }\r\n    });\r\n    JButton bDown = new JButton();\r\n    bDown.setIcon(new ImageIcon(getClass().getResource(\"/icons/down_16.gif\")));\r\n    bDown.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"downTask\"))));\r\n    bDown.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            downButtonActionPerformed(evt);\r\n        }\r\n    });\r\n    JButton bSeparator = new JButton();\r\n    bSeparator.setIcon(new ImageIcon(getClass().getResource(\"/icons/separator_16.gif\")));\r\n    bSeparator.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"separator\"))));\r\n    bSeparator.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            separatorButtonActionPerformed(evt);\r\n        }\r\n    });\r\n    JButton bDelete = new JButton();\r\n    bDelete.setIcon(new ImageIcon(getClass().getResource(\"/icons/indent_16.gif\")));\r\n    bDelete.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"delete\"))));\r\n    bDelete.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            deleteButtonActionPerformed(evt);\r\n        }\r\n    });\r\n    JButton bAdd = new JButton();\r\n    bAdd.setIcon(new ImageIcon(getClass().getResource(\"/icons/unindent_16.gif\")));\r\n    bAdd.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(language.getText(\"add\"))));\r\n    bAdd.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            addButtonActionPerformed(evt);\r\n        }\r\n    });\r\n    currentButtonBox.add(new JPanel());\r\n    currentButtonBox.add(new JPanel());\r\n    currentButtonBox.add(bUp);\r\n    currentButtonBox.add(new JPanel());\r\n    currentButtonBox.add(bDown);\r\n    currentButtonBox.add(new JPanel());\r\n    currentButtonBox.add(new JPanel());\r\n    deletedButtonBox.add(new JPanel());\r\n    deletedButtonBox.add(new JPanel());\r\n    deletedButtonBox.add(bAdd);\r\n    deletedButtonBox.add(new JPanel());\r\n    deletedButtonBox.add(bDelete);\r\n    deletedButtonBox.add(new JPanel());\r\n    deletedButtonBox.add(new JPanel());\r\n    positionPanel.add(currentButtonBox);\r\n    positionPanel.add(currentPanel);\r\n    positionPanel.add(new JPanel());\r\n    positionPanel.add(deletedButtonBox);\r\n    positionPanel.add(new JPanel());\r\n    positionPanel.add(deletedPanel);\r\n    positionPanel.add(new JPanel());\r\n    vb.add(positionPanel);\r\n    vb.add(new JPanel());\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":720, "parametername":"OptionPageProvider provider", "parametertype":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider", "parameterclass":390, "classid":361, "classname":"net.sourceforge.ganttproject.gui.options.OptionPageProviderPanel", "methodid":3038, "methodname":"net.sourceforge.ganttproject.gui.options.OptionPageProviderPanel.-init-(net.sourceforge.ganttproject.gui.options.model.OptionPageProvider,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public OptionPageProviderPanel(OptionPageProvider provider, IGanttProject project, UIFacade uiFacade) {\r\n    super(\"\", \"\", uiFacade.getMainFrame());\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myProvider = provider;\r\n    myGroups = myProvider.getOptionGroups(project, uiFacade);\r\n}"},
 {"id":721, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":361, "classname":"net.sourceforge.ganttproject.gui.options.OptionPageProviderPanel", "methodid":3038, "methodname":"net.sourceforge.ganttproject.gui.options.OptionPageProviderPanel.-init-(net.sourceforge.ganttproject.gui.options.model.OptionPageProvider,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public OptionPageProviderPanel(OptionPageProvider provider, IGanttProject project, UIFacade uiFacade) {\r\n    super(\"\", \"\", uiFacade.getMainFrame());\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myProvider = provider;\r\n    myGroups = myProvider.getOptionGroups(project, uiFacade);\r\n}"},
 {"id":722, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":361, "classname":"net.sourceforge.ganttproject.gui.options.OptionPageProviderPanel", "methodid":3038, "methodname":"net.sourceforge.ganttproject.gui.options.OptionPageProviderPanel.-init-(net.sourceforge.ganttproject.gui.options.model.OptionPageProvider,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public OptionPageProviderPanel(OptionPageProvider provider, IGanttProject project, UIFacade uiFacade) {\r\n    super(\"\", \"\", uiFacade.getMainFrame());\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n    myProvider = provider;\r\n    myGroups = myProvider.getOptionGroups(project, uiFacade);\r\n}"},
 {"id":723, "parametername":"OptionsPageBuilder.I18N i18n", "parametertype":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N", "parameterclass":362, "classid":363, "classname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "methodid":3059, "methodname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.setI18N(net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N)", "isreturn":0, "sourcecode":"public void setI18N(OptionsPageBuilder.I18N i18n) {\r\n    myi18n = i18n;\r\n}"},
 {"id":724, "parametername":"GPOptionGroup group", "parametertype":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup", "parameterclass":389, "classid":363, "classname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "methodid":3053, "methodname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createGroupComponent(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup)", "isreturn":0, "sourcecode":"public JComponent createGroupComponent(GPOptionGroup group) {\r\n    JPanel optionsPanel = new JPanel(new SpringLayout());\r\n    if (group.isTitled()) {\r\n        Border lineBorder = BorderFactory.createMatteBorder(1, 0, 0, 0, Color.BLACK);\r\n        optionsPanel.setBorder(BorderFactory.createTitledBorder(lineBorder, myi18n.getOptionGroupLabel(group)));\r\n    }\r\n    GPOption[] options = group.getOptions();\r\n    for (int i = 0; i < (options.length); i++) {\r\n        GPOption nextOption = options[i];\r\n        final Component nextComponent = createOptionComponent(nextOption);\r\n        if (needsLabel(nextOption)) {\r\n            Component nextLabel = createOptionLabel(options[i]);\r\n            optionsPanel.add(nextLabel);\r\n            optionsPanel.add(nextComponent);\r\n        } else {\r\n            optionsPanel.add(nextComponent);\r\n            optionsPanel.add(new JPanel());\r\n        }\r\n        if (i == 0) {\r\n            optionsPanel.addFocusListener(new FocusAdapter() {\r\n                public void focusGained(FocusEvent e) {\r\n                    super.focusGained(e);\r\n                    nextComponent.requestFocus();\r\n                }\r\n            });\r\n        }\r\n    }\r\n    if ((options.length) > 0) {\r\n        SpringUtilities.makeCompactGrid(optionsPanel, options.length, 2, 0, 0, 3, 3);\r\n    }\r\n    return optionsPanel;\r\n}"},
 {"id":725, "parametername":"GPOption nextOption", "parametertype":"net.sourceforge.ganttproject.gui.options.model.GPOption", "parameterclass":387, "classid":363, "classname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "methodid":3058, "methodname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.needsLabel(net.sourceforge.ganttproject.gui.options.model.GPOption)", "isreturn":0, "sourcecode":"private boolean needsLabel(GPOption nextOption) {\r\n    return false == (nextOption instanceof BooleanOption);\r\n}"},
 {"id":726, "parametername":"GPOption option", "parametertype":"net.sourceforge.ganttproject.gui.options.model.GPOption", "parameterclass":387, "classid":363, "classname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "methodid":3056, "methodname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createStandaloneOptionPanel(net.sourceforge.ganttproject.gui.options.model.GPOption)", "isreturn":0, "sourcecode":"public Component createStandaloneOptionPanel(GPOption option) {\r\n    JPanel optionPanel = new JPanel(new BorderLayout());\r\n    Component optionComponent = createOptionComponent(option);\r\n    if (needsLabel(option)) {\r\n        optionPanel.add(createOptionLabel(option), BorderLayout.WEST);\r\n        optionPanel.add(optionComponent, BorderLayout.CENTER);\r\n    } else {\r\n        optionPanel.add(optionComponent, BorderLayout.WEST);\r\n    }\r\n    JPanel result = new JPanel(new BorderLayout());\r\n    result.add(optionPanel, BorderLayout.NORTH);\r\n    return result;\r\n}"},
 {"id":727, "parametername":"GPOption option", "parametertype":"net.sourceforge.ganttproject.gui.options.model.GPOption", "parameterclass":387, "classid":363, "classname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "methodid":3055, "methodname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createOptionLabel(net.sourceforge.ganttproject.gui.options.model.GPOption)", "isreturn":0, "sourcecode":"private Component createOptionLabel(GPOption option) {\r\n    JLabel nextLabel = new JLabel(myi18n.getOptionLabel(option));\r\n    nextLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 3));\r\n    return nextLabel;\r\n}"},
 {"id":728, "parametername":"GPOption option", "parametertype":"net.sourceforge.ganttproject.gui.options.model.GPOption", "parameterclass":387, "classid":363, "classname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "methodid":3054, "methodname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createOptionComponent(net.sourceforge.ganttproject.gui.options.model.GPOption)", "isreturn":0, "sourcecode":"private Component createOptionComponent(GPOption option) {\r\n    Component result = null;\r\n    if (option instanceof EnumerationOption) {\r\n        result = createEnumerationComponent(((EnumerationOption) (option)));\r\n    } else\r\n        if (option instanceof BooleanOption) {\r\n            result = createBooleanComponent(((BooleanOption) (option)));\r\n        } else\r\n            if (option instanceof ColorOption) {\r\n                result = createColorComponent(((ColorOption) (option)));\r\n            } else\r\n                if (option instanceof DateOption) {\r\n                    result = createDateComponent(((DateOption) (option)));\r\n                } else\r\n                    if (option instanceof GPOptionGroup) {\r\n                        result = createButtonComponent(((GPOptionGroup) (option)));\r\n                    } else\r\n                        if (option instanceof StringOption) {\r\n                            result = createStringComponent(((StringOption) (option)));\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n    if (result == null) {\r\n        result = new JLabel((\"Unknown option class=\" + (option.getClass())));\r\n    }\r\n    return result;\r\n}"},
 {"id":729, "parametername":"final StringOption option", "parametertype":"net.sourceforge.ganttproject.gui.options.model.StringOption", "parameterclass":391, "classid":363, "classname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "methodid":3057, "methodname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createStringComponent(net.sourceforge.ganttproject.gui.options.model.StringOption)", "isreturn":0, "sourcecode":"private Component createStringComponent(final StringOption option) {\r\n    final JTextField result = new JTextField(option.getValue());\r\n    result.getDocument().addDocumentListener(new DocumentListener() {\r\n        public void insertUpdate(DocumentEvent e) {\r\n            option.setValue(result.getText());\r\n        }\r\n\r\n        public void removeUpdate(DocumentEvent e) {\r\n            option.setValue(result.getText());\r\n        }\r\n\r\n        public void changedUpdate(DocumentEvent e) {\r\n            option.setValue(result.getText());\r\n        }\r\n    });\r\n    return result;\r\n}"},
 {"id":730, "parametername":"GPOptionGroup optionGroup", "parametertype":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup", "parameterclass":389, "classid":363, "classname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "methodid":3049, "methodname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createButtonComponent(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup)", "isreturn":0, "sourcecode":"private Component createButtonComponent(GPOptionGroup optionGroup) {\r\n    Action action = new AbstractAction(myi18n.getAdvancedActionTitle()) {\r\n        public void actionPerformed(ActionEvent e) {\r\n            System.err.println(\"[OptionsPageBuilder] createButtonComponent: \");\r\n        }\r\n    };\r\n    JButton result = new JButton(action);\r\n    return result;\r\n}"},
 {"id":731, "parametername":"BooleanOption option", "parametertype":"net.sourceforge.ganttproject.gui.options.model.BooleanOption", "parameterclass":373, "classid":363, "classname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "methodid":3048, "methodname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createBooleanComponent(net.sourceforge.ganttproject.gui.options.model.BooleanOption)", "isreturn":0, "sourcecode":"private Component createBooleanComponent(BooleanOption option) {\r\n    JCheckBox result = new JCheckBox(new BooleanOptionAction(option));\r\n    result.setText(myi18n.getOptionLabel(option));\r\n    result.setHorizontalAlignment(JCheckBox.LEFT);\r\n    result.setHorizontalTextPosition(SwingConstants.TRAILING);\r\n    result.setSelected(option.isChecked());\r\n    ComponentOrientation componentOrientation = GanttLanguage.getInstance().getComponentOrientation();\r\n    result.setComponentOrientation(componentOrientation);\r\n    return result;\r\n}"},
 {"id":732, "parametername":"EnumerationOption option", "parametertype":"net.sourceforge.ganttproject.gui.options.model.EnumerationOption", "parameterclass":384, "classid":363, "classname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "methodid":3052, "methodname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createEnumerationComponent(net.sourceforge.ganttproject.gui.options.model.EnumerationOption)", "isreturn":0, "sourcecode":"private JComboBox createEnumerationComponent(EnumerationOption option) {\r\n    ComboBoxModel model = new EnumerationOptionComboBoxModel(option);\r\n    JComboBox result = new JComboBox(model);\r\n    return result;\r\n}"},
 {"id":733, "parametername":"final ColorOption option", "parametertype":"net.sourceforge.ganttproject.gui.options.model.ColorOption", "parameterclass":377, "classid":363, "classname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "methodid":3050, "methodname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createColorComponent(net.sourceforge.ganttproject.gui.options.model.ColorOption)", "isreturn":0, "sourcecode":"private Component createColorComponent(final ColorOption option) {\r\n    final JButton colorButton = new JButton();\r\n    Action action = new AbstractAction(myi18n.getColorButtonText(option)) {\r\n        public void actionPerformed(ActionEvent e) {\r\n            ActionListener onOkPressing = new ActionListener() {\r\n                public void actionPerformed(ActionEvent e) {\r\n                    Color color = OptionsPageBuilder.ourColorChooser.getColor();\r\n                    colorButton.setBackground(color);\r\n                    option.setValue(color);\r\n                }\r\n            };\r\n            ActionListener onCancelPressing = new ActionListener() {\r\n                public void actionPerformed(ActionEvent e) {\r\n                    // nothing to do for \"Cancel\"\r\n                }\r\n            };\r\n            JDialog dialog = JColorChooser.createDialog(myParentComponent, myi18n.getColorChooserTitle(option), true, OptionsPageBuilder.ourColorChooser, onOkPressing, onCancelPressing);\r\n            OptionsPageBuilder.ourColorChooser.setColor(colorButton.getBackground());\r\n            dialog.setVisible(true);\r\n        }\r\n    };\r\n    colorButton.setAction(action);\r\n    colorButton.setBackground(option.getValue());\r\n    return colorButton;\r\n}"},
 {"id":734, "parametername":"final DateOption option", "parametertype":"net.sourceforge.ganttproject.gui.options.model.DateOption", "parameterclass":378, "classid":363, "classname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder", "methodid":3051, "methodname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder.createDateComponent(net.sourceforge.ganttproject.gui.options.model.DateOption)", "isreturn":0, "sourcecode":"private Component createDateComponent(final DateOption option) {\r\n    final JXDatePicker result = new JXDatePicker();\r\n    result.setDate(option.getValue());\r\n    result.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            option.setValue(((JXDatePicker) (e.getSource())).getDate());\r\n        }\r\n    });\r\n    if (option instanceof ChangeValueDispatcher) {\r\n        ((ChangeValueDispatcher) (option)).addChangeValueListener(new ChangeValueListener() {\r\n            public void changeValue(ChangeValueEvent event) {\r\n                assert (event.getNewValue()) instanceof Date;\r\n                result.setDate(((Date) (event.getNewValue())));\r\n            }\r\n        });\r\n    }\r\n    return result;\r\n}"},
 {"id":735, "parametername":"GPOptionGroup group", "parametertype":"net.sourceforge.ganttproject.gui.options.model.GPOptionGroup", "parameterclass":389, "classid":362, "classname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N", "methodid":3065, "methodname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N.getOptionGroupLabel(net.sourceforge.ganttproject.gui.options.model.GPOptionGroup)", "isreturn":0, "sourcecode":"public String getOptionGroupLabel(GPOptionGroup group) {\r\n    return GanttLanguage.getInstance().getText((((myOptionGroupKeyPrefix) + (group.getID())) + \".label\"));\r\n}"},
 {"id":736, "parametername":"GPOption option", "parametertype":"net.sourceforge.ganttproject.gui.options.model.GPOption", "parameterclass":387, "classid":362, "classname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N", "methodid":3066, "methodname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N.getOptionLabel(net.sourceforge.ganttproject.gui.options.model.GPOption)", "isreturn":0, "sourcecode":"public String getOptionLabel(GPOption option) {\r\n    return GanttLanguage.getInstance().getText((((myOptionKeyPrefix) + (option.getID())) + \".label\"));\r\n}"},
 {"id":737, "parametername":"ColorOption colorOption", "parametertype":"net.sourceforge.ganttproject.gui.options.model.ColorOption", "parameterclass":377, "classid":362, "classname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N", "methodid":3063, "methodname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N.getColorButtonText(net.sourceforge.ganttproject.gui.options.model.ColorOption)", "isreturn":0, "sourcecode":"String getColorButtonText(ColorOption colorOption) {\r\n    return GanttLanguage.getInstance().getText(\"colorButton\");\r\n}"},
 {"id":738, "parametername":"ColorOption colorOption", "parametertype":"net.sourceforge.ganttproject.gui.options.model.ColorOption", "parameterclass":377, "classid":362, "classname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N", "methodid":3064, "methodname":"net.sourceforge.ganttproject.gui.options.OptionsPageBuilder$I18N.getColorChooserTitle(net.sourceforge.ganttproject.gui.options.model.ColorOption)", "isreturn":0, "sourcecode":"String getColorChooserTitle(ColorOption colorOption) {\r\n    return GanttLanguage.getInstance().getText(\"selectColor\");\r\n}"},
 {"id":739, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":364, "classname":"net.sourceforge.ganttproject.gui.options.ParametersSettingsPanel", "methodid":3070, "methodname":"net.sourceforge.ganttproject.gui.options.ParametersSettingsPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic ParametersSettingsPanel(GanttProject parent) {\r\n    super(GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"parameters\")), GanttLanguage.getInstance().getText(\"settingsParameters\"), parent);\r\n    appli = parent;\r\n    // automatic launch of task properties\r\n    JPanel autoPanel = new JPanel(new BorderLayout());\r\n    autoPanel.add((cbAutomatic = new JCheckBox()), BorderLayout.WEST);\r\n    autoPanel.add(new JLabel(language.getText(\"automaticLaunch\")), BorderLayout.CENTER);\r\n    vb.add(autoPanel);\r\n    vb.add(new JPanel());\r\n    // move on the graphic area with mouse option\r\n    // JPanel movePanel = new JPanel(new BorderLayout());\r\n    // movePanel.add(cbDrag = new JCheckBox(), BorderLayout.WEST);\r\n    // movePanel.add(new JLabel(language.getText(\"dragTime\")),\r\n    // BorderLayout.CENTER);\r\n    // vb.add(movePanel);\r\n    // vb.add(new JPanel());\r\n    // webdav time block\r\n    JPanel webDavPanel = new JPanel(new BorderLayout());\r\n    webDavPanel.add((spLockDAV = new JSpinner(new SpinnerNumberModel(240, 1, 1440, 1))), BorderLayout.WEST);\r\n    webDavPanel.add(new JLabel(language.getText(\"lockDAV\")), BorderLayout.CENTER);\r\n    vb.add(webDavPanel);\r\n    vb.add(new JPanel());\r\n    // task name prefix\r\n    JPanel taskPrefixPanel = new JPanel(new BorderLayout());\r\n    taskPrefixPanel.add(new JLabel(language.getText(\"taskNamePrefix\")), BorderLayout.WEST);\r\n    taskPrefixPanel.add((tfTaskPrefix = new JTextField()), BorderLayout.CENTER);\r\n    vb.add(taskPrefixPanel);\r\n    vb.add(new JPanel());\r\n    // number of undoes\r\n    // JPanel undoNumberPanel = new JPanel(new BorderLayout());\r\n    // undoNumberPanel.add(spUndoNumber = new JSpinner(new\r\n    // SpinnerNumberModel(50, 1, 200, 1)), BorderLayout.WEST);\r\n    // undoNumberPanel.add (new JLabel(language.getText(\"undoNumber\")),\r\n    // BorderLayout.CENTER);\r\n    // vb.add(undoNumberPanel);\r\n    // vb.add(new JPanel());\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":740, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":365, "classname":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel", "methodid":3076, "methodname":"net.sourceforge.ganttproject.gui.options.ProjectSettingsPanel.-init-(java.awt.Frame,net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Default constructor.\r\n */\r\npublic ProjectSettingsPanel(Frame owner, IGanttProject project) {\r\n    super(GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"project\")), GanttLanguage.getInstance().getText(\"settingsProject\"), owner);\r\n    myProject = project;\r\n    Box vbproject = Box.createVerticalBox();\r\n    /* JPanel filePanel = new JPanel(new BorderLayout()); filePanel.add(new\n    JLabel(language.getText(\"file\")), BorderLayout.WEST);\n    vbproject.add(filePanel); vbproject.add(tfFile = new JTextField());\n    tfFile.setEditable(false); vbproject.add(new JPanel());\n     */\r\n    JPanel namePanel = new JPanel(new BorderLayout());\r\n    namePanel.add(new JLabel(language.getText(\"name\")), BorderLayout.WEST);\r\n    vbproject.add(namePanel);\r\n    vbproject.add((tfName = new JTextField()));\r\n    vbproject.add(new JPanel());\r\n    JPanel orgaPanel = new JPanel(new BorderLayout());\r\n    orgaPanel.add(new JLabel(language.getText(\"organization\")), BorderLayout.WEST);\r\n    vbproject.add(orgaPanel);\r\n    vbproject.add((tfOrganization = new JTextField()));\r\n    vbproject.add(new JPanel());\r\n    tfWebLink = new JTextField();\r\n    JButton bWeb = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/web_16.gif\")));\r\n    bWeb.setToolTipText(GanttProject.getToolTip(language.getText(\"openWebLink\")));\r\n    bWeb.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            // link to open the web link\r\n            if (!(BrowserControl.displayURL(tfWebLink.getText()))) {\r\n                GanttDialogInfo gdi = new GanttDialogInfo(null, GanttDialogInfo.ERROR, GanttDialogInfo.YES_OPTION, language.getText(\"msg4\"), language.getText(\"error\"));\r\n                gdi.show();\r\n            }\r\n        }\r\n    });\r\n    JPanel webPanel = new JPanel(new BorderLayout());\r\n    webPanel.add(new JLabel(language.getText(\"webLink\")), BorderLayout.WEST);\r\n    webPanel.add(bWeb, BorderLayout.EAST);\r\n    vbproject.add(webPanel);\r\n    vbproject.add(tfWebLink);\r\n    vbproject.add(new JPanel());\r\n    JPanel descrPanel = new JPanel(new BorderLayout());\r\n    descrPanel.add(new JLabel(language.getText(\"shortDescription\")), BorderLayout.WEST);\r\n    vbproject.add(descrPanel);\r\n    taDescr = new JTextArea(12, 25);\r\n    taDescr.setLineWrap(true);\r\n    taDescr.setWrapStyleWord(true);\r\n    JScrollPane scpArea = new JScrollPane(taDescr);\r\n    vbproject.add(scpArea);\r\n    JPanel projectPanel = new JPanel(new BorderLayout());\r\n    projectPanel.add(vbproject, BorderLayout.NORTH);\r\n    vb.add(projectPanel);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":741, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":366, "classname":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider", "methodid":3086, "methodname":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider.getOptionGroups(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public GPOptionGroup[] getOptionGroups(IGanttProject project, UIFacade uiFacade) {\r\n    return uiFacade.getResourceChart().getOptionGroups();\r\n}"},
 {"id":742, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":366, "classname":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider", "methodid":3086, "methodname":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider.getOptionGroups(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public GPOptionGroup[] getOptionGroups(IGanttProject project, UIFacade uiFacade) {\r\n    return uiFacade.getResourceChart().getOptionGroups();\r\n}"},
 {"id":743, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":366, "classname":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider", "methodid":3085, "methodname":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider.buildPageComponent(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public Component buildPageComponent(IGanttProject project, UIFacade uiFacade) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":744, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":366, "classname":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider", "methodid":3085, "methodname":"net.sourceforge.ganttproject.gui.options.ResourceChartOptionPageProvider.buildPageComponent(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public Component buildPageComponent(IGanttProject project, UIFacade uiFacade) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":745, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":367, "classname":"net.sourceforge.ganttproject.gui.options.RolesSettingsPanel", "methodid":3090, "methodname":"net.sourceforge.ganttproject.gui.options.RolesSettingsPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic RolesSettingsPanel(GanttProject parent) {\r\n    super(GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"resourceRole\")), GanttLanguage.getInstance().getText(\"settingsRoles\"), parent);\r\n    appli = parent;\r\n    myRolesModel = new RolesTableModel();\r\n    rolesTable = new JTable(myRolesModel);\r\n    rolesTable.setPreferredScrollableViewportSize(new Dimension(400, 350));\r\n    rolesTable.setRowHeight(23);\r\n    rolesTable.getColumnModel().getColumn(0).setPreferredWidth(30);\r\n    rolesTable.getColumnModel().getColumn(1).setPreferredWidth(370);\r\n    vb.add(new JScrollPane(rolesTable));\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":746, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":368, "classname":"net.sourceforge.ganttproject.gui.options.SettingsDialog", "methodid":3093, "methodname":"net.sourceforge.ganttproject.gui.options.SettingsDialog.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic SettingsDialog(GanttProject parent) {\r\n    super(parent, GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"settings\")), true, new WelcomeSettingsPanel(parent));\r\n    restoreButton = new JButton(language.getText(\"restoreDefaults\"));\r\n    restoreButton.setName(\"restore\");\r\n    restoreButton.addActionListener(this);\r\n    if ((southPanel) != null) {\r\n        southPanel.add(restoreButton);\r\n    }\r\n    addWindowListener(new WindowAdapter() {\r\n        public void windowClosing(WindowEvent e) {\r\n            super.windowClosing(e);\r\n            if ((settingPanel) != null) {\r\n                settingPanel.rollback();\r\n            }\r\n        }\r\n    });\r\n}"},
 {"id":747, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":372, "classname":"net.sourceforge.ganttproject.gui.options.WelcomeSettingsPanel", "methodid":3110, "methodname":"net.sourceforge.ganttproject.gui.options.WelcomeSettingsPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic WelcomeSettingsPanel(GanttProject parent) {\r\n    super(GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"settings\")), GanttLanguage.getInstance().getText(\"settingsWelcome\"), parent);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":748, "parametername":"ChangeValueListener listener", "parametertype":"net.sourceforge.ganttproject.gui.options.model.ChangeValueListener", "parameterclass":376, "classid":374, "classname":"net.sourceforge.ganttproject.gui.options.model.ChangeValueDispatcher", "methodid":3115, "methodname":"net.sourceforge.ganttproject.gui.options.model.ChangeValueDispatcher.addChangeValueListener(net.sourceforge.ganttproject.gui.options.model.ChangeValueListener)", "isreturn":0, "sourcecode":"public void addChangeValueListener(ChangeValueListener listener);"},
 {"id":749, "parametername":"ChangeValueEvent event", "parametertype":"net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent", "parameterclass":375, "classid":376, "classname":"net.sourceforge.ganttproject.gui.options.model.ChangeValueListener", "methodid":3121, "methodname":"net.sourceforge.ganttproject.gui.options.model.ChangeValueListener.changeValue(net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent)", "isreturn":0, "sourcecode":"public void changeValue(ChangeValueEvent event);"},
 {"id":750, "parametername":"ChangeValueListener listener", "parametertype":"net.sourceforge.ganttproject.gui.options.model.ChangeValueListener", "parameterclass":376, "classid":386, "classname":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption", "methodid":3172, "methodname":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption.addChangeValueListener(net.sourceforge.ganttproject.gui.options.model.ChangeValueListener)", "isreturn":0, "sourcecode":"public void addChangeValueListener(ChangeValueListener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":751, "parametername":"ChangeValueEvent event", "parametertype":"net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent", "parameterclass":375, "classid":386, "classname":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption", "methodid":3174, "methodname":"net.sourceforge.ganttproject.gui.options.model.GPAbstractOption.fireChangeValueEvent(net.sourceforge.ganttproject.gui.options.model.ChangeValueEvent)", "isreturn":0, "sourcecode":"protected void fireChangeValueEvent(ChangeValueEvent event) {\r\n    Iterator it = myListeners.iterator();\r\n    while (it.hasNext()) {\r\n        ((ChangeValueListener) (it.next())).changeValue(event);\r\n    } \r\n}"},
 {"id":752, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":390, "classname":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider", "methodid":3198, "methodname":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider.getOptionGroups(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"GPOptionGroup[] getOptionGroups(IGanttProject project, UIFacade uiFacade);"},
 {"id":753, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":390, "classname":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider", "methodid":3198, "methodname":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider.getOptionGroups(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"GPOptionGroup[] getOptionGroups(IGanttProject project, UIFacade uiFacade);"},
 {"id":754, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":390, "classname":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider", "methodid":3197, "methodname":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider.buildPageComponent(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"Component buildPageComponent(IGanttProject project, UIFacade uiFacade);"},
 {"id":755, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":390, "classname":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider", "methodid":3197, "methodname":"net.sourceforge.ganttproject.gui.options.model.OptionPageProvider.buildPageComponent(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"Component buildPageComponent(IGanttProject project, UIFacade uiFacade);"},
 {"id":756, "parametername":"GanttProject project", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":392, "classname":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean", "methodid":3203, "methodname":"net.sourceforge.ganttproject.gui.previousState.GanttCompareToPreviousStateBean.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public GanttCompareToPreviousStateBean(GanttProject project) {\r\n    myPreviousStates = project.getPreviouStates();\r\n    init();\r\n}"},
 {"id":757, "parametername":"GanttProject project", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":393, "classname":"net.sourceforge.ganttproject.gui.previousState.GanttDialogCompareToPreviousState", "methodid":3211, "methodname":"net.sourceforge.ganttproject.gui.previousState.GanttDialogCompareToPreviousState.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public GanttDialogCompareToPreviousState(GanttProject project) {\r\n    super(project, GanttLanguage.getInstance().getText(\"comparePrev\"), true);\r\n    myProject = project;\r\n    compareToPreviousBean = new GanttCompareToPreviousStateBean(project);\r\n    compareToPreviousBean.addActionListener(this);\r\n    Container cp = getContentPane();\r\n    cp.add(compareToPreviousBean, BorderLayout.CENTER);\r\n    this.pack();\r\n    setResizable(false);\r\n    DialogAligner.center(this, getParent());\r\n    applyComponentOrientation(lang.getComponentOrientation());\r\n}"},
 {"id":758, "parametername":"GanttProject project", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":394, "classname":"net.sourceforge.ganttproject.gui.previousState.GanttDialogSaveAsPreviousState", "methodid":3213, "methodname":"net.sourceforge.ganttproject.gui.previousState.GanttDialogSaveAsPreviousState.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public GanttDialogSaveAsPreviousState(GanttProject project) {\r\n    super(project, GanttLanguage.getInstance().getText(\"saveCurrent\"), true);\r\n    myProject = project;\r\n    previousStateBean = new GanttSaveAsPreviousStateBean(myProject);\r\n    previousStateBean.addActionListener(this);\r\n    Container cp = getContentPane();\r\n    cp.add(previousStateBean, BorderLayout.CENTER);\r\n    this.pack();\r\n    setResizable(false);\r\n    DialogAligner.center(this, getParent());\r\n    applyComponentOrientation(lang.getComponentOrientation());\r\n}"},
 {"id":759, "parametername":"GanttProject project", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":395, "classname":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean", "methodid":3217, "methodname":"net.sourceforge.ganttproject.gui.previousState.GanttSaveAsPreviousStateBean.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public GanttSaveAsPreviousStateBean(GanttProject project) {\r\n    myPreviousStates = project.getPreviouStates();\r\n    if ((myPreviousStates.size()) == 0) {\r\n        GanttSaveAsPreviousStateBean.defaultName = GanttLanguage.getInstance().getText(\"save\");\r\n        GanttSaveAsPreviousStateBean.count = 1;\r\n    }\r\n    init();\r\n}"},
 {"id":760, "parametername":"Role role", "parametertype":"net.sourceforge.ganttproject.roles.Role", "parameterclass":512, "classid":396, "classname":"net.sourceforge.ganttproject.gui.projectwizard.I18N", "methodid":3226, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.I18N.formatRoleForTooltip(net.sourceforge.ganttproject.roles.Role)", "isreturn":0, "sourcecode":"public String formatRoleForTooltip(Role role) {\r\n    return MessageFormat.format(\"<li>{0}</li>\", ((Object[]) (new String[]{ role.getName() })));\r\n}"},
 {"id":761, "parametername":"RoleSet roleSet", "parametertype":"net.sourceforge.ganttproject.roles.RoleSet", "parameterclass":520, "classid":396, "classname":"net.sourceforge.ganttproject.gui.projectwizard.I18N", "methodid":3231, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.I18N.getRoleSetDisplayName(net.sourceforge.ganttproject.roles.RoleSet)", "isreturn":0, "sourcecode":"public String getRoleSetDisplayName(RoleSet roleSet) {\r\n    return GanttLanguage.getInstance().getText(((\"roleSet.\" + (roleSet.getName())) + \".displayName\"));\r\n}"},
 {"id":762, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":397, "classname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizard", "methodid":3235, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizard.createNewProject(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public PrjInfos createNewProject(IGanttProject project, UIFacade uiFacade) {\r\n    RoleSet[] roleSets = project.getRoleManager().getRoleSets();\r\n    NewProjectWizardWindow newProjectWizard = new NewProjectWizardWindow(uiFacade, new I18N());\r\n    newProjectWizard.addProjectNamePage(project);\r\n    newProjectWizard.addRoleSetPage(roleSets);\r\n    newProjectWizard.addWeekendConfigurationPage(project.getActiveCalendar(), project);\r\n    newProjectWizard.show();\r\n    return new PrjInfos();\r\n}"},
 {"id":763, "parametername":"net.sourceforge.ganttproject.PrjInfos", "parametertype":"net.sourceforge.ganttproject.PrjInfos", "parameterclass":87, "classid":397, "classname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizard", "methodid":3235, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizard.createNewProject(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":1, "sourcecode":"public PrjInfos createNewProject(IGanttProject project, UIFacade uiFacade) {\r\n    RoleSet[] roleSets = project.getRoleManager().getRoleSets();\r\n    NewProjectWizardWindow newProjectWizard = new NewProjectWizardWindow(uiFacade, new I18N());\r\n    newProjectWizard.addProjectNamePage(project);\r\n    newProjectWizard.addRoleSetPage(roleSets);\r\n    newProjectWizard.addWeekendConfigurationPage(project.getActiveCalendar(), project);\r\n    newProjectWizard.show();\r\n    return new PrjInfos();\r\n}"},
 {"id":764, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":397, "classname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizard", "methodid":3235, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizard.createNewProject(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public PrjInfos createNewProject(IGanttProject project, UIFacade uiFacade) {\r\n    RoleSet[] roleSets = project.getRoleManager().getRoleSets();\r\n    NewProjectWizardWindow newProjectWizard = new NewProjectWizardWindow(uiFacade, new I18N());\r\n    newProjectWizard.addProjectNamePage(project);\r\n    newProjectWizard.addRoleSetPage(roleSets);\r\n    newProjectWizard.addWeekendConfigurationPage(project.getActiveCalendar(), project);\r\n    newProjectWizard.show();\r\n    return new PrjInfos();\r\n}"},
 {"id":765, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":398, "classname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow", "methodid":3236, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.projectwizard.I18N)", "isreturn":0, "sourcecode":"public NewProjectWizardWindow(UIFacade uiFacade, I18N i18n) {\r\n    super(uiFacade, i18n.getNewProjectWizardWindowTitle());\r\n    myI18n = i18n;\r\n}"},
 {"id":766, "parametername":"I18N i18n", "parametertype":"net.sourceforge.ganttproject.gui.projectwizard.I18N", "parameterclass":396, "classid":398, "classname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow", "methodid":3236, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.gui.projectwizard.I18N)", "isreturn":0, "sourcecode":"public NewProjectWizardWindow(UIFacade uiFacade, I18N i18n) {\r\n    super(uiFacade, i18n.getNewProjectWizardWindowTitle());\r\n    myI18n = i18n;\r\n}"},
 {"id":767, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":398, "classname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow", "methodid":3237, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow.addProjectNamePage(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"public void addProjectNamePage(IGanttProject project) {\r\n    WizardPage projectNamePage = new ProjectNamePage(null, project, myI18n);\r\n    addPage(projectNamePage);\r\n}"},
 {"id":768, "parametername":"GPCalendar calendar", "parametertype":"net.sourceforge.ganttproject.calendar.GPCalendar", "parameterclass":146, "classid":398, "classname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow", "methodid":3239, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow.addWeekendConfigurationPage(net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"public void addWeekendConfigurationPage(GPCalendar calendar, IGanttProject project) {\r\n    WizardPage weekendPage;\r\n    try {\r\n        weekendPage = new WeekendConfigurationPage(calendar, myI18n, project);\r\n        addPage(weekendPage);\r\n    } catch (Exception e) {\r\n        getUIFacade().showErrorDialog(e);\r\n    }\r\n}"},
 {"id":769, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":398, "classname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow", "methodid":3239, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.NewProjectWizardWindow.addWeekendConfigurationPage(net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"public void addWeekendConfigurationPage(GPCalendar calendar, IGanttProject project) {\r\n    WizardPage weekendPage;\r\n    try {\r\n        weekendPage = new WeekendConfigurationPage(calendar, myI18n, project);\r\n        addPage(weekendPage);\r\n    } catch (Exception e) {\r\n        getUIFacade().showErrorDialog(e);\r\n    }\r\n}"},
 {"id":770, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":399, "classname":"net.sourceforge.ganttproject.gui.projectwizard.ProjectNamePage", "methodid":3240, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.ProjectNamePage.-init-(java.awt.Frame,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.projectwizard.I18N)", "isreturn":0, "sourcecode":"public ProjectNamePage(Frame owner, IGanttProject project, I18N i18n) {\r\n    myProjectSettingsPanel = new ProjectSettingsPanel(owner, project);\r\n    myI18N = i18n;\r\n}"},
 {"id":771, "parametername":"I18N i18n", "parametertype":"net.sourceforge.ganttproject.gui.projectwizard.I18N", "parameterclass":396, "classid":399, "classname":"net.sourceforge.ganttproject.gui.projectwizard.ProjectNamePage", "methodid":3240, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.ProjectNamePage.-init-(java.awt.Frame,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.projectwizard.I18N)", "isreturn":0, "sourcecode":"public ProjectNamePage(Frame owner, IGanttProject project, I18N i18n) {\r\n    myProjectSettingsPanel = new ProjectSettingsPanel(owner, project);\r\n    myI18N = i18n;\r\n}"},
 {"id":772, "parametername":"I18N i18n", "parametertype":"net.sourceforge.ganttproject.gui.projectwizard.I18N", "parameterclass":396, "classid":401, "classname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage", "methodid":3244, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage.-init-(net.sourceforge.ganttproject.roles.RoleSet[],net.sourceforge.ganttproject.gui.projectwizard.I18N)", "isreturn":0, "sourcecode":"RoleSetPage(RoleSet[] roleSets, I18N i18n) {\r\n    myI18N = i18n;\r\n    myListModel = new RoleSetPage.RoleSetListModel(roleSets, i18n);\r\n}"},
 {"id":773, "parametername":"I18N i18n", "parametertype":"net.sourceforge.ganttproject.gui.projectwizard.I18N", "parameterclass":396, "classid":400, "classname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel", "methodid":3249, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel.-init-(net.sourceforge.ganttproject.roles.RoleSet[],net.sourceforge.ganttproject.gui.projectwizard.I18N)", "isreturn":0, "sourcecode":"RoleSetListModel(RoleSet[] roleSets, I18N i18n) {\r\n    myRoleSets = roleSets;\r\n    myI18n = i18n;\r\n}"},
 {"id":774, "parametername":"RoleSet roleSet", "parametertype":"net.sourceforge.ganttproject.roles.RoleSet", "parameterclass":520, "classid":400, "classname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel", "methodid":3255, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel.isTheOnlyEnabled(net.sourceforge.ganttproject.roles.RoleSet)", "isreturn":0, "sourcecode":"private boolean isTheOnlyEnabled(RoleSet roleSet) {\r\n    boolean result = true;\r\n    for (int i = 0; i < (myRoleSets.length); i++) {\r\n        if (((myRoleSets[i]) != roleSet) && (myRoleSets[i].isEnabled())) {\r\n            result = false;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":775, "parametername":"RoleSet roleSet", "parametertype":"net.sourceforge.ganttproject.roles.RoleSet", "parameterclass":520, "classid":400, "classname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel", "methodid":3250, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.RoleSetPage$RoleSetListModel.createTooltipText(net.sourceforge.ganttproject.roles.RoleSet)", "isreturn":0, "sourcecode":"private String createTooltipText(RoleSet roleSet) {\r\n    StringBuffer result = new StringBuffer();\r\n    result.append(myI18n.getRolesetTooltipHeader(roleSet.getName()));\r\n    Role[] roles = roleSet.getRoles();\r\n    for (int i = 0; i < (roles.length); i++) {\r\n        Role nextRole = roles[i];\r\n        result.append(myI18n.formatRoleForTooltip(nextRole));\r\n    }\r\n    result.append(myI18n.getRolesetTooltipFooter());\r\n    return result.toString();\r\n}"},
 {"id":776, "parametername":"GPCalendar calendar", "parametertype":"net.sourceforge.ganttproject.calendar.GPCalendar", "parameterclass":146, "classid":403, "classname":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage", "methodid":3257, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage.-init-(net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.gui.projectwizard.I18N,net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"WeekendConfigurationPage(GPCalendar calendar, I18N i18n, IGanttProject project) throws Exception {\r\n    myCalendar = calendar;\r\n    myCalendar.getPublicHolidays().clear();\r\n    myProject = ((GanttProject) (project));\r\n    myI18N = i18n;\r\n    String[] dayNames = myI18N.getDayNames();\r\n    myPanel = new JPanel(new BorderLayout());\r\n    choosePublicHoliday = new JLabel(GanttLanguage.getInstance().getText(\"choosePublicHoliday\"));\r\n    chooseWeekend = new JLabel(GanttLanguage.getInstance().getText(\"chooseWeekend\"));\r\n    JCCalendar = new JComboBox();\r\n    JCCalendar.addItem(GanttLanguage.getInstance().getText(\"none\"));\r\n    XMLCalendarOpen open = new XMLCalendarOpen();\r\n    open.setCalendars();\r\n    String[] labels = open.getLabels();\r\n    calendars = open.getCalendarResources();\r\n    for (int i = 0; i < (labels.length); i++)\r\n        JCCalendar.addItem(labels[i]);\r\n\r\n    JCCalendar.addActionListener(this);\r\n    JPanel publicHolidayPanel = new JPanel(new BorderLayout());\r\n    publicHolidayPanel.add(choosePublicHoliday, BorderLayout.WEST);\r\n    publicHolidayPanel.add(JCCalendar);\r\n    myBox.add(publicHolidayPanel);\r\n    myBox.add(new JPanel());\r\n    Box cb = Box.createVerticalBox();\r\n    /* Table to keep all the JCheckBoxes with days of the week.\n    It is used to check if in project creation dialog all days are marked as weekend. If they are, day selected \n    last will be unmarked. See class CheckBoxAction.\n\n    If you know better solution, do not hesitate to replace this code.\n     */\r\n    JCheckBox[] allCheckBoxes = new JCheckBox[7];\r\n    cb.add(chooseWeekend);\r\n    int nextDay = Calendar.MONDAY;\r\n    for (int i = 0; i < 7; i++) {\r\n        JCheckBox nextCheckBox = new JCheckBox();\r\n        nextCheckBox.setSelected(((calendar.getWeekDayType(nextDay)) == (GPCalendar.DayType.WEEKEND)));\r\n        nextCheckBox.setAction(new WeekendConfigurationPage.CheckBoxAction(nextDay, dayNames[(nextDay - 1)], nextCheckBox.getModel(), allCheckBoxes));\r\n        cb.add(nextCheckBox);\r\n        allCheckBoxes[i] = nextCheckBox;\r\n        if ((++nextDay) >= 8) {\r\n            nextDay = 1;\r\n        }\r\n    }\r\n    JPanel weekendPanel = new JPanel(new BorderLayout());\r\n    weekendPanel.add(cb, BorderLayout.WEST);\r\n    myBox.add(weekendPanel);\r\n    myBox.add(new JPanel());\r\n    JPanel projectPanel = new JPanel(new BorderLayout());\r\n    projectPanel.add(myBox, BorderLayout.NORTH);\r\n    myPanel.add(projectPanel);\r\n    // addUsingGBL(myPanel, myBox, gbc, 0, 1, 4, 4);\r\n}"},
 {"id":777, "parametername":"I18N i18n", "parametertype":"net.sourceforge.ganttproject.gui.projectwizard.I18N", "parameterclass":396, "classid":403, "classname":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage", "methodid":3257, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage.-init-(net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.gui.projectwizard.I18N,net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"WeekendConfigurationPage(GPCalendar calendar, I18N i18n, IGanttProject project) throws Exception {\r\n    myCalendar = calendar;\r\n    myCalendar.getPublicHolidays().clear();\r\n    myProject = ((GanttProject) (project));\r\n    myI18N = i18n;\r\n    String[] dayNames = myI18N.getDayNames();\r\n    myPanel = new JPanel(new BorderLayout());\r\n    choosePublicHoliday = new JLabel(GanttLanguage.getInstance().getText(\"choosePublicHoliday\"));\r\n    chooseWeekend = new JLabel(GanttLanguage.getInstance().getText(\"chooseWeekend\"));\r\n    JCCalendar = new JComboBox();\r\n    JCCalendar.addItem(GanttLanguage.getInstance().getText(\"none\"));\r\n    XMLCalendarOpen open = new XMLCalendarOpen();\r\n    open.setCalendars();\r\n    String[] labels = open.getLabels();\r\n    calendars = open.getCalendarResources();\r\n    for (int i = 0; i < (labels.length); i++)\r\n        JCCalendar.addItem(labels[i]);\r\n\r\n    JCCalendar.addActionListener(this);\r\n    JPanel publicHolidayPanel = new JPanel(new BorderLayout());\r\n    publicHolidayPanel.add(choosePublicHoliday, BorderLayout.WEST);\r\n    publicHolidayPanel.add(JCCalendar);\r\n    myBox.add(publicHolidayPanel);\r\n    myBox.add(new JPanel());\r\n    Box cb = Box.createVerticalBox();\r\n    /* Table to keep all the JCheckBoxes with days of the week.\n    It is used to check if in project creation dialog all days are marked as weekend. If they are, day selected \n    last will be unmarked. See class CheckBoxAction.\n\n    If you know better solution, do not hesitate to replace this code.\n     */\r\n    JCheckBox[] allCheckBoxes = new JCheckBox[7];\r\n    cb.add(chooseWeekend);\r\n    int nextDay = Calendar.MONDAY;\r\n    for (int i = 0; i < 7; i++) {\r\n        JCheckBox nextCheckBox = new JCheckBox();\r\n        nextCheckBox.setSelected(((calendar.getWeekDayType(nextDay)) == (GPCalendar.DayType.WEEKEND)));\r\n        nextCheckBox.setAction(new WeekendConfigurationPage.CheckBoxAction(nextDay, dayNames[(nextDay - 1)], nextCheckBox.getModel(), allCheckBoxes));\r\n        cb.add(nextCheckBox);\r\n        allCheckBoxes[i] = nextCheckBox;\r\n        if ((++nextDay) >= 8) {\r\n            nextDay = 1;\r\n        }\r\n    }\r\n    JPanel weekendPanel = new JPanel(new BorderLayout());\r\n    weekendPanel.add(cb, BorderLayout.WEST);\r\n    myBox.add(weekendPanel);\r\n    myBox.add(new JPanel());\r\n    JPanel projectPanel = new JPanel(new BorderLayout());\r\n    projectPanel.add(myBox, BorderLayout.NORTH);\r\n    myPanel.add(projectPanel);\r\n    // addUsingGBL(myPanel, myBox, gbc, 0, 1, 4, 4);\r\n}"},
 {"id":778, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":403, "classname":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage", "methodid":3257, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.WeekendConfigurationPage.-init-(net.sourceforge.ganttproject.calendar.GPCalendar,net.sourceforge.ganttproject.gui.projectwizard.I18N,net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"WeekendConfigurationPage(GPCalendar calendar, I18N i18n, IGanttProject project) throws Exception {\r\n    myCalendar = calendar;\r\n    myCalendar.getPublicHolidays().clear();\r\n    myProject = ((GanttProject) (project));\r\n    myI18N = i18n;\r\n    String[] dayNames = myI18N.getDayNames();\r\n    myPanel = new JPanel(new BorderLayout());\r\n    choosePublicHoliday = new JLabel(GanttLanguage.getInstance().getText(\"choosePublicHoliday\"));\r\n    chooseWeekend = new JLabel(GanttLanguage.getInstance().getText(\"chooseWeekend\"));\r\n    JCCalendar = new JComboBox();\r\n    JCCalendar.addItem(GanttLanguage.getInstance().getText(\"none\"));\r\n    XMLCalendarOpen open = new XMLCalendarOpen();\r\n    open.setCalendars();\r\n    String[] labels = open.getLabels();\r\n    calendars = open.getCalendarResources();\r\n    for (int i = 0; i < (labels.length); i++)\r\n        JCCalendar.addItem(labels[i]);\r\n\r\n    JCCalendar.addActionListener(this);\r\n    JPanel publicHolidayPanel = new JPanel(new BorderLayout());\r\n    publicHolidayPanel.add(choosePublicHoliday, BorderLayout.WEST);\r\n    publicHolidayPanel.add(JCCalendar);\r\n    myBox.add(publicHolidayPanel);\r\n    myBox.add(new JPanel());\r\n    Box cb = Box.createVerticalBox();\r\n    /* Table to keep all the JCheckBoxes with days of the week.\n    It is used to check if in project creation dialog all days are marked as weekend. If they are, day selected \n    last will be unmarked. See class CheckBoxAction.\n\n    If you know better solution, do not hesitate to replace this code.\n     */\r\n    JCheckBox[] allCheckBoxes = new JCheckBox[7];\r\n    cb.add(chooseWeekend);\r\n    int nextDay = Calendar.MONDAY;\r\n    for (int i = 0; i < 7; i++) {\r\n        JCheckBox nextCheckBox = new JCheckBox();\r\n        nextCheckBox.setSelected(((calendar.getWeekDayType(nextDay)) == (GPCalendar.DayType.WEEKEND)));\r\n        nextCheckBox.setAction(new WeekendConfigurationPage.CheckBoxAction(nextDay, dayNames[(nextDay - 1)], nextCheckBox.getModel(), allCheckBoxes));\r\n        cb.add(nextCheckBox);\r\n        allCheckBoxes[i] = nextCheckBox;\r\n        if ((++nextDay) >= 8) {\r\n            nextDay = 1;\r\n        }\r\n    }\r\n    JPanel weekendPanel = new JPanel(new BorderLayout());\r\n    weekendPanel.add(cb, BorderLayout.WEST);\r\n    myBox.add(weekendPanel);\r\n    myBox.add(new JPanel());\r\n    JPanel projectPanel = new JPanel(new BorderLayout());\r\n    projectPanel.add(myBox, BorderLayout.NORTH);\r\n    myPanel.add(projectPanel);\r\n    // addUsingGBL(myPanel, myBox, gbc, 0, 1, 4, 4);\r\n}"},
 {"id":779, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":406, "classname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl", "methodid":3267, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,java.lang.String)", "isreturn":0, "sourcecode":"public WizardImpl(UIFacade uiFacade, String title) {\r\n    // super(frame, title, true);\r\n    myUIFacade = uiFacade;\r\n    myTitle = title;\r\n    myCardLayout = new CardLayout();\r\n    myPagesContainer = new JPanel(myCardLayout);\r\n    myNextAction = new WizardImpl.NextAction();\r\n    myBackAction = new WizardImpl.BackAction();\r\n}"},
 {"id":780, "parametername":"WizardPage page", "parametertype":"net.sourceforge.ganttproject.gui.projectwizard.WizardPage", "parameterclass":407, "classid":406, "classname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl", "methodid":3268, "methodname":"net.sourceforge.ganttproject.gui.projectwizard.WizardImpl.addPage(net.sourceforge.ganttproject.gui.projectwizard.WizardPage)", "isreturn":0, "sourcecode":"protected void addPage(WizardPage page) {\r\n    myPages.add(page);\r\n}"},
 {"id":781, "parametername":"ScrollingListener listener", "parametertype":"net.sourceforge.ganttproject.gui.scrolling.ScrollingListener", "parameterclass":408, "classid":409, "classname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager", "methodid":3288, "methodname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager.addScrollingListener(net.sourceforge.ganttproject.gui.scrolling.ScrollingListener)", "isreturn":0, "sourcecode":"void addScrollingListener(ScrollingListener listener);"},
 {"id":782, "parametername":"ScrollingListener listener", "parametertype":"net.sourceforge.ganttproject.gui.scrolling.ScrollingListener", "parameterclass":408, "classid":409, "classname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager", "methodid":3289, "methodname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManager.removeScrollingListener(net.sourceforge.ganttproject.gui.scrolling.ScrollingListener)", "isreturn":0, "sourcecode":"void removeScrollingListener(ScrollingListener listener);"},
 {"id":783, "parametername":"ScrollingListener listener", "parametertype":"net.sourceforge.ganttproject.gui.scrolling.ScrollingListener", "parameterclass":408, "classid":410, "classname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManagerImpl", "methodid":3294, "methodname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManagerImpl.addScrollingListener(net.sourceforge.ganttproject.gui.scrolling.ScrollingListener)", "isreturn":0, "sourcecode":"public void addScrollingListener(ScrollingListener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":784, "parametername":"ScrollingListener listener", "parametertype":"net.sourceforge.ganttproject.gui.scrolling.ScrollingListener", "parameterclass":408, "classid":410, "classname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManagerImpl", "methodid":3295, "methodname":"net.sourceforge.ganttproject.gui.scrolling.ScrollingManagerImpl.removeScrollingListener(net.sourceforge.ganttproject.gui.scrolling.ScrollingListener)", "isreturn":0, "sourcecode":"public void removeScrollingListener(ScrollingListener listener) {\r\n    myListeners.remove(listener);\r\n}"},
 {"id":785, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":411, "classname":"net.sourceforge.ganttproject.gui.server.ConnectionPanel", "methodid":3299, "methodname":"net.sourceforge.ganttproject.gui.server.ConnectionPanel.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic ConnectionPanel(GanttProject parent) {\r\n    super(GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"openFromServer\")), GanttLanguage.getInstance().getText(\"settingsConnection\"), parent);\r\n    Box vbServer = Box.createVerticalBox();\r\n    // url textfield\r\n    JPanel urlPanel = new JPanel(new BorderLayout());\r\n    urlPanel.add(new JLabel(language.getText(\"fileFromServer\")), BorderLayout.WEST);\r\n    // urlPanel.add(tfUrl = new JTextField(), BorderLayout.CENTER);\r\n    // vb.add(urlPanel);\r\n    // vb.add(new JPanel());\r\n    vbServer.add(urlPanel);\r\n    vbServer.add((tfUrl = new JTextField(\"http://\")));\r\n    vbServer.add(new JPanel());\r\n    // login textfield\r\n    JPanel loginPanel = new JPanel(new BorderLayout());\r\n    loginPanel.add(new JLabel(language.getText(\"userName\")), BorderLayout.WEST);\r\n    /* loginPanel.add(tfLogin = new JTextField(), BorderLayout.CENTER);\n    vb.add(loginPanel); vb.add(new JPanel());\n     */\r\n    vbServer.add(loginPanel);\r\n    vbServer.add((tfLogin = new JTextField()));\r\n    vbServer.add(new JPanel());\r\n    // password textfield\r\n    JPanel passwordPanel = new JPanel(new BorderLayout());\r\n    passwordPanel.add(new JLabel(language.getText(\"userName\")), BorderLayout.WEST);\r\n    /* passwordPanel.add(tfPassword = new JPasswordField(),\n    BorderLayout.CENTER); vb.add(passwordPanel); vb.add(new JPanel());\n     */\r\n    vbServer.add(passwordPanel);\r\n    vbServer.add((tfPassword = new JPasswordField()));\r\n    vbServer.add(new JPanel());\r\n    JPanel serverPanel = new JPanel(new BorderLayout());\r\n    serverPanel.add(vbServer, BorderLayout.NORTH);\r\n    vb.add(serverPanel);\r\n    applyComponentOrientation(language.getComponentOrientation());\r\n}"},
 {"id":786, "parametername":"GanttProject parent", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":412, "classname":"net.sourceforge.ganttproject.gui.server.ServerDialog", "methodid":3302, "methodname":"net.sourceforge.ganttproject.gui.server.ServerDialog.-init-(net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic ServerDialog(GanttProject parent) {\r\n    super(parent, GanttProject.correctLabel(GanttLanguage.getInstance().getText(\"webServer\")), true, new ConnectionPanel(parent));\r\n}"},
 {"id":787, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":413, "classname":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel", "methodid":3305, "methodname":"net.sourceforge.ganttproject.gui.taskproperties.CommonPanel.-init-(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public CommonPanel(Task task) {\r\n    language = GanttLanguage.getInstance();\r\n    myTask = task;\r\n}"},
 {"id":788, "parametername":"CustomColumnsManager manager", "parametertype":"net.sourceforge.ganttproject.task.CustomColumnsManager", "parameterclass":534, "classid":415, "classname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel", "methodid":3313, "methodname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel.-init-(net.sourceforge.ganttproject.task.CustomColumnsManager,net.sourceforge.ganttproject.task.CustomColumnsStorage,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public CustomColumnsPanel(CustomColumnsManager manager, CustomColumnsStorage customColHandler, UIFacade uifacade) {\r\n    myColumnManager = manager;\r\n    customColumnStorage = customColHandler;\r\n    myUIfacade = uifacade;\r\n    this.initComponents();\r\n}"},
 {"id":789, "parametername":"CustomColumnsStorage customColHandler", "parametertype":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "parameterclass":535, "classid":415, "classname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel", "methodid":3313, "methodname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel.-init-(net.sourceforge.ganttproject.task.CustomColumnsManager,net.sourceforge.ganttproject.task.CustomColumnsStorage,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public CustomColumnsPanel(CustomColumnsManager manager, CustomColumnsStorage customColHandler, UIFacade uifacade) {\r\n    myColumnManager = manager;\r\n    customColumnStorage = customColHandler;\r\n    myUIfacade = uifacade;\r\n    this.initComponents();\r\n}"},
 {"id":790, "parametername":"UIFacade uifacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":415, "classname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel", "methodid":3313, "methodname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel.-init-(net.sourceforge.ganttproject.task.CustomColumnsManager,net.sourceforge.ganttproject.task.CustomColumnsStorage,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public CustomColumnsPanel(CustomColumnsManager manager, CustomColumnsStorage customColHandler, UIFacade uifacade) {\r\n    myColumnManager = manager;\r\n    customColumnStorage = customColHandler;\r\n    myUIfacade = uifacade;\r\n    this.initComponents();\r\n}"},
 {"id":791, "parametername":"CustomColumnsStorage ccHandler", "parametertype":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "parameterclass":535, "classid":414, "classname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel", "methodid":3317, "methodname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel.-init-(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"public CustomColumnTableModel(CustomColumnsStorage ccHandler) {\r\n    customColumnsHandler = ccHandler;\r\n    this.columnIdentifiers = titles;\r\n    this.dataVector = new Vector();\r\n    Iterator it = customColumnsHandler.getCustomColums().iterator();\r\n    while (it.hasNext()) {\r\n        CustomColumn cc = ((CustomColumn) (it.next()));\r\n        Object[] o = new Object[]{ cc.getName(), cc.getType(), cc.getDefaultValue() };\r\n        this.addRow(o);\r\n    } \r\n}"},
 {"id":792, "parametername":"CustomColumnsStorage cch", "parametertype":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "parameterclass":535, "classid":414, "classname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel", "methodid":3322, "methodname":"net.sourceforge.ganttproject.gui.taskproperties.CustomColumnsPanel$CustomColumnTableModel.refreshData(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"public void refreshData(CustomColumnsStorage cch) {\r\n    customColumnsHandler = cch;\r\n    this.dataVector = new Vector();\r\n    Iterator it = customColumnsHandler.getCustomColums().iterator();\r\n    while (it.hasNext()) {\r\n        CustomColumn cc = ((CustomColumn) (it.next()));\r\n        Object[] o = new Object[]{ cc.getName(), cc.getType(), cc.getDefaultValue() };\r\n        this.addRow(o);\r\n    } \r\n}"},
 {"id":793, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":417, "classname":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel", "methodid":3324, "methodname":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel.-init-(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public DependencyTableModel(Task task) {\r\n    myDependencies = new ArrayList(Arrays.asList(task.getDependenciesAsDependant().toArray()));\r\n    myMutator = task.getManager().getDependencyCollection().createMutator();\r\n    myTask = task;\r\n}"},
 {"id":794, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":416, "classname":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel$TaskComboItem", "methodid":3334, "methodname":"net.sourceforge.ganttproject.gui.taskproperties.DependencyTableModel$TaskComboItem.-init-(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"TaskComboItem(Task task) {\r\n    myTask = task;\r\n    myText = ((\"[#\" + (task.getTaskID())) + \"] \") + (task.getName());\r\n}"},
 {"id":795, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":420, "classname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel", "methodid":3338, "methodname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.resource.HumanResourceManager,net.sourceforge.ganttproject.roles.RoleManager,boolean)", "isreturn":0, "sourcecode":"public TaskAllocationsPanel(Task task, HumanResourceManager hrManager, RoleManager roleMgr, boolean onlyOneTask) {\r\n    super(task);\r\n    myHRManager = hrManager;\r\n    myRoleManager = roleMgr;\r\n    this.onlyOneTask = onlyOneTask;\r\n}"},
 {"id":796, "parametername":"HumanResourceManager hrManager", "parametertype":"net.sourceforge.ganttproject.resource.HumanResourceManager", "parameterclass":501, "classid":420, "classname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel", "methodid":3338, "methodname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.resource.HumanResourceManager,net.sourceforge.ganttproject.roles.RoleManager,boolean)", "isreturn":0, "sourcecode":"public TaskAllocationsPanel(Task task, HumanResourceManager hrManager, RoleManager roleMgr, boolean onlyOneTask) {\r\n    super(task);\r\n    myHRManager = hrManager;\r\n    myRoleManager = roleMgr;\r\n    this.onlyOneTask = onlyOneTask;\r\n}"},
 {"id":797, "parametername":"RoleManager roleMgr", "parametertype":"net.sourceforge.ganttproject.roles.RoleManager", "parameterclass":517, "classid":420, "classname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel", "methodid":3338, "methodname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.resource.HumanResourceManager,net.sourceforge.ganttproject.roles.RoleManager,boolean)", "isreturn":0, "sourcecode":"public TaskAllocationsPanel(Task task, HumanResourceManager hrManager, RoleManager roleMgr, boolean onlyOneTask) {\r\n    super(task);\r\n    myHRManager = hrManager;\r\n    myRoleManager = roleMgr;\r\n    this.onlyOneTask = onlyOneTask;\r\n}"},
 {"id":798, "parametername":"ResourceAssignmentCollection assignments", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection", "parameterclass":541, "classid":420, "classname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel", "methodid":3340, "methodname":"net.sourceforge.ganttproject.gui.taskproperties.TaskAllocationsPanel.constructResourcesPanel(net.sourceforge.ganttproject.task.ResourceAssignmentCollection)", "isreturn":0, "sourcecode":"private void constructResourcesPanel(ResourceAssignmentCollection assignments) {\r\n    resourcesPanel = new JPanel(new GridBagLayout());\r\n    myResourcesTableModel = new ResourcesTableModel(assignments);\r\n    resourcesTable = new JXTable(myResourcesTableModel);\r\n    setUpResourcesComboColumn(resourcesTable);// set column editor\r\n\r\n    setUpCoordinatorBooleanColumn(resourcesTable);\r\n    setUpRolesComboColumn(resourcesTable);\r\n    resourcesTable.setRowHeight(23);\r\n    resourcesTable.getColumnModel().getColumn(0).setPreferredWidth(10);\r\n    resourcesTable.getColumnModel().getColumn(1).setPreferredWidth(240);\r\n    resourcesTable.getColumnModel().getColumn(2).setPreferredWidth(60);\r\n    resourcesTable.getColumnModel().getColumn(3).setPreferredWidth(60);\r\n    resourcesTable.getColumnModel().getColumn(4).setPreferredWidth(100);\r\n    resourcesTable.setHighlighters(new org.jdesktop.swing.decorator.HighlighterPipeline(new Highlighter[]{ new Highlighter(new Color(255, 255, 255), null) }));\r\n    resourcesScrollPane = new JScrollPane(resourcesTable);\r\n    resourcesScrollPane.setPreferredSize(new Dimension(500, 130));\r\n    JPanel secondResourcesScrollPane = new JPanel();\r\n    secondResourcesScrollPane.setBorder(new TitledBorder(new EtchedBorder(), GanttProject.correctLabel(getLanguage().getText(\"human\"))));\r\n    secondResourcesScrollPane.add(resourcesScrollPane);\r\n    JButton bremove = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/delete_16.gif\")));\r\n    bremove.setToolTipText(GanttProject.getToolTip(getLanguage().getText(\"removeResources\")));\r\n    bremove.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent evt) {\r\n            int[] selectedRow = resourcesTable.getSelectedRows();\r\n            for (int i = 0; i < (selectedRow.length); ++i) {\r\n                resourcesTable.getModel().setValueAt(null, selectedRow[i], 1);\r\n            }\r\n        }\r\n    });\r\n    secondResourcesScrollPane.add(bremove);\r\n    GridBagConstraints gbc = new GridBagConstraints();\r\n    gbc.anchor = GridBagConstraints.WEST;\r\n    gbc.insets.right = 15;\r\n    gbc.insets.left = 10;\r\n    gbc.insets.top = 10;\r\n    gbc.weighty = 0;\r\n    JPanel commonFields = setupCommonFields(onlyOneTask);\r\n    addUsingGBL(resourcesPanel, commonFields, gbc, 0, 0, 1, 1);\r\n    gbc.gridx = 0;\r\n    gbc.gridy = 1;\r\n    gbc.gridwidth = 8;\r\n    gbc.gridheight = 1;\r\n    gbc.weighty = 1;\r\n    resourcesPanel.add(secondResourcesScrollPane, gbc);\r\n}"},
 {"id":799, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":421, "classname":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel", "methodid":3348, "methodname":"net.sourceforge.ganttproject.gui.taskproperties.TaskDependenciesPanel.-init-(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public TaskDependenciesPanel(Task task) {\r\n    super(task);\r\n    myTaskManager = task.getManager();\r\n}"},
 {"id":800, "parametername":"ZoomManager manager", "parametertype":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "parameterclass":425, "classid":422, "classname":"net.sourceforge.ganttproject.gui.zoom.ZoomEvent", "methodid":3357, "methodname":"net.sourceforge.ganttproject.gui.zoom.ZoomEvent.-init-(net.sourceforge.ganttproject.gui.zoom.ZoomManager,net.sourceforge.ganttproject.gui.zoom.ZoomManager$ZoomState)", "isreturn":0, "sourcecode":"ZoomEvent(ZoomManager manager, ZoomManager.ZoomState newZoomState) {\r\n    super(manager);\r\n    myNewZoomState = newZoomState;\r\n}"},
 {"id":801, "parametername":"ZoomManager.ZoomState newZoomState", "parametertype":"net.sourceforge.ganttproject.gui.zoom.ZoomManager$ZoomState", "parameterclass":424, "classid":422, "classname":"net.sourceforge.ganttproject.gui.zoom.ZoomEvent", "methodid":3357, "methodname":"net.sourceforge.ganttproject.gui.zoom.ZoomEvent.-init-(net.sourceforge.ganttproject.gui.zoom.ZoomManager,net.sourceforge.ganttproject.gui.zoom.ZoomManager$ZoomState)", "isreturn":0, "sourcecode":"ZoomEvent(ZoomManager manager, ZoomManager.ZoomState newZoomState) {\r\n    super(manager);\r\n    myNewZoomState = newZoomState;\r\n}"},
 {"id":802, "parametername":"ZoomEvent e", "parametertype":"net.sourceforge.ganttproject.gui.zoom.ZoomEvent", "parameterclass":422, "classid":423, "classname":"net.sourceforge.ganttproject.gui.zoom.ZoomListener", "methodid":3359, "methodname":"net.sourceforge.ganttproject.gui.zoom.ZoomListener.zoomChanged(net.sourceforge.ganttproject.gui.zoom.ZoomEvent)", "isreturn":0, "sourcecode":"void zoomChanged(ZoomEvent e);"},
 {"id":803, "parametername":"TimeUnitPair timeUnitPair", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitPair", "parameterclass":638, "classid":424, "classname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager$ZoomState", "methodid":3371, "methodname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager$ZoomState.-init-(net.sourceforge.ganttproject.time.TimeUnitPair,int,int)", "isreturn":0, "sourcecode":"ZoomState(TimeUnitPair timeUnitPair, int bottomUnitWidth, int stateNumber) {\r\n    myTimeUnitPair = timeUnitPair;\r\n    myBottomUnitWidth = bottomUnitWidth;\r\n    myStateNumber = stateNumber;\r\n}"},
 {"id":804, "parametername":"TimeUnitStack timeUnitStack", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitStack", "parameterclass":639, "classid":425, "classname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "methodid":3361, "methodname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager.-init-(net.sourceforge.ganttproject.time.TimeUnitStack)", "isreturn":0, "sourcecode":"public ZoomManager(TimeUnitStack timeUnitStack) {\r\n    myTimeUnitStack = timeUnitStack;\r\n    TimeUnitPair[] unitPairs = myTimeUnitStack.getTimeUnitPairs();\r\n    myZoomStates = new ZoomManager.ZoomState[unitPairs.length];\r\n    int width1 = 60;\r\n    int width2 = 40;\r\n    for (int i = 0; i < (unitPairs.length); i++) {\r\n        myZoomStates[i] = new ZoomManager.ZoomState(unitPairs[i], width1, i);\r\n        // myZoomStates[i*2+1] = new ZoomState(unitPairs[i], width2);\r\n        float scale = 2 / 3;\r\n        if (i < ((unitPairs.length) - 1)) {\r\n            float defaults1 = unitPairs[i].getBottomTimeUnit().getAtomCount(myTimeUnitStack.getDefaultTimeUnit());\r\n            float defaults2 = unitPairs[(i + 1)].getBottomTimeUnit().getAtomCount(myTimeUnitStack.getDefaultTimeUnit());\r\n            scale = (2 * defaults2) / (3 * defaults1);\r\n        }\r\n        width1 = ((int) (width1 * scale));\r\n    }\r\n}"},
 {"id":805, "parametername":"ZoomListener listener", "parametertype":"net.sourceforge.ganttproject.gui.zoom.ZoomListener", "parameterclass":423, "classid":425, "classname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "methodid":3362, "methodname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager.addZoomListener(net.sourceforge.ganttproject.gui.zoom.ZoomListener)", "isreturn":0, "sourcecode":"public void addZoomListener(ZoomListener listener) {\r\n    myListeners.add(listener);\r\n    listener.zoomChanged(new ZoomEvent(this, myZoomStates[myZooming]));\r\n}"},
 {"id":806, "parametername":"ZoomListener listener", "parametertype":"net.sourceforge.ganttproject.gui.zoom.ZoomListener", "parameterclass":423, "classid":425, "classname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager", "methodid":3367, "methodname":"net.sourceforge.ganttproject.gui.zoom.ZoomManager.removeZoomListener(net.sourceforge.ganttproject.gui.zoom.ZoomListener)", "isreturn":0, "sourcecode":"public void removeZoomListener(ZoomListener listener) {\r\n    myListeners.remove(listener);\r\n}"},
 {"id":807, "parametername":"ImportFileWizardImpl.State state", "parametertype":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl$State", "parameterclass":428, "classid":426, "classname":"net.sourceforge.ganttproject.importer.FileChooserPage", "methodid":3375, "methodname":"net.sourceforge.ganttproject.importer.FileChooserPage.-init-(net.sourceforge.ganttproject.importer.ImportFileWizardImpl$State)", "isreturn":0, "sourcecode":"public FileChooserPage(ImportFileWizardImpl.State state) {\r\n    myState = state;\r\n}"},
 {"id":808, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":427, "classname":"net.sourceforge.ganttproject.importer.ImportFileAction", "methodid":3382, "methodname":"net.sourceforge.ganttproject.importer.ImportFileAction.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public ImportFileAction(UIFacade uiFacade, GanttProject project) {\r\n    super(null, \"16\");\r\n    /* putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_I,\n    MENU_MASK));\n     */\r\n    myUIFacade = uiFacade;\r\n    myProject = project;\r\n}"},
 {"id":809, "parametername":"GanttProject project", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":427, "classname":"net.sourceforge.ganttproject.importer.ImportFileAction", "methodid":3382, "methodname":"net.sourceforge.ganttproject.importer.ImportFileAction.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public ImportFileAction(UIFacade uiFacade, GanttProject project) {\r\n    super(null, \"16\");\r\n    /* putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_I,\n    MENU_MASK));\n     */\r\n    myUIFacade = uiFacade;\r\n    myProject = project;\r\n}"},
 {"id":810, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":429, "classname":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl", "methodid":3387, "methodname":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public ImportFileWizardImpl(UIFacade uiFacade, GanttProject project) {\r\n    super(uiFacade, GanttLanguage.getInstance().getText(\"importWizard.dialog.title\"));\r\n    myProject = project;\r\n    myState = new ImportFileWizardImpl.State();\r\n    Importer[] importers = getImporters();\r\n    addPage(new ImporterChooserPage(importers, myState));\r\n    addPage(new FileChooserPage(myState));\r\n}"},
 {"id":811, "parametername":"GanttProject project", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":429, "classname":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl", "methodid":3387, "methodname":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl.-init-(net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.GanttProject)", "isreturn":0, "sourcecode":"public ImportFileWizardImpl(UIFacade uiFacade, GanttProject project) {\r\n    super(uiFacade, GanttLanguage.getInstance().getText(\"importWizard.dialog.title\"));\r\n    myProject = project;\r\n    myState = new ImportFileWizardImpl.State();\r\n    Importer[] importers = getImporters();\r\n    addPage(new ImporterChooserPage(importers, myState));\r\n    addPage(new FileChooserPage(myState));\r\n}"},
 {"id":812, "parametername":"GanttProject project", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":430, "classname":"net.sourceforge.ganttproject.importer.Importer", "methodid":3400, "methodname":"net.sourceforge.ganttproject.importer.Importer.run(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "isreturn":0, "sourcecode":"void run(GanttProject project, UIFacade facade, File selectedFile, boolean merge);"},
 {"id":813, "parametername":"UIFacade facade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":430, "classname":"net.sourceforge.ganttproject.importer.Importer", "methodid":3400, "methodname":"net.sourceforge.ganttproject.importer.Importer.run(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "isreturn":0, "sourcecode":"void run(GanttProject project, UIFacade facade, File selectedFile, boolean merge);"},
 {"id":814, "parametername":"ImportFileWizardImpl.State state", "parametertype":"net.sourceforge.ganttproject.importer.ImportFileWizardImpl$State", "parameterclass":428, "classid":432, "classname":"net.sourceforge.ganttproject.importer.ImporterChooserPage", "methodid":3405, "methodname":"net.sourceforge.ganttproject.importer.ImporterChooserPage.-init-(net.sourceforge.ganttproject.importer.Importer[],net.sourceforge.ganttproject.importer.ImportFileWizardImpl$State)", "isreturn":0, "sourcecode":"ImporterChooserPage(Importer[] importers, ImportFileWizardImpl.State state) {\r\n    myImporters = importers;\r\n    myState = state;\r\n}"},
 {"id":815, "parametername":"GanttOptions options", "parametertype":"net.sourceforge.ganttproject.GanttOptions", "parameterclass":48, "classid":433, "classname":"net.sourceforge.ganttproject.importer.ImporterFactory", "methodid":3411, "methodname":"net.sourceforge.ganttproject.importer.ImporterFactory.createFileChooser(net.sourceforge.ganttproject.GanttOptions)", "isreturn":0, "sourcecode":"public static JFileChooser createFileChooser(GanttOptions options) {\r\n    JFileChooser fc = new JFileChooser(options.getWorkingDir());\r\n    FileFilter[] filefilters = fc.getChoosableFileFilters();\r\n    for (int i = 0; i < (filefilters.length); i++) {\r\n        fc.removeChoosableFileFilter(filefilters[i]);\r\n    }\r\n    fc.addChoosableFileFilter(ImporterFactory.ganFilter);\r\n    fc.addChoosableFileFilter(ImporterFactory.mppFilter);\r\n    fc.addChoosableFileFilter(ImporterFactory.txtFilter);\r\n    // fc.addChoosableFileFilter(plannerFilter);\r\n    return fc;\r\n}"},
 {"id":816, "parametername":"GanttProject targetProject", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":434, "classname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject", "methodid":3423, "methodname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"BufferProject(GanttProject targetProject, UIFacade uiFacade) {\r\n    myDocumentManager = new DocumentCreator(this, uiFacade, this) {\r\n        protected TableHeaderUIFacade getVisibleFields() {\r\n            return myVisibleFields;\r\n        }\r\n    };\r\n    myTaskManager = targetProject.getTaskManager().emptyClone();\r\n    myUIfacade = uiFacade;\r\n}"},
 {"id":817, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":434, "classname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject", "methodid":3423, "methodname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$BufferProject.-init-(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"BufferProject(GanttProject targetProject, UIFacade uiFacade) {\r\n    myDocumentManager = new DocumentCreator(this, uiFacade, this) {\r\n        protected TableHeaderUIFacade getVisibleFields() {\r\n            return myVisibleFields;\r\n        }\r\n    };\r\n    myTaskManager = targetProject.getTaskManager().emptyClone();\r\n    myUIfacade = uiFacade;\r\n}"},
 {"id":818, "parametername":"GanttProject project", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":437, "classname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "methodid":3422, "methodname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.run(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "isreturn":0, "sourcecode":"public void run(GanttProject project, final UIFacade uiFacade, final File selectedFile, final boolean bMerge) {\r\n    myUIFacade = project.getUIFacade();\r\n    final GanttProject targetProject = project;\r\n    final ImporterFromGanttFile.BufferProject bufferProject = createBufferProject(targetProject, uiFacade);\r\n    project.getUndoManager().undoableEdit(\"Import\", new Runnable() {\r\n        public void run() {\r\n            openDocument(targetProject, bufferProject, uiFacade, selectedFile, bMerge);\r\n            myUIFacade.getTaskTree().getVisibleFields().importData(bufferProject.getVisibleFields());\r\n        }\r\n    });\r\n}"},
 {"id":819, "parametername":"final UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":437, "classname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "methodid":3422, "methodname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.run(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "isreturn":0, "sourcecode":"public void run(GanttProject project, final UIFacade uiFacade, final File selectedFile, final boolean bMerge) {\r\n    myUIFacade = project.getUIFacade();\r\n    final GanttProject targetProject = project;\r\n    final ImporterFromGanttFile.BufferProject bufferProject = createBufferProject(targetProject, uiFacade);\r\n    project.getUndoManager().undoableEdit(\"Import\", new Runnable() {\r\n        public void run() {\r\n            openDocument(targetProject, bufferProject, uiFacade, selectedFile, bMerge);\r\n            myUIFacade.getTaskTree().getVisibleFields().importData(bufferProject.getVisibleFields());\r\n        }\r\n    });\r\n}"},
 {"id":820, "parametername":"TableHeaderUIFacade source", "parametertype":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade", "parameterclass":324, "classid":436, "classname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$VisibleFieldsImpl", "methodid":3443, "methodname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile$VisibleFieldsImpl.importData(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "isreturn":0, "sourcecode":"public void importData(TableHeaderUIFacade source) {\r\n    for (int i = 0; i < (source.getSize()); i++) {\r\n        TableHeaderUIFacade.Column nextField = source.getField(i);\r\n        myFields.add(nextField);\r\n    }\r\n}"},
 {"id":821, "parametername":"final GanttProject targetProject", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":437, "classname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "methodid":3417, "methodname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.createBufferProject(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"private ImporterFromGanttFile.BufferProject createBufferProject(final GanttProject targetProject, final UIFacade uiFacade) {\r\n    return new ImporterFromGanttFile.BufferProject(targetProject, uiFacade);\r\n}"},
 {"id":822, "parametername":"final UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":437, "classname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "methodid":3417, "methodname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.createBufferProject(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"private ImporterFromGanttFile.BufferProject createBufferProject(final GanttProject targetProject, final UIFacade uiFacade) {\r\n    return new ImporterFromGanttFile.BufferProject(targetProject, uiFacade);\r\n}"},
 {"id":823, "parametername":"GanttProject targetProject", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":437, "classname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "methodid":3421, "methodname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.openDocument(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "isreturn":0, "sourcecode":"protected void openDocument(GanttProject targetProject, IGanttProject bufferProject, UIFacade uiFacade, File selectedFile, boolean bMerge) {\r\n    try {\r\n        Document document = bufferProject.getDocumentManager().getDocument(selectedFile.getAbsolutePath());\r\n        document.read();\r\n        targetProject.getRoleManager().importData(bufferProject.getRoleManager());\r\n        {\r\n            CustomPropertyManager targetResCustomPropertyMgr = targetProject.getResourceCustomPropertyManager();\r\n            targetResCustomPropertyMgr.importData(bufferProject.getResourceCustomPropertyManager());\r\n        }\r\n        Map original2ImportedResource = targetProject.getHumanResourceManager().importData(bufferProject.getHumanResourceManager());\r\n        {\r\n            CustomColumnsStorage targetCustomColumnStorage = targetProject.getCustomColumnsStorage();\r\n            targetCustomColumnStorage.importData(bufferProject.getCustomColumnsStorage());\r\n        }\r\n        TaskManagerImpl origTaskManager = ((TaskManagerImpl) (targetProject.getTaskManager()));\r\n        try {\r\n            origTaskManager.setEventsEnabled(false);\r\n            Map original2ImportedTask = origTaskManager.importData(bufferProject.getTaskManager());\r\n            origTaskManager.importAssignments(bufferProject.getTaskManager(), targetProject.getHumanResourceManager(), original2ImportedTask, original2ImportedResource);\r\n        } finally {\r\n            origTaskManager.setEventsEnabled(true);\r\n        }\r\n        targetProject.getResourcePanel().getResourceTreeTableModel().updateResources();\r\n        /* TaskManager taskManager = bufferProject.getTaskManager().emptyClone();\n        // ResourceManager resourceManager =\n        // project.getHumanResourceManager();\n        ResourceManager resourceManager = new HumanResourceManager(bufferProject\n        .getRoleManager().getDefaultRole());\n        RoleManager roleManager = new RoleManagerImpl();\n        GanttXMLOpen opener = new GanttXMLOpen(bufferProject.prjInfos, bufferProject\n        .getArea(), taskManager, bufferProject.getUIFacade());\n        opener.addTagHandler(opener.getDefaultTagHandler());\n        TaskTagHandler taskHandler = new TaskTagHandler(taskManager, opener\n        .getContext());\n        opener.addTagHandler(taskHandler);\n        BlankLineTagHandler blankLineHandler = new BlankLineTagHandler(bufferProject.getUIFacade().getGanttChart());\n        opener.addTagHandler(blankLineHandler);\n        ResourceTagHandler resourceHandler = new ResourceTagHandler(\n        resourceManager, roleManager, bufferProject.getResourceCustomPropertyManager());\n        opener.addTagHandler(resourceHandler);\n        DependencyTagHandler dependencyHandler = new DependencyTagHandler(\n        opener.getContext(), taskManager, myUIFacade);\n        opener.addTagHandler(dependencyHandler);\n        RoleTagHandler roleHandler = new RoleTagHandler(roleManager);\n        opener.addTagHandler(roleHandler);\n        opener.addParsingListener(dependencyHandler);\n        opener.addParsingListener(resourceHandler);\n        AllocationTagHandler allocationHandler = new AllocationTagHandler(\n        resourceManager, taskManager, roleManager);\n        opener.addTagHandler(allocationHandler);\n        opener.addParsingListener(allocationHandler);\n        VacationTagHandler vacationHandler = new VacationTagHandler(\n        resourceManager);\n        opener.addTagHandler(vacationHandler);\n\n        //\n        if (bMerge == false) {\n        HolidayTagHandler holidayHandler = new HolidayTagHandler(\n        bufferProject);\n\n        opener.addTagHandler(holidayHandler);\n        opener.addParsingListener(holidayHandler);\n        } else {\n        opener.isMerging(true);\n        }\n        opener.load(document.getInputStream());\n\n        bufferProject.getRoleManager().importData(roleManager);\n        Map original2ImportedResource = bufferProject.getHumanResourceManager()\n        .importData(resourceManager);\n        TaskManagerImpl origTaskManager = (TaskManagerImpl) bufferProject.getTaskManager();\n        try {\n        origTaskManager.setEventsEnabled(false);\n        Map original2ImportedTask = origTaskManager.importData(taskManager);\n        origTaskManager.importAssignments(\n        taskManager,\n        bufferProject.getHumanResourceManager(), original2ImportedTask,\n        original2ImportedResource);\n        }\n        finally {\n        origTaskManager.setEventsEnabled(true);\n        }\n        bufferProject.getResourcePanel().getResourceTreeTableModel()\n        .updateResources();\n         */\r\n    } catch (IOException e) {\r\n        uiFacade.showErrorDialog(e);\r\n    }\r\n}"},
 {"id":824, "parametername":"IGanttProject bufferProject", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":437, "classname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "methodid":3421, "methodname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.openDocument(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "isreturn":0, "sourcecode":"protected void openDocument(GanttProject targetProject, IGanttProject bufferProject, UIFacade uiFacade, File selectedFile, boolean bMerge) {\r\n    try {\r\n        Document document = bufferProject.getDocumentManager().getDocument(selectedFile.getAbsolutePath());\r\n        document.read();\r\n        targetProject.getRoleManager().importData(bufferProject.getRoleManager());\r\n        {\r\n            CustomPropertyManager targetResCustomPropertyMgr = targetProject.getResourceCustomPropertyManager();\r\n            targetResCustomPropertyMgr.importData(bufferProject.getResourceCustomPropertyManager());\r\n        }\r\n        Map original2ImportedResource = targetProject.getHumanResourceManager().importData(bufferProject.getHumanResourceManager());\r\n        {\r\n            CustomColumnsStorage targetCustomColumnStorage = targetProject.getCustomColumnsStorage();\r\n            targetCustomColumnStorage.importData(bufferProject.getCustomColumnsStorage());\r\n        }\r\n        TaskManagerImpl origTaskManager = ((TaskManagerImpl) (targetProject.getTaskManager()));\r\n        try {\r\n            origTaskManager.setEventsEnabled(false);\r\n            Map original2ImportedTask = origTaskManager.importData(bufferProject.getTaskManager());\r\n            origTaskManager.importAssignments(bufferProject.getTaskManager(), targetProject.getHumanResourceManager(), original2ImportedTask, original2ImportedResource);\r\n        } finally {\r\n            origTaskManager.setEventsEnabled(true);\r\n        }\r\n        targetProject.getResourcePanel().getResourceTreeTableModel().updateResources();\r\n        /* TaskManager taskManager = bufferProject.getTaskManager().emptyClone();\n        // ResourceManager resourceManager =\n        // project.getHumanResourceManager();\n        ResourceManager resourceManager = new HumanResourceManager(bufferProject\n        .getRoleManager().getDefaultRole());\n        RoleManager roleManager = new RoleManagerImpl();\n        GanttXMLOpen opener = new GanttXMLOpen(bufferProject.prjInfos, bufferProject\n        .getArea(), taskManager, bufferProject.getUIFacade());\n        opener.addTagHandler(opener.getDefaultTagHandler());\n        TaskTagHandler taskHandler = new TaskTagHandler(taskManager, opener\n        .getContext());\n        opener.addTagHandler(taskHandler);\n        BlankLineTagHandler blankLineHandler = new BlankLineTagHandler(bufferProject.getUIFacade().getGanttChart());\n        opener.addTagHandler(blankLineHandler);\n        ResourceTagHandler resourceHandler = new ResourceTagHandler(\n        resourceManager, roleManager, bufferProject.getResourceCustomPropertyManager());\n        opener.addTagHandler(resourceHandler);\n        DependencyTagHandler dependencyHandler = new DependencyTagHandler(\n        opener.getContext(), taskManager, myUIFacade);\n        opener.addTagHandler(dependencyHandler);\n        RoleTagHandler roleHandler = new RoleTagHandler(roleManager);\n        opener.addTagHandler(roleHandler);\n        opener.addParsingListener(dependencyHandler);\n        opener.addParsingListener(resourceHandler);\n        AllocationTagHandler allocationHandler = new AllocationTagHandler(\n        resourceManager, taskManager, roleManager);\n        opener.addTagHandler(allocationHandler);\n        opener.addParsingListener(allocationHandler);\n        VacationTagHandler vacationHandler = new VacationTagHandler(\n        resourceManager);\n        opener.addTagHandler(vacationHandler);\n\n        //\n        if (bMerge == false) {\n        HolidayTagHandler holidayHandler = new HolidayTagHandler(\n        bufferProject);\n\n        opener.addTagHandler(holidayHandler);\n        opener.addParsingListener(holidayHandler);\n        } else {\n        opener.isMerging(true);\n        }\n        opener.load(document.getInputStream());\n\n        bufferProject.getRoleManager().importData(roleManager);\n        Map original2ImportedResource = bufferProject.getHumanResourceManager()\n        .importData(resourceManager);\n        TaskManagerImpl origTaskManager = (TaskManagerImpl) bufferProject.getTaskManager();\n        try {\n        origTaskManager.setEventsEnabled(false);\n        Map original2ImportedTask = origTaskManager.importData(taskManager);\n        origTaskManager.importAssignments(\n        taskManager,\n        bufferProject.getHumanResourceManager(), original2ImportedTask,\n        original2ImportedResource);\n        }\n        finally {\n        origTaskManager.setEventsEnabled(true);\n        }\n        bufferProject.getResourcePanel().getResourceTreeTableModel()\n        .updateResources();\n         */\r\n    } catch (IOException e) {\r\n        uiFacade.showErrorDialog(e);\r\n    }\r\n}"},
 {"id":825, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":437, "classname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile", "methodid":3421, "methodname":"net.sourceforge.ganttproject.importer.ImporterFromGanttFile.openDocument(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "isreturn":0, "sourcecode":"protected void openDocument(GanttProject targetProject, IGanttProject bufferProject, UIFacade uiFacade, File selectedFile, boolean bMerge) {\r\n    try {\r\n        Document document = bufferProject.getDocumentManager().getDocument(selectedFile.getAbsolutePath());\r\n        document.read();\r\n        targetProject.getRoleManager().importData(bufferProject.getRoleManager());\r\n        {\r\n            CustomPropertyManager targetResCustomPropertyMgr = targetProject.getResourceCustomPropertyManager();\r\n            targetResCustomPropertyMgr.importData(bufferProject.getResourceCustomPropertyManager());\r\n        }\r\n        Map original2ImportedResource = targetProject.getHumanResourceManager().importData(bufferProject.getHumanResourceManager());\r\n        {\r\n            CustomColumnsStorage targetCustomColumnStorage = targetProject.getCustomColumnsStorage();\r\n            targetCustomColumnStorage.importData(bufferProject.getCustomColumnsStorage());\r\n        }\r\n        TaskManagerImpl origTaskManager = ((TaskManagerImpl) (targetProject.getTaskManager()));\r\n        try {\r\n            origTaskManager.setEventsEnabled(false);\r\n            Map original2ImportedTask = origTaskManager.importData(bufferProject.getTaskManager());\r\n            origTaskManager.importAssignments(bufferProject.getTaskManager(), targetProject.getHumanResourceManager(), original2ImportedTask, original2ImportedResource);\r\n        } finally {\r\n            origTaskManager.setEventsEnabled(true);\r\n        }\r\n        targetProject.getResourcePanel().getResourceTreeTableModel().updateResources();\r\n        /* TaskManager taskManager = bufferProject.getTaskManager().emptyClone();\n        // ResourceManager resourceManager =\n        // project.getHumanResourceManager();\n        ResourceManager resourceManager = new HumanResourceManager(bufferProject\n        .getRoleManager().getDefaultRole());\n        RoleManager roleManager = new RoleManagerImpl();\n        GanttXMLOpen opener = new GanttXMLOpen(bufferProject.prjInfos, bufferProject\n        .getArea(), taskManager, bufferProject.getUIFacade());\n        opener.addTagHandler(opener.getDefaultTagHandler());\n        TaskTagHandler taskHandler = new TaskTagHandler(taskManager, opener\n        .getContext());\n        opener.addTagHandler(taskHandler);\n        BlankLineTagHandler blankLineHandler = new BlankLineTagHandler(bufferProject.getUIFacade().getGanttChart());\n        opener.addTagHandler(blankLineHandler);\n        ResourceTagHandler resourceHandler = new ResourceTagHandler(\n        resourceManager, roleManager, bufferProject.getResourceCustomPropertyManager());\n        opener.addTagHandler(resourceHandler);\n        DependencyTagHandler dependencyHandler = new DependencyTagHandler(\n        opener.getContext(), taskManager, myUIFacade);\n        opener.addTagHandler(dependencyHandler);\n        RoleTagHandler roleHandler = new RoleTagHandler(roleManager);\n        opener.addTagHandler(roleHandler);\n        opener.addParsingListener(dependencyHandler);\n        opener.addParsingListener(resourceHandler);\n        AllocationTagHandler allocationHandler = new AllocationTagHandler(\n        resourceManager, taskManager, roleManager);\n        opener.addTagHandler(allocationHandler);\n        opener.addParsingListener(allocationHandler);\n        VacationTagHandler vacationHandler = new VacationTagHandler(\n        resourceManager);\n        opener.addTagHandler(vacationHandler);\n\n        //\n        if (bMerge == false) {\n        HolidayTagHandler holidayHandler = new HolidayTagHandler(\n        bufferProject);\n\n        opener.addTagHandler(holidayHandler);\n        opener.addParsingListener(holidayHandler);\n        } else {\n        opener.isMerging(true);\n        }\n        opener.load(document.getInputStream());\n\n        bufferProject.getRoleManager().importData(roleManager);\n        Map original2ImportedResource = bufferProject.getHumanResourceManager()\n        .importData(resourceManager);\n        TaskManagerImpl origTaskManager = (TaskManagerImpl) bufferProject.getTaskManager();\n        try {\n        origTaskManager.setEventsEnabled(false);\n        Map original2ImportedTask = origTaskManager.importData(taskManager);\n        origTaskManager.importAssignments(\n        taskManager,\n        bufferProject.getHumanResourceManager(), original2ImportedTask,\n        original2ImportedResource);\n        }\n        finally {\n        origTaskManager.setEventsEnabled(true);\n        }\n        bufferProject.getResourcePanel().getResourceTreeTableModel()\n        .updateResources();\n         */\r\n    } catch (IOException e) {\r\n        uiFacade.showErrorDialog(e);\r\n    }\r\n}"},
 {"id":826, "parametername":"GanttProject project", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":438, "classname":"net.sourceforge.ganttproject.importer.ImporterFromTxtFile", "methodid":3447, "methodname":"net.sourceforge.ganttproject.importer.ImporterFromTxtFile.run(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "isreturn":0, "sourcecode":"public void run(GanttProject project, UIFacade uiFacade, File selectedFile, boolean merge) {\r\n    GanttTXTOpen opener = new GanttTXTOpen(project.getTree(), project, project.getArea(), project.getTaskManager());\r\n    opener.load(selectedFile);\r\n    project.setModified();\r\n}"},
 {"id":827, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":438, "classname":"net.sourceforge.ganttproject.importer.ImporterFromTxtFile", "methodid":3447, "methodname":"net.sourceforge.ganttproject.importer.ImporterFromTxtFile.run(net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.gui.UIFacade,java.io.File,boolean)", "isreturn":0, "sourcecode":"public void run(GanttProject project, UIFacade uiFacade, File selectedFile, boolean merge) {\r\n    GanttTXTOpen opener = new GanttTXTOpen(project.getTree(), project, project.getArea(), project.getTaskManager());\r\n    opener.load(selectedFile);\r\n    project.setModified();\r\n}"},
 {"id":828, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":439, "classname":"net.sourceforge.ganttproject.io.AssignmentSaver", "methodid":3449, "methodname":"net.sourceforge.ganttproject.io.AssignmentSaver.save(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler)", "isreturn":0, "sourcecode":"void save(IGanttProject project, TransformerHandler handler) throws SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    startElement(\"allocations\", handler);\r\n    Task[] tasks = project.getTaskManager().getTasks();\r\n    for (int i = 0; i < (tasks.length); i++) {\r\n        Task task = tasks[i];\r\n        ResourceAssignment[] assignments = task.getAssignments();\r\n        for (int j = 0; j < (assignments.length); j++) {\r\n            int task_id = task.getTaskID();\r\n            ResourceAssignment next = assignments[j];\r\n            Role roleForAssignment = next.getRoleForAssignment();\r\n            if (roleForAssignment == null) {\r\n                if ((next.getResource()) instanceof HumanResource) {\r\n                    roleForAssignment = ((HumanResource) (next.getResource())).getRole();\r\n                }\r\n            }\r\n            addAttribute(\"task-id\", String.valueOf(task_id), attrs);\r\n            addAttribute(\"resource-id\", String.valueOf(next.getResource().getId()), attrs);\r\n            addAttribute(\"function\", roleForAssignment.getPersistentID(), attrs);\r\n            addAttribute(\"responsible\", String.valueOf(next.isCoordinator()), attrs);\r\n            addAttribute(\"load\", String.valueOf(next.getLoad()), attrs);\r\n            emptyElement(\"allocation\", attrs, handler);\r\n        }\r\n    }\r\n    endElement(\"allocations\", handler);\r\n}"},
 {"id":829, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":441, "classname":"net.sourceforge.ganttproject.io.CalendarSaver", "methodid":3456, "methodname":"net.sourceforge.ganttproject.io.CalendarSaver.save(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler)", "isreturn":0, "sourcecode":"void save(IGanttProject project, TransformerHandler handler) throws SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    startElement(\"calendars\", attrs, handler);\r\n    startElement(\"day-types\", attrs, handler);\r\n    // \r\n    addAttribute(\"id\", \"0\", attrs);\r\n    emptyElement(\"day-type\", attrs, handler);\r\n    addAttribute(\"id\", \"1\", attrs);\r\n    emptyElement(\"day-type\", attrs, handler);\r\n    // \r\n    addAttribute(\"id\", \"1\", attrs);\r\n    addAttribute(\"name\", \"default\", attrs);\r\n    startElement(\"calendar\", attrs, handler);\r\n    for (int i = 1; i <= 7; i++) {\r\n        boolean holiday = (project.getActiveCalendar().getWeekDayType(i)) == (GPCalendar.DayType.WEEKEND);\r\n        addAttribute(getShortDayName(i), (holiday ? \"1\" : \"0\"), attrs);\r\n    }\r\n    emptyElement(\"default-week\", attrs, handler);\r\n    emptyElement(\"overriden-day-types\", attrs, handler);\r\n    emptyElement(\"days\", attrs, handler);\r\n    endElement(\"calendar\", handler);\r\n    // \r\n    endElement(\"day-types\", handler);\r\n    Collection publicHoliday = project.getActiveCalendar().getPublicHolidays();\r\n    for (Iterator iter = publicHoliday.iterator(); iter.hasNext();) {\r\n        Date d = ((Date) (iter.next()));\r\n        if ((d.getYear()) == (1 - 1900))\r\n            addAttribute(\"year\", \"\", attrs);\r\n        else\r\n            addAttribute(\"year\", (((d.getYear()) + 1900) + \"\"), attrs);\r\n\r\n        addAttribute(\"month\", (((d.getMonth()) + 1) + \"\"), attrs);\r\n        addAttribute(\"date\", ((d.getDate()) + \"\"), attrs);\r\n        emptyElement(\"date\", attrs, handler);\r\n    }\r\n    endElement(\"calendars\", handler);\r\n}"},
 {"id":830, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":443, "classname":"net.sourceforge.ganttproject.io.GanttCSVExport", "methodid":3458, "methodname":"net.sourceforge.ganttproject.io.GanttCSVExport.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.io.CSVOptions)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic GanttCSVExport(IGanttProject project, CSVOptions csvOptions) {\r\n    myProject = project;\r\n    myTasks = project.getTaskManager().getTasks();\r\n    myHrManager = ((HumanResourceManager) (project.getHumanResourceManager()));\r\n    this.csvOptions = csvOptions;\r\n}"},
 {"id":831, "parametername":"CSVOptions csvOptions", "parametertype":"net.sourceforge.ganttproject.io.CSVOptions", "parameterclass":440, "classid":443, "classname":"net.sourceforge.ganttproject.io.GanttCSVExport", "methodid":3458, "methodname":"net.sourceforge.ganttproject.io.GanttCSVExport.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.io.CSVOptions)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic GanttCSVExport(IGanttProject project, CSVOptions csvOptions) {\r\n    myProject = project;\r\n    myTasks = project.getTaskManager().getTasks();\r\n    myHrManager = ((HumanResourceManager) (project.getHumanResourceManager()));\r\n    this.csvOptions = csvOptions;\r\n}"},
 {"id":832, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":443, "classname":"net.sourceforge.ganttproject.io.GanttCSVExport", "methodid":3463, "methodname":"net.sourceforge.ganttproject.io.GanttCSVExport.getName(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @return the name of task with the correct level.\r\n */\r\nprivate String getName(Task task) {\r\n    if (bFixedSize)\r\n        return task.getName();\r\n\r\n    String res = \"\";\r\n    int depth = task.getManager().getTaskHierarchy().getDepth(task);\r\n    for (int i = 0; i < depth; i++) {\r\n        res += \"  \";\r\n    }\r\n    return res + (task.getName());\r\n}"},
 {"id":833, "parametername":"GanttTask task", "parametertype":"net.sourceforge.ganttproject.GanttTask", "parameterclass":63, "classid":443, "classname":"net.sourceforge.ganttproject.io.GanttCSVExport", "methodid":3464, "methodname":"net.sourceforge.ganttproject.io.GanttCSVExport.getWebLink(net.sourceforge.ganttproject.GanttTask)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @return the link of the task.\r\n */\r\nprivate String getWebLink(GanttTask task) {\r\n    return task.getWebLink().equals(\"http://\") ? \"\" : task.getWebLink();\r\n}"},
 {"id":834, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":443, "classname":"net.sourceforge.ganttproject.io.GanttCSVExport", "methodid":3461, "methodname":"net.sourceforge.ganttproject.io.GanttCSVExport.getAssignments(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @return the list of the assignment for the resources.\r\n */\r\nprivate String getAssignments(Task task) {\r\n    String res = \"\";\r\n    ResourceAssignment[] assignment = task.getAssignments();\r\n    for (int i = 0; i < (assignment.length); i++)\r\n        res += (assignment[i].getResource()) + (i == ((assignment.length) - 1) ? \"\" : csvOptions.sSeparatedChar.equals(\";\") ? \",\" : \";\");\r\n\r\n    return res;\r\n}"},
 {"id":835, "parametername":"GanttTreeTable treeTable", "parametertype":"net.sourceforge.ganttproject.GanttTreeTable", "parameterclass":81, "classid":444, "classname":"net.sourceforge.ganttproject.io.GanttChartViewSaver", "methodid":3474, "methodname":"net.sourceforge.ganttproject.io.GanttChartViewSaver.save(net.sourceforge.ganttproject.GanttTreeTable,javax.xml.transform.sax.TransformerHandler)", "isreturn":0, "sourcecode":"void save(GanttTreeTable treeTable, TransformerHandler handler) throws SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    startElement(\"taskdisplaycolumns\", handler);\r\n    final List displayedColumns = treeTable.getDisplayColumns();\r\n    if (displayedColumns != null) {\r\n        for (int i = 0; i < (displayedColumns.size()); i++) {\r\n            GanttTreeTable.DisplayedColumn dc = ((GanttTreeTable.DisplayedColumn) (displayedColumns.get(i)));\r\n            if (dc.isDisplayed()) {\r\n                addAttribute(\"property-id\", dc.getID(), attrs);\r\n                addAttribute(\"order\", String.valueOf(dc.getOrder()), attrs);\r\n                addAttribute(\"width\", String.valueOf(dc.getWidth()), attrs);\r\n                emptyElement(\"displaycolumn\", attrs, handler);\r\n            }\r\n        }\r\n    }\r\n    endElement(\"taskdisplaycolumns\", handler);\r\n}"},
 {"id":836, "parametername":"GanttTree2 tree", "parametertype":"net.sourceforge.ganttproject.GanttTree2", "parameterclass":73, "classid":445, "classname":"net.sourceforge.ganttproject.io.GanttTXTOpen", "methodid":3475, "methodname":"net.sourceforge.ganttproject.io.GanttTXTOpen.-init-(net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttGraphicArea,net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic GanttTXTOpen(GanttTree2 tree, GanttProject appli, GanttGraphicArea gra, TaskManager taskManager) {\r\n    // Affect fields of the class\r\n    this(taskManager);\r\n    this.treePanel = tree;\r\n    this.prj = appli;\r\n    this.area = gra;\r\n}"},
 {"id":837, "parametername":"GanttProject appli", "parametertype":"net.sourceforge.ganttproject.GanttProject", "parameterclass":53, "classid":445, "classname":"net.sourceforge.ganttproject.io.GanttTXTOpen", "methodid":3475, "methodname":"net.sourceforge.ganttproject.io.GanttTXTOpen.-init-(net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttGraphicArea,net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic GanttTXTOpen(GanttTree2 tree, GanttProject appli, GanttGraphicArea gra, TaskManager taskManager) {\r\n    // Affect fields of the class\r\n    this(taskManager);\r\n    this.treePanel = tree;\r\n    this.prj = appli;\r\n    this.area = gra;\r\n}"},
 {"id":838, "parametername":"GanttGraphicArea gra", "parametertype":"net.sourceforge.ganttproject.GanttGraphicArea", "parameterclass":45, "classid":445, "classname":"net.sourceforge.ganttproject.io.GanttTXTOpen", "methodid":3475, "methodname":"net.sourceforge.ganttproject.io.GanttTXTOpen.-init-(net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttGraphicArea,net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic GanttTXTOpen(GanttTree2 tree, GanttProject appli, GanttGraphicArea gra, TaskManager taskManager) {\r\n    // Affect fields of the class\r\n    this(taskManager);\r\n    this.treePanel = tree;\r\n    this.prj = appli;\r\n    this.area = gra;\r\n}"},
 {"id":839, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":445, "classname":"net.sourceforge.ganttproject.io.GanttTXTOpen", "methodid":3475, "methodname":"net.sourceforge.ganttproject.io.GanttTXTOpen.-init-(net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttProject,net.sourceforge.ganttproject.GanttGraphicArea,net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic GanttTXTOpen(GanttTree2 tree, GanttProject appli, GanttGraphicArea gra, TaskManager taskManager) {\r\n    // Affect fields of the class\r\n    this(taskManager);\r\n    this.treePanel = tree;\r\n    this.prj = appli;\r\n    this.area = gra;\r\n}"},
 {"id":840, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":445, "classname":"net.sourceforge.ganttproject.io.GanttTXTOpen", "methodid":3476, "methodname":"net.sourceforge.ganttproject.io.GanttTXTOpen.-init-(net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"/**\r\n * Constructor with a task manager.\r\n */\r\npublic GanttTXTOpen(TaskManager taskManager) {\r\n    myTaskManager = taskManager;\r\n}"},
 {"id":841, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":448, "classname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "methodid":3478, "methodname":"net.sourceforge.ganttproject.io.GanttXFIGSaver.-init-(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"/**\r\n * Constructor.\r\n */\r\npublic GanttXFIGSaver(IGanttProject project) {\r\n    // this.area = area;\r\n    // this.prjInfos = prjInfos;\r\n    myTaskManager = project.getTaskManager();\r\n}"},
 {"id":842, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":448, "classname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "methodid":3486, "methodname":"net.sourceforge.ganttproject.io.GanttXFIGSaver.getTaskTextWidth(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @return the textwith of this task for and its children tasks. Determine\r\nwidth of text labels (task names) in this task assume fixed\r\nwidth, 14 letters to the inch, 1200 ppi each level is indented\r\n1/4 inch (300 points @ 1200ppi)\r\n */\r\nprivate float getTaskTextWidth(Task task) {\r\n    if (debug)\r\n        System.out.println(\"getTaskTextWidth begin\");\r\n\r\n    Task t = task;\r\n    float res = (((float) (t.getName().length())) * (1.0F / 14.0F)) * 1200.0F;\r\n    Task[] children = task.getManager().getTaskHierarchy().getNestedTasks(task);\r\n    for (int i = 0; i < (children.length); i++) {\r\n        float subTaskTextWidth = 0.25F + (getTaskTextWidth(children[i]));\r\n        if (subTaskTextWidth > res)\r\n            res = subTaskTextWidth;\r\n\r\n    }\r\n    if (debug)\r\n        System.out.println(\"getTaskTextWidth end\");\r\n\r\n    return res;\r\n}"},
 {"id":843, "parametername":"GanttTask task", "parametertype":"net.sourceforge.ganttproject.GanttTask", "parameterclass":63, "classid":448, "classname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "methodid":3492, "methodname":"net.sourceforge.ganttproject.io.GanttXFIGSaver.task2text(net.sourceforge.ganttproject.GanttTask,int,int,int)", "isreturn":0, "sourcecode":"/**\r\n * convert task structureto an xfig text data structure\r\n */\r\npublic GanttXFIGSaver.TextObject task2text(GanttTask task, int number, int level, int depthval) {\r\n    if (debug)\r\n        System.out.println(\"task2text begin\");\r\n\r\n    /* System.out.println(\"task : \"+task+ \" number : \"+number+ \" level :\n    \"+level+ \" depthval : \"+depthval);\n     */\r\n    GanttXFIGSaver.TextObject taskText = new GanttXFIGSaver.TextObject();\r\n    taskText.sub_type = 0;// left justified\r\n\r\n    taskText.color = 0;// black\r\n\r\n    taskText.depth = depthval;\r\n    taskText.pen_style = 0;// unused\r\n\r\n    taskText.font = 0;// Times Roman\r\n\r\n    taskText.font_size = 10;// fonts size in points\r\n\r\n    taskText.angle = 0;// text angle in radians\r\n\r\n    taskText.font_flags = 4;// not rigid, not special, postscript, not\r\n\r\n    // hidden.\r\n    taskText.height = 0.25F * 1200.0F;\r\n    taskText.length = (0.125F * ((float) (task.getName().length()))) * 1200.0F;\r\n    taskText.y = ((int) ((((1200.0F * 0.25F) * ((float) (number))) + 5.0F) - (1200.0F / 16.0F)));\r\n    taskText.x = ((int) ((1200.0F * 0.25F) * (((float) (level)) + 1.0F)));\r\n    taskText.str = task.getName();\r\n    if (debug)\r\n        System.out.println(\"task2text end\");\r\n\r\n    return taskText;\r\n}"},
 {"id":844, "parametername":"GanttTask task", "parametertype":"net.sourceforge.ganttproject.GanttTask", "parameterclass":63, "classid":448, "classname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "methodid":3491, "methodname":"net.sourceforge.ganttproject.io.GanttXFIGSaver.task2box(net.sourceforge.ganttproject.GanttTask,int,int,boolean)", "isreturn":0, "sourcecode":"/**\r\n * get the task box.\r\n */\r\npublic GanttXFIGSaver.BoxObject task2box(GanttTask task, int depthval, int number, boolean isLeaf) {\r\n    // boxObject: total box\r\n    // boxObjectPct: black line in center of box object\r\n    // min box width: 1.\r\n    // object to return\r\n    GanttXFIGSaver.BoxObject boxObject = new GanttXFIGSaver.BoxObject();\r\n    if (isLeaf) {\r\n        boxObject.sub_type = 2;// box\r\n\r\n        boxObject.npoints = 5;\r\n    } else {\r\n        boxObject.sub_type = 3;// polygon\r\n\r\n        boxObject.npoints = 7;\r\n    }\r\n    boxObject.depth = depthval;\r\n    if (!isLeaf)\r\n        boxObject.depth -= 2;\r\n    // ?????\r\n\r\n    // See BoxObject class for other default values\r\n    // Construct box corners\r\n    float boxLen = Math.max(1.0F, ((task.getLength()) * (scale)));\r\n    float boxLenPct = Math.max(1.0F, ((boxLen * (task.getCompletionPercentage())) / 100.0F));\r\n    float boxHeight = 1200.0F / 8.0F;\r\n    float pLo = boxHeight * 0.25F;\r\n    float pHi = boxHeight * 0.75F;\r\n    float[] pointsPct = new float[]{ 0, pLo, boxLenPct, pLo, boxLenPct, pHi, 0, pHi, 0, pLo };\r\n    if ((boxObject.sub_type) == 2) {\r\n        boxObject.points = new float[10];\r\n        boxObject.points[0] = 0;\r\n        boxObject.points[1] = 0;\r\n        boxObject.points[2] = boxLen;\r\n        boxObject.points[3] = 0;\r\n        boxObject.points[4] = boxLen;\r\n        boxObject.points[5] = boxHeight;\r\n        boxObject.points[6] = 0;\r\n        boxObject.points[7] = boxHeight;\r\n        boxObject.points[8] = 0;\r\n        boxObject.points[9] = 0;\r\n    } else {\r\n        float boxLo = boxHeight / 4;\r\n        boxObject.points = new float[14];\r\n        boxObject.points[0] = 0;\r\n        boxObject.points[1] = boxHeight;\r\n        boxObject.points[2] = 0;\r\n        boxObject.points[3] = 0;\r\n        boxObject.points[4] = boxLen;\r\n        boxObject.points[5] = 0;\r\n        boxObject.points[6] = boxLen;\r\n        boxObject.points[7] = boxHeight;// top bow\r\n\r\n        boxObject.points[8] = boxLen;\r\n        boxObject.points[9] = boxLo;\r\n        boxObject.points[10] = 0;\r\n        boxObject.points[11] = boxLo;\r\n        boxObject.points[10] = 0;\r\n        boxObject.points[13] = boxHeight;\r\n    }\r\n    int blen = boxObject.points.length;\r\n    // shift to this row\r\n    float xShift = 0;\r\n    float yShift = ((1200.0F * 0.25F) * (((float) (number)) + 4)) + (1200.0F / 16.0F);\r\n    /* boxObject.points(2:2:blen) += yShift; boxObject.points(1:2:blen) +=\n    xShift;\n     */\r\n    for (int i = 1; i < blen; i += 2)\r\n        boxObject.points[i] += yShift;\r\n\r\n    for (int i = 0; i < blen; i += 2)\r\n        boxObject.points[i] += xShift;\r\n\r\n    // pointsPct(2:2:10) += yShift;\r\n    // pointsPct(1:2:9) += xShift;\r\n    // boxObjectPct = boxObject; // percent completed\r\n    // boxObjectPct.points = pointsPct;\r\n    // boxObjectPct.npoints = 5;\r\n    // boxObjectPct.area_fill = 20;\r\n    // boxObjectPct.fill_color = 0;\r\n    // shift boxes by start date\r\n    /* boxObject.points(1:2:blen) += task.start*boxScale; */\r\n    for (int i = 0; i < blen; i += 2)\r\n        boxObject.points[i] += (task.getStart().diff(dateShift)) * (scale);\r\n\r\n    // boxObjectPct.points(1:2:9) += task.start*boxScale;\r\n    // now shift again by text width (must be calculated and set in\r\n    // task.boxindent)\r\n    /* boxObject.points(1:2:blen) += task.boxindent; */\r\n    for (int i = 0; i < blen; i += 2)\r\n        boxObject.points[i] += (fTtextwidth) + 120;\r\n\r\n    // boxObjectPct.points(1:2:9) += task.boxindent;\r\n    // boxObjectPct.depth--;\r\n    // fix angle brackets in polygon object\r\n    /* if(boxObject.sub_type == 3) { angwid = min(60,boxLen/2);\n    boxObject.points([9,11]) += [-angwid,angwid]; }\n     */\r\n    if ((boxObject.sub_type) == 3) {\r\n        float angwid = Math.min(60, (boxLen / 2));\r\n        boxObject.points[9] += -angwid;\r\n        boxObject.points[11] += angwid;\r\n    }\r\n    return boxObject;\r\n}"},
 {"id":845, "parametername":"GanttXFIGSaver.TextObject txtObj", "parametertype":"net.sourceforge.ganttproject.io.GanttXFIGSaver$TextObject", "parameterclass":447, "classid":448, "classname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "methodid":3483, "methodname":"net.sourceforge.ganttproject.io.GanttXFIGSaver.drawtext(java.io.OutputStreamWriter,net.sourceforge.ganttproject.io.GanttXFIGSaver$TextObject)", "isreturn":0, "sourcecode":"/**\r\n * Draw text for the taskObject.\r\n */\r\npublic void drawtext(OutputStreamWriter fout, GanttXFIGSaver.TextObject txtObj) throws IOException {\r\n    if (debug)\r\n        System.out.println(\"drawtext begin\");\r\n\r\n    fout.write(\"4 \");\r\n    fout.write(((txtObj.sub_type) + \" \"));\r\n    fout.write(((txtObj.color) + \" \"));\r\n    fout.write(((txtObj.depth) + \" \"));\r\n    fout.write(((txtObj.pen_style) + \" \"));\r\n    fout.write(((txtObj.font) + \" \"));\r\n    fout.write(((txtObj.font_size) + \" \"));\r\n    fout.write(((txtObj.angle) + \" \"));\r\n    fout.write(((txtObj.font_flags) + \" \"));\r\n    fout.write(((((txtObj.height) + \" \") + (txtObj.length)) + \" \"));\r\n    fout.write(((((txtObj.x) + \" \") + (txtObj.y)) + \" \"));\r\n    fout.write(((txtObj.str) + \"\\001\n\"));\r\n    if (debug)\r\n        System.out.println(\"drawtext end\");\r\n\r\n}"},
 {"id":846, "parametername":"GanttXFIGSaver.BoxObject boxObject", "parametertype":"net.sourceforge.ganttproject.io.GanttXFIGSaver$BoxObject", "parameterclass":446, "classid":448, "classname":"net.sourceforge.ganttproject.io.GanttXFIGSaver", "methodid":3482, "methodname":"net.sourceforge.ganttproject.io.GanttXFIGSaver.drawbox(java.io.OutputStreamWriter,net.sourceforge.ganttproject.io.GanttXFIGSaver$BoxObject)", "isreturn":0, "sourcecode":"/**\r\n * draw the box of the task.\r\n */\r\npublic void drawbox(OutputStreamWriter fout, GanttXFIGSaver.BoxObject boxObject) throws IOException {\r\n    if (debug)\r\n        System.out.println(\"drawbox begin\");\r\n\r\n    // draw an xfig box object;\r\n    fout.write(\"2 \");\r\n    fout.write(((boxObject.sub_type) + \" \"));\r\n    fout.write(((boxObject.line_style) + \" \"));\r\n    fout.write(((boxObject.thickness) + \" \"));\r\n    fout.write(((boxObject.pen_color) + \" \"));\r\n    fout.write(((boxObject.fill_color) + \" \"));\r\n    fout.write(((boxObject.depth) + \" \"));\r\n    fout.write(((boxObject.pen_style) + \" \"));\r\n    fout.write(((boxObject.area_fill) + \" \"));\r\n    fout.write(((\" \" + (boxObject.style_val)) + \"  \"));\r\n    fout.write(((boxObject.join_style) + \" \"));\r\n    fout.write(((boxObject.cap_style) + \" \"));\r\n    fout.write(((boxObject.radius) + \" \"));\r\n    fout.write(((boxObject.forward_arrow) + \" \"));\r\n    fout.write(((boxObject.backward_arrow) + \" \"));\r\n    fout.write(((boxObject.npoints) + \"\n\t\"));\r\n    int arrow_type = 1;\r\n    int arrow_style = 1;\r\n    float arrow_thickness = 1.0F;\r\n    float arrow_width = 60.0F;\r\n    float arrow_height = 60.0F;\r\n    if ((boxObject.sub_type) == 3) {\r\n        if ((boxObject.forward_arrow) != 0) {\r\n            System.out.println(\"forward\");\r\n            fout.write((((((((((\"      \" + ((int) (arrow_type))) + \" \") + ((int) (arrow_style))) + \" \") + ((int) (arrow_thickness))) + ((int) (arrow_width))) + \" \") + ((int) (arrow_height))) + \"\n\"));\r\n        }\r\n        if ((boxObject.backward_arrow) != 0) {\r\n            fout.write((((((((((\"      \" + ((int) (arrow_type))) + \" \") + ((int) (arrow_style))) + \" \") + ((int) (arrow_thickness))) + ((int) (arrow_width))) + \" \") + ((int) (arrow_height))) + \"\n\"));\r\n            System.out.println(\"back\");\r\n        }\r\n    }\r\n    for (int i = 0; i < (boxObject.points.length); i++)\r\n        fout.write((((int) (boxObject.points[i])) + \" \"));\r\n\r\n    fout.write(\"\n\");\r\n    if (debug)\r\n        System.out.println(\"drawbox end\");\r\n\r\n}"},
 {"id":847, "parametername":"PrjInfos info", "parametertype":"net.sourceforge.ganttproject.PrjInfos", "parameterclass":87, "classid":451, "classname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "methodid":3496, "methodname":"net.sourceforge.ganttproject.io.GanttXMLOpen.-init-(net.sourceforge.ganttproject.PrjInfos,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n *\r\n * @param uiFacade\r\n * \t\tTODO\r\n */\r\npublic GanttXMLOpen(PrjInfos info, UIConfiguration uiConfig, TaskManager taskManager, UIFacade uiFacade) {\r\n    this(taskManager);\r\n    // this.treePanel = tree;\r\n    myProjectInfo = info;\r\n    myUIConfig = uiConfig;\r\n    // this.peop = resources;\r\n    // this.area = gra;\r\n    // this.bImport = bImport;\r\n    this.viewIndex = 0;\r\n    this.ganttDividerLocation = 300;// todo does this arbitrary value is\r\n\r\n    // right ?\r\n    this.resourceDividerLocation = 300;\r\n    // if(bImport)\r\n    // maxID = ((TaskManagerImpl)taskManager).getMaxID();\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":848, "parametername":"UIConfiguration uiConfig", "parametertype":"net.sourceforge.ganttproject.gui.UIConfiguration", "parameterclass":335, "classid":451, "classname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "methodid":3496, "methodname":"net.sourceforge.ganttproject.io.GanttXMLOpen.-init-(net.sourceforge.ganttproject.PrjInfos,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n *\r\n * @param uiFacade\r\n * \t\tTODO\r\n */\r\npublic GanttXMLOpen(PrjInfos info, UIConfiguration uiConfig, TaskManager taskManager, UIFacade uiFacade) {\r\n    this(taskManager);\r\n    // this.treePanel = tree;\r\n    myProjectInfo = info;\r\n    myUIConfig = uiConfig;\r\n    // this.peop = resources;\r\n    // this.area = gra;\r\n    // this.bImport = bImport;\r\n    this.viewIndex = 0;\r\n    this.ganttDividerLocation = 300;// todo does this arbitrary value is\r\n\r\n    // right ?\r\n    this.resourceDividerLocation = 300;\r\n    // if(bImport)\r\n    // maxID = ((TaskManagerImpl)taskManager).getMaxID();\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":849, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":451, "classname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "methodid":3496, "methodname":"net.sourceforge.ganttproject.io.GanttXMLOpen.-init-(net.sourceforge.ganttproject.PrjInfos,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n *\r\n * @param uiFacade\r\n * \t\tTODO\r\n */\r\npublic GanttXMLOpen(PrjInfos info, UIConfiguration uiConfig, TaskManager taskManager, UIFacade uiFacade) {\r\n    this(taskManager);\r\n    // this.treePanel = tree;\r\n    myProjectInfo = info;\r\n    myUIConfig = uiConfig;\r\n    // this.peop = resources;\r\n    // this.area = gra;\r\n    // this.bImport = bImport;\r\n    this.viewIndex = 0;\r\n    this.ganttDividerLocation = 300;// todo does this arbitrary value is\r\n\r\n    // right ?\r\n    this.resourceDividerLocation = 300;\r\n    // if(bImport)\r\n    // maxID = ((TaskManagerImpl)taskManager).getMaxID();\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":850, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":451, "classname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "methodid":3496, "methodname":"net.sourceforge.ganttproject.io.GanttXMLOpen.-init-(net.sourceforge.ganttproject.PrjInfos,net.sourceforge.ganttproject.gui.UIConfiguration,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n *\r\n * @param uiFacade\r\n * \t\tTODO\r\n */\r\npublic GanttXMLOpen(PrjInfos info, UIConfiguration uiConfig, TaskManager taskManager, UIFacade uiFacade) {\r\n    this(taskManager);\r\n    // this.treePanel = tree;\r\n    myProjectInfo = info;\r\n    myUIConfig = uiConfig;\r\n    // this.peop = resources;\r\n    // this.area = gra;\r\n    // this.bImport = bImport;\r\n    this.viewIndex = 0;\r\n    this.ganttDividerLocation = 300;// todo does this arbitrary value is\r\n\r\n    // right ?\r\n    this.resourceDividerLocation = 300;\r\n    // if(bImport)\r\n    // maxID = ((TaskManagerImpl)taskManager).getMaxID();\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":851, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":451, "classname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "methodid":3497, "methodname":"net.sourceforge.ganttproject.io.GanttXMLOpen.-init-(net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"public GanttXMLOpen(TaskManager taskManager) {\r\n    myContext = new ParsingContext();\r\n    myTaskManager = taskManager;\r\n}"},
 {"id":852, "parametername":"TagHandler handler", "parametertype":"net.sourceforge.ganttproject.parser.TagHandler", "parameterclass":481, "classid":451, "classname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "methodid":3500, "methodname":"net.sourceforge.ganttproject.io.GanttXMLOpen.addTagHandler(net.sourceforge.ganttproject.parser.TagHandler)", "isreturn":0, "sourcecode":"public void addTagHandler(TagHandler handler) {\r\n    myTagHandlers.add(handler);\r\n}"},
 {"id":853, "parametername":"ParsingListener listener", "parametertype":"net.sourceforge.ganttproject.parser.ParsingListener", "parameterclass":477, "classid":451, "classname":"net.sourceforge.ganttproject.io.GanttXMLOpen", "methodid":3499, "methodname":"net.sourceforge.ganttproject.io.GanttXMLOpen.addParsingListener(net.sourceforge.ganttproject.parser.ParsingListener)", "isreturn":0, "sourcecode":"public void addParsingListener(ParsingListener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":854, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":452, "classname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "methodid":3518, "methodname":"net.sourceforge.ganttproject.io.GanttXMLSaver.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttResourcePanel,net.sourceforge.ganttproject.GanttGraphicArea,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"/**\r\n * The constructor\r\n */\r\npublic GanttXMLSaver(IGanttProject project, GanttTree2 tree, GanttResourcePanel peop, GanttGraphicArea area, UIFacade uiFacade) {\r\n    this.tree = tree;\r\n    this.area = area;\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":855, "parametername":"GanttTree2 tree", "parametertype":"net.sourceforge.ganttproject.GanttTree2", "parameterclass":73, "classid":452, "classname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "methodid":3518, "methodname":"net.sourceforge.ganttproject.io.GanttXMLSaver.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttResourcePanel,net.sourceforge.ganttproject.GanttGraphicArea,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"/**\r\n * The constructor\r\n */\r\npublic GanttXMLSaver(IGanttProject project, GanttTree2 tree, GanttResourcePanel peop, GanttGraphicArea area, UIFacade uiFacade) {\r\n    this.tree = tree;\r\n    this.area = area;\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":856, "parametername":"GanttResourcePanel peop", "parametertype":"net.sourceforge.ganttproject.GanttResourcePanel", "parameterclass":61, "classid":452, "classname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "methodid":3518, "methodname":"net.sourceforge.ganttproject.io.GanttXMLSaver.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttResourcePanel,net.sourceforge.ganttproject.GanttGraphicArea,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"/**\r\n * The constructor\r\n */\r\npublic GanttXMLSaver(IGanttProject project, GanttTree2 tree, GanttResourcePanel peop, GanttGraphicArea area, UIFacade uiFacade) {\r\n    this.tree = tree;\r\n    this.area = area;\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":857, "parametername":"GanttGraphicArea area", "parametertype":"net.sourceforge.ganttproject.GanttGraphicArea", "parameterclass":45, "classid":452, "classname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "methodid":3518, "methodname":"net.sourceforge.ganttproject.io.GanttXMLSaver.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttResourcePanel,net.sourceforge.ganttproject.GanttGraphicArea,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"/**\r\n * The constructor\r\n */\r\npublic GanttXMLSaver(IGanttProject project, GanttTree2 tree, GanttResourcePanel peop, GanttGraphicArea area, UIFacade uiFacade) {\r\n    this.tree = tree;\r\n    this.area = area;\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":858, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":452, "classname":"net.sourceforge.ganttproject.io.GanttXMLSaver", "methodid":3518, "methodname":"net.sourceforge.ganttproject.io.GanttXMLSaver.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.GanttTree2,net.sourceforge.ganttproject.GanttResourcePanel,net.sourceforge.ganttproject.GanttGraphicArea,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"/**\r\n * The constructor\r\n */\r\npublic GanttXMLSaver(IGanttProject project, GanttTree2 tree, GanttResourcePanel peop, GanttGraphicArea area, UIFacade uiFacade) {\r\n    this.tree = tree;\r\n    this.area = area;\r\n    myProject = project;\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":859, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":454, "classname":"net.sourceforge.ganttproject.io.ResourceSaver", "methodid":3534, "methodname":"net.sourceforge.ganttproject.io.ResourceSaver.save(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler)", "isreturn":0, "sourcecode":"void save(IGanttProject project, TransformerHandler handler) throws SAXException {\r\n    final AttributesImpl attrs = new AttributesImpl();\r\n    startElement(\"resources\", handler);\r\n    saveCustomColumnDefinitions(project, handler);\r\n    ProjectResource[] resources = project.getHumanResourceManager().getResourcesArray();\r\n    for (int i = 0; i < (resources.length); i++) {\r\n        HumanResource p = ((HumanResource) (resources[i]));\r\n        addAttribute(\"id\", String.valueOf(p.getId()), attrs);\r\n        addAttribute(\"name\", p.getName(), attrs);\r\n        addAttribute(\"function\", p.getRole().getPersistentID(), attrs);\r\n        addAttribute(\"contacts\", p.getMail(), attrs);\r\n        addAttribute(\"phone\", p.getPhone(), attrs);\r\n        startElement(\"resource\", attrs, handler);\r\n        {\r\n            saveCustomProperties(project, p, handler);\r\n        }\r\n        endElement(\"resource\", handler);\r\n    }\r\n    endElement(\"resources\", handler);\r\n}"},
 {"id":860, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":454, "classname":"net.sourceforge.ganttproject.io.ResourceSaver", "methodid":3536, "methodname":"net.sourceforge.ganttproject.io.ResourceSaver.saveCustomProperties(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.resource.HumanResource,javax.xml.transform.sax.TransformerHandler)", "isreturn":0, "sourcecode":"private void saveCustomProperties(IGanttProject project, HumanResource resource, TransformerHandler handler) throws SAXException {\r\n    // CustomPropertyManager customPropsManager = project.getHumanResourceManager().getCustomPropertyManager();\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    List properties = resource.getCustomProperties();\r\n    for (int i = 0; i < (properties.size()); i++) {\r\n        CustomProperty nextProperty = ((CustomProperty) (properties.get(i)));\r\n        CustomPropertyDefinition nextDefinition = nextProperty.getDefinition();\r\n        if (((nextProperty.getValue()) != null) && (!(nextProperty.getValue().equals(nextDefinition.getDefaultValue())))) {\r\n            addAttribute(\"definition-id\", nextDefinition.getID(), attrs);\r\n            addAttribute(\"value\", nextProperty.getValueAsString(), attrs);\r\n            emptyElement(\"custom-property\", attrs, handler);\r\n        }\r\n    }\r\n}"},
 {"id":861, "parametername":"HumanResource resource", "parametertype":"net.sourceforge.ganttproject.resource.HumanResource", "parameterclass":499, "classid":454, "classname":"net.sourceforge.ganttproject.io.ResourceSaver", "methodid":3536, "methodname":"net.sourceforge.ganttproject.io.ResourceSaver.saveCustomProperties(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.resource.HumanResource,javax.xml.transform.sax.TransformerHandler)", "isreturn":0, "sourcecode":"private void saveCustomProperties(IGanttProject project, HumanResource resource, TransformerHandler handler) throws SAXException {\r\n    // CustomPropertyManager customPropsManager = project.getHumanResourceManager().getCustomPropertyManager();\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    List properties = resource.getCustomProperties();\r\n    for (int i = 0; i < (properties.size()); i++) {\r\n        CustomProperty nextProperty = ((CustomProperty) (properties.get(i)));\r\n        CustomPropertyDefinition nextDefinition = nextProperty.getDefinition();\r\n        if (((nextProperty.getValue()) != null) && (!(nextProperty.getValue().equals(nextDefinition.getDefaultValue())))) {\r\n            addAttribute(\"definition-id\", nextDefinition.getID(), attrs);\r\n            addAttribute(\"value\", nextProperty.getValueAsString(), attrs);\r\n            emptyElement(\"custom-property\", attrs, handler);\r\n        }\r\n    }\r\n}"},
 {"id":862, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":454, "classname":"net.sourceforge.ganttproject.io.ResourceSaver", "methodid":3535, "methodname":"net.sourceforge.ganttproject.io.ResourceSaver.saveCustomColumnDefinitions(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler)", "isreturn":0, "sourcecode":"private void saveCustomColumnDefinitions(IGanttProject project, TransformerHandler handler) throws SAXException {\r\n    CustomPropertyManager customPropsManager = project.getHumanResourceManager().getCustomPropertyManager();\r\n    /* <CustomPropertyDefinition> */\r\n    List definitions = customPropsManager.getDefinitions();\r\n    // HumanResourceManager hrManager = (HumanResourceManager) project.getHumanResourceManager();\r\n    // Map customFields = hrManager.getCustomFields();\r\n    // if (customFields.size()==0) {\r\n    // return;\r\n    // }\r\n    final AttributesImpl attrs = new AttributesImpl();\r\n    // startElement(\"custom-properties-definition\", handler);\r\n    for (int i = 0; i < (definitions.size()); i++) {\r\n        // ResourceColumn nextField = (ResourceColumn) fields.next();\r\n        CustomPropertyDefinition nextDefinition = ((CustomPropertyDefinition) (definitions.get(i)));\r\n        addAttribute(\"id\", nextDefinition.getID(), attrs);\r\n        addAttribute(\"name\", nextDefinition.getName(), attrs);\r\n        addAttribute(\"type\", nextDefinition.getTypeAsString(), attrs);\r\n        addAttribute(\"default-value\", nextDefinition.getDefaultValueAsString(), attrs);\r\n        emptyElement(\"custom-property-definition\", attrs, handler);\r\n    }\r\n    // endElement(\"custom-properties-definition\", handler);\r\n}"},
 {"id":863, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":456, "classname":"net.sourceforge.ganttproject.io.TaskSaver", "methodid":3548, "methodname":"net.sourceforge.ganttproject.io.TaskSaver.save(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler,java.awt.Color)", "isreturn":0, "sourcecode":"void save(IGanttProject project, TransformerHandler handler, Color defaultColor) throws IOException, SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    if (defaultColor != null) {\r\n        addAttribute(\"color\", ColorConvertion.getColor(defaultColor), attrs);\r\n    }\r\n    startElement(\"tasks\", attrs, handler);\r\n    startElement(\"taskproperties\", handler);\r\n    writeTaskProperties(handler, project.getCustomColumnsStorage());\r\n    endElement(\"taskproperties\", handler);\r\n    Task rootTask = project.getTaskManager().getTaskHierarchy().getRootTask();\r\n    Task[] tasks = project.getTaskManager().getTaskHierarchy().getNestedTasks(rootTask);\r\n    for (int i = 0; i < (tasks.length); i++) {\r\n        writeTask(handler, ((GanttTask) (tasks[i])), project.getCustomColumnsStorage());\r\n    }\r\n    endElement(\"tasks\", handler);\r\n}"},
 {"id":864, "parametername":"GanttTask task", "parametertype":"net.sourceforge.ganttproject.GanttTask", "parameterclass":63, "classid":456, "classname":"net.sourceforge.ganttproject.io.TaskSaver", "methodid":3549, "methodname":"net.sourceforge.ganttproject.io.TaskSaver.writeTask(javax.xml.transform.sax.TransformerHandler,net.sourceforge.ganttproject.GanttTask,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"private void writeTask(TransformerHandler handler, GanttTask task, CustomColumnsStorage customColumns) throws IOException, SAXException {\r\n    if ((task.getTaskID()) == (-1)) {\r\n        throw new IllegalArgumentException((\"Is it a fake root task? Task=\" + task));\r\n    }\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    addAttribute(\"id\", String.valueOf(task.getTaskID()), attrs);\r\n    addAttribute(\"name\", task.getName(), attrs);\r\n    if (task.colorDefined()) {\r\n        addAttribute(\"color\", ColorConvertion.getColor(task.getColor()), attrs);\r\n    }\r\n    if (task.shapeDefined()) {\r\n        addAttribute(\"shape\", task.getShape().getArray(), attrs);\r\n    }\r\n    addAttribute(\"meeting\", Boolean.valueOf(task.isMilestone()).toString(), attrs);\r\n    if (task.isProjectTask()) {\r\n        addAttribute(\"project\", Boolean.TRUE.toString(), attrs);\r\n    }\r\n    addAttribute(\"start\", task.getStart().toXMLString(), attrs);\r\n    addAttribute(\"duration\", String.valueOf(task.getLength()), attrs);\r\n    addAttribute(\"complete\", String.valueOf(task.getCompletionPercentage()), attrs);\r\n    if ((task.getThird()) != null) {\r\n        addAttribute(\"thirdDate\", task.getThird().toXMLString(), attrs);\r\n        addAttribute(\"thirdDate-constraint\", String.valueOf(task.getThirdDateConstraint()), attrs);\r\n    }\r\n    addAttribute(\"priority\", String.valueOf(task.getPriority()), attrs);\r\n    final String sWebLink = task.getWebLink();\r\n    if (((sWebLink != null) && (!(sWebLink.equals(\"\")))) && (!(sWebLink.equals(\"http://\")))) {\r\n        addAttribute(\"webLink\", URLEncoder.encode(sWebLink, \"ISO-8859-1\"), attrs);\r\n    }\r\n    addAttribute(\"expand\", String.valueOf(task.getExpand()), attrs);\r\n    startElement(\"task\", attrs, handler);\r\n    if (((task.getNotes()) != null) && ((task.getNotes().length()) > 0)) {\r\n        cdataElement(\"notes\", task.getNotes(), attrs, handler);\r\n        // fout.write(space2 + \"<notes>\");\r\n        // fout.write(\"\n\"\r\n        // + space2\r\n        // + s\r\n        // + correct(replaceAll(task.getNotes(), \"\n\", \"\n\"\r\n        // + space2 + s)));\r\n        // fout.write(\"\n\" + space2 + \"</notes>\n\");\r\n    }\r\n    // use successors to write depends information\r\n    final TaskDependency[] depsAsDependee = task.getDependenciesAsDependee().toArray();\r\n    for (int i = 0; i < (depsAsDependee.length); i++) {\r\n        TaskDependency next = depsAsDependee[i];\r\n        addAttribute(\"id\", String.valueOf(next.getDependant().getTaskID()), attrs);\r\n        addAttribute(\"type\", String.valueOf(next.getConstraint().getID()), attrs);\r\n        addAttribute(\"difference\", String.valueOf(next.getDifference()), attrs);\r\n        addAttribute(\"hardness\", next.getHardness().getIdentifier(), attrs);\r\n        emptyElement(\"depend\", attrs, handler);\r\n    }\r\n    CustomColumnsValues ccv = task.getCustomValues();\r\n    for (/* <CustomColumn> */\r\n    Iterator it = customColumns.getCustomColums().iterator(); it.hasNext();) {\r\n        CustomColumn nextColumn = ((CustomColumn) (it.next()));\r\n        final String name = nextColumn.getName();\r\n        final String idc = nextColumn.getId();\r\n        Object value = ccv.getValue(name);\r\n        if ((GregorianCalendar.class.isAssignableFrom(nextColumn.getType())) && (value != null)) {\r\n            value = DateParser.getIsoDate(((GanttCalendar) (value)).getTime());\r\n        }\r\n        addAttribute(\"taskproperty-id\", idc, attrs);\r\n        addAttribute(\"value\", (value == null ? null : String.valueOf(value)), attrs);\r\n        emptyElement(\"customproperty\", attrs, handler);\r\n    }\r\n    // Write the child of the task\r\n    if (task.getManager().getTaskHierarchy().hasNestedTasks(task)) {\r\n        Task[] nestedTasks = task.getManager().getTaskHierarchy().getNestedTasks(task);\r\n        for (int i = 0; i < (nestedTasks.length); i++) {\r\n            writeTask(handler, ((GanttTask) (nestedTasks[i])), customColumns);\r\n        }\r\n    }\r\n    // end of task section\r\n    endElement(\"task\", handler);\r\n}"},
 {"id":865, "parametername":"CustomColumnsStorage customColumns", "parametertype":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "parameterclass":535, "classid":456, "classname":"net.sourceforge.ganttproject.io.TaskSaver", "methodid":3549, "methodname":"net.sourceforge.ganttproject.io.TaskSaver.writeTask(javax.xml.transform.sax.TransformerHandler,net.sourceforge.ganttproject.GanttTask,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"private void writeTask(TransformerHandler handler, GanttTask task, CustomColumnsStorage customColumns) throws IOException, SAXException {\r\n    if ((task.getTaskID()) == (-1)) {\r\n        throw new IllegalArgumentException((\"Is it a fake root task? Task=\" + task));\r\n    }\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    addAttribute(\"id\", String.valueOf(task.getTaskID()), attrs);\r\n    addAttribute(\"name\", task.getName(), attrs);\r\n    if (task.colorDefined()) {\r\n        addAttribute(\"color\", ColorConvertion.getColor(task.getColor()), attrs);\r\n    }\r\n    if (task.shapeDefined()) {\r\n        addAttribute(\"shape\", task.getShape().getArray(), attrs);\r\n    }\r\n    addAttribute(\"meeting\", Boolean.valueOf(task.isMilestone()).toString(), attrs);\r\n    if (task.isProjectTask()) {\r\n        addAttribute(\"project\", Boolean.TRUE.toString(), attrs);\r\n    }\r\n    addAttribute(\"start\", task.getStart().toXMLString(), attrs);\r\n    addAttribute(\"duration\", String.valueOf(task.getLength()), attrs);\r\n    addAttribute(\"complete\", String.valueOf(task.getCompletionPercentage()), attrs);\r\n    if ((task.getThird()) != null) {\r\n        addAttribute(\"thirdDate\", task.getThird().toXMLString(), attrs);\r\n        addAttribute(\"thirdDate-constraint\", String.valueOf(task.getThirdDateConstraint()), attrs);\r\n    }\r\n    addAttribute(\"priority\", String.valueOf(task.getPriority()), attrs);\r\n    final String sWebLink = task.getWebLink();\r\n    if (((sWebLink != null) && (!(sWebLink.equals(\"\")))) && (!(sWebLink.equals(\"http://\")))) {\r\n        addAttribute(\"webLink\", URLEncoder.encode(sWebLink, \"ISO-8859-1\"), attrs);\r\n    }\r\n    addAttribute(\"expand\", String.valueOf(task.getExpand()), attrs);\r\n    startElement(\"task\", attrs, handler);\r\n    if (((task.getNotes()) != null) && ((task.getNotes().length()) > 0)) {\r\n        cdataElement(\"notes\", task.getNotes(), attrs, handler);\r\n        // fout.write(space2 + \"<notes>\");\r\n        // fout.write(\"\n\"\r\n        // + space2\r\n        // + s\r\n        // + correct(replaceAll(task.getNotes(), \"\n\", \"\n\"\r\n        // + space2 + s)));\r\n        // fout.write(\"\n\" + space2 + \"</notes>\n\");\r\n    }\r\n    // use successors to write depends information\r\n    final TaskDependency[] depsAsDependee = task.getDependenciesAsDependee().toArray();\r\n    for (int i = 0; i < (depsAsDependee.length); i++) {\r\n        TaskDependency next = depsAsDependee[i];\r\n        addAttribute(\"id\", String.valueOf(next.getDependant().getTaskID()), attrs);\r\n        addAttribute(\"type\", String.valueOf(next.getConstraint().getID()), attrs);\r\n        addAttribute(\"difference\", String.valueOf(next.getDifference()), attrs);\r\n        addAttribute(\"hardness\", next.getHardness().getIdentifier(), attrs);\r\n        emptyElement(\"depend\", attrs, handler);\r\n    }\r\n    CustomColumnsValues ccv = task.getCustomValues();\r\n    for (/* <CustomColumn> */\r\n    Iterator it = customColumns.getCustomColums().iterator(); it.hasNext();) {\r\n        CustomColumn nextColumn = ((CustomColumn) (it.next()));\r\n        final String name = nextColumn.getName();\r\n        final String idc = nextColumn.getId();\r\n        Object value = ccv.getValue(name);\r\n        if ((GregorianCalendar.class.isAssignableFrom(nextColumn.getType())) && (value != null)) {\r\n            value = DateParser.getIsoDate(((GanttCalendar) (value)).getTime());\r\n        }\r\n        addAttribute(\"taskproperty-id\", idc, attrs);\r\n        addAttribute(\"value\", (value == null ? null : String.valueOf(value)), attrs);\r\n        emptyElement(\"customproperty\", attrs, handler);\r\n    }\r\n    // Write the child of the task\r\n    if (task.getManager().getTaskHierarchy().hasNestedTasks(task)) {\r\n        Task[] nestedTasks = task.getManager().getTaskHierarchy().getNestedTasks(task);\r\n        for (int i = 0; i < (nestedTasks.length); i++) {\r\n            writeTask(handler, ((GanttTask) (nestedTasks[i])), customColumns);\r\n        }\r\n    }\r\n    // end of task section\r\n    endElement(\"task\", handler);\r\n}"},
 {"id":866, "parametername":"CustomColumnsStorage customCol", "parametertype":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "parameterclass":535, "classid":456, "classname":"net.sourceforge.ganttproject.io.TaskSaver", "methodid":3550, "methodname":"net.sourceforge.ganttproject.io.TaskSaver.writeTaskProperties(javax.xml.transform.sax.TransformerHandler,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"private void writeTaskProperties(TransformerHandler handler, CustomColumnsStorage customCol) throws SAXException {\r\n    writeTaskProperty(handler, \"tpd0\", \"type\", \"default\", \"icon\");\r\n    writeTaskProperty(handler, \"tpd1\", \"priority\", \"default\", \"icon\");\r\n    writeTaskProperty(handler, \"tpd2\", \"info\", \"default\", \"icon\");\r\n    writeTaskProperty(handler, \"tpd3\", \"name\", \"default\", \"text\");\r\n    writeTaskProperty(handler, \"tpd4\", \"begindate\", \"default\", \"date\");\r\n    writeTaskProperty(handler, \"tpd5\", \"enddate\", \"default\", \"date\");\r\n    writeTaskProperty(handler, \"tpd6\", \"duration\", \"default\", \"int\");\r\n    writeTaskProperty(handler, \"tpd7\", \"completion\", \"default\", \"int\");\r\n    writeTaskProperty(handler, \"tpd8\", \"coordinator\", \"default\", \"text\");\r\n    writeTaskProperty(handler, \"tpd9\", \"predecessorsr\", \"default\", \"text\");\r\n    /* <CustomColumn> */\r\n    Iterator it = customCol.getCustomColums().iterator();\r\n    while (it.hasNext()) {\r\n        final CustomColumn cc = ((CustomColumn) (it.next()));\r\n        Object defVal = cc.getDefaultValue();\r\n        final Class cla = cc.getType();\r\n        final String valueType = TaskSaver.encodeFieldType(cla);\r\n        if (valueType == null) {\r\n            continue;\r\n        }\r\n        if ((\"date\".equals(valueType)) && (defVal != null)) {\r\n            assert defVal instanceof GanttCalendar;\r\n            defVal = DateParser.getIsoDate(((GanttCalendar) (defVal)).getTime());\r\n        }\r\n        String idcStr = cc.getId();\r\n        writeTaskProperty(handler, idcStr, cc.getName(), \"custom\", valueType, (defVal == null ? null : String.valueOf(defVal)));\r\n    } \r\n}"},
 {"id":867, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":457, "classname":"net.sourceforge.ganttproject.io.VacationSaver", "methodid":3554, "methodname":"net.sourceforge.ganttproject.io.VacationSaver.save(net.sourceforge.ganttproject.IGanttProject,javax.xml.transform.sax.TransformerHandler)", "isreturn":0, "sourcecode":"void save(IGanttProject project, TransformerHandler handler) throws SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    startElement(\"vacations\", handler);\r\n    ProjectResource[] resources = project.getHumanResourceManager().getResourcesArray();\r\n    for (int i = 0; i < (resources.length); i++) {\r\n        HumanResource p = ((HumanResource) (resources[i]));\r\n        if ((p.getDaysOff()) != null)\r\n            for (int j = 0; j < (p.getDaysOff().size()); j++) {\r\n                GanttDaysOff gdo = ((GanttDaysOff) (p.getDaysOff().getElementAt(j)));\r\n                addAttribute(\"start\", gdo.getStart().toXMLString(), attrs);\r\n                addAttribute(\"end\", gdo.getFinish().toXMLString(), attrs);\r\n                addAttribute(\"resourceid\", String.valueOf(p.getId()), attrs);\r\n                emptyElement(\"vacation\", attrs, handler);\r\n            }\r\n\r\n    }\r\n    endElement(\"vacations\", handler);\r\n}"},
 {"id":868, "parametername":"UIFacade facade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":458, "classname":"net.sourceforge.ganttproject.io.ViewSaver", "methodid":3556, "methodname":"net.sourceforge.ganttproject.io.ViewSaver.save(net.sourceforge.ganttproject.gui.UIFacade,javax.xml.transform.sax.TransformerHandler)", "isreturn":0, "sourcecode":"public void save(UIFacade facade, TransformerHandler handler) throws SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    addAttribute(\"zooming-state\", facade.getZoomManager().getZoomState().getPersistentName(), attrs);\r\n    addAttribute(\"id\", \"gantt-chart\", attrs);\r\n    emptyElement(\"view\", attrs, handler);\r\n    addAttribute(\"id\", \"resource-table\", attrs);\r\n    startElement(\"view\", attrs, handler);\r\n    writeColumns(facade.getResourceTree().getVisibleFields(), handler);\r\n    endElement(\"view\", handler);\r\n}"},
 {"id":869, "parametername":"TableHeaderUIFacade visibleFields", "parametertype":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade", "parameterclass":324, "classid":458, "classname":"net.sourceforge.ganttproject.io.ViewSaver", "methodid":3557, "methodname":"net.sourceforge.ganttproject.io.ViewSaver.writeColumns(net.sourceforge.ganttproject.gui.TableHeaderUIFacade,javax.xml.transform.sax.TransformerHandler)", "isreturn":0, "sourcecode":"protected void writeColumns(TableHeaderUIFacade visibleFields, TransformerHandler handler) throws SAXException {\r\n    AttributesImpl attrs = new AttributesImpl();\r\n    int totalWidth = 0;\r\n    for (int i = 0; i < (visibleFields.getSize()); i++) {\r\n        if (visibleFields.getField(i).isVisible()) {\r\n            totalWidth += visibleFields.getField(i).getWidth();\r\n        }\r\n    }\r\n    for (int i = 0; i < (visibleFields.getSize()); i++) {\r\n        TableHeaderUIFacade.Column field = visibleFields.getField(i);\r\n        if (field.isVisible()) {\r\n            addAttribute(\"id\", field.getID(), attrs);\r\n            addAttribute(\"name\", field.getName(), attrs);\r\n            addAttribute(\"width\", (((field.getWidth()) * 100) / totalWidth), attrs);\r\n            addAttribute(\"order\", field.getOrder(), attrs);\r\n            emptyElement(\"field\", attrs, handler);\r\n        }\r\n    }\r\n}"},
 {"id":870, "parametername":"GanttLanguage language", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage", "parameterclass":461, "classid":459, "classname":"net.sourceforge.ganttproject.language.GanttLanguage$Event", "methodid":3581, "methodname":"net.sourceforge.ganttproject.language.GanttLanguage$Event.-init-(net.sourceforge.ganttproject.language.GanttLanguage)", "isreturn":0, "sourcecode":"public Event(GanttLanguage language) {\r\n    super(language);\r\n}"},
 {"id":871, "parametername":"GanttLanguage.Event event", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage$Event", "parameterclass":459, "classid":460, "classname":"net.sourceforge.ganttproject.language.GanttLanguage$Listener", "methodid":3583, "methodname":"net.sourceforge.ganttproject.language.GanttLanguage$Listener.languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "isreturn":0, "sourcecode":"public void languageChanged(GanttLanguage.Event event);"},
 {"id":872, "parametername":"GanttCalendar date", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":461, "classname":"net.sourceforge.ganttproject.language.GanttLanguage", "methodid":3564, "methodname":"net.sourceforge.ganttproject.language.GanttLanguage.formatDate(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public String formatDate(GanttCalendar date) {\r\n    return currentDateFormat.format(date.getTime());\r\n}"},
 {"id":873, "parametername":"GanttCalendar date", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":461, "classname":"net.sourceforge.ganttproject.language.GanttLanguage", "methodid":3565, "methodname":"net.sourceforge.ganttproject.language.GanttLanguage.formatShortDate(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public String formatShortDate(GanttCalendar date) {\r\n    return shortCurrentDateFormat.format(date.getTime());\r\n}"},
 {"id":874, "parametername":"GanttCalendar date", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":461, "classname":"net.sourceforge.ganttproject.language.GanttLanguage", "methodid":3566, "methodname":"net.sourceforge.ganttproject.language.GanttLanguage.formatTime(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public String formatTime(GanttCalendar date) {\r\n    return currentTimeFormat.format(date.getTime());\r\n}"},
 {"id":875, "parametername":"GanttLanguage.Listener listener", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage$Listener", "parameterclass":460, "classid":461, "classname":"net.sourceforge.ganttproject.language.GanttLanguage", "methodid":3560, "methodname":"net.sourceforge.ganttproject.language.GanttLanguage.addListener(net.sourceforge.ganttproject.language.GanttLanguage$Listener)", "isreturn":0, "sourcecode":"public void addListener(GanttLanguage.Listener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":876, "parametername":"GanttLanguage.Listener listener", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage$Listener", "parameterclass":460, "classid":461, "classname":"net.sourceforge.ganttproject.language.GanttLanguage", "methodid":3579, "methodname":"net.sourceforge.ganttproject.language.GanttLanguage.removeListener(net.sourceforge.ganttproject.language.GanttLanguage$Listener)", "isreturn":0, "sourcecode":"public void removeListener(GanttLanguage.Listener listener) {\r\n    myListeners.remove(listener);\r\n}"},
 {"id":877, "parametername":"ResourceManager resourceMgr", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":462, "classname":"net.sourceforge.ganttproject.parser.AllocationTagHandler", "methodid":3584, "methodname":"net.sourceforge.ganttproject.parser.AllocationTagHandler.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.roles.RoleManager)", "isreturn":0, "sourcecode":"public AllocationTagHandler(ResourceManager resourceMgr, TaskManager taskMgr, RoleManager roleMgr) {\r\n    myResourceManager = resourceMgr;\r\n    myTaskManager = taskMgr;\r\n    myRoleManager = roleMgr;\r\n}"},
 {"id":878, "parametername":"TaskManager taskMgr", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":462, "classname":"net.sourceforge.ganttproject.parser.AllocationTagHandler", "methodid":3584, "methodname":"net.sourceforge.ganttproject.parser.AllocationTagHandler.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.roles.RoleManager)", "isreturn":0, "sourcecode":"public AllocationTagHandler(ResourceManager resourceMgr, TaskManager taskMgr, RoleManager roleMgr) {\r\n    myResourceManager = resourceMgr;\r\n    myTaskManager = taskMgr;\r\n    myRoleManager = roleMgr;\r\n}"},
 {"id":879, "parametername":"RoleManager roleMgr", "parametertype":"net.sourceforge.ganttproject.roles.RoleManager", "parameterclass":517, "classid":462, "classname":"net.sourceforge.ganttproject.parser.AllocationTagHandler", "methodid":3584, "methodname":"net.sourceforge.ganttproject.parser.AllocationTagHandler.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.roles.RoleManager)", "isreturn":0, "sourcecode":"public AllocationTagHandler(ResourceManager resourceMgr, TaskManager taskMgr, RoleManager roleMgr) {\r\n    myResourceManager = resourceMgr;\r\n    myTaskManager = taskMgr;\r\n    myRoleManager = roleMgr;\r\n}"},
 {"id":880, "parametername":"GanttChart chart", "parametertype":"net.sourceforge.ganttproject.chart.GanttChart", "parameterclass":185, "classid":463, "classname":"net.sourceforge.ganttproject.parser.BlankLineTagHandler", "methodid":3593, "methodname":"net.sourceforge.ganttproject.parser.BlankLineTagHandler.-init-(net.sourceforge.ganttproject.chart.GanttChart)", "isreturn":0, "sourcecode":"public BlankLineTagHandler(GanttChart chart) {\r\n    myGanttChart = chart;\r\n}"},
 {"id":881, "parametername":"ParsingContext context", "parametertype":"net.sourceforge.ganttproject.parser.ParsingContext", "parameterclass":476, "classid":466, "classname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler", "methodid":3598, "methodname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler.-init-(net.sourceforge.ganttproject.parser.ParsingContext,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"public CustomPropertiesTagHandler(ParsingContext context, TaskManager taskManager, CustomColumnsStorage columnStorage) {\r\n    this.taskManager = taskManager;\r\n    this.parsingContext = context;\r\n    this.listStructure = new ArrayList();\r\n    myColumnStorage = columnStorage;\r\n}"},
 {"id":882, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":466, "classname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler", "methodid":3598, "methodname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler.-init-(net.sourceforge.ganttproject.parser.ParsingContext,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"public CustomPropertiesTagHandler(ParsingContext context, TaskManager taskManager, CustomColumnsStorage columnStorage) {\r\n    this.taskManager = taskManager;\r\n    this.parsingContext = context;\r\n    this.listStructure = new ArrayList();\r\n    myColumnStorage = columnStorage;\r\n}"},
 {"id":883, "parametername":"CustomColumnsStorage columnStorage", "parametertype":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "parameterclass":535, "classid":466, "classname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler", "methodid":3598, "methodname":"net.sourceforge.ganttproject.parser.CustomPropertiesTagHandler.-init-(net.sourceforge.ganttproject.parser.ParsingContext,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"public CustomPropertiesTagHandler(ParsingContext context, TaskManager taskManager, CustomColumnsStorage columnStorage) {\r\n    this.taskManager = taskManager;\r\n    this.parsingContext = context;\r\n    this.listStructure = new ArrayList();\r\n    myColumnStorage = columnStorage;\r\n}"},
 {"id":884, "parametername":"GPCalendar calendar", "parametertype":"net.sourceforge.ganttproject.calendar.GPCalendar", "parameterclass":146, "classid":468, "classname":"net.sourceforge.ganttproject.parser.DefaultWeekTagHandler", "methodid":3612, "methodname":"net.sourceforge.ganttproject.parser.DefaultWeekTagHandler.-init-(net.sourceforge.ganttproject.calendar.GPCalendar)", "isreturn":0, "sourcecode":"public DefaultWeekTagHandler(GPCalendar calendar) {\r\n    myGPCalendar = calendar;\r\n    for (int i = 1; i <= 7; i++) {\r\n        myGPCalendar.setWeekDayType(i, GPCalendar.DayType.WORKING);\r\n    }\r\n}"},
 {"id":885, "parametername":"ParsingContext context", "parametertype":"net.sourceforge.ganttproject.parser.ParsingContext", "parameterclass":476, "classid":470, "classname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "methodid":3617, "methodname":"net.sourceforge.ganttproject.parser.DependencyTagHandler.-init-(net.sourceforge.ganttproject.parser.ParsingContext,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public DependencyTagHandler(ParsingContext context, TaskManager taskManager, UIFacade uiFacade) {\r\n    myContext = context;\r\n    myTaskManager = taskManager;\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":886, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":470, "classname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "methodid":3617, "methodname":"net.sourceforge.ganttproject.parser.DependencyTagHandler.-init-(net.sourceforge.ganttproject.parser.ParsingContext,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public DependencyTagHandler(ParsingContext context, TaskManager taskManager, UIFacade uiFacade) {\r\n    myContext = context;\r\n    myTaskManager = taskManager;\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":887, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":470, "classname":"net.sourceforge.ganttproject.parser.DependencyTagHandler", "methodid":3617, "methodname":"net.sourceforge.ganttproject.parser.DependencyTagHandler.-init-(net.sourceforge.ganttproject.parser.ParsingContext,net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public DependencyTagHandler(ParsingContext context, TaskManager taskManager, UIFacade uiFacade) {\r\n    myContext = context;\r\n    myTaskManager = taskManager;\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":888, "parametername":"TaskDependency.Hardness hardness", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness", "parameterclass":597, "classid":469, "classname":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure", "methodid":3638, "methodname":"net.sourceforge.ganttproject.parser.DependencyTagHandler$GanttDependStructure.setHardness(net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness)", "isreturn":0, "sourcecode":"public void setHardness(TaskDependency.Hardness hardness) {\r\n    myHardness = hardness;\r\n}"},
 {"id":889, "parametername":"TagHandler handler", "parametertype":"net.sourceforge.ganttproject.parser.TagHandler", "parameterclass":481, "classid":472, "classname":"net.sourceforge.ganttproject.parser.GPParser", "methodid":3645, "methodname":"net.sourceforge.ganttproject.parser.GPParser.addTagHandler(net.sourceforge.ganttproject.parser.TagHandler)", "isreturn":0, "sourcecode":"void addTagHandler(TagHandler handler);"},
 {"id":890, "parametername":"ParsingListener listener", "parametertype":"net.sourceforge.ganttproject.parser.ParsingListener", "parameterclass":477, "classid":472, "classname":"net.sourceforge.ganttproject.parser.GPParser", "methodid":3644, "methodname":"net.sourceforge.ganttproject.parser.GPParser.addParsingListener(net.sourceforge.ganttproject.parser.ParsingListener)", "isreturn":0, "sourcecode":"void addParsingListener(ParsingListener listener);"},
 {"id":891, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":473, "classname":"net.sourceforge.ganttproject.parser.HolidayTagHandler", "methodid":3649, "methodname":"net.sourceforge.ganttproject.parser.HolidayTagHandler.-init-(net.sourceforge.ganttproject.IGanttProject)", "isreturn":0, "sourcecode":"public HolidayTagHandler(IGanttProject project) {\r\n    this.project = project;\r\n    project.getActiveCalendar().getPublicHolidays().clear();\r\n}"},
 {"id":892, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":476, "classname":"net.sourceforge.ganttproject.parser.ParsingContext", "methodid":3667, "methodname":"net.sourceforge.ganttproject.parser.ParsingContext.addTaskWithLegacyFixedStart(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"void addTaskWithLegacyFixedStart(Task task) {\r\n    myFixedStartTasks.add(task);\r\n}"},
 {"id":893, "parametername":"ResourceManager resourceManager", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":479, "classname":"net.sourceforge.ganttproject.parser.ResourceTagHandler", "methodid":3680, "methodname":"net.sourceforge.ganttproject.parser.ResourceTagHandler.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.CustomPropertyManager)", "isreturn":0, "sourcecode":"public ResourceTagHandler(ResourceManager resourceManager, RoleManager roleManager, CustomPropertyManager resourceCustomPropertyManager) {\r\n    myResourceManager = ((HumanResourceManager) (resourceManager));\r\n    myCustomPropertyManager = resourceCustomPropertyManager;\r\n    // myResourceManager.clear(); //CleanUP the old stuff\r\n    myRoleManager = roleManager;\r\n}"},
 {"id":894, "parametername":"RoleManager roleManager", "parametertype":"net.sourceforge.ganttproject.roles.RoleManager", "parameterclass":517, "classid":479, "classname":"net.sourceforge.ganttproject.parser.ResourceTagHandler", "methodid":3680, "methodname":"net.sourceforge.ganttproject.parser.ResourceTagHandler.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.CustomPropertyManager)", "isreturn":0, "sourcecode":"public ResourceTagHandler(ResourceManager resourceManager, RoleManager roleManager, CustomPropertyManager resourceCustomPropertyManager) {\r\n    myResourceManager = ((HumanResourceManager) (resourceManager));\r\n    myCustomPropertyManager = resourceCustomPropertyManager;\r\n    // myResourceManager.clear(); //CleanUP the old stuff\r\n    myRoleManager = roleManager;\r\n}"},
 {"id":895, "parametername":"CustomPropertyManager resourceCustomPropertyManager", "parametertype":"net.sourceforge.ganttproject.CustomPropertyManager", "parameterclass":14, "classid":479, "classname":"net.sourceforge.ganttproject.parser.ResourceTagHandler", "methodid":3680, "methodname":"net.sourceforge.ganttproject.parser.ResourceTagHandler.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.CustomPropertyManager)", "isreturn":0, "sourcecode":"public ResourceTagHandler(ResourceManager resourceManager, RoleManager roleManager, CustomPropertyManager resourceCustomPropertyManager) {\r\n    myResourceManager = ((HumanResourceManager) (resourceManager));\r\n    myCustomPropertyManager = resourceCustomPropertyManager;\r\n    // myResourceManager.clear(); //CleanUP the old stuff\r\n    myRoleManager = roleManager;\r\n}"},
 {"id":896, "parametername":"RoleManager roleManager", "parametertype":"net.sourceforge.ganttproject.roles.RoleManager", "parameterclass":517, "classid":480, "classname":"net.sourceforge.ganttproject.parser.RoleTagHandler", "methodid":3690, "methodname":"net.sourceforge.ganttproject.parser.RoleTagHandler.-init-(net.sourceforge.ganttproject.roles.RoleManager)", "isreturn":0, "sourcecode":"public RoleTagHandler(RoleManager roleManager) {\r\n    myRoleManager = roleManager;\r\n    myRoleManager.clear();// CleanUP the old stuff\r\n\r\n}"},
 {"id":897, "parametername":"TableHeaderUIFacade visibleFields", "parametertype":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade", "parameterclass":324, "classid":484, "classname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler", "methodid":3699, "methodname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler.-init-(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "isreturn":0, "sourcecode":"public TaskDisplayColumnsTagHandler(TableHeaderUIFacade visibleFields) {\r\n    this(visibleFields, \"displaycolumn\", \"property-id\", \"order\", \"width\");\r\n}"},
 {"id":898, "parametername":"TableHeaderUIFacade visibleFields", "parametertype":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade", "parameterclass":324, "classid":484, "classname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler", "methodid":3700, "methodname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler.-init-(net.sourceforge.ganttproject.gui.TableHeaderUIFacade,java.lang.String,java.lang.String,java.lang.String,java.lang.String)", "isreturn":0, "sourcecode":"public TaskDisplayColumnsTagHandler(TableHeaderUIFacade visibleFields, String tagName, String idPropertyName, String orderPropertyName, String widthPropertyName) {\r\n    myVisibleFields = visibleFields;\r\n    myTagName = tagName;\r\n    myIDPropertyName = idPropertyName;\r\n    myOrderPropertyName = orderPropertyName;\r\n    myWidthPropertyName = widthPropertyName;\r\n}"},
 {"id":899, "parametername":"TableHeaderUIFacade source", "parametertype":"net.sourceforge.ganttproject.gui.TableHeaderUIFacade", "parameterclass":324, "classid":483, "classname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$VisibleFieldsImpl", "methodid":3719, "methodname":"net.sourceforge.ganttproject.parser.TaskDisplayColumnsTagHandler$VisibleFieldsImpl.importData(net.sourceforge.ganttproject.gui.TableHeaderUIFacade)", "isreturn":0, "sourcecode":"public void importData(TableHeaderUIFacade source) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":900, "parametername":"CustomColumnsStorage columnStorage", "parametertype":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "parameterclass":535, "classid":485, "classname":"net.sourceforge.ganttproject.parser.TaskPropertiesTagHandler", "methodid":3720, "methodname":"net.sourceforge.ganttproject.parser.TaskPropertiesTagHandler.-init-(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"public TaskPropertiesTagHandler(CustomColumnsStorage columnStorage) {\r\n    myColumnStorage = columnStorage;\r\n}"},
 {"id":901, "parametername":"TaskManager mgr", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":486, "classname":"net.sourceforge.ganttproject.parser.TaskTagHandler", "methodid":3726, "methodname":"net.sourceforge.ganttproject.parser.TaskTagHandler.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.parser.ParsingContext)", "isreturn":0, "sourcecode":"public TaskTagHandler(TaskManager mgr, ParsingContext context) {\r\n    myManager = mgr;\r\n    myContext = context;\r\n}"},
 {"id":902, "parametername":"ParsingContext context", "parametertype":"net.sourceforge.ganttproject.parser.ParsingContext", "parameterclass":476, "classid":486, "classname":"net.sourceforge.ganttproject.parser.TaskTagHandler", "methodid":3726, "methodname":"net.sourceforge.ganttproject.parser.TaskTagHandler.-init-(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.parser.ParsingContext)", "isreturn":0, "sourcecode":"public TaskTagHandler(TaskManager mgr, ParsingContext context) {\r\n    myManager = mgr;\r\n    myContext = context;\r\n}"},
 {"id":903, "parametername":"ResourceManager resourceManager", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":487, "classname":"net.sourceforge.ganttproject.parser.VacationTagHandler", "methodid":3731, "methodname":"net.sourceforge.ganttproject.parser.VacationTagHandler.-init-(net.sourceforge.ganttproject.resource.ResourceManager)", "isreturn":0, "sourcecode":"public VacationTagHandler(ResourceManager resourceManager) {\r\n    myResourceManager = ((HumanResourceManager) (resourceManager));\r\n}"},
 {"id":904, "parametername":"UIFacade uiFacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":488, "classname":"net.sourceforge.ganttproject.parser.ViewTagHandler", "methodid":3737, "methodname":"net.sourceforge.ganttproject.parser.ViewTagHandler.-init-(net.sourceforge.ganttproject.gui.UIFacade)", "isreturn":0, "sourcecode":"public ViewTagHandler(UIFacade uiFacade) {\r\n    myUIFacade = uiFacade;\r\n}"},
 {"id":905, "parametername":"Chart chart", "parametertype":"net.sourceforge.ganttproject.chart.Chart", "parameterclass":159, "classid":491, "classname":"net.sourceforge.ganttproject.print.PrintManager", "methodid":3749, "methodname":"net.sourceforge.ganttproject.print.PrintManager.printChart(net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttExportSettings)", "isreturn":0, "sourcecode":"public static void printChart(Chart chart, GanttExportSettings settings) {\r\n    BufferedImage image = chart.getChart(settings);\r\n    PrinterJob printJob = PrinterJob.getPrinterJob();\r\n    printJob.setPrintable(new GanttPrintable(image, GanttPrintable.REDUCE_FACTOR_DEFAULT));\r\n    PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();\r\n    attr.add(MediaSizeName.ISO_A4);\r\n    attr.add(OrientationRequested.LANDSCAPE);\r\n    if (printJob.printDialog(attr)) {\r\n        try {\r\n            printJob.print(attr);\r\n        } catch (Exception e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":906, "parametername":"GanttExportSettings settings", "parametertype":"net.sourceforge.ganttproject.GanttExportSettings", "parameterclass":27, "classid":491, "classname":"net.sourceforge.ganttproject.print.PrintManager", "methodid":3749, "methodname":"net.sourceforge.ganttproject.print.PrintManager.printChart(net.sourceforge.ganttproject.chart.Chart,net.sourceforge.ganttproject.GanttExportSettings)", "isreturn":0, "sourcecode":"public static void printChart(Chart chart, GanttExportSettings settings) {\r\n    BufferedImage image = chart.getChart(settings);\r\n    PrinterJob printJob = PrinterJob.getPrinterJob();\r\n    printJob.setPrintable(new GanttPrintable(image, GanttPrintable.REDUCE_FACTOR_DEFAULT));\r\n    PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();\r\n    attr.add(MediaSizeName.ISO_A4);\r\n    attr.add(OrientationRequested.LANDSCAPE);\r\n    if (printJob.printDialog(attr)) {\r\n        try {\r\n            printJob.print(attr);\r\n        } catch (Exception e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":907, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":495, "classname":"net.sourceforge.ganttproject.print.PrintPreview", "methodid":3751, "methodname":"net.sourceforge.ganttproject.print.PrintPreview.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.chart.Chart,java.util.Date,java.util.Date)", "isreturn":0, "sourcecode":"public PrintPreview(IGanttProject project, UIFacade uifacade, Chart chart, Date start, Date end) {\r\n    super(uifacade.getMainFrame(), GanttLanguage.getInstance().getText(\"preview\"), false);\r\n    myProject = project;\r\n    myUIfacade = uifacade;\r\n    Dimension screenDim = Toolkit.getDefaultToolkit().getScreenSize();\r\n    setSize(((int) ((screenDim.width) * 0.75)), ((int) ((screenDim.height) * 0.75)));\r\n    setLocationRelativeTo(null);\r\n    myChart = chart;\r\n    if (start == null) {\r\n        start = myChart.getStartDate();\r\n    }\r\n    if (end == null) {\r\n        end = myChart.getEndDate();\r\n    }\r\n    // myStartDate = start;\r\n    // myEndDate = end;\r\n    myExportSettings = new GanttExportSettings();\r\n    // myExportSettings.setOnlySelectedItem(!Mediator\r\n    // .getTaskSelectionManager().getSelectedTasks().isEmpty());\r\n    // myExportSettings.setStartDate(myStartDate);\r\n    // myExportSettings.setEndDate(myEndDate);\r\n    myPrintable = new GanttPrintable(myChart.getChart(myExportSettings), GanttPrintable.REDUCE_FACTOR_DEFAULT);\r\n    JToolBar tb = new JToolBar();\r\n    JToolBar tb2 = new JToolBar();\r\n    JButton bPrint = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/print_16.gif\")));\r\n    bPrint.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            print();\r\n        }\r\n    });\r\n    JButton bClose = bClose = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/exit_16.gif\")));\r\n    bClose.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            setVisible(false);\r\n            dispose();\r\n        }\r\n    });\r\n    final JButton bPortrait = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/portrait_16.gif\")));\r\n    final JButton bLandscape = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/landscape_16.gif\")));\r\n    bPortrait.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            run(new Runnable() {\r\n                public void run() {\r\n                    changePageOrientation(PageFormat.PORTRAIT);\r\n                    bLandscape.setEnabled(true);\r\n                    bPortrait.setEnabled(false);\r\n                }\r\n            });\r\n        }\r\n    });\r\n    bLandscape.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            run(new Runnable() {\r\n                public void run() {\r\n                    changePageOrientation(PageFormat.LANDSCAPE);\r\n                    bLandscape.setEnabled(false);\r\n                    bPortrait.setEnabled(true);\r\n                }\r\n            });\r\n        }\r\n    });\r\n    bLandscape.setEnabled(false);\r\n    String[] scales = new String[]{ \"10 %\", \"25 %\", \"50 %\", \"100 %\" };\r\n    myComboScale = new JComboBox(scales);\r\n    myComboScale.setSelectedIndex(2);\r\n    myComboScale.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            run(new Runnable() {\r\n                public void run() {\r\n                    changeScale();\r\n                }\r\n            });\r\n        }\r\n    });\r\n    myComboScale.addItemListener(new ItemListener() {\r\n        public void itemStateChanged(ItemEvent arg0) {\r\n            run(new Runnable() {\r\n                public void run() {\r\n                    changeScale();\r\n                }\r\n            });\r\n        }\r\n    });\r\n    Dimension dim = myComboScale.getPreferredSize();\r\n    dim.setSize(((dim.getWidth()) + 20), dim.getHeight());\r\n    myComboScale.setMaximumSize(dim);\r\n    myComboScale.setPreferredSize(dim);\r\n    myComboScale.setEditable(true);\r\n    boolean isDate = (start != null) && (end != null);\r\n    ImageIcon icon = new ImageIcon(getClass().getResource(\"/icons/calendar_16.gif\"));\r\n    myStart.lock();\r\n    myFinish.lock();\r\n    if (isDate) {\r\n        /* myStartDateButton = new JButton(new GanttCalendar(myStartDate)\n        .toString(), icon);\n        myStartDateButton.setHorizontalTextPosition(SwingConstants.RIGHT);\n        myStartDateButton.addActionListener(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n        myStartDialogDate = new GanttDialogDate(new JDialog(),\n        new GanttCalendar(myStartDate), false);\n        myStartDialogDate.setVisible(true);\n        if (myStartDialogDate.getValue() == GanttDialogDate.OK) {\n        myStartDate = myStartDialogDate.getDate().getTime();\n        myStartDateButton\n        .setText(new GanttCalendar(myStartDate)\n        .toString());\n        myExportSettings.setStartDate(myStartDate);\n        updateSourceImage(myChart.getChart(myExportSettings));\n        }\n        }\n        });\n\n        myEndDateButton = new JButton(new GanttCalendar(myEndDate)\n        .toString(), icon);\n        myEndDateButton.setHorizontalTextPosition(SwingConstants.RIGHT);\n        myEndDateButton.addActionListener(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n        myEndDialogDate = new GanttDialogDate(new JDialog(),\n        new GanttCalendar(myEndDate), false);\n        myEndDialogDate.setVisible(true);\n        if (myEndDialogDate.getValue() == GanttDialogDate.OK) {\n        myEndDate = myEndDialogDate.getDate().getTime();\n        myEndDateButton.setText(new GanttCalendar(myEndDate)\n        .toString());\n        myExportSettings.setEndDate(myEndDate);\n        updateSourceImage(myChart.getChart(myExportSettings));\n        }\n        }\n        });\n         */\r\n        myWholeProjectButton = new JButton(PrintPreview.language.getText(\"wholeProject\"));\r\n        myWholeProjectButton.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                myStart.setValue(myChart.getStartDate());\r\n                myFinish.setValue(myChart.getEndDate());\r\n                /* myStartDate = myChart.getStartDate();\n                myEndDate = myChart.getEndDate();\n                myExportSettings.setStartDate(myStartDate);\n                myExportSettings.setEndDate(myEndDate);\n\n                myEndDateButton.setText(new GanttCalendar(myExportSettings\n                .getEndDate()).toString());\n                myStartDateButton.setText(new GanttCalendar(\n                myExportSettings.getStartDate()).toString());\n                myEndDialogDate = new GanttDialogDate(new JDialog(),\n                new GanttCalendar(myEndDate), false);\n                myStartDialogDate = new GanttDialogDate(new JDialog(),\n                new GanttCalendar(myStartDate), false);\n                updateSourceImage(myChart.getChart(myExportSettings));\n                 */\r\n            }\r\n        });\r\n    }\r\n    Vector vMedia = new Vector();\r\n    // try {\r\n    // vMedia = getAllMediaSizeNameAvailable();\r\n    vMedia.add(MediaSizeName.ISO_A0);\r\n    vMedia.add(MediaSizeName.ISO_A1);\r\n    vMedia.add(MediaSizeName.ISO_A2);\r\n    vMedia.add(MediaSizeName.ISO_A3);\r\n    vMedia.add(MediaSizeName.ISO_A4);\r\n    vMedia.add(MediaSizeName.ISO_A5);\r\n    vMedia.add(MediaSizeName.ISO_A6);\r\n    // } catch (ClassNotFoundException e1) {\r\n    // // TODO Auto-generated catch block\r\n    // e1.printStackTrace();\r\n    // }\r\n    if (vMedia != null) {\r\n        myComboMediaSize = new JComboBox(vMedia);\r\n        dim = myComboMediaSize.getPreferredSize();\r\n        dim.setSize(((dim.getWidth()) + 20), dim.getHeight());\r\n        myComboMediaSize.setMaximumSize(dim);\r\n        myComboMediaSize.setPreferredSize(dim);\r\n        myComboMediaSize.addItemListener(new ItemListener() {\r\n            public void itemStateChanged(ItemEvent arg0) {\r\n                run(new Runnable() {\r\n                    public void run() {\r\n                        Object selectedItem = myComboMediaSize.getSelectedItem();\r\n                        if (selectedItem != null) {\r\n                            myMediaSizeName = ((MediaSizeName) (selectedItem));\r\n                            MediaSize ms = MediaSize.getMediaSizeForName(myMediaSizeName);\r\n                            Paper p = new Paper();\r\n                            float[] size = ms.getSize(MediaSize.INCH);\r\n                            p.setSize(((size[0]) * 72), ((size[1]) * 72));\r\n                            p.setImageableArea(72, 72, ((p.getWidth()) - (72 * 2)), ((p.getHeight()) - (72 * 2)));\r\n                            myPageFormat.setPaper(p);\r\n                            changePageOrientation(myOrientation);\r\n                            statusBar.setText1((((ms.getX(MediaSize.MM)) + \" x \") + (ms.getY(MediaSize.MM))));\r\n                            myPreviewContainer.repaint();\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    bPrint.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"printProject\"))));\r\n    bPortrait.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"portrait\"))));\r\n    bLandscape.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"landscape\"))));\r\n    bClose.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"close\"))));\r\n    final JButton bZoomOut;\r\n    final JButton bZoomIn;\r\n    if (isDate) {\r\n        myWholeProjectButton.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"displayWholeProject\"))));\r\n        /* myStartDateButton.setToolTipText(GanttProject\n        .getToolTip(GanttProject.correctLabel(language\n        .getText(\"setStartDate\"))));\n        myEndDateButton.setToolTipText(GanttProject.getToolTip(GanttProject\n        .correctLabel(language.getText(\"setEndDate\"))));\n         */\r\n        // GanttProject gp = Mediator.getGanttProjectSingleton();\r\n        final ZoomManager zoomManager = myUIfacade.getZoomManager();\r\n        final Action zoomOut = new ZoomOutAction(zoomManager, \"16\");\r\n        final Action zoomIn = new ZoomInAction(zoomManager, \"16\");\r\n        bZoomOut = new JButton(((Icon) (zoomOut.getValue(Action.SMALL_ICON))));\r\n        bZoomIn = new JButton(((Icon) (zoomIn.getValue(Action.SMALL_ICON))));\r\n        bZoomOut.setHorizontalTextPosition(SwingConstants.RIGHT);\r\n        bZoomOut.setText(PrintPreview.language.getText(\"narrowChart\"));\r\n        bZoomOut.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                run(new Runnable() {\r\n                    public void run() {\r\n                        zoomOut.actionPerformed(null);\r\n                        updateSourceImage();\r\n                        bZoomOut.setEnabled(zoomManager.canZoomOut());\r\n                        bZoomIn.setEnabled(zoomManager.canZoomIn());\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        bZoomIn.setHorizontalTextPosition(SwingConstants.RIGHT);\r\n        bZoomIn.setText(PrintPreview.language.getText(\"widenChart\"));\r\n        bZoomIn.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                run(new Runnable() {\r\n                    public void run() {\r\n                        zoomIn.actionPerformed(null);\r\n                        updateSourceImage();\r\n                        bZoomOut.setEnabled(zoomManager.canZoomOut());\r\n                        bZoomIn.setEnabled(zoomManager.canZoomIn());\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    } else {\r\n        bZoomOut = null;\r\n        bZoomIn = null;\r\n    }\r\n    tb2.setFloatable(false);\r\n    tb.setFloatable(false);\r\n    tb.add(bClose);\r\n    tb.addSeparator(new Dimension(16, 16));\r\n    tb.add(bPrint);\r\n    tb.addSeparator(new Dimension(16, 16));\r\n    tb.add(bPortrait);\r\n    tb.add(bLandscape);\r\n    tb.addSeparator(new Dimension(16, 16));\r\n    tb.add(new JLabel(((PrintPreview.language.getText(\"zoom\")) + \" \")));\r\n    tb.add(myComboScale);\r\n    if ((vMedia != null) && (!(vMedia.isEmpty()))) {\r\n        tb.addSeparator(new Dimension(16, 16));\r\n        tb.add(new JLabel(((PrintPreview.language.getText(\"choosePaperFormat\")) + \" \")));\r\n        tb.addSeparator(new Dimension(0, 10));\r\n        tb.add(myComboMediaSize);\r\n    }\r\n    if (isDate) {\r\n        tb2.add(bZoomOut);\r\n        tb2.addSeparator(new Dimension(5, 0));\r\n        tb2.add(bZoomIn);\r\n        tb2.addSeparator(new Dimension(20, 0));\r\n        tb2.add(myWholeProjectButton);\r\n        tb2.addSeparator(new Dimension(16, 16));\r\n        OptionsPageBuilder builder = new OptionsPageBuilder();\r\n        builder.setOptionKeyPrefix(\"\");\r\n        tb2.add(builder.createStandaloneOptionPanel(myStart));\r\n        URL iconArrow = this.getClass().getClassLoader().getResource(\"icons/fromto.gif\");\r\n        tb2.add(new JLabel(new ImageIcon(iconArrow)));\r\n        tb2.add(builder.createStandaloneOptionPanel(myFinish));\r\n    }\r\n    JPanel topPanel = new JPanel(new BorderLayout());\r\n    tb.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));\r\n    tb2.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));\r\n    topPanel.add(tb, BorderLayout.NORTH);\r\n    topPanel.add(tb2, BorderLayout.SOUTH);\r\n    getContentPane().add(topPanel, BorderLayout.NORTH);\r\n    statusBar = new PrintPreview.StatusBar();\r\n    statusBar.setLabel0(PrintPreview.language.getText(\"pageNumber\"));\r\n    statusBar.setLabel1(PrintPreview.language.getText(\"paperSize\"));\r\n    getContentPane().add(statusBar, BorderLayout.SOUTH);\r\n    myPreviewContainer = new PrintPreview.PreviewContainer();\r\n    PrinterJob prnJob = PrinterJob.getPrinterJob();\r\n    // --\r\n    myPageFormat = new PageFormat();\r\n    myPageFormat.setOrientation(myOrientation);\r\n    myMediaSizeName = PrintPreview.DEFAULT_MEDIA_SIZE_NAME;\r\n    MediaSize ms = MediaSize.getMediaSizeForName(myMediaSizeName);\r\n    Paper p = new Paper();\r\n    float[] size = ms.getSize(MediaSize.INCH);\r\n    p.setSize(((size[0]) * 72), ((size[1]) * 72));\r\n    p.setImageableArea(72, 72, ((p.getWidth()) - (72 * 2)), ((p.getHeight()) - (72 * 2)));\r\n    myPageFormat.setPaper(p);\r\n    // --\r\n    statusBar.setText1((((ms.getX(MediaSize.MM)) + \" x \") + (ms.getY(MediaSize.MM))));\r\n    if (((myPageFormat.getHeight()) == 0) || ((myPageFormat.getWidth()) == 0)) {\r\n        myUIfacade.showErrorDialog(\"Unable to determine default page size\");\r\n        return;\r\n    }\r\n    myPageWidth = ((int) (myPageFormat.getWidth()));\r\n    myPageHeight = ((int) (myPageFormat.getHeight()));\r\n    myScale = 50;\r\n    final int w = ((int) (((myPageWidth) * (myScale)) / 100));\r\n    final int h = ((int) (((myPageHeight) * (myScale)) / 100));\r\n    createPages();\r\n    JScrollPane ps = new JScrollPane(myPreviewContainer);\r\n    getContentPane().add(ps, BorderLayout.CENTER);\r\n    setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\r\n    setVisible(true);\r\n    myComboMediaSize.setSelectedItem(myMediaSizeName);\r\n    myStart.setValue(start);\r\n    myFinish.setValue(end);\r\n}"},
 {"id":908, "parametername":"UIFacade uifacade", "parametertype":"net.sourceforge.ganttproject.gui.UIFacade", "parameterclass":337, "classid":495, "classname":"net.sourceforge.ganttproject.print.PrintPreview", "methodid":3751, "methodname":"net.sourceforge.ganttproject.print.PrintPreview.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.chart.Chart,java.util.Date,java.util.Date)", "isreturn":0, "sourcecode":"public PrintPreview(IGanttProject project, UIFacade uifacade, Chart chart, Date start, Date end) {\r\n    super(uifacade.getMainFrame(), GanttLanguage.getInstance().getText(\"preview\"), false);\r\n    myProject = project;\r\n    myUIfacade = uifacade;\r\n    Dimension screenDim = Toolkit.getDefaultToolkit().getScreenSize();\r\n    setSize(((int) ((screenDim.width) * 0.75)), ((int) ((screenDim.height) * 0.75)));\r\n    setLocationRelativeTo(null);\r\n    myChart = chart;\r\n    if (start == null) {\r\n        start = myChart.getStartDate();\r\n    }\r\n    if (end == null) {\r\n        end = myChart.getEndDate();\r\n    }\r\n    // myStartDate = start;\r\n    // myEndDate = end;\r\n    myExportSettings = new GanttExportSettings();\r\n    // myExportSettings.setOnlySelectedItem(!Mediator\r\n    // .getTaskSelectionManager().getSelectedTasks().isEmpty());\r\n    // myExportSettings.setStartDate(myStartDate);\r\n    // myExportSettings.setEndDate(myEndDate);\r\n    myPrintable = new GanttPrintable(myChart.getChart(myExportSettings), GanttPrintable.REDUCE_FACTOR_DEFAULT);\r\n    JToolBar tb = new JToolBar();\r\n    JToolBar tb2 = new JToolBar();\r\n    JButton bPrint = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/print_16.gif\")));\r\n    bPrint.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            print();\r\n        }\r\n    });\r\n    JButton bClose = bClose = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/exit_16.gif\")));\r\n    bClose.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            setVisible(false);\r\n            dispose();\r\n        }\r\n    });\r\n    final JButton bPortrait = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/portrait_16.gif\")));\r\n    final JButton bLandscape = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/landscape_16.gif\")));\r\n    bPortrait.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            run(new Runnable() {\r\n                public void run() {\r\n                    changePageOrientation(PageFormat.PORTRAIT);\r\n                    bLandscape.setEnabled(true);\r\n                    bPortrait.setEnabled(false);\r\n                }\r\n            });\r\n        }\r\n    });\r\n    bLandscape.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            run(new Runnable() {\r\n                public void run() {\r\n                    changePageOrientation(PageFormat.LANDSCAPE);\r\n                    bLandscape.setEnabled(false);\r\n                    bPortrait.setEnabled(true);\r\n                }\r\n            });\r\n        }\r\n    });\r\n    bLandscape.setEnabled(false);\r\n    String[] scales = new String[]{ \"10 %\", \"25 %\", \"50 %\", \"100 %\" };\r\n    myComboScale = new JComboBox(scales);\r\n    myComboScale.setSelectedIndex(2);\r\n    myComboScale.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            run(new Runnable() {\r\n                public void run() {\r\n                    changeScale();\r\n                }\r\n            });\r\n        }\r\n    });\r\n    myComboScale.addItemListener(new ItemListener() {\r\n        public void itemStateChanged(ItemEvent arg0) {\r\n            run(new Runnable() {\r\n                public void run() {\r\n                    changeScale();\r\n                }\r\n            });\r\n        }\r\n    });\r\n    Dimension dim = myComboScale.getPreferredSize();\r\n    dim.setSize(((dim.getWidth()) + 20), dim.getHeight());\r\n    myComboScale.setMaximumSize(dim);\r\n    myComboScale.setPreferredSize(dim);\r\n    myComboScale.setEditable(true);\r\n    boolean isDate = (start != null) && (end != null);\r\n    ImageIcon icon = new ImageIcon(getClass().getResource(\"/icons/calendar_16.gif\"));\r\n    myStart.lock();\r\n    myFinish.lock();\r\n    if (isDate) {\r\n        /* myStartDateButton = new JButton(new GanttCalendar(myStartDate)\n        .toString(), icon);\n        myStartDateButton.setHorizontalTextPosition(SwingConstants.RIGHT);\n        myStartDateButton.addActionListener(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n        myStartDialogDate = new GanttDialogDate(new JDialog(),\n        new GanttCalendar(myStartDate), false);\n        myStartDialogDate.setVisible(true);\n        if (myStartDialogDate.getValue() == GanttDialogDate.OK) {\n        myStartDate = myStartDialogDate.getDate().getTime();\n        myStartDateButton\n        .setText(new GanttCalendar(myStartDate)\n        .toString());\n        myExportSettings.setStartDate(myStartDate);\n        updateSourceImage(myChart.getChart(myExportSettings));\n        }\n        }\n        });\n\n        myEndDateButton = new JButton(new GanttCalendar(myEndDate)\n        .toString(), icon);\n        myEndDateButton.setHorizontalTextPosition(SwingConstants.RIGHT);\n        myEndDateButton.addActionListener(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n        myEndDialogDate = new GanttDialogDate(new JDialog(),\n        new GanttCalendar(myEndDate), false);\n        myEndDialogDate.setVisible(true);\n        if (myEndDialogDate.getValue() == GanttDialogDate.OK) {\n        myEndDate = myEndDialogDate.getDate().getTime();\n        myEndDateButton.setText(new GanttCalendar(myEndDate)\n        .toString());\n        myExportSettings.setEndDate(myEndDate);\n        updateSourceImage(myChart.getChart(myExportSettings));\n        }\n        }\n        });\n         */\r\n        myWholeProjectButton = new JButton(PrintPreview.language.getText(\"wholeProject\"));\r\n        myWholeProjectButton.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                myStart.setValue(myChart.getStartDate());\r\n                myFinish.setValue(myChart.getEndDate());\r\n                /* myStartDate = myChart.getStartDate();\n                myEndDate = myChart.getEndDate();\n                myExportSettings.setStartDate(myStartDate);\n                myExportSettings.setEndDate(myEndDate);\n\n                myEndDateButton.setText(new GanttCalendar(myExportSettings\n                .getEndDate()).toString());\n                myStartDateButton.setText(new GanttCalendar(\n                myExportSettings.getStartDate()).toString());\n                myEndDialogDate = new GanttDialogDate(new JDialog(),\n                new GanttCalendar(myEndDate), false);\n                myStartDialogDate = new GanttDialogDate(new JDialog(),\n                new GanttCalendar(myStartDate), false);\n                updateSourceImage(myChart.getChart(myExportSettings));\n                 */\r\n            }\r\n        });\r\n    }\r\n    Vector vMedia = new Vector();\r\n    // try {\r\n    // vMedia = getAllMediaSizeNameAvailable();\r\n    vMedia.add(MediaSizeName.ISO_A0);\r\n    vMedia.add(MediaSizeName.ISO_A1);\r\n    vMedia.add(MediaSizeName.ISO_A2);\r\n    vMedia.add(MediaSizeName.ISO_A3);\r\n    vMedia.add(MediaSizeName.ISO_A4);\r\n    vMedia.add(MediaSizeName.ISO_A5);\r\n    vMedia.add(MediaSizeName.ISO_A6);\r\n    // } catch (ClassNotFoundException e1) {\r\n    // // TODO Auto-generated catch block\r\n    // e1.printStackTrace();\r\n    // }\r\n    if (vMedia != null) {\r\n        myComboMediaSize = new JComboBox(vMedia);\r\n        dim = myComboMediaSize.getPreferredSize();\r\n        dim.setSize(((dim.getWidth()) + 20), dim.getHeight());\r\n        myComboMediaSize.setMaximumSize(dim);\r\n        myComboMediaSize.setPreferredSize(dim);\r\n        myComboMediaSize.addItemListener(new ItemListener() {\r\n            public void itemStateChanged(ItemEvent arg0) {\r\n                run(new Runnable() {\r\n                    public void run() {\r\n                        Object selectedItem = myComboMediaSize.getSelectedItem();\r\n                        if (selectedItem != null) {\r\n                            myMediaSizeName = ((MediaSizeName) (selectedItem));\r\n                            MediaSize ms = MediaSize.getMediaSizeForName(myMediaSizeName);\r\n                            Paper p = new Paper();\r\n                            float[] size = ms.getSize(MediaSize.INCH);\r\n                            p.setSize(((size[0]) * 72), ((size[1]) * 72));\r\n                            p.setImageableArea(72, 72, ((p.getWidth()) - (72 * 2)), ((p.getHeight()) - (72 * 2)));\r\n                            myPageFormat.setPaper(p);\r\n                            changePageOrientation(myOrientation);\r\n                            statusBar.setText1((((ms.getX(MediaSize.MM)) + \" x \") + (ms.getY(MediaSize.MM))));\r\n                            myPreviewContainer.repaint();\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    bPrint.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"printProject\"))));\r\n    bPortrait.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"portrait\"))));\r\n    bLandscape.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"landscape\"))));\r\n    bClose.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"close\"))));\r\n    final JButton bZoomOut;\r\n    final JButton bZoomIn;\r\n    if (isDate) {\r\n        myWholeProjectButton.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"displayWholeProject\"))));\r\n        /* myStartDateButton.setToolTipText(GanttProject\n        .getToolTip(GanttProject.correctLabel(language\n        .getText(\"setStartDate\"))));\n        myEndDateButton.setToolTipText(GanttProject.getToolTip(GanttProject\n        .correctLabel(language.getText(\"setEndDate\"))));\n         */\r\n        // GanttProject gp = Mediator.getGanttProjectSingleton();\r\n        final ZoomManager zoomManager = myUIfacade.getZoomManager();\r\n        final Action zoomOut = new ZoomOutAction(zoomManager, \"16\");\r\n        final Action zoomIn = new ZoomInAction(zoomManager, \"16\");\r\n        bZoomOut = new JButton(((Icon) (zoomOut.getValue(Action.SMALL_ICON))));\r\n        bZoomIn = new JButton(((Icon) (zoomIn.getValue(Action.SMALL_ICON))));\r\n        bZoomOut.setHorizontalTextPosition(SwingConstants.RIGHT);\r\n        bZoomOut.setText(PrintPreview.language.getText(\"narrowChart\"));\r\n        bZoomOut.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                run(new Runnable() {\r\n                    public void run() {\r\n                        zoomOut.actionPerformed(null);\r\n                        updateSourceImage();\r\n                        bZoomOut.setEnabled(zoomManager.canZoomOut());\r\n                        bZoomIn.setEnabled(zoomManager.canZoomIn());\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        bZoomIn.setHorizontalTextPosition(SwingConstants.RIGHT);\r\n        bZoomIn.setText(PrintPreview.language.getText(\"widenChart\"));\r\n        bZoomIn.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                run(new Runnable() {\r\n                    public void run() {\r\n                        zoomIn.actionPerformed(null);\r\n                        updateSourceImage();\r\n                        bZoomOut.setEnabled(zoomManager.canZoomOut());\r\n                        bZoomIn.setEnabled(zoomManager.canZoomIn());\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    } else {\r\n        bZoomOut = null;\r\n        bZoomIn = null;\r\n    }\r\n    tb2.setFloatable(false);\r\n    tb.setFloatable(false);\r\n    tb.add(bClose);\r\n    tb.addSeparator(new Dimension(16, 16));\r\n    tb.add(bPrint);\r\n    tb.addSeparator(new Dimension(16, 16));\r\n    tb.add(bPortrait);\r\n    tb.add(bLandscape);\r\n    tb.addSeparator(new Dimension(16, 16));\r\n    tb.add(new JLabel(((PrintPreview.language.getText(\"zoom\")) + \" \")));\r\n    tb.add(myComboScale);\r\n    if ((vMedia != null) && (!(vMedia.isEmpty()))) {\r\n        tb.addSeparator(new Dimension(16, 16));\r\n        tb.add(new JLabel(((PrintPreview.language.getText(\"choosePaperFormat\")) + \" \")));\r\n        tb.addSeparator(new Dimension(0, 10));\r\n        tb.add(myComboMediaSize);\r\n    }\r\n    if (isDate) {\r\n        tb2.add(bZoomOut);\r\n        tb2.addSeparator(new Dimension(5, 0));\r\n        tb2.add(bZoomIn);\r\n        tb2.addSeparator(new Dimension(20, 0));\r\n        tb2.add(myWholeProjectButton);\r\n        tb2.addSeparator(new Dimension(16, 16));\r\n        OptionsPageBuilder builder = new OptionsPageBuilder();\r\n        builder.setOptionKeyPrefix(\"\");\r\n        tb2.add(builder.createStandaloneOptionPanel(myStart));\r\n        URL iconArrow = this.getClass().getClassLoader().getResource(\"icons/fromto.gif\");\r\n        tb2.add(new JLabel(new ImageIcon(iconArrow)));\r\n        tb2.add(builder.createStandaloneOptionPanel(myFinish));\r\n    }\r\n    JPanel topPanel = new JPanel(new BorderLayout());\r\n    tb.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));\r\n    tb2.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));\r\n    topPanel.add(tb, BorderLayout.NORTH);\r\n    topPanel.add(tb2, BorderLayout.SOUTH);\r\n    getContentPane().add(topPanel, BorderLayout.NORTH);\r\n    statusBar = new PrintPreview.StatusBar();\r\n    statusBar.setLabel0(PrintPreview.language.getText(\"pageNumber\"));\r\n    statusBar.setLabel1(PrintPreview.language.getText(\"paperSize\"));\r\n    getContentPane().add(statusBar, BorderLayout.SOUTH);\r\n    myPreviewContainer = new PrintPreview.PreviewContainer();\r\n    PrinterJob prnJob = PrinterJob.getPrinterJob();\r\n    // --\r\n    myPageFormat = new PageFormat();\r\n    myPageFormat.setOrientation(myOrientation);\r\n    myMediaSizeName = PrintPreview.DEFAULT_MEDIA_SIZE_NAME;\r\n    MediaSize ms = MediaSize.getMediaSizeForName(myMediaSizeName);\r\n    Paper p = new Paper();\r\n    float[] size = ms.getSize(MediaSize.INCH);\r\n    p.setSize(((size[0]) * 72), ((size[1]) * 72));\r\n    p.setImageableArea(72, 72, ((p.getWidth()) - (72 * 2)), ((p.getHeight()) - (72 * 2)));\r\n    myPageFormat.setPaper(p);\r\n    // --\r\n    statusBar.setText1((((ms.getX(MediaSize.MM)) + \" x \") + (ms.getY(MediaSize.MM))));\r\n    if (((myPageFormat.getHeight()) == 0) || ((myPageFormat.getWidth()) == 0)) {\r\n        myUIfacade.showErrorDialog(\"Unable to determine default page size\");\r\n        return;\r\n    }\r\n    myPageWidth = ((int) (myPageFormat.getWidth()));\r\n    myPageHeight = ((int) (myPageFormat.getHeight()));\r\n    myScale = 50;\r\n    final int w = ((int) (((myPageWidth) * (myScale)) / 100));\r\n    final int h = ((int) (((myPageHeight) * (myScale)) / 100));\r\n    createPages();\r\n    JScrollPane ps = new JScrollPane(myPreviewContainer);\r\n    getContentPane().add(ps, BorderLayout.CENTER);\r\n    setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\r\n    setVisible(true);\r\n    myComboMediaSize.setSelectedItem(myMediaSizeName);\r\n    myStart.setValue(start);\r\n    myFinish.setValue(end);\r\n}"},
 {"id":909, "parametername":"Chart chart", "parametertype":"net.sourceforge.ganttproject.chart.Chart", "parameterclass":159, "classid":495, "classname":"net.sourceforge.ganttproject.print.PrintPreview", "methodid":3751, "methodname":"net.sourceforge.ganttproject.print.PrintPreview.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.gui.UIFacade,net.sourceforge.ganttproject.chart.Chart,java.util.Date,java.util.Date)", "isreturn":0, "sourcecode":"public PrintPreview(IGanttProject project, UIFacade uifacade, Chart chart, Date start, Date end) {\r\n    super(uifacade.getMainFrame(), GanttLanguage.getInstance().getText(\"preview\"), false);\r\n    myProject = project;\r\n    myUIfacade = uifacade;\r\n    Dimension screenDim = Toolkit.getDefaultToolkit().getScreenSize();\r\n    setSize(((int) ((screenDim.width) * 0.75)), ((int) ((screenDim.height) * 0.75)));\r\n    setLocationRelativeTo(null);\r\n    myChart = chart;\r\n    if (start == null) {\r\n        start = myChart.getStartDate();\r\n    }\r\n    if (end == null) {\r\n        end = myChart.getEndDate();\r\n    }\r\n    // myStartDate = start;\r\n    // myEndDate = end;\r\n    myExportSettings = new GanttExportSettings();\r\n    // myExportSettings.setOnlySelectedItem(!Mediator\r\n    // .getTaskSelectionManager().getSelectedTasks().isEmpty());\r\n    // myExportSettings.setStartDate(myStartDate);\r\n    // myExportSettings.setEndDate(myEndDate);\r\n    myPrintable = new GanttPrintable(myChart.getChart(myExportSettings), GanttPrintable.REDUCE_FACTOR_DEFAULT);\r\n    JToolBar tb = new JToolBar();\r\n    JToolBar tb2 = new JToolBar();\r\n    JButton bPrint = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/print_16.gif\")));\r\n    bPrint.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            print();\r\n        }\r\n    });\r\n    JButton bClose = bClose = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/exit_16.gif\")));\r\n    bClose.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            setVisible(false);\r\n            dispose();\r\n        }\r\n    });\r\n    final JButton bPortrait = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/portrait_16.gif\")));\r\n    final JButton bLandscape = new TestGanttRolloverButton(new ImageIcon(getClass().getResource(\"/icons/landscape_16.gif\")));\r\n    bPortrait.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            run(new Runnable() {\r\n                public void run() {\r\n                    changePageOrientation(PageFormat.PORTRAIT);\r\n                    bLandscape.setEnabled(true);\r\n                    bPortrait.setEnabled(false);\r\n                }\r\n            });\r\n        }\r\n    });\r\n    bLandscape.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            run(new Runnable() {\r\n                public void run() {\r\n                    changePageOrientation(PageFormat.LANDSCAPE);\r\n                    bLandscape.setEnabled(false);\r\n                    bPortrait.setEnabled(true);\r\n                }\r\n            });\r\n        }\r\n    });\r\n    bLandscape.setEnabled(false);\r\n    String[] scales = new String[]{ \"10 %\", \"25 %\", \"50 %\", \"100 %\" };\r\n    myComboScale = new JComboBox(scales);\r\n    myComboScale.setSelectedIndex(2);\r\n    myComboScale.addActionListener(new ActionListener() {\r\n        public void actionPerformed(ActionEvent e) {\r\n            run(new Runnable() {\r\n                public void run() {\r\n                    changeScale();\r\n                }\r\n            });\r\n        }\r\n    });\r\n    myComboScale.addItemListener(new ItemListener() {\r\n        public void itemStateChanged(ItemEvent arg0) {\r\n            run(new Runnable() {\r\n                public void run() {\r\n                    changeScale();\r\n                }\r\n            });\r\n        }\r\n    });\r\n    Dimension dim = myComboScale.getPreferredSize();\r\n    dim.setSize(((dim.getWidth()) + 20), dim.getHeight());\r\n    myComboScale.setMaximumSize(dim);\r\n    myComboScale.setPreferredSize(dim);\r\n    myComboScale.setEditable(true);\r\n    boolean isDate = (start != null) && (end != null);\r\n    ImageIcon icon = new ImageIcon(getClass().getResource(\"/icons/calendar_16.gif\"));\r\n    myStart.lock();\r\n    myFinish.lock();\r\n    if (isDate) {\r\n        /* myStartDateButton = new JButton(new GanttCalendar(myStartDate)\n        .toString(), icon);\n        myStartDateButton.setHorizontalTextPosition(SwingConstants.RIGHT);\n        myStartDateButton.addActionListener(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n        myStartDialogDate = new GanttDialogDate(new JDialog(),\n        new GanttCalendar(myStartDate), false);\n        myStartDialogDate.setVisible(true);\n        if (myStartDialogDate.getValue() == GanttDialogDate.OK) {\n        myStartDate = myStartDialogDate.getDate().getTime();\n        myStartDateButton\n        .setText(new GanttCalendar(myStartDate)\n        .toString());\n        myExportSettings.setStartDate(myStartDate);\n        updateSourceImage(myChart.getChart(myExportSettings));\n        }\n        }\n        });\n\n        myEndDateButton = new JButton(new GanttCalendar(myEndDate)\n        .toString(), icon);\n        myEndDateButton.setHorizontalTextPosition(SwingConstants.RIGHT);\n        myEndDateButton.addActionListener(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n        myEndDialogDate = new GanttDialogDate(new JDialog(),\n        new GanttCalendar(myEndDate), false);\n        myEndDialogDate.setVisible(true);\n        if (myEndDialogDate.getValue() == GanttDialogDate.OK) {\n        myEndDate = myEndDialogDate.getDate().getTime();\n        myEndDateButton.setText(new GanttCalendar(myEndDate)\n        .toString());\n        myExportSettings.setEndDate(myEndDate);\n        updateSourceImage(myChart.getChart(myExportSettings));\n        }\n        }\n        });\n         */\r\n        myWholeProjectButton = new JButton(PrintPreview.language.getText(\"wholeProject\"));\r\n        myWholeProjectButton.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                myStart.setValue(myChart.getStartDate());\r\n                myFinish.setValue(myChart.getEndDate());\r\n                /* myStartDate = myChart.getStartDate();\n                myEndDate = myChart.getEndDate();\n                myExportSettings.setStartDate(myStartDate);\n                myExportSettings.setEndDate(myEndDate);\n\n                myEndDateButton.setText(new GanttCalendar(myExportSettings\n                .getEndDate()).toString());\n                myStartDateButton.setText(new GanttCalendar(\n                myExportSettings.getStartDate()).toString());\n                myEndDialogDate = new GanttDialogDate(new JDialog(),\n                new GanttCalendar(myEndDate), false);\n                myStartDialogDate = new GanttDialogDate(new JDialog(),\n                new GanttCalendar(myStartDate), false);\n                updateSourceImage(myChart.getChart(myExportSettings));\n                 */\r\n            }\r\n        });\r\n    }\r\n    Vector vMedia = new Vector();\r\n    // try {\r\n    // vMedia = getAllMediaSizeNameAvailable();\r\n    vMedia.add(MediaSizeName.ISO_A0);\r\n    vMedia.add(MediaSizeName.ISO_A1);\r\n    vMedia.add(MediaSizeName.ISO_A2);\r\n    vMedia.add(MediaSizeName.ISO_A3);\r\n    vMedia.add(MediaSizeName.ISO_A4);\r\n    vMedia.add(MediaSizeName.ISO_A5);\r\n    vMedia.add(MediaSizeName.ISO_A6);\r\n    // } catch (ClassNotFoundException e1) {\r\n    // // TODO Auto-generated catch block\r\n    // e1.printStackTrace();\r\n    // }\r\n    if (vMedia != null) {\r\n        myComboMediaSize = new JComboBox(vMedia);\r\n        dim = myComboMediaSize.getPreferredSize();\r\n        dim.setSize(((dim.getWidth()) + 20), dim.getHeight());\r\n        myComboMediaSize.setMaximumSize(dim);\r\n        myComboMediaSize.setPreferredSize(dim);\r\n        myComboMediaSize.addItemListener(new ItemListener() {\r\n            public void itemStateChanged(ItemEvent arg0) {\r\n                run(new Runnable() {\r\n                    public void run() {\r\n                        Object selectedItem = myComboMediaSize.getSelectedItem();\r\n                        if (selectedItem != null) {\r\n                            myMediaSizeName = ((MediaSizeName) (selectedItem));\r\n                            MediaSize ms = MediaSize.getMediaSizeForName(myMediaSizeName);\r\n                            Paper p = new Paper();\r\n                            float[] size = ms.getSize(MediaSize.INCH);\r\n                            p.setSize(((size[0]) * 72), ((size[1]) * 72));\r\n                            p.setImageableArea(72, 72, ((p.getWidth()) - (72 * 2)), ((p.getHeight()) - (72 * 2)));\r\n                            myPageFormat.setPaper(p);\r\n                            changePageOrientation(myOrientation);\r\n                            statusBar.setText1((((ms.getX(MediaSize.MM)) + \" x \") + (ms.getY(MediaSize.MM))));\r\n                            myPreviewContainer.repaint();\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    bPrint.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"printProject\"))));\r\n    bPortrait.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"portrait\"))));\r\n    bLandscape.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"landscape\"))));\r\n    bClose.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"close\"))));\r\n    final JButton bZoomOut;\r\n    final JButton bZoomIn;\r\n    if (isDate) {\r\n        myWholeProjectButton.setToolTipText(GanttProject.getToolTip(GanttProject.correctLabel(PrintPreview.language.getText(\"displayWholeProject\"))));\r\n        /* myStartDateButton.setToolTipText(GanttProject\n        .getToolTip(GanttProject.correctLabel(language\n        .getText(\"setStartDate\"))));\n        myEndDateButton.setToolTipText(GanttProject.getToolTip(GanttProject\n        .correctLabel(language.getText(\"setEndDate\"))));\n         */\r\n        // GanttProject gp = Mediator.getGanttProjectSingleton();\r\n        final ZoomManager zoomManager = myUIfacade.getZoomManager();\r\n        final Action zoomOut = new ZoomOutAction(zoomManager, \"16\");\r\n        final Action zoomIn = new ZoomInAction(zoomManager, \"16\");\r\n        bZoomOut = new JButton(((Icon) (zoomOut.getValue(Action.SMALL_ICON))));\r\n        bZoomIn = new JButton(((Icon) (zoomIn.getValue(Action.SMALL_ICON))));\r\n        bZoomOut.setHorizontalTextPosition(SwingConstants.RIGHT);\r\n        bZoomOut.setText(PrintPreview.language.getText(\"narrowChart\"));\r\n        bZoomOut.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                run(new Runnable() {\r\n                    public void run() {\r\n                        zoomOut.actionPerformed(null);\r\n                        updateSourceImage();\r\n                        bZoomOut.setEnabled(zoomManager.canZoomOut());\r\n                        bZoomIn.setEnabled(zoomManager.canZoomIn());\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        bZoomIn.setHorizontalTextPosition(SwingConstants.RIGHT);\r\n        bZoomIn.setText(PrintPreview.language.getText(\"widenChart\"));\r\n        bZoomIn.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent arg0) {\r\n                run(new Runnable() {\r\n                    public void run() {\r\n                        zoomIn.actionPerformed(null);\r\n                        updateSourceImage();\r\n                        bZoomOut.setEnabled(zoomManager.canZoomOut());\r\n                        bZoomIn.setEnabled(zoomManager.canZoomIn());\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    } else {\r\n        bZoomOut = null;\r\n        bZoomIn = null;\r\n    }\r\n    tb2.setFloatable(false);\r\n    tb.setFloatable(false);\r\n    tb.add(bClose);\r\n    tb.addSeparator(new Dimension(16, 16));\r\n    tb.add(bPrint);\r\n    tb.addSeparator(new Dimension(16, 16));\r\n    tb.add(bPortrait);\r\n    tb.add(bLandscape);\r\n    tb.addSeparator(new Dimension(16, 16));\r\n    tb.add(new JLabel(((PrintPreview.language.getText(\"zoom\")) + \" \")));\r\n    tb.add(myComboScale);\r\n    if ((vMedia != null) && (!(vMedia.isEmpty()))) {\r\n        tb.addSeparator(new Dimension(16, 16));\r\n        tb.add(new JLabel(((PrintPreview.language.getText(\"choosePaperFormat\")) + \" \")));\r\n        tb.addSeparator(new Dimension(0, 10));\r\n        tb.add(myComboMediaSize);\r\n    }\r\n    if (isDate) {\r\n        tb2.add(bZoomOut);\r\n        tb2.addSeparator(new Dimension(5, 0));\r\n        tb2.add(bZoomIn);\r\n        tb2.addSeparator(new Dimension(20, 0));\r\n        tb2.add(myWholeProjectButton);\r\n        tb2.addSeparator(new Dimension(16, 16));\r\n        OptionsPageBuilder builder = new OptionsPageBuilder();\r\n        builder.setOptionKeyPrefix(\"\");\r\n        tb2.add(builder.createStandaloneOptionPanel(myStart));\r\n        URL iconArrow = this.getClass().getClassLoader().getResource(\"icons/fromto.gif\");\r\n        tb2.add(new JLabel(new ImageIcon(iconArrow)));\r\n        tb2.add(builder.createStandaloneOptionPanel(myFinish));\r\n    }\r\n    JPanel topPanel = new JPanel(new BorderLayout());\r\n    tb.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));\r\n    tb2.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 0));\r\n    topPanel.add(tb, BorderLayout.NORTH);\r\n    topPanel.add(tb2, BorderLayout.SOUTH);\r\n    getContentPane().add(topPanel, BorderLayout.NORTH);\r\n    statusBar = new PrintPreview.StatusBar();\r\n    statusBar.setLabel0(PrintPreview.language.getText(\"pageNumber\"));\r\n    statusBar.setLabel1(PrintPreview.language.getText(\"paperSize\"));\r\n    getContentPane().add(statusBar, BorderLayout.SOUTH);\r\n    myPreviewContainer = new PrintPreview.PreviewContainer();\r\n    PrinterJob prnJob = PrinterJob.getPrinterJob();\r\n    // --\r\n    myPageFormat = new PageFormat();\r\n    myPageFormat.setOrientation(myOrientation);\r\n    myMediaSizeName = PrintPreview.DEFAULT_MEDIA_SIZE_NAME;\r\n    MediaSize ms = MediaSize.getMediaSizeForName(myMediaSizeName);\r\n    Paper p = new Paper();\r\n    float[] size = ms.getSize(MediaSize.INCH);\r\n    p.setSize(((size[0]) * 72), ((size[1]) * 72));\r\n    p.setImageableArea(72, 72, ((p.getWidth()) - (72 * 2)), ((p.getHeight()) - (72 * 2)));\r\n    myPageFormat.setPaper(p);\r\n    // --\r\n    statusBar.setText1((((ms.getX(MediaSize.MM)) + \" x \") + (ms.getY(MediaSize.MM))));\r\n    if (((myPageFormat.getHeight()) == 0) || ((myPageFormat.getWidth()) == 0)) {\r\n        myUIfacade.showErrorDialog(\"Unable to determine default page size\");\r\n        return;\r\n    }\r\n    myPageWidth = ((int) (myPageFormat.getWidth()));\r\n    myPageHeight = ((int) (myPageFormat.getHeight()));\r\n    myScale = 50;\r\n    final int w = ((int) (((myPageWidth) * (myScale)) / 100));\r\n    final int h = ((int) (((myPageHeight) * (myScale)) / 100));\r\n    createPages();\r\n    JScrollPane ps = new JScrollPane(myPreviewContainer);\r\n    getContentPane().add(ps, BorderLayout.CENTER);\r\n    setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\r\n    setVisible(true);\r\n    myComboMediaSize.setSelectedItem(myMediaSizeName);\r\n    myStart.setValue(start);\r\n    myFinish.setValue(end);\r\n}"},
 {"id":910, "parametername":"ResourceAssignment res", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":497, "classname":"net.sourceforge.ganttproject.resource.AssignmentNode", "methodid":3780, "methodname":"net.sourceforge.ganttproject.resource.AssignmentNode.-init-(net.sourceforge.ganttproject.task.ResourceAssignment)", "isreturn":0, "sourcecode":"public AssignmentNode(ResourceAssignment res) {\r\n    super(res);\r\n    resourceAssignment = res;\r\n}"},
 {"id":911, "parametername":"Role role", "parametertype":"net.sourceforge.ganttproject.roles.Role", "parameterclass":512, "classid":497, "classname":"net.sourceforge.ganttproject.resource.AssignmentNode", "methodid":3783, "methodname":"net.sourceforge.ganttproject.resource.AssignmentNode.setRoleForAssigment(net.sourceforge.ganttproject.roles.Role)", "isreturn":0, "sourcecode":"public void setRoleForAssigment(Role role) {\r\n    resourceAssignment.setRoleForAssignment(role);\r\n}"},
 {"id":912, "parametername":"HumanResourceManager manager", "parametertype":"net.sourceforge.ganttproject.resource.HumanResourceManager", "parameterclass":501, "classid":499, "classname":"net.sourceforge.ganttproject.resource.HumanResource", "methodid":3785, "methodname":"net.sourceforge.ganttproject.resource.HumanResource.-init-(net.sourceforge.ganttproject.resource.HumanResourceManager)", "isreturn":0, "sourcecode":"HumanResource(HumanResourceManager manager) {\r\n    this.name = \"\";\r\n    customFields = new HashMap();\r\n    myManager = manager;\r\n    // added\r\n}"},
 {"id":913, "parametername":"HumanResourceManager manager", "parametertype":"net.sourceforge.ganttproject.resource.HumanResourceManager", "parameterclass":501, "classid":499, "classname":"net.sourceforge.ganttproject.resource.HumanResource", "methodid":3786, "methodname":"net.sourceforge.ganttproject.resource.HumanResource.-init-(java.lang.String,int,net.sourceforge.ganttproject.resource.HumanResourceManager)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new instance of HumanResource\r\n */\r\nHumanResource(String name, int id, HumanResourceManager manager) {\r\n    super(id);\r\n    this.name = name;\r\n    customFields = new HashMap();\r\n    myManager = manager;\r\n}"},
 {"id":914, "parametername":"HumanResource copy", "parametertype":"net.sourceforge.ganttproject.resource.HumanResource", "parameterclass":499, "classid":499, "classname":"net.sourceforge.ganttproject.resource.HumanResource", "methodid":3787, "methodname":"net.sourceforge.ganttproject.resource.HumanResource.-init-(net.sourceforge.ganttproject.resource.HumanResource)", "isreturn":0, "sourcecode":"private HumanResource(HumanResource copy) {\r\n    areEventsEnabled = false;\r\n    setId((-1));\r\n    setName((((GanttLanguage.getInstance().getText(\"copy2\")) + \"_\") + (copy.getName())));\r\n    setCostsPerUnit(copy.getCostsPerUnit());\r\n    setDescription(copy.getDescription());\r\n    setMaximumUnitsPerDay(copy.getMaximumUnitsPerDay());\r\n    setUnitMeasure(copy.getUnitMeasure());\r\n    setMail(copy.getMail());\r\n    setPhone(copy.getPhone());\r\n    setRole(copy.getRole());\r\n    myManager = copy.myManager;\r\n    DefaultListModel copyDaysOff = copy.getDaysOff();\r\n    for (int i = 0; i < (copyDaysOff.getSize()); i++) {\r\n        myDaysOffList.addElement(copyDaysOff.get(i));\r\n    }\r\n    customFields = new HashMap(copy.customFields);\r\n    areEventsEnabled = true;\r\n}"},
 {"id":915, "parametername":"CustomPropertyDefinition definition", "parametertype":"net.sourceforge.ganttproject.CustomPropertyDefinition", "parameterclass":11, "classid":498, "classname":"net.sourceforge.ganttproject.resource.HumanResource$CustomPropertyImpl", "methodid":3809, "methodname":"net.sourceforge.ganttproject.resource.HumanResource$CustomPropertyImpl.-init-(net.sourceforge.ganttproject.CustomPropertyDefinition,java.lang.Object)", "isreturn":0, "sourcecode":"public CustomPropertyImpl(CustomPropertyDefinition definition, Object value) {\r\n    myDefinition = definition;\r\n    myValue = value;\r\n}"},
 {"id":916, "parametername":"Role role", "parametertype":"net.sourceforge.ganttproject.roles.Role", "parameterclass":512, "classid":499, "classname":"net.sourceforge.ganttproject.resource.HumanResource", "methodid":3807, "methodname":"net.sourceforge.ganttproject.resource.HumanResource.setRole(net.sourceforge.ganttproject.roles.Role)", "isreturn":0, "sourcecode":"// public void setFunction (int function) {\r\n// this.function=function;\r\n// }\r\n// public int getFunction () {\r\n// return myRole==null ? 0 : myRole.getID();\r\n// }\r\npublic void setRole(Role role) {\r\n    myRole = role;\r\n    fireResourceChanged();\r\n}"},
 {"id":917, "parametername":"GanttDaysOff gdo", "parametertype":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "parameterclass":149, "classid":499, "classname":"net.sourceforge.ganttproject.resource.HumanResource", "methodid":3791, "methodname":"net.sourceforge.ganttproject.resource.HumanResource.addDaysOff(net.sourceforge.ganttproject.calendar.GanttDaysOff)", "isreturn":0, "sourcecode":"public void addDaysOff(GanttDaysOff gdo) {\r\n    myDaysOffList.addElement(gdo);\r\n    fireResourceChanged();\r\n}"},
 {"id":918, "parametername":"ResourceAssignment assignmentToTask", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":499, "classname":"net.sourceforge.ganttproject.resource.HumanResource", "methodid":3792, "methodname":"net.sourceforge.ganttproject.resource.HumanResource.createAssignment(net.sourceforge.ganttproject.task.ResourceAssignment)", "isreturn":0, "sourcecode":"public ResourceAssignment createAssignment(ResourceAssignment assignmentToTask) {\r\n    ResourceAssignment result = super.createAssignment(assignmentToTask);\r\n    fireAssignmentsChanged();\r\n    return result;\r\n}"},
 {"id":919, "parametername":"net.sourceforge.ganttproject.task.ResourceAssignment", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":499, "classname":"net.sourceforge.ganttproject.resource.HumanResource", "methodid":3792, "methodname":"net.sourceforge.ganttproject.resource.HumanResource.createAssignment(net.sourceforge.ganttproject.task.ResourceAssignment)", "isreturn":1, "sourcecode":"public ResourceAssignment createAssignment(ResourceAssignment assignmentToTask) {\r\n    ResourceAssignment result = super.createAssignment(assignmentToTask);\r\n    fireAssignmentsChanged();\r\n    return result;\r\n}"},
 {"id":920, "parametername":"CustomPropertyDefinition definition", "parametertype":"net.sourceforge.ganttproject.CustomPropertyDefinition", "parameterclass":11, "classid":499, "classname":"net.sourceforge.ganttproject.resource.HumanResource", "methodid":3790, "methodname":"net.sourceforge.ganttproject.resource.HumanResource.addCustomProperty(net.sourceforge.ganttproject.CustomPropertyDefinition,java.lang.String)", "isreturn":0, "sourcecode":"public CustomProperty addCustomProperty(CustomPropertyDefinition definition, String valueAsString) {\r\n    final CustomPropertyDefinition stubDefinition = net.sourceforge.ganttproject.CustomPropertyManager.PropertyTypeEncoder.decodeTypeAndDefaultValue(definition.getTypeAsString(), valueAsString);\r\n    addCustomField(definition.getName(), stubDefinition.getDefaultValue());\r\n    return new HumanResource.CustomPropertyImpl(definition, stubDefinition.getDefaultValue());\r\n}"},
 {"id":921, "parametername":"net.sourceforge.ganttproject.CustomProperty", "parametertype":"net.sourceforge.ganttproject.CustomProperty", "parameterclass":10, "classid":499, "classname":"net.sourceforge.ganttproject.resource.HumanResource", "methodid":3790, "methodname":"net.sourceforge.ganttproject.resource.HumanResource.addCustomProperty(net.sourceforge.ganttproject.CustomPropertyDefinition,java.lang.String)", "isreturn":1, "sourcecode":"public CustomProperty addCustomProperty(CustomPropertyDefinition definition, String valueAsString) {\r\n    final CustomPropertyDefinition stubDefinition = net.sourceforge.ganttproject.CustomPropertyManager.PropertyTypeEncoder.decodeTypeAndDefaultValue(definition.getTypeAsString(), valueAsString);\r\n    addCustomField(definition.getName(), stubDefinition.getDefaultValue());\r\n    return new HumanResource.CustomPropertyImpl(definition, stubDefinition.getDefaultValue());\r\n}"},
 {"id":922, "parametername":"Role defaultRole", "parametertype":"net.sourceforge.ganttproject.roles.Role", "parameterclass":512, "classid":501, "classname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "methodid":3813, "methodname":"net.sourceforge.ganttproject.resource.HumanResourceManager.-init-(net.sourceforge.ganttproject.roles.Role)", "isreturn":0, "sourcecode":"public HumanResourceManager(Role defaultRole) {\r\n    myDefaultRole = defaultRole;\r\n}"},
 {"id":923, "parametername":"CustomPropertyDefinition stub", "parametertype":"net.sourceforge.ganttproject.CustomPropertyDefinition", "parameterclass":11, "classid":500, "classname":"net.sourceforge.ganttproject.resource.HumanResourceManager$CustomPropertyDefinitionImpl", "methodid":3845, "methodname":"net.sourceforge.ganttproject.resource.HumanResourceManager$CustomPropertyDefinitionImpl.-init-(java.lang.String,java.lang.String,net.sourceforge.ganttproject.CustomPropertyDefinition)", "isreturn":0, "sourcecode":"CustomPropertyDefinitionImpl(String name, String id, CustomPropertyDefinition stub) {\r\n    myName = name;\r\n    myID = id;\r\n    myDefaultValue = stub.getDefaultValue();\r\n    myDefaultValueAsString = stub.getDefaultValueAsString();\r\n    myType = stub.getType();\r\n    myTypeAsString = stub.getTypeAsString();\r\n}"},
 {"id":924, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":501, "classname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "methodid":3816, "methodname":"net.sourceforge.ganttproject.resource.HumanResourceManager.add(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public void add(ProjectResource resource) {\r\n    if ((resource.getId()) == (-1)) {\r\n        resource.setId(nextFreeId);\r\n    }\r\n    if ((resource.getId()) >= (nextFreeId)) {\r\n        nextFreeId = (resource.getId()) + 1;\r\n    }\r\n    resources.add(resource);\r\n    fireResourceAdded(resource);\r\n}"},
 {"id":925, "parametername":"CustomPropertyDefinition definition", "parametertype":"net.sourceforge.ganttproject.CustomPropertyDefinition", "parameterclass":11, "classid":501, "classname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "methodid":3817, "methodname":"net.sourceforge.ganttproject.resource.HumanResourceManager.addCustomField(net.sourceforge.ganttproject.CustomPropertyDefinition)", "isreturn":0, "sourcecode":"public void addCustomField(CustomPropertyDefinition definition) {\r\n    customFields.put(definition.getName(), definition);\r\n    /* all the existant resources are added the new property field */\r\n    Iterator it = resources.iterator();\r\n    while (it.hasNext()) {\r\n        ((HumanResource) (it.next())).addCustomField(definition.getName(), definition.getDefaultValue());\r\n    } \r\n}"},
 {"id":926, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":501, "classname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "methodid":3840, "methodname":"net.sourceforge.ganttproject.resource.HumanResourceManager.remove(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public void remove(ProjectResource resource) {\r\n    fireResourcesRemoved(new ProjectResource[]{ resource });\r\n    resources.remove(resource);\r\n}"},
 {"id":927, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":501, "classname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "methodid":3841, "methodname":"net.sourceforge.ganttproject.resource.HumanResourceManager.remove(net.sourceforge.ganttproject.resource.ProjectResource,net.sourceforge.ganttproject.undo.GPUndoManager)", "isreturn":0, "sourcecode":"public void remove(ProjectResource resource, GPUndoManager myUndoManager) {\r\n    final ProjectResource res = resource;\r\n    myUndoManager.undoableEdit(\"Delete Human OK\", new Runnable() {\r\n        public void run() {\r\n            fireResourcesRemoved(new ProjectResource[]{ res });\r\n            resources.remove(res);\r\n        }\r\n    });\r\n}"},
 {"id":928, "parametername":"GPUndoManager myUndoManager", "parametertype":"net.sourceforge.ganttproject.undo.GPUndoManager", "parameterclass":657, "classid":501, "classname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "methodid":3841, "methodname":"net.sourceforge.ganttproject.resource.HumanResourceManager.remove(net.sourceforge.ganttproject.resource.ProjectResource,net.sourceforge.ganttproject.undo.GPUndoManager)", "isreturn":0, "sourcecode":"public void remove(ProjectResource resource, GPUndoManager myUndoManager) {\r\n    final ProjectResource res = resource;\r\n    myUndoManager.undoableEdit(\"Delete Human OK\", new Runnable() {\r\n        public void run() {\r\n            fireResourcesRemoved(new ProjectResource[]{ res });\r\n            resources.remove(res);\r\n        }\r\n    });\r\n}"},
 {"id":929, "parametername":"ResourceView view", "parametertype":"net.sourceforge.ganttproject.resource.ResourceView", "parameterclass":511, "classid":501, "classname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "methodid":3818, "methodname":"net.sourceforge.ganttproject.resource.HumanResourceManager.addView(net.sourceforge.ganttproject.resource.ResourceView)", "isreturn":0, "sourcecode":"public void addView(ResourceView view) {\r\n    myViews.add(view);\r\n}"},
 {"id":930, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":501, "classname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "methodid":3826, "methodname":"net.sourceforge.ganttproject.resource.HumanResourceManager.fireResourceAdded(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"private void fireResourceAdded(ProjectResource resource) {\r\n    ResourceEvent e = new ResourceEvent(this, resource);\r\n    for (Iterator i = myViews.iterator(); i.hasNext();) {\r\n        ResourceView nextView = ((ResourceView) (i.next()));\r\n        nextView.resourceAdded(e);\r\n    }\r\n}"},
 {"id":931, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":501, "classname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "methodid":3827, "methodname":"net.sourceforge.ganttproject.resource.HumanResourceManager.fireResourceChanged(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"void fireResourceChanged(ProjectResource resource) {\r\n    ResourceEvent e = new ResourceEvent(this, resource);\r\n    for (Iterator i = myViews.iterator(); i.hasNext();) {\r\n        ResourceView nextView = ((ResourceView) (i.next()));\r\n        nextView.resourceChanged(e);\r\n    }\r\n}"},
 {"id":932, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":501, "classname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "methodid":3824, "methodname":"net.sourceforge.ganttproject.resource.HumanResourceManager.fireAssignmentsChanged(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public void fireAssignmentsChanged(ProjectResource resource) {\r\n    ResourceEvent e = new ResourceEvent(this, resource);\r\n    for (Iterator i = myViews.iterator(); i.hasNext();) {\r\n        ResourceView nextView = ((ResourceView) (i.next()));\r\n        nextView.resourceAssignmentsChanged(e);\r\n    }\r\n}"},
 {"id":933, "parametername":"HumanResource hr", "parametertype":"net.sourceforge.ganttproject.resource.HumanResource", "parameterclass":499, "classid":501, "classname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "methodid":3844, "methodname":"net.sourceforge.ganttproject.resource.HumanResourceManager.up(net.sourceforge.ganttproject.resource.HumanResource)", "isreturn":0, "sourcecode":"/**\r\n * Move up the resource number index\r\n */\r\npublic void up(HumanResource hr) {\r\n    int index = resources.indexOf(hr);\r\n    assert index >= 0;\r\n    resources.remove(index);\r\n    resources.add((index - 1), hr);\r\n    fireResourceChanged(hr);\r\n}"},
 {"id":934, "parametername":"HumanResource hr", "parametertype":"net.sourceforge.ganttproject.resource.HumanResource", "parameterclass":499, "classid":501, "classname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "methodid":3823, "methodname":"net.sourceforge.ganttproject.resource.HumanResourceManager.down(net.sourceforge.ganttproject.resource.HumanResource)", "isreturn":0, "sourcecode":"/**\r\n * Move down the resource number index\r\n */\r\npublic void down(HumanResource hr) {\r\n    int index = resources.indexOf(hr);\r\n    assert index >= 0;\r\n    resources.remove(index);\r\n    resources.add((index + 1), hr);\r\n    fireResourceChanged(hr);\r\n}"},
 {"id":935, "parametername":"ResourceManager resourceManager", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":501, "classname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "methodid":3838, "methodname":"net.sourceforge.ganttproject.resource.HumanResourceManager.importData(net.sourceforge.ganttproject.resource.ResourceManager)", "isreturn":0, "sourcecode":"public Map importData(ResourceManager resourceManager) {\r\n    Map original2imported = new HashMap();\r\n    if ((resourceManager instanceof HumanResourceManager) == false) {\r\n        throw new IllegalArgumentException(\"I expect resource manager to be HumanResourceManager\");\r\n    }\r\n    HumanResourceManager hrManager = ((HumanResourceManager) (resourceManager));\r\n    List resources = hrManager.getResources();\r\n    for (int i = 0; i < (resources.size()); i++) {\r\n        HumanResource next = ((HumanResource) (resources.get(i)));\r\n        importData(next, original2imported);\r\n    }\r\n    return original2imported;\r\n}"},
 {"id":936, "parametername":"HumanResource next", "parametertype":"net.sourceforge.ganttproject.resource.HumanResource", "parameterclass":499, "classid":501, "classname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "methodid":3837, "methodname":"net.sourceforge.ganttproject.resource.HumanResourceManager.importData(net.sourceforge.ganttproject.resource.HumanResource,java.util.Map)", "isreturn":0, "sourcecode":"private void importData(HumanResource next, Map original2imported) {\r\n    HumanResource imported = ((HumanResource) (create(next.getName(), nextFreeId)));\r\n    if ((next.getDaysOff()) != null)\r\n        for (int i = 0; i < (next.getDaysOff().size()); i++)\r\n            imported.addDaysOff(((GanttDaysOff) (((GanttDaysOff) (next.getDaysOff().get(i))).clone())));\r\n\r\n\r\n    imported.setName(next.getName());\r\n    imported.setDescription(next.getDescription());\r\n    imported.setMail(next.getMail());\r\n    imported.setPhone(next.getPhone());\r\n    imported.setRole(next.getRole());\r\n    /* <CustomProperty> */\r\n    List customProperties = next.getCustomProperties();\r\n    for (int i = 0; i < (customProperties.size()); i++) {\r\n        CustomProperty nextProperty = ((CustomProperty) (customProperties.get(i)));\r\n        imported.addCustomProperty(nextProperty.getDefinition(), nextProperty.getValueAsString());\r\n    }\r\n    original2imported.put(next, imported);\r\n}"},
 {"id":937, "parametername":"CustomPropertyManager source", "parametertype":"net.sourceforge.ganttproject.CustomPropertyManager", "parameterclass":14, "classid":501, "classname":"net.sourceforge.ganttproject.resource.HumanResourceManager", "methodid":3836, "methodname":"net.sourceforge.ganttproject.resource.HumanResourceManager.importData(net.sourceforge.ganttproject.CustomPropertyManager)", "isreturn":0, "sourcecode":"public void importData(CustomPropertyManager source) {\r\n    // TODO Auto-generated method stub\r\n}"},
 {"id":938, "parametername":"Task ref", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":502, "classname":"net.sourceforge.ganttproject.resource.LoadDistribution$Load", "methodid":3864, "methodname":"net.sourceforge.ganttproject.resource.LoadDistribution$Load.-init-(java.util.Date,java.util.Date,float,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"Load(Date startDate, Date endDate, float load, Task ref) {\r\n    this.load = load;\r\n    this.refTask = ref;\r\n    this.startDate = startDate;\r\n    this.endDate = endDate;\r\n}"},
 {"id":939, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":503, "classname":"net.sourceforge.ganttproject.resource.LoadDistribution", "methodid":3853, "methodname":"net.sourceforge.ganttproject.resource.LoadDistribution.-init-(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public LoadDistribution(ProjectResource resource) {\r\n    myLoads.add(new LoadDistribution.Load(null, null, 0, null));\r\n    myDaysOff.add(new LoadDistribution.Load(null, null, 0, null));\r\n    myResource = resource;\r\n    ResourceAssignment[] assignments = myResource.getAssignments();\r\n    for (int j = 0; j < (assignments.length); j++) {\r\n        processAssignment(assignments[j]);\r\n    }\r\n    processDaysOff(myResource);\r\n}"},
 {"id":940, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":503, "classname":"net.sourceforge.ganttproject.resource.LoadDistribution", "methodid":3863, "methodname":"net.sourceforge.ganttproject.resource.LoadDistribution.processDaysOff(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"private void processDaysOff(ProjectResource resource) {\r\n    HumanResource hr = ((HumanResource) (resource));\r\n    DefaultListModel daysOff = hr.getDaysOff();\r\n    if (daysOff != null) {\r\n        for (int l = 0; l < (daysOff.size()); l++) {\r\n            processDayOff(((GanttDaysOff) (daysOff.get(l))));\r\n        }\r\n    }\r\n}"},
 {"id":941, "parametername":"GanttDaysOff dayOff", "parametertype":"net.sourceforge.ganttproject.calendar.GanttDaysOff", "parameterclass":149, "classid":503, "classname":"net.sourceforge.ganttproject.resource.LoadDistribution", "methodid":3862, "methodname":"net.sourceforge.ganttproject.resource.LoadDistribution.processDayOff(net.sourceforge.ganttproject.calendar.GanttDaysOff)", "isreturn":0, "sourcecode":"private void processDayOff(GanttDaysOff dayOff) {\r\n    Date dayOffEnd = dayOff.getFinish().getTime();\r\n    addLoad(dayOff.getStart().getTime(), dayOffEnd, (-1), myDaysOff, null);\r\n}"},
 {"id":942, "parametername":"ResourceAssignment assignment", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":503, "classname":"net.sourceforge.ganttproject.resource.LoadDistribution", "methodid":3861, "methodname":"net.sourceforge.ganttproject.resource.LoadDistribution.processAssignment(net.sourceforge.ganttproject.task.ResourceAssignment)", "isreturn":0, "sourcecode":"private void processAssignment(ResourceAssignment assignment) {\r\n    Task task = assignment.getTask();\r\n    TaskActivity[] activities = task.getActivities();\r\n    for (int i = 0; i < (activities.length); i++) {\r\n        processActivity(activities[i], assignment.getLoad());\r\n    }\r\n}"},
 {"id":943, "parametername":"TaskActivity activity", "parametertype":"net.sourceforge.ganttproject.task.TaskActivity", "parameterclass":549, "classid":503, "classname":"net.sourceforge.ganttproject.resource.LoadDistribution", "methodid":3860, "methodname":"net.sourceforge.ganttproject.resource.LoadDistribution.processActivity(net.sourceforge.ganttproject.task.TaskActivity,float)", "isreturn":0, "sourcecode":"private void processActivity(TaskActivity activity, float load) {\r\n    if ((activity.getIntensity()) == 0) {\r\n        return;\r\n    }\r\n    addLoad(activity.getStart(), activity.getEnd(), load, myLoads, activity.getTask());\r\n}"},
 {"id":944, "parametername":"/* <Load> */\r\nTask t", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":503, "classname":"net.sourceforge.ganttproject.resource.LoadDistribution", "methodid":3854, "methodname":"net.sourceforge.ganttproject.resource.LoadDistribution.addLoad(java.util.Date,java.util.Date,float,java.util.List,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"private void addLoad(Date startDate, Date endDate, float load, List loads, /* <Load> */\r\nTask t) {\r\n    LoadDistribution.Load taskLoad = new LoadDistribution.Load(startDate, endDate, load, t);\r\n    myTasksLoads.add(taskLoad);\r\n    int idxStart = -1;\r\n    float currentLoad = 0;\r\n    if (startDate == null) {\r\n        idxStart = 0;\r\n    } else {\r\n        for (int i = 1; i < (loads.size()); i++) {\r\n            LoadDistribution.Load nextLoad = ((LoadDistribution.Load) (loads.get(i)));\r\n            if ((startDate.compareTo(nextLoad.startDate)) >= 0) {\r\n                currentLoad = ((LoadDistribution.Load) (loads.get(i))).load;\r\n            }\r\n            if ((startDate.compareTo(nextLoad.startDate)) > 0) {\r\n                continue;\r\n            }\r\n            idxStart = i;\r\n            if ((startDate.compareTo(nextLoad.startDate)) < 0) {\r\n                loads.add(i, new LoadDistribution.Load(startDate, null, currentLoad, null));\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    if (idxStart == (-1)) {\r\n        idxStart = loads.size();\r\n        loads.add(new LoadDistribution.Load(startDate, null, 0, t));\r\n    }\r\n    int idxEnd = -1;\r\n    if (endDate == null) {\r\n        idxEnd = (loads.size()) - 1;\r\n    } else {\r\n        for (int i = idxStart; i < (loads.size()); i++) {\r\n            LoadDistribution.Load nextLoad = ((LoadDistribution.Load) (loads.get(i)));\r\n            if ((endDate.compareTo(nextLoad.startDate)) > 0) {\r\n                nextLoad.load += load;\r\n                continue;\r\n            }\r\n            idxEnd = i;\r\n            if ((endDate.compareTo(nextLoad.startDate)) < 0) {\r\n                LoadDistribution.Load prevLoad = ((LoadDistribution.Load) (loads.get((i - 1))));\r\n                loads.add(i, new LoadDistribution.Load(endDate, null, ((prevLoad.load) - load), null));\r\n            }\r\n            break;\r\n        }\r\n    }\r\n    if (idxEnd == (-1)) {\r\n        idxEnd = loads.size();\r\n        loads.add(new LoadDistribution.Load(endDate, null, 0, t));\r\n    }\r\n}"},
 {"id":945, "parametername":"ResourceAssignment assignmentToTask", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":504, "classname":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl", "methodid":3893, "methodname":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl.-init-(net.sourceforge.ganttproject.task.ResourceAssignment)", "isreturn":0, "sourcecode":"private ResourceAssignmentImpl(ResourceAssignment assignmentToTask) {\r\n    myAssignmentToTask = assignmentToTask;\r\n}"},
 {"id":946, "parametername":"ResourceAssignment assignmentToTask", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":505, "classname":"net.sourceforge.ganttproject.resource.ProjectResource", "methodid":3870, "methodname":"net.sourceforge.ganttproject.resource.ProjectResource.createAssignment(net.sourceforge.ganttproject.task.ResourceAssignment)", "isreturn":0, "sourcecode":"public ResourceAssignment createAssignment(ResourceAssignment assignmentToTask) {\r\n    for (int i = 0; i < (myAssignments.size()); i++) {\r\n        if (((ResourceAssignment) (myAssignments.get(i))).getTask().equals(assignmentToTask.getTask())) {\r\n            // throw new IllegalStateException(\"An attemp to assign resource\r\n            // to the same task twice\");\r\n        }\r\n    }\r\n    ResourceAssignment result = new ProjectResource.ResourceAssignmentImpl(assignmentToTask);\r\n    myAssignments.add(result);\r\n    resetLoads();\r\n    return result;\r\n}"},
 {"id":947, "parametername":"net.sourceforge.ganttproject.task.ResourceAssignment", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":505, "classname":"net.sourceforge.ganttproject.resource.ProjectResource", "methodid":3870, "methodname":"net.sourceforge.ganttproject.resource.ProjectResource.createAssignment(net.sourceforge.ganttproject.task.ResourceAssignment)", "isreturn":1, "sourcecode":"public ResourceAssignment createAssignment(ResourceAssignment assignmentToTask) {\r\n    for (int i = 0; i < (myAssignments.size()); i++) {\r\n        if (((ResourceAssignment) (myAssignments.get(i))).getTask().equals(assignmentToTask.getTask())) {\r\n            // throw new IllegalStateException(\"An attemp to assign resource\r\n            // to the same task twice\");\r\n        }\r\n    }\r\n    ResourceAssignment result = new ProjectResource.ResourceAssignmentImpl(assignmentToTask);\r\n    myAssignments.add(result);\r\n    resetLoads();\r\n    return result;\r\n}"},
 {"id":948, "parametername":"Role role", "parametertype":"net.sourceforge.ganttproject.roles.Role", "parameterclass":512, "classid":504, "classname":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl", "methodid":3902, "methodname":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl.setRoleForAssignment(net.sourceforge.ganttproject.roles.Role)", "isreturn":0, "sourcecode":"public void setRoleForAssignment(Role role) {\r\n    myRoleForAssignment = role;\r\n}"},
 {"id":949, "parametername":"ProjectResource.ResourceAssignmentImpl resourceAssignmentImpl", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl", "parameterclass":504, "classid":505, "classname":"net.sourceforge.ganttproject.resource.ProjectResource", "methodid":3873, "methodname":"net.sourceforge.ganttproject.resource.ProjectResource.fireAssignmentChanged(net.sourceforge.ganttproject.resource.ProjectResource$ResourceAssignmentImpl)", "isreturn":0, "sourcecode":"private void fireAssignmentChanged(ProjectResource.ResourceAssignmentImpl resourceAssignmentImpl) {\r\n    resetLoads();\r\n    fireAssignmentsChanged();\r\n}"},
 {"id":950, "parametername":"ResourceManager mgr", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":508, "classname":"net.sourceforge.ganttproject.resource.ResourceEvent", "methodid":3927, "methodname":"net.sourceforge.ganttproject.resource.ResourceEvent.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param source\r\n * \t\t\r\n */\r\npublic ResourceEvent(ResourceManager mgr, ProjectResource resource) {\r\n    super(mgr);\r\n    myManager = mgr;\r\n    myResource = resource;\r\n    myResources = new ProjectResource[]{ myResource };\r\n}"},
 {"id":951, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":508, "classname":"net.sourceforge.ganttproject.resource.ResourceEvent", "methodid":3927, "methodname":"net.sourceforge.ganttproject.resource.ResourceEvent.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param source\r\n * \t\t\r\n */\r\npublic ResourceEvent(ResourceManager mgr, ProjectResource resource) {\r\n    super(mgr);\r\n    myManager = mgr;\r\n    myResource = resource;\r\n    myResources = new ProjectResource[]{ myResource };\r\n}"},
 {"id":952, "parametername":"ResourceManager mgr", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":508, "classname":"net.sourceforge.ganttproject.resource.ResourceEvent", "methodid":3928, "methodname":"net.sourceforge.ganttproject.resource.ResourceEvent.-init-(net.sourceforge.ganttproject.resource.ResourceManager,net.sourceforge.ganttproject.resource.ProjectResource[])", "isreturn":0, "sourcecode":"public ResourceEvent(ResourceManager mgr, ProjectResource[] resources) {\r\n    super(mgr);\r\n    myManager = mgr;\r\n    myResources = resources;\r\n    myResource = ((resources.length) > 0) ? resources[0] : null;\r\n}"},
 {"id":953, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":509, "classname":"net.sourceforge.ganttproject.resource.ResourceManager", "methodid":3932, "methodname":"net.sourceforge.ganttproject.resource.ResourceManager.add(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"/**\r\n * Adds the resource to the internal list of available resources.\r\n *\r\n * @param resource\r\n * \t\tThe resource that should be added to the list.\r\n */\r\npublic void add(ProjectResource resource);"},
 {"id":954, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":509, "classname":"net.sourceforge.ganttproject.resource.ResourceManager", "methodid":3941, "methodname":"net.sourceforge.ganttproject.resource.ResourceManager.remove(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"/**\r\n * Removes the resource.\r\n *\r\n * @param resource\r\n * \t\tThe resource to remove.\r\n */\r\npublic void remove(ProjectResource resource);"},
 {"id":955, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":509, "classname":"net.sourceforge.ganttproject.resource.ResourceManager", "methodid":3942, "methodname":"net.sourceforge.ganttproject.resource.ResourceManager.remove(net.sourceforge.ganttproject.resource.ProjectResource,net.sourceforge.ganttproject.undo.GPUndoManager)", "isreturn":0, "sourcecode":"/**\r\n * Removes the resource by its id.\r\n *\r\n * @param Id\r\n * \t\tId of the resource to remove.\r\n */\r\npublic void remove(ProjectResource resource, GPUndoManager myUndoManager);"},
 {"id":956, "parametername":"GPUndoManager myUndoManager", "parametertype":"net.sourceforge.ganttproject.undo.GPUndoManager", "parameterclass":657, "classid":509, "classname":"net.sourceforge.ganttproject.resource.ResourceManager", "methodid":3942, "methodname":"net.sourceforge.ganttproject.resource.ResourceManager.remove(net.sourceforge.ganttproject.resource.ProjectResource,net.sourceforge.ganttproject.undo.GPUndoManager)", "isreturn":0, "sourcecode":"/**\r\n * Removes the resource by its id.\r\n *\r\n * @param Id\r\n * \t\tId of the resource to remove.\r\n */\r\npublic void remove(ProjectResource resource, GPUndoManager myUndoManager);"},
 {"id":957, "parametername":"ResourceView view", "parametertype":"net.sourceforge.ganttproject.resource.ResourceView", "parameterclass":511, "classid":509, "classname":"net.sourceforge.ganttproject.resource.ResourceManager", "methodid":3933, "methodname":"net.sourceforge.ganttproject.resource.ResourceManager.addView(net.sourceforge.ganttproject.resource.ResourceView)", "isreturn":0, "sourcecode":"/**\r\n * Adds a new view of this manager\r\n *\r\n * @param view\r\n * \t\t\r\n */\r\npublic void addView(ResourceView view);"},
 {"id":958, "parametername":"ResourceManager resourceManager", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":509, "classname":"net.sourceforge.ganttproject.resource.ResourceManager", "methodid":3940, "methodname":"net.sourceforge.ganttproject.resource.ResourceManager.importData(net.sourceforge.ganttproject.resource.ResourceManager)", "isreturn":0, "sourcecode":"public Map importData(ResourceManager resourceManager);"},
 {"id":959, "parametername":"ProjectResource res", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":510, "classname":"net.sourceforge.ganttproject.resource.ResourceNode", "methodid":3944, "methodname":"net.sourceforge.ganttproject.resource.ResourceNode.-init-(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public ResourceNode(ProjectResource res) {\r\n    super(res);\r\n    resource = res;\r\n}"},
 {"id":960, "parametername":"Role defRole", "parametertype":"net.sourceforge.ganttproject.roles.Role", "parameterclass":512, "classid":510, "classname":"net.sourceforge.ganttproject.resource.ResourceNode", "methodid":3953, "methodname":"net.sourceforge.ganttproject.resource.ResourceNode.setDefaultRole(net.sourceforge.ganttproject.roles.Role)", "isreturn":0, "sourcecode":"public void setDefaultRole(Role defRole) {\r\n    if ((resource) instanceof HumanResource)\r\n        ((HumanResource) (resource)).setRole(defRole);\r\n\r\n}"},
 {"id":961, "parametername":"ResourceEvent event", "parametertype":"net.sourceforge.ganttproject.resource.ResourceEvent", "parameterclass":508, "classid":511, "classname":"net.sourceforge.ganttproject.resource.ResourceView", "methodid":3958, "methodname":"net.sourceforge.ganttproject.resource.ResourceView.resourceAdded(net.sourceforge.ganttproject.resource.ResourceEvent)", "isreturn":0, "sourcecode":"/**\r\n * This method is called whenever new resource appears in the resource\r\n * manager\r\n *\r\n * @param event\r\n * \t\tResource event object\r\n */\r\npublic void resourceAdded(ResourceEvent event);"},
 {"id":962, "parametername":"ResourceEvent event", "parametertype":"net.sourceforge.ganttproject.resource.ResourceEvent", "parameterclass":508, "classid":511, "classname":"net.sourceforge.ganttproject.resource.ResourceView", "methodid":3961, "methodname":"net.sourceforge.ganttproject.resource.ResourceView.resourcesRemoved(net.sourceforge.ganttproject.resource.ResourceEvent)", "isreturn":0, "sourcecode":"public void resourcesRemoved(ResourceEvent event);"},
 {"id":963, "parametername":"ResourceEvent e", "parametertype":"net.sourceforge.ganttproject.resource.ResourceEvent", "parameterclass":508, "classid":511, "classname":"net.sourceforge.ganttproject.resource.ResourceView", "methodid":3960, "methodname":"net.sourceforge.ganttproject.resource.ResourceView.resourceChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "isreturn":0, "sourcecode":"public void resourceChanged(ResourceEvent e);"},
 {"id":964, "parametername":"ResourceEvent e", "parametertype":"net.sourceforge.ganttproject.resource.ResourceEvent", "parameterclass":508, "classid":511, "classname":"net.sourceforge.ganttproject.resource.ResourceView", "methodid":3959, "methodname":"net.sourceforge.ganttproject.resource.ResourceView.resourceAssignmentsChanged(net.sourceforge.ganttproject.resource.ResourceEvent)", "isreturn":0, "sourcecode":"public void resourceAssignmentsChanged(ResourceEvent e);"},
 {"id":965, "parametername":"RoleSet roleSet", "parametertype":"net.sourceforge.ganttproject.roles.RoleSet", "parameterclass":520, "classid":513, "classname":"net.sourceforge.ganttproject.roles.RoleImpl", "methodid":3966, "methodname":"net.sourceforge.ganttproject.roles.RoleImpl.-init-(int,java.lang.String,net.sourceforge.ganttproject.roles.RoleSet)", "isreturn":0, "sourcecode":"public RoleImpl(int id, String name, RoleSet roleSet) {\r\n    myID = id;\r\n    myName = name;\r\n    myRoleSet = roleSet;\r\n    GanttLanguage.getInstance().addListener(new GanttLanguage.Listener() {\r\n        public void languageChanged(GanttLanguage.Event event) {\r\n            Role role = myRoleSet.findRole(myID);\r\n            if (role != null) {\r\n                myName = role.getName();\r\n            }\r\n        }\r\n    });\r\n}"},
 {"id":966, "parametername":"RoleManager source", "parametertype":"net.sourceforge.ganttproject.roles.RoleManager", "parameterclass":517, "classid":516, "classname":"net.sourceforge.ganttproject.roles.RoleManager$RoleEvent", "methodid":3990, "methodname":"net.sourceforge.ganttproject.roles.RoleManager$RoleEvent.-init-(net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.roles.RoleSet)", "isreturn":0, "sourcecode":"public RoleEvent(RoleManager source, RoleSet changedRoleSet) {\r\n    super(source);\r\n    myChangedRoleSet = changedRoleSet;\r\n}"},
 {"id":967, "parametername":"RoleSet changedRoleSet", "parametertype":"net.sourceforge.ganttproject.roles.RoleSet", "parameterclass":520, "classid":516, "classname":"net.sourceforge.ganttproject.roles.RoleManager$RoleEvent", "methodid":3990, "methodname":"net.sourceforge.ganttproject.roles.RoleManager$RoleEvent.-init-(net.sourceforge.ganttproject.roles.RoleManager,net.sourceforge.ganttproject.roles.RoleSet)", "isreturn":0, "sourcecode":"public RoleEvent(RoleManager source, RoleSet changedRoleSet) {\r\n    super(source);\r\n    myChangedRoleSet = changedRoleSet;\r\n}"},
 {"id":968, "parametername":"RoleManager roleManager", "parametertype":"net.sourceforge.ganttproject.roles.RoleManager", "parameterclass":517, "classid":517, "classname":"net.sourceforge.ganttproject.roles.RoleManager", "methodid":3985, "methodname":"net.sourceforge.ganttproject.roles.RoleManager.importData(net.sourceforge.ganttproject.roles.RoleManager)", "isreturn":0, "sourcecode":"public void importData(RoleManager roleManager);"},
 {"id":969, "parametername":"RoleManager.Listener listener", "parametertype":"net.sourceforge.ganttproject.roles.RoleManager$Listener", "parameterclass":515, "classid":517, "classname":"net.sourceforge.ganttproject.roles.RoleManager", "methodid":3976, "methodname":"net.sourceforge.ganttproject.roles.RoleManager.addRoleListener(net.sourceforge.ganttproject.roles.RoleManager$Listener)", "isreturn":0, "sourcecode":"public void addRoleListener(RoleManager.Listener listener);"},
 {"id":970, "parametername":"RoleManager.Listener listener", "parametertype":"net.sourceforge.ganttproject.roles.RoleManager$Listener", "parameterclass":515, "classid":517, "classname":"net.sourceforge.ganttproject.roles.RoleManager", "methodid":3986, "methodname":"net.sourceforge.ganttproject.roles.RoleManager.removeRoleListener(net.sourceforge.ganttproject.roles.RoleManager$Listener)", "isreturn":0, "sourcecode":"public void removeRoleListener(RoleManager.Listener listener);"},
 {"id":971, "parametername":"RoleManager.RoleEvent e", "parametertype":"net.sourceforge.ganttproject.roles.RoleManager$RoleEvent", "parameterclass":516, "classid":515, "classname":"net.sourceforge.ganttproject.roles.RoleManager$Listener", "methodid":3989, "methodname":"net.sourceforge.ganttproject.roles.RoleManager$Listener.rolesChanged(net.sourceforge.ganttproject.roles.RoleManager$RoleEvent)", "isreturn":0, "sourcecode":"public void rolesChanged(RoleManager.RoleEvent e);"},
 {"id":972, "parametername":"RoleManager original", "parametertype":"net.sourceforge.ganttproject.roles.RoleManager", "parameterclass":517, "classid":518, "classname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "methodid":4006, "methodname":"net.sourceforge.ganttproject.roles.RoleManagerImpl.importData(net.sourceforge.ganttproject.roles.RoleManager)", "isreturn":0, "sourcecode":"public void importData(RoleManager original) {\r\n    myProjectRoleSet.importData(original.getProjectRoleSet());\r\n    RoleSet[] originalRoleSets = original.getRoleSets();\r\n    HashSet thisNames = new HashSet();\r\n    for (int i = 0; i < (myRoleSets.size()); i++) {\r\n        RoleSet next = ((RoleSet) (myRoleSets.get(i)));\r\n        thisNames.add(next.getName());\r\n    }\r\n    for (int i = 0; i < (originalRoleSets.length); i++) {\r\n        RoleSet next = originalRoleSets[i];\r\n        if (!(thisNames.contains(next.getName()))) {\r\n            myRoleSets.add(next);\r\n        }\r\n    }\r\n    // myRoleSets.addAll(Arrays.asList(originalRoleSets));\r\n}"},
 {"id":973, "parametername":"RoleManager.Listener listener", "parametertype":"net.sourceforge.ganttproject.roles.RoleManager$Listener", "parameterclass":515, "classid":518, "classname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "methodid":3994, "methodname":"net.sourceforge.ganttproject.roles.RoleManagerImpl.addRoleListener(net.sourceforge.ganttproject.roles.RoleManager$Listener)", "isreturn":0, "sourcecode":"public void addRoleListener(RoleManager.Listener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":974, "parametername":"RoleManager.Listener listener", "parametertype":"net.sourceforge.ganttproject.roles.RoleManager$Listener", "parameterclass":515, "classid":518, "classname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "methodid":4007, "methodname":"net.sourceforge.ganttproject.roles.RoleManagerImpl.removeRoleListener(net.sourceforge.ganttproject.roles.RoleManager$Listener)", "isreturn":0, "sourcecode":"public void removeRoleListener(RoleManager.Listener listener) {\r\n    myListeners.remove(listener);\r\n}"},
 {"id":975, "parametername":"RoleSet changedRoleSet", "parametertype":"net.sourceforge.ganttproject.roles.RoleSet", "parameterclass":520, "classid":518, "classname":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "methodid":3999, "methodname":"net.sourceforge.ganttproject.roles.RoleManagerImpl.fireRolesChanged(net.sourceforge.ganttproject.roles.RoleSet)", "isreturn":0, "sourcecode":"void fireRolesChanged(RoleSet changedRoleSet) {\r\n    RoleManager.RoleEvent event = new RoleManager.RoleEvent(this, changedRoleSet);\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        RoleManager.Listener next = ((RoleManager.Listener) (myListeners.get(i)));\r\n        next.rolesChanged(event);\r\n    }\r\n}"},
 {"id":976, "parametername":"Role role", "parametertype":"net.sourceforge.ganttproject.roles.Role", "parameterclass":512, "classid":520, "classname":"net.sourceforge.ganttproject.roles.RoleSet", "methodid":4015, "methodname":"net.sourceforge.ganttproject.roles.RoleSet.deleteRole(net.sourceforge.ganttproject.roles.Role)", "isreturn":0, "sourcecode":"void deleteRole(Role role);"},
 {"id":977, "parametername":"RoleManagerImpl roleManager", "parametertype":"net.sourceforge.ganttproject.roles.RoleManagerImpl", "parameterclass":518, "classid":521, "classname":"net.sourceforge.ganttproject.roles.RoleSetImpl", "methodid":4022, "methodname":"net.sourceforge.ganttproject.roles.RoleSetImpl.-init-(java.lang.String,net.sourceforge.ganttproject.roles.RoleManagerImpl)", "isreturn":0, "sourcecode":"RoleSetImpl(String name, RoleManagerImpl roleManager) {\r\n    myName = name;\r\n    myRoleManager = roleManager;\r\n}"},
 {"id":978, "parametername":"Role role", "parametertype":"net.sourceforge.ganttproject.roles.Role", "parameterclass":512, "classid":521, "classname":"net.sourceforge.ganttproject.roles.RoleSetImpl", "methodid":4026, "methodname":"net.sourceforge.ganttproject.roles.RoleSetImpl.deleteRole(net.sourceforge.ganttproject.roles.Role)", "isreturn":0, "sourcecode":"public void deleteRole(Role role) {\r\n    myRoles.remove(role);\r\n    myRoleManager.fireRolesChanged(this);\r\n}"},
 {"id":979, "parametername":"RoleSet original", "parametertype":"net.sourceforge.ganttproject.roles.RoleSet", "parameterclass":520, "classid":521, "classname":"net.sourceforge.ganttproject.roles.RoleSetImpl", "methodid":4030, "methodname":"net.sourceforge.ganttproject.roles.RoleSetImpl.importData(net.sourceforge.ganttproject.roles.RoleSet)", "isreturn":0, "sourcecode":"void importData(RoleSet original) {\r\n    Role[] originalRoles = original.getRoles();\r\n    for (int i = 0; i < (originalRoles.length); i++) {\r\n        Role nextRole = originalRoles[i];\r\n        createRole(nextRole.getName(), nextRole.getID());\r\n    }\r\n}"},
 {"id":980, "parametername":"ShapePaint pattern", "parametertype":"net.sourceforge.ganttproject.shape.ShapePaint", "parameterclass":529, "classid":526, "classname":"net.sourceforge.ganttproject.shape.PreviewPanel", "methodid":4046, "methodname":"net.sourceforge.ganttproject.shape.PreviewPanel.setPattern(net.sourceforge.ganttproject.shape.ShapePaint)", "isreturn":0, "sourcecode":"public void setPattern(ShapePaint pattern) {\r\n    this.pattern = pattern;\r\n}"},
 {"id":981, "parametername":"ShapePaint pattern", "parametertype":"net.sourceforge.ganttproject.shape.ShapePaint", "parameterclass":529, "classid":527, "classname":"net.sourceforge.ganttproject.shape.Shape", "methodid":4053, "methodname":"net.sourceforge.ganttproject.shape.Shape.setPattern(net.sourceforge.ganttproject.shape.ShapePaint)", "isreturn":0, "sourcecode":"public void setPattern(ShapePaint pattern) {\r\n    preview.setPattern(pattern);\r\n    if (compactDisplay) {\r\n        patternCombo.setSelectedItem(new ShapePaint(pattern, Color.black, Color.white));\r\n        foregroundCombo.setSelectedItem(pattern.foreground);\r\n        backgroundCombo.setSelectedItem(pattern.background);\r\n    } else {\r\n        patternList.setSelectedValue(new ShapePaint(pattern, Color.black, Color.white), true);\r\n        foregroundList.setSelectedValue(pattern.foreground, true);\r\n        backgroundList.setSelectedValue(pattern.background, true);\r\n    }\r\n    fireActionEvent();\r\n}"},
 {"id":982, "parametername":"ShapePaint pattern", "parametertype":"net.sourceforge.ganttproject.shape.ShapePaint", "parameterclass":529, "classid":529, "classname":"net.sourceforge.ganttproject.shape.ShapePaint", "methodid":4056, "methodname":"net.sourceforge.ganttproject.shape.ShapePaint.-init-(net.sourceforge.ganttproject.shape.ShapePaint)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic ShapePaint(ShapePaint pattern) {\r\n    this(pattern.width, pattern.height, pattern.array, pattern.foreground, pattern.background);\r\n}"},
 {"id":983, "parametername":"ShapePaint pattern", "parametertype":"net.sourceforge.ganttproject.shape.ShapePaint", "parameterclass":529, "classid":529, "classname":"net.sourceforge.ganttproject.shape.ShapePaint", "methodid":4057, "methodname":"net.sourceforge.ganttproject.shape.ShapePaint.-init-(net.sourceforge.ganttproject.shape.ShapePaint,java.awt.Color,java.awt.Color)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n */\r\npublic ShapePaint(ShapePaint pattern, Color foreground, Color background) {\r\n    this(pattern.width, pattern.height, pattern.array, foreground, background);\r\n}"},
 {"id":984, "parametername":"CustomColumn column", "parametertype":"net.sourceforge.ganttproject.task.CustomColumn", "parameterclass":532, "classid":531, "classname":"net.sourceforge.ganttproject.task.CustomColumEvent", "methodid":4068, "methodname":"net.sourceforge.ganttproject.task.CustomColumEvent.-init-(int,net.sourceforge.ganttproject.task.CustomColumn)", "isreturn":0, "sourcecode":"public CustomColumEvent(int type, CustomColumn column) {\r\n    myType = type;\r\n    myColumn = column;\r\n    myColName = column.getName();\r\n    myOldName = myColName;\r\n}"},
 {"id":985, "parametername":"CustomColumn column", "parametertype":"net.sourceforge.ganttproject.task.CustomColumn", "parameterclass":532, "classid":531, "classname":"net.sourceforge.ganttproject.task.CustomColumEvent", "methodid":4069, "methodname":"net.sourceforge.ganttproject.task.CustomColumEvent.-init-(java.lang.String,net.sourceforge.ganttproject.task.CustomColumn)", "isreturn":0, "sourcecode":"CustomColumEvent(String oldName, CustomColumn column) {\r\n    myOldName = oldName;\r\n    myType = CustomColumEvent.EVENT_RENAME;\r\n    myColName = column.getName();\r\n    myColumn = column;\r\n}"},
 {"id":986, "parametername":"CustomColumnsStorage storage", "parametertype":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "parameterclass":535, "classid":534, "classname":"net.sourceforge.ganttproject.task.CustomColumnsManager", "methodid":4089, "methodname":"net.sourceforge.ganttproject.task.CustomColumnsManager.-init-(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"/**\r\n * Creates an instance of CustomColumnsManager for the given treetable.\r\n *\r\n * @param treetable\r\n * \t\t\r\n */\r\npublic CustomColumnsManager(CustomColumnsStorage storage) {\r\n    myListeners = new ArrayList();\r\n    myStorage = storage;\r\n}"},
 {"id":987, "parametername":"CustomColumn customColumn", "parametertype":"net.sourceforge.ganttproject.task.CustomColumn", "parameterclass":532, "classid":534, "classname":"net.sourceforge.ganttproject.task.CustomColumnsManager", "methodid":4091, "methodname":"net.sourceforge.ganttproject.task.CustomColumnsManager.addNewCustomColumn(net.sourceforge.ganttproject.task.CustomColumn)", "isreturn":0, "sourcecode":"/**\r\n * Add a new custom column to the treetable.\r\n */\r\npublic void addNewCustomColumn(CustomColumn customColumn) {\r\n    assert customColumn != null;\r\n    myStorage.addCustomColumn(customColumn);\r\n}"},
 {"id":988, "parametername":"CustomColumsListener listener", "parametertype":"net.sourceforge.ganttproject.task.CustomColumsListener", "parameterclass":537, "classid":534, "classname":"net.sourceforge.ganttproject.task.CustomColumnsManager", "methodid":4090, "methodname":"net.sourceforge.ganttproject.task.CustomColumnsManager.addCustomColumnsListener(net.sourceforge.ganttproject.task.CustomColumsListener)", "isreturn":0, "sourcecode":"public void addCustomColumnsListener(CustomColumsListener listener) {\r\n    myStorage.addCustomColumnsListener(listener);\r\n}"},
 {"id":989, "parametername":"GanttLanguage lang", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage", "parameterclass":461, "classid":535, "classname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "methodid":4099, "methodname":"net.sourceforge.ganttproject.task.CustomColumnsStorage.changeLanguage(net.sourceforge.ganttproject.language.GanttLanguage)", "isreturn":0, "sourcecode":"/**\r\n * Changes the language of the available types.\r\n *\r\n * @param lang\r\n * \t\tNew language.\r\n */\r\npublic static void changeLanguage(GanttLanguage lang) {\r\n    CustomColumnsStorage.language = lang;\r\n    CustomColumnsStorage.initTypes();\r\n}"},
 {"id":990, "parametername":"CustomColumn col", "parametertype":"net.sourceforge.ganttproject.task.CustomColumn", "parameterclass":532, "classid":535, "classname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "methodid":4096, "methodname":"net.sourceforge.ganttproject.task.CustomColumnsStorage.addCustomColumn(net.sourceforge.ganttproject.task.CustomColumn)", "isreturn":0, "sourcecode":"/**\r\n * Add a custom column.\r\n *\r\n * @param col\r\n * \t\tCustomColumn to be added.\r\n * @throws CustomColumnsException\r\n * \t\tA CustomColumnsException of type\r\n * \t\tCustomColumnsException.ALREADY_EXIST could be thrown if the\r\n * \t\tCustomColumn that should be added has a name that already\r\n * \t\texists.\r\n */\r\npublic void addCustomColumn(CustomColumn col) {\r\n    if (getCustomColumnsNames().contains(col.getName())) {\r\n        return;\r\n    }\r\n    String id = col.getId();\r\n    while (id == null) {\r\n        id = (CustomColumnsStorage.ID_PREFIX) + ((CustomColumnsStorage.nextId)++);\r\n        if (existsForID(id))\r\n            id = null;\r\n\r\n    } \r\n    mapIdCustomColum.put(id, col);\r\n    col.setId(id);\r\n    CustomColumEvent event = new CustomColumEvent(CustomColumEvent.EVENT_ADD, col);\r\n    fireCustomColumnsChange(event);\r\n}"},
 {"id":991, "parametername":"CustomColumn column", "parametertype":"net.sourceforge.ganttproject.task.CustomColumn", "parameterclass":532, "classid":535, "classname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "methodid":4114, "methodname":"net.sourceforge.ganttproject.task.CustomColumnsStorage.removeCustomColumn(net.sourceforge.ganttproject.task.CustomColumn)", "isreturn":0, "sourcecode":"/**\r\n * Removes the CustomColumn whose name is given in parameter. If the column\r\n * name does not exist, nothing is done.\r\n *\r\n * @param name\r\n * \t\tName of the column to remove.\r\n */\r\npublic void removeCustomColumn(CustomColumn column) {\r\n    CustomColumEvent event = new CustomColumEvent(CustomColumEvent.EVENT_REMOVE, column);\r\n    fireCustomColumnsChange(event);\r\n    mapIdCustomColum.remove(column.getId());\r\n}"},
 {"id":992, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":535, "classname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "methodid":4112, "methodname":"net.sourceforge.ganttproject.task.CustomColumnsStorage.processNewTask(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n * Add all stored custom column to the given task. All custom column will\r\n * have the default value.\r\n *\r\n * @param task\r\n * \t\tThe task to process.\r\n */\r\npublic void processNewTask(Task task) {\r\n    Iterator it = mapIdCustomColum.values().iterator();\r\n    while (it.hasNext()) {\r\n        CustomColumn cc = ((CustomColumn) (it.next()));\r\n        try {\r\n            task.getCustomValues().setValue(cc.getName(), cc.getDefaultValue());\r\n        } catch (CustomColumnsException e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n        }\r\n    } \r\n}"},
 {"id":993, "parametername":"CustomColumnsStorage source", "parametertype":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "parameterclass":535, "classid":535, "classname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "methodid":4110, "methodname":"net.sourceforge.ganttproject.task.CustomColumnsStorage.importData(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"public void importData(CustomColumnsStorage source) {\r\n    for (Iterator columns = source.getCustomColums().iterator(); columns.hasNext();) {\r\n        CustomColumn nextColumn = ((CustomColumn) (columns.next()));\r\n        if (!(exists(nextColumn.getName()))) {\r\n            addCustomColumn(nextColumn);\r\n        }\r\n    }\r\n}"},
 {"id":994, "parametername":"CustomColumsListener listener", "parametertype":"net.sourceforge.ganttproject.task.CustomColumsListener", "parameterclass":537, "classid":535, "classname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "methodid":4097, "methodname":"net.sourceforge.ganttproject.task.CustomColumnsStorage.addCustomColumnsListener(net.sourceforge.ganttproject.task.CustomColumsListener)", "isreturn":0, "sourcecode":"void addCustomColumnsListener(CustomColumsListener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":995, "parametername":"CustomColumEvent event", "parametertype":"net.sourceforge.ganttproject.task.CustomColumEvent", "parameterclass":531, "classid":535, "classname":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "methodid":4102, "methodname":"net.sourceforge.ganttproject.task.CustomColumnsStorage.fireCustomColumnsChange(net.sourceforge.ganttproject.task.CustomColumEvent)", "isreturn":0, "sourcecode":"private void fireCustomColumnsChange(CustomColumEvent event) {\r\n    Iterator it = myListeners.iterator();\r\n    while (it.hasNext()) {\r\n        CustomColumsListener listener = ((CustomColumsListener) (it.next()));\r\n        listener.customColumsChange(event);\r\n    } \r\n}"},
 {"id":996, "parametername":"CustomColumnsStorage columnStorage", "parametertype":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "parameterclass":535, "classid":536, "classname":"net.sourceforge.ganttproject.task.CustomColumnsValues", "methodid":4118, "methodname":"net.sourceforge.ganttproject.task.CustomColumnsValues.-init-(net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"/**\r\n * Creates an instance of CustomColumnsValues.\r\n */\r\npublic CustomColumnsValues(CustomColumnsStorage columnStorage) {\r\n    myColumnStorage = columnStorage;\r\n}"},
 {"id":997, "parametername":"CustomColumEvent event", "parametertype":"net.sourceforge.ganttproject.task.CustomColumEvent", "parameterclass":531, "classid":537, "classname":"net.sourceforge.ganttproject.task.CustomColumsListener", "methodid":4125, "methodname":"net.sourceforge.ganttproject.task.CustomColumsListener.customColumsChange(net.sourceforge.ganttproject.task.CustomColumEvent)", "isreturn":0, "sourcecode":"public void customColumsChange(CustomColumEvent event);"},
 {"id":998, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":538, "classname":"net.sourceforge.ganttproject.task.MutableResourceAssignmentCollection", "methodid":4126, "methodname":"net.sourceforge.ganttproject.task.MutableResourceAssignmentCollection.addAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"ResourceAssignment addAssignment(ProjectResource resource);"},
 {"id":999, "parametername":"net.sourceforge.ganttproject.task.ResourceAssignment", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":538, "classname":"net.sourceforge.ganttproject.task.MutableResourceAssignmentCollection", "methodid":4126, "methodname":"net.sourceforge.ganttproject.task.MutableResourceAssignmentCollection.addAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":1, "sourcecode":"ResourceAssignment addAssignment(ProjectResource resource);"},
 {"id":1000, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":538, "classname":"net.sourceforge.ganttproject.task.MutableResourceAssignmentCollection", "methodid":4127, "methodname":"net.sourceforge.ganttproject.task.MutableResourceAssignmentCollection.deleteAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"void deleteAssignment(ProjectResource resource);"},
 {"id":1001, "parametername":"GanttCalendar start", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":539, "classname":"net.sourceforge.ganttproject.task.MutableTask", "methodid":4141, "methodname":"net.sourceforge.ganttproject.task.MutableTask.setStart(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"void setStart(GanttCalendar start);"},
 {"id":1002, "parametername":"GanttCalendar end", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":539, "classname":"net.sourceforge.ganttproject.task.MutableTask", "methodid":4133, "methodname":"net.sourceforge.ganttproject.task.MutableTask.setEnd(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"void setEnd(GanttCalendar end);"},
 {"id":1003, "parametername":"TaskLength length", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":539, "classname":"net.sourceforge.ganttproject.task.MutableTask", "methodid":4132, "methodname":"net.sourceforge.ganttproject.task.MutableTask.setDuration(net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"void setDuration(TaskLength length);"},
 {"id":1004, "parametername":"TaskLength shift", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":539, "classname":"net.sourceforge.ganttproject.task.MutableTask", "methodid":4143, "methodname":"net.sourceforge.ganttproject.task.MutableTask.shift(net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"void shift(TaskLength shift);"},
 {"id":1005, "parametername":"ShapePaint shape", "parametertype":"net.sourceforge.ganttproject.shape.ShapePaint", "parameterclass":529, "classid":539, "classname":"net.sourceforge.ganttproject.task.MutableTask", "methodid":4140, "methodname":"net.sourceforge.ganttproject.task.MutableTask.setShape(net.sourceforge.ganttproject.shape.ShapePaint)", "isreturn":0, "sourcecode":"// void setStartFixed(boolean isFixed);\r\n// void setFinishFixed(boolean isFixed);\r\nvoid setShape(ShapePaint shape);"},
 {"id":1006, "parametername":"TaskInfo taskInfo", "parametertype":"net.sourceforge.ganttproject.task.TaskInfo", "parameterclass":561, "classid":539, "classname":"net.sourceforge.ganttproject.task.MutableTask", "methodid":4142, "methodname":"net.sourceforge.ganttproject.task.MutableTask.setTaskInfo(net.sourceforge.ganttproject.task.TaskInfo)", "isreturn":0, "sourcecode":"void setTaskInfo(TaskInfo taskInfo);"},
 {"id":1007, "parametername":"Role role", "parametertype":"net.sourceforge.ganttproject.roles.Role", "parameterclass":512, "classid":540, "classname":"net.sourceforge.ganttproject.task.ResourceAssignment", "methodid":4152, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignment.setRoleForAssignment(net.sourceforge.ganttproject.roles.Role)", "isreturn":0, "sourcecode":"void setRoleForAssignment(Role role);"},
 {"id":1008, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":541, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection", "methodid":4155, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection.getAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"ResourceAssignment getAssignment(ProjectResource resource);"},
 {"id":1009, "parametername":"net.sourceforge.ganttproject.task.ResourceAssignment", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":541, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection", "methodid":4155, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection.getAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":1, "sourcecode":"ResourceAssignment getAssignment(ProjectResource resource);"},
 {"id":1010, "parametername":"TaskImpl task", "parametertype":"net.sourceforge.ganttproject.task.TaskImpl", "parameterclass":560, "classid":546, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "methodid":4158, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.-init-(net.sourceforge.ganttproject.task.TaskImpl,net.sourceforge.ganttproject.resource.ResourceManager)", "isreturn":0, "sourcecode":"public ResourceAssignmentCollectionImpl(TaskImpl task, ResourceManager resourceManager) {\r\n    myTask = task;\r\n    myResourceManager = resourceManager;\r\n}"},
 {"id":1011, "parametername":"ResourceManager resourceManager", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":546, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "methodid":4158, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.-init-(net.sourceforge.ganttproject.task.TaskImpl,net.sourceforge.ganttproject.resource.ResourceManager)", "isreturn":0, "sourcecode":"public ResourceAssignmentCollectionImpl(TaskImpl task, ResourceManager resourceManager) {\r\n    myTask = task;\r\n    myResourceManager = resourceManager;\r\n}"},
 {"id":1012, "parametername":"ResourceAssignmentCollectionImpl collection", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "parameterclass":546, "classid":546, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "methodid":4159, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.-init-(net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl)", "isreturn":0, "sourcecode":"private ResourceAssignmentCollectionImpl(ResourceAssignmentCollectionImpl collection) {\r\n    myTask = collection.myTask;\r\n    ResourceAssignment[] assignments = collection.getAssignments();\r\n    for (int i = 0; i < (assignments.length); i++) {\r\n        ResourceAssignment next = assignments[i];\r\n        ResourceAssignment copy = new ResourceAssignmentCollectionImpl.ResourceAssignmentImpl(next.getResource());\r\n        copy.setLoad(next.getLoad());\r\n        copy.setCoordinator(next.isCoordinator());\r\n        copy.setRoleForAssignment(next.getRoleForAssignment());\r\n        addAssignment(copy);\r\n    }\r\n}"},
 {"id":1013, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":543, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl", "methodid":4181, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl.-init-(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public ResourceAssignmentImpl(ProjectResource resource) {\r\n    myAssignmentToResource = resource.createAssignment(this);\r\n    // resource\r\n    // .setAssignmentCollection(ResourceAssignmentCollectionImpl.this);\r\n}"},
 {"id":1014, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":545, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub", "methodid":4196, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub.-init-(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public ResourceAssignmentStub(ProjectResource resource) {\r\n    myResource = resource;\r\n}"},
 {"id":1015, "parametername":"ResourceAssignment assignment", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":542, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$MutationInfo", "methodid":4177, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$MutationInfo.-init-(net.sourceforge.ganttproject.task.ResourceAssignment,int)", "isreturn":0, "sourcecode":"public MutationInfo(ResourceAssignment assignment, int operation) {\r\n    myAssignment = assignment;\r\n    myOrder = (ResourceAssignmentCollectionImpl.MutationInfo.ourOrder)++;\r\n    myOperation = operation;\r\n    myResource = assignment.getResource();\r\n}"},
 {"id":1016, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":542, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$MutationInfo", "methodid":4178, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$MutationInfo.-init-(net.sourceforge.ganttproject.resource.ProjectResource,int)", "isreturn":0, "sourcecode":"public MutationInfo(ProjectResource resource, int operation) {\r\n    this.myAssignment = null;\r\n    this.myOrder = (ResourceAssignmentCollectionImpl.MutationInfo.ourOrder)++;\r\n    this.myOperation = operation;\r\n    this.myResource = resource;\r\n}"},
 {"id":1017, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":546, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "methodid":4171, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.getAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public ResourceAssignment getAssignment(ProjectResource resource) {\r\n    return ((ResourceAssignment) (myAssignments.get(resource)));\r\n}"},
 {"id":1018, "parametername":"net.sourceforge.ganttproject.task.ResourceAssignment", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":546, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "methodid":4171, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.getAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":1, "sourcecode":"public ResourceAssignment getAssignment(ProjectResource resource) {\r\n    return ((ResourceAssignment) (myAssignments.get(resource)));\r\n}"},
 {"id":1019, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":546, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "methodid":4164, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.addAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public ResourceAssignment addAssignment(ProjectResource resource) {\r\n    return auxAddAssignment(resource);\r\n}"},
 {"id":1020, "parametername":"net.sourceforge.ganttproject.task.ResourceAssignment", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":546, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "methodid":4164, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.addAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":1, "sourcecode":"public ResourceAssignment addAssignment(ProjectResource resource) {\r\n    return auxAddAssignment(resource);\r\n}"},
 {"id":1021, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":546, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "methodid":4170, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.deleteAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public void deleteAssignment(ProjectResource resource) {\r\n    myAssignments.remove(resource);\r\n}"},
 {"id":1022, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":546, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "methodid":4166, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.auxAddAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"private ResourceAssignment auxAddAssignment(ProjectResource resource) {\r\n    final ResourceAssignment result = new ResourceAssignmentCollectionImpl.ResourceAssignmentImpl(resource);\r\n    addAssignment(result);\r\n    return result;\r\n}"},
 {"id":1023, "parametername":"net.sourceforge.ganttproject.task.ResourceAssignment", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":546, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "methodid":4166, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.auxAddAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":1, "sourcecode":"private ResourceAssignment auxAddAssignment(ProjectResource resource) {\r\n    final ResourceAssignment result = new ResourceAssignmentCollectionImpl.ResourceAssignmentImpl(resource);\r\n    addAssignment(result);\r\n    return result;\r\n}"},
 {"id":1024, "parametername":"ResourceAssignment assignment", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":546, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "methodid":4165, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.addAssignment(net.sourceforge.ganttproject.task.ResourceAssignment)", "isreturn":0, "sourcecode":"private void addAssignment(ResourceAssignment assignment) {\r\n    myAssignments.put(assignment.getResource(), assignment);\r\n}"},
 {"id":1025, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":546, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "methodid":4176, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.removeAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"/**\r\n * Removes the assignments related to the given resource.\r\n *\r\n * @param resource\r\n * \t\tAssigned resource\r\n */\r\npublic void removeAssignment(ProjectResource resource) {\r\n    new ResourceAssignmentCollectionImpl.ResourceAssignmentImpl(resource).delete();\r\n}"},
 {"id":1026, "parametername":"Role role", "parametertype":"net.sourceforge.ganttproject.roles.Role", "parameterclass":512, "classid":543, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl", "methodid":4190, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentImpl.setRoleForAssignment(net.sourceforge.ganttproject.roles.Role)", "isreturn":0, "sourcecode":"public void setRoleForAssignment(Role role) {\r\n    myAssignmentToResource.setRoleForAssignment(role);\r\n}"},
 {"id":1027, "parametername":"Role role", "parametertype":"net.sourceforge.ganttproject.roles.Role", "parameterclass":512, "classid":545, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub", "methodid":4206, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentStub.setRoleForAssignment(net.sourceforge.ganttproject.roles.Role)", "isreturn":0, "sourcecode":"public void setRoleForAssignment(Role role) {\r\n    myRoleForAssignment = role;\r\n}"},
 {"id":1028, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":544, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentMutatorImpl", "methodid":4193, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentMutatorImpl.addAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public ResourceAssignment addAssignment(ProjectResource resource) {\r\n    ResourceAssignment result = new ResourceAssignmentCollectionImpl.ResourceAssignmentStub(resource);\r\n    myQueue.put(resource, new ResourceAssignmentCollectionImpl.MutationInfo(result, ResourceAssignmentCollectionImpl.MutationInfo.ADD));\r\n    return result;\r\n}"},
 {"id":1029, "parametername":"net.sourceforge.ganttproject.task.ResourceAssignment", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignment", "parameterclass":540, "classid":544, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentMutatorImpl", "methodid":4193, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentMutatorImpl.addAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":1, "sourcecode":"public ResourceAssignment addAssignment(ProjectResource resource) {\r\n    ResourceAssignment result = new ResourceAssignmentCollectionImpl.ResourceAssignmentStub(resource);\r\n    myQueue.put(resource, new ResourceAssignmentCollectionImpl.MutationInfo(result, ResourceAssignmentCollectionImpl.MutationInfo.ADD));\r\n    return result;\r\n}"},
 {"id":1030, "parametername":"ProjectResource resource", "parametertype":"net.sourceforge.ganttproject.resource.ProjectResource", "parameterclass":505, "classid":544, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentMutatorImpl", "methodid":4195, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl$ResourceAssignmentMutatorImpl.deleteAssignment(net.sourceforge.ganttproject.resource.ProjectResource)", "isreturn":0, "sourcecode":"public void deleteAssignment(ProjectResource resource) {\r\n    ResourceAssignmentCollectionImpl.MutationInfo info = ((ResourceAssignmentCollectionImpl.MutationInfo) (myQueue.get(resource)));\r\n    if (info == null) {\r\n        myQueue.put(resource, new ResourceAssignmentCollectionImpl.MutationInfo(resource, ResourceAssignmentCollectionImpl.MutationInfo.DELETE));\r\n    } else\r\n        if ((info.myOperation) == (ResourceAssignmentCollectionImpl.MutationInfo.ADD)) {\r\n            myQueue.remove(resource);\r\n        }\r\n\r\n}"},
 {"id":1031, "parametername":"ResourceAssignmentCollection assignmentCollection", "parametertype":"net.sourceforge.ganttproject.task.ResourceAssignmentCollection", "parameterclass":541, "classid":546, "classname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl", "methodid":4175, "methodname":"net.sourceforge.ganttproject.task.ResourceAssignmentCollectionImpl.importData(net.sourceforge.ganttproject.task.ResourceAssignmentCollection)", "isreturn":0, "sourcecode":"public void importData(ResourceAssignmentCollection assignmentCollection) {\r\n    if (myTask.isUnplugged()) {\r\n        ResourceAssignment[] assignments = assignmentCollection.getAssignments();\r\n        for (int i = 0; i < (assignments.length); i++) {\r\n            ResourceAssignment next = assignments[i];\r\n            addAssignment(next);\r\n        }\r\n    } else {\r\n        ResourceAssignment[] assignments = assignmentCollection.getAssignments();\r\n        for (int i = 0; i < (assignments.length); i++) {\r\n            ResourceAssignment next = assignments[i];\r\n            ProjectResource nextResource = next.getResource();\r\n            ProjectResource nextImportedResource = myResourceManager.getById(nextResource.getId());\r\n            if (nextImportedResource != null) {\r\n                ResourceAssignment copy = new ResourceAssignmentCollectionImpl.ResourceAssignmentImpl(nextImportedResource);\r\n                copy.setLoad(next.getLoad());\r\n                copy.setCoordinator(next.isCoordinator());\r\n                copy.setRoleForAssignment(next.getRoleForAssignment());\r\n                addAssignment(copy);\r\n            }\r\n        }\r\n    }\r\n}"},
 {"id":1032, "parametername":"TaskLength duration", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":548, "classname":"net.sourceforge.ganttproject.task.Task", "methodid":4246, "methodname":"net.sourceforge.ganttproject.task.Task.translateDuration(net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"TaskLength translateDuration(TaskLength duration);"},
 {"id":1033, "parametername":"net.sourceforge.ganttproject.task.TaskLength", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":548, "classname":"net.sourceforge.ganttproject.task.Task", "methodid":4246, "methodname":"net.sourceforge.ganttproject.task.Task.translateDuration(net.sourceforge.ganttproject.task.TaskLength)", "isreturn":1, "sourcecode":"TaskLength translateDuration(TaskLength duration);"},
 {"id":1034, "parametername":"Task targetSupertask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":548, "classname":"net.sourceforge.ganttproject.task.Task", "methodid":4243, "methodname":"net.sourceforge.ganttproject.task.Task.move(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"void move(Task targetSupertask);"},
 {"id":1035, "parametername":"GanttCalendar thirdDate", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":548, "classname":"net.sourceforge.ganttproject.task.Task", "methodid":4244, "methodname":"net.sourceforge.ganttproject.task.Task.setThirdDate(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"void setThirdDate(GanttCalendar thirdDate);"},
 {"id":1036, "parametername":"TaskImpl task", "parametertype":"net.sourceforge.ganttproject.task.TaskImpl", "parameterclass":560, "classid":550, "classname":"net.sourceforge.ganttproject.task.TaskActivityImpl", "methodid":4255, "methodname":"net.sourceforge.ganttproject.task.TaskActivityImpl.-init-(net.sourceforge.ganttproject.task.TaskImpl,java.util.Date,java.util.Date)", "isreturn":0, "sourcecode":"TaskActivityImpl(TaskImpl task, Date startDate, Date endDate) {\r\n    this(task, startDate, endDate, 1.0F);\r\n}"},
 {"id":1037, "parametername":"TaskImpl task", "parametertype":"net.sourceforge.ganttproject.task.TaskImpl", "parameterclass":560, "classid":550, "classname":"net.sourceforge.ganttproject.task.TaskActivityImpl", "methodid":4256, "methodname":"net.sourceforge.ganttproject.task.TaskActivityImpl.-init-(net.sourceforge.ganttproject.task.TaskImpl,java.util.Date,java.util.Date,float)", "isreturn":0, "sourcecode":"TaskActivityImpl(TaskImpl task, Date startDate, Date endDate, float intensity) {\r\n    myStartDate = startDate;\r\n    myEndDate = endDate;\r\n    myDuration = task.getManager().createLength(task.getDuration().getTimeUnit(), startDate, endDate);\r\n    myIntensity = intensity;\r\n    myTask = task;\r\n}"},
 {"id":1038, "parametername":"Task container", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":552, "classname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "methodid":4271, "methodname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.getNestedTasks(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"Task[] getNestedTasks(Task container);"},
 {"id":1039, "parametername":"Task container", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":552, "classname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "methodid":4273, "methodname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.hasNestedTasks(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"boolean hasNestedTasks(Task container);"},
 {"id":1040, "parametername":"Task nestedTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":552, "classname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "methodid":4269, "methodname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.getContainer(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"Task getContainer(Task nestedTask);"},
 {"id":1041, "parametername":"net.sourceforge.ganttproject.task.Task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":552, "classname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "methodid":4269, "methodname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.getContainer(net.sourceforge.ganttproject.task.Task)", "isreturn":1, "sourcecode":"Task getContainer(Task nestedTask);"},
 {"id":1042, "parametername":"Task whatMove", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":552, "classname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "methodid":4274, "methodname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.move(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"void move(Task whatMove, Task whereMove);"},
 {"id":1043, "parametername":"Task whereMove", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":552, "classname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "methodid":4274, "methodname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.move(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"void move(Task whatMove, Task whereMove);"},
 {"id":1044, "parametername":"Task dependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":552, "classname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "methodid":4266, "methodname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.areUnrelated(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"boolean areUnrelated(Task dependant, Task dependee);"},
 {"id":1045, "parametername":"Task dependee", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":552, "classname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "methodid":4266, "methodname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.areUnrelated(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"boolean areUnrelated(Task dependant, Task dependee);"},
 {"id":1046, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":552, "classname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "methodid":4270, "methodname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.getDepth(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"int getDepth(Task task);"},
 {"id":1047, "parametername":"Task next", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":552, "classname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "methodid":4267, "methodname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.compareDocumentOrder(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"int compareDocumentOrder(Task next, Task dependeeTask);"},
 {"id":1048, "parametername":"Task dependeeTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":552, "classname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "methodid":4267, "methodname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.compareDocumentOrder(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"int compareDocumentOrder(Task next, Task dependeeTask);"},
 {"id":1049, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":552, "classname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "methodid":4268, "methodname":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade.contains(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"boolean contains(Task task);"},
 {"id":1050, "parametername":"TaskManagerImpl taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManagerImpl", "parameterclass":570, "classid":553, "classname":"net.sourceforge.ganttproject.task.TaskDocumentOrderComparator", "methodid":4276, "methodname":"net.sourceforge.ganttproject.task.TaskDocumentOrderComparator.-init-(net.sourceforge.ganttproject.task.TaskManagerImpl)", "isreturn":0, "sourcecode":"TaskDocumentOrderComparator(TaskManagerImpl taskManager) {\r\n    myManager = taskManager;\r\n}"},
 {"id":1051, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":560, "classname":"net.sourceforge.ganttproject.task.TaskImpl", "methodid":4278, "methodname":"net.sourceforge.ganttproject.task.TaskImpl.-init-(net.sourceforge.ganttproject.task.TaskManager,int)", "isreturn":0, "sourcecode":"protected TaskImpl(TaskManager taskManager, int taskID) {\r\n    myManager = ((TaskManagerImpl) (taskManager));\r\n    if (taskID == (-1)) {\r\n        myID = myManager.getMaxID();\r\n        myManager.increaseMaxID();\r\n    } else {\r\n        if ((myManager.getTask(taskID)) != null) {\r\n            throw new IllegalArgumentException(((\"There is a task with ID=\" + taskID) + \" already\"));\r\n        }\r\n        myID = taskID;\r\n    }\r\n    myAssignments = new ResourceAssignmentCollectionImpl(this, myManager.getConfig().getResourceManager());\r\n    myDependencySlice = new TaskDependencySliceImpl(this, myManager.getDependencyCollection());\r\n    myDependencySliceAsDependant = new TaskDependencySliceAsDependant(this, myManager.getDependencyCollection());\r\n    myDependencySliceAsDependee = new TaskDependencySliceAsDependee(this, myManager.getDependencyCollection());\r\n    myPriority = 1;\r\n    myTaskHierarchyItem = myManager.getHierarchyManager().createItem(this);\r\n    myNotes = \"\";\r\n    bExpand = true;\r\n    myColor = null;\r\n    customValues = new CustomColumnsValues(myManager.getCustomColumnStorage());\r\n}"},
 {"id":1052, "parametername":"TaskImpl copy", "parametertype":"net.sourceforge.ganttproject.task.TaskImpl", "parameterclass":560, "classid":560, "classname":"net.sourceforge.ganttproject.task.TaskImpl", "methodid":4279, "methodname":"net.sourceforge.ganttproject.task.TaskImpl.-init-(net.sourceforge.ganttproject.task.TaskImpl,boolean)", "isreturn":0, "sourcecode":"protected TaskImpl(TaskImpl copy, boolean isUnplugged) {\r\n    myManager = copy.myManager;\r\n    if (!isUnplugged) {\r\n        myTaskHierarchyItem = myManager.getHierarchyManager().createItem(this);\r\n    } else {\r\n        myTaskHierarchyItem = null;\r\n    }\r\n    myAssignments = new ResourceAssignmentCollectionImpl(this, myManager.getConfig().getResourceManager());\r\n    myAssignments.importData(copy.getAssignmentCollection());\r\n    myID = copy.myID;\r\n    myName = copy.myName;\r\n    myWebLink = copy.myWebLink;\r\n    isMilestone = copy.isMilestone;\r\n    isProjectTask = copy.isProjectTask;\r\n    myPriority = copy.myPriority;\r\n    myStart = copy.myStart;\r\n    myEnd = copy.myEnd;\r\n    myThird = copy.myThird;\r\n    myThirdDateConstraint = copy.myThirdDateConstraint;\r\n    myCompletionPercentage = copy.myCompletionPercentage;\r\n    myLength = copy.myLength;\r\n    myShape = copy.myShape;\r\n    myColor = copy.myColor;\r\n    myNotes = copy.myNotes;\r\n    bExpand = copy.bExpand;\r\n    // \r\n    myDependencySlice = new TaskDependencySliceImpl(this, myManager.getDependencyCollection());\r\n    myDependencySliceAsDependant = new TaskDependencySliceAsDependant(this, myManager.getDependencyCollection());\r\n    myDependencySliceAsDependee = new TaskDependencySliceAsDependee(this, myManager.getDependencyCollection());\r\n    customValues = ((CustomColumnsValues) (copy.getCustomValues().clone()));\r\n    recalculateActivities();\r\n}"},
 {"id":1053, "parametername":"Task targetSupertask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":560, "classname":"net.sourceforge.ganttproject.task.TaskImpl", "methodid":4324, "methodname":"net.sourceforge.ganttproject.task.TaskImpl.move(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public void move(Task targetSupertask) {\r\n    TaskImpl supertaskImpl = ((TaskImpl) (targetSupertask));\r\n    TaskHierarchyItem targetItem = supertaskImpl.myTaskHierarchyItem;\r\n    myTaskHierarchyItem.delete();\r\n    targetItem.addNestedItem(myTaskHierarchyItem);\r\n    myManager.onTaskMoved(this);\r\n}"},
 {"id":1054, "parametername":"final GanttCalendar start", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":557, "classname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "methodid":4386, "methodname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setStart(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public void setStart(final GanttCalendar start) {\r\n    assert start != null;\r\n    GanttCalendar currentStart = getStart();\r\n    if ((currentStart != null) && (start.equals(currentStart))) {\r\n        return;\r\n    }\r\n    if ((myStartChange) == null) {\r\n        myStartChange = new TaskImpl.FieldChange();\r\n        myStartChange.myEventSender = myPropertiesEventSender;\r\n    }\r\n    myStartChange.setOldValue(this.myStart);\r\n    myStartChange.setValue(start);\r\n    myActivities = null;\r\n}"},
 {"id":1055, "parametername":"final GanttCalendar end", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":557, "classname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "methodid":4377, "methodname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setEnd(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public void setEnd(final GanttCalendar end) {\r\n    if ((myEndChange) == null) {\r\n        myEndChange = new TaskImpl.FieldChange();\r\n        myEndChange.myEventSender = myPropertiesEventSender;\r\n    }\r\n    myEndChange.setOldValue(this.myEnd);\r\n    myEndChange.setValue(end);\r\n    myActivities = null;\r\n}"},
 {"id":1056, "parametername":"final GanttCalendar third", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":557, "classname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "methodid":4388, "methodname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setThird(net.sourceforge.ganttproject.GanttCalendar,int)", "isreturn":0, "sourcecode":"public void setThird(final GanttCalendar third, final int thirdDateConstraint) {\r\n    myCommands.add(new Runnable() {\r\n        public void run() {\r\n            TaskImpl.this.setThirdDateConstraint(thirdDateConstraint);\r\n        }\r\n    });\r\n    if ((myThirdChange) == null) {\r\n        myThirdChange = new TaskImpl.FieldChange();\r\n        myThirdChange.myEventSender = myPropertiesEventSender;\r\n    }\r\n    myThirdChange.setValue(third);\r\n    myActivities = null;\r\n}"},
 {"id":1057, "parametername":"final TaskLength length", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":557, "classname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "methodid":4376, "methodname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setDuration(net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"public void setDuration(final TaskLength length) {\r\n    // If duration of task was set to 0 or less do not change it\r\n    if ((length.getLength()) <= 0) {\r\n        return;\r\n    }\r\n    if ((myDurationChange) == null) {\r\n        myDurationChange = new TaskImpl.DurationChange();\r\n        myDurationChange.myEventSender = myPropertiesEventSender;\r\n        myDurationChange.setValue(length);\r\n    } else {\r\n        TaskLength currentLength = ((TaskLength) (myDurationChange.myFieldValue));\r\n        if (((currentLength.getLength()) - (length.getLength())) == 0) {\r\n            return;\r\n        }\r\n    }\r\n    TaskLength prevLength = ((TaskLength) (myDurationChange.myFieldValue));\r\n    // System.err.println(\"new duration=\"+length+\"\r\n    // previous=\"+prevLength);\r\n    // Date prevEnd =\r\n    // myDurationChange.getCachedDate((int)prevLength.getLength());\r\n    Date prevEnd = null;\r\n    // System.err.println(\"previously cached shift=\"+prevEnd);\r\n    myDurationChange.setValue(length);\r\n    GanttCalendar newEnd;\r\n    Date shifted;\r\n    if (prevEnd == null) {\r\n        // System.err.println(\"no prev, length=\"+length.getLength());\r\n        shifted = this.shiftDate(getStart().getTime(), length);\r\n    } else {\r\n        // System.err.println(\"yes prev,\r\n        // length=\"+(length.getLength()-prevLength.getLength()));\r\n        shifted = this.shiftDate(prevEnd, getManager().createLength(length.getTimeUnit(), ((length.getLength()) - (prevLength.getLength()))));\r\n    }\r\n    // System.err.println(\"caching shift=\"+shifted+\" for\r\n    // duration=\"+length);\r\n    // myDurationChange.cacheDate(shifted, (int)length.getLength());\r\n    newEnd = new GanttCalendar(shifted);\r\n    setEnd(newEnd);\r\n    myActivities = null;\r\n}"},
 {"id":1058, "parametername":"final ShapePaint shape", "parametertype":"net.sourceforge.ganttproject.shape.ShapePaint", "parameterclass":529, "classid":557, "classname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "methodid":4385, "methodname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setShape(net.sourceforge.ganttproject.shape.ShapePaint)", "isreturn":0, "sourcecode":"public void setShape(final ShapePaint shape) {\r\n    myCommands.add(new Runnable() {\r\n        public void run() {\r\n            TaskImpl.this.setShape(shape);\r\n        }\r\n    });\r\n}"},
 {"id":1059, "parametername":"TaskLength shift", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":557, "classname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "methodid":4390, "methodname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.shift(net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"public void shift(TaskLength shift) {\r\n    this.shift(shift);\r\n}"},
 {"id":1060, "parametername":"Task result", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":557, "classname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "methodid":4363, "methodname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.cachePrecomputedShift(net.sourceforge.ganttproject.task.Task,float)", "isreturn":0, "sourcecode":"private void cachePrecomputedShift(Task result, float unitCount) {\r\n}"},
 {"id":1061, "parametername":"TaskInfo taskInfo", "parametertype":"net.sourceforge.ganttproject.task.TaskInfo", "parameterclass":561, "classid":557, "classname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl", "methodid":4387, "methodname":"net.sourceforge.ganttproject.task.TaskImpl$MutatorImpl.setTaskInfo(net.sourceforge.ganttproject.task.TaskInfo)", "isreturn":0, "sourcecode":"public void setTaskInfo(TaskInfo taskInfo) {\r\n    myTaskInfo = taskInfo;\r\n}"},
 {"id":1062, "parametername":"GanttCalendar start", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":560, "classname":"net.sourceforge.ganttproject.task.TaskImpl", "methodid":4339, "methodname":"net.sourceforge.ganttproject.task.TaskImpl.setStart(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public void setStart(GanttCalendar start) {\r\n    Date closestWorkingStart = myManager.findClosestWorkingTime(start.getTime());\r\n    start.setTime(closestWorkingStart);\r\n    GanttCalendar oldStart = ((myStart) == null) ? null : myStart.Clone();\r\n    myStart = start;\r\n    GanttCalendar oldEnd = getEnd();\r\n    // if (myID>=0) {\r\n    recalculateActivities();\r\n    // }\r\n}"},
 {"id":1063, "parametername":"GanttCalendar end", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":560, "classname":"net.sourceforge.ganttproject.task.TaskImpl", "methodid":4331, "methodname":"net.sourceforge.ganttproject.task.TaskImpl.setEnd(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public void setEnd(GanttCalendar end) {\r\n    GanttCalendar oldFinish = ((myEnd) == null) ? null : myEnd.Clone();\r\n    myEnd = end;\r\n    recalculateActivities();\r\n    // System.err.println(\"we have \"+myActivities.size()+\" activities\");\r\n    // if (areEventsEnabled()) {\r\n    // myManager.fireTaskScheduleChanged(this, myStart.Clone(), oldFinish);\r\n    // }\r\n}"},
 {"id":1064, "parametername":"GanttCalendar third", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":560, "classname":"net.sourceforge.ganttproject.task.TaskImpl", "methodid":4342, "methodname":"net.sourceforge.ganttproject.task.TaskImpl.setThirdDate(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public void setThirdDate(GanttCalendar third) {\r\n    GanttCalendar oldThird = ((myThird) == null) ? null : myThird.Clone();\r\n    myThird = third;\r\n    // recalculateActivities();\r\n    // if (areEventsEnabled()) {\r\n    // myManager.fireTaskScheduleChanged(this, myThird.Clone(), oldThird);\r\n    // }\r\n}"},
 {"id":1065, "parametername":"TaskLength shift", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":560, "classname":"net.sourceforge.ganttproject.task.TaskImpl", "methodid":4347, "methodname":"net.sourceforge.ganttproject.task.TaskImpl.shift(net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"public void shift(TaskLength shift) {\r\n    float unitCount = shift.getLength(myLength.getTimeUnit());\r\n    if (unitCount != 0.0F) {\r\n        Task resultTask = shift(unitCount);\r\n        GanttCalendar oldStart = myStart;\r\n        GanttCalendar oldEnd = myEnd;\r\n        myStart = resultTask.getStart();\r\n        myLength = resultTask.getDuration();\r\n        myEnd = resultTask.getEnd();\r\n        if (areEventsEnabled()) {\r\n            myManager.fireTaskScheduleChanged(this, oldStart, oldEnd);\r\n        }\r\n        recalculateActivities();\r\n    }\r\n}"},
 {"id":1066, "parametername":"TaskLength length", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":560, "classname":"net.sourceforge.ganttproject.task.TaskImpl", "methodid":4330, "methodname":"net.sourceforge.ganttproject.task.TaskImpl.setDuration(net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"public void setDuration(TaskLength length) {\r\n    assert (length.getLength()) > 0;\r\n    // GanttCalendar oldFinish = myEnd == null ? null : myEnd.Clone();\r\n    myLength = length;\r\n    myEnd = null;\r\n    // Date newEndDate = shiftDate(myStart.getTime(),\r\n    // length.getTimeUnit(), length.getLength());\r\n    // myEnd = new GanttCalendar(newEndDate);\r\n    // myEnd = myStart.newAdd((int) length.getLength());\r\n    recalculateActivities();\r\n    // if (areEventsEnabled()) {\r\n    // myManager.fireTaskScheduleChanged(this, myStart.Clone(),\r\n    // oldFinish);\r\n    // }\r\n}"},
 {"id":1067, "parametername":"TaskLength duration", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":560, "classname":"net.sourceforge.ganttproject.task.TaskImpl", "methodid":4348, "methodname":"net.sourceforge.ganttproject.task.TaskImpl.shiftDate(java.util.Date,net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"private Date shiftDate(Date input, TaskLength duration) {\r\n    return myManager.getConfig().getCalendar().shiftDate(input, duration);\r\n}"},
 {"id":1068, "parametername":"TaskLength duration", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":560, "classname":"net.sourceforge.ganttproject.task.TaskImpl", "methodid":4350, "methodname":"net.sourceforge.ganttproject.task.TaskImpl.translateDuration(net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"public TaskLength translateDuration(TaskLength duration) {\r\n    return myManager.createLength(myLength.getTimeUnit(), translateDurationValue(duration));\r\n}"},
 {"id":1069, "parametername":"net.sourceforge.ganttproject.task.TaskLength", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":560, "classname":"net.sourceforge.ganttproject.task.TaskImpl", "methodid":4350, "methodname":"net.sourceforge.ganttproject.task.TaskImpl.translateDuration(net.sourceforge.ganttproject.task.TaskLength)", "isreturn":1, "sourcecode":"public TaskLength translateDuration(TaskLength duration) {\r\n    return myManager.createLength(myLength.getTimeUnit(), translateDurationValue(duration));\r\n}"},
 {"id":1070, "parametername":"TaskLength duration", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":560, "classname":"net.sourceforge.ganttproject.task.TaskImpl", "methodid":4351, "methodname":"net.sourceforge.ganttproject.task.TaskImpl.translateDurationValue(net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"private float translateDurationValue(TaskLength duration) {\r\n    if (myLength.getTimeUnit().equals(duration.getTimeUnit())) {\r\n        return duration.getValue();\r\n    }\r\n    if (myLength.getTimeUnit().isConstructedFrom(duration.getTimeUnit())) {\r\n        return (duration.getValue()) / (myLength.getTimeUnit().getAtomCount(duration.getTimeUnit()));\r\n    }\r\n    if (duration.getTimeUnit().isConstructedFrom(myLength.getTimeUnit())) {\r\n        return (duration.getValue()) * (duration.getTimeUnit().getAtomCount(myLength.getTimeUnit()));\r\n    }\r\n    throw new RuntimeException((((\"Cant transalte duration=\" + duration) + \" into units=\") + (myLength.getTimeUnit())));\r\n}"},
 {"id":1071, "parametername":"ShapePaint shape", "parametertype":"net.sourceforge.ganttproject.shape.ShapePaint", "parameterclass":529, "classid":560, "classname":"net.sourceforge.ganttproject.task.TaskImpl", "methodid":4338, "methodname":"net.sourceforge.ganttproject.task.TaskImpl.setShape(net.sourceforge.ganttproject.shape.ShapePaint)", "isreturn":0, "sourcecode":"// public void setStartFixed(boolean isFixed) {\r\n// isStartFixed = isFixed;\r\n// }\r\n// public void setFinishFixed(boolean isFixed) {\r\n// isFinishFixed = isFixed;\r\n// }\r\npublic void setShape(ShapePaint shape) {\r\n    myShape = shape;\r\n}"},
 {"id":1072, "parametername":"TaskInfo taskInfo", "parametertype":"net.sourceforge.ganttproject.task.TaskInfo", "parameterclass":561, "classid":560, "classname":"net.sourceforge.ganttproject.task.TaskImpl", "methodid":4341, "methodname":"net.sourceforge.ganttproject.task.TaskImpl.setTaskInfo(net.sourceforge.ganttproject.task.TaskInfo)", "isreturn":0, "sourcecode":"public void setTaskInfo(TaskInfo taskInfo) {\r\n    myTaskInfo = taskInfo;\r\n}"},
 {"id":1073, "parametername":"TimeUnit unit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":562, "classname":"net.sourceforge.ganttproject.task.TaskLength", "methodid":4398, "methodname":"net.sourceforge.ganttproject.task.TaskLength.getLength(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"float getLength(TimeUnit unit);"},
 {"id":1074, "parametername":"TimeUnit unit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":563, "classname":"net.sourceforge.ganttproject.task.TaskLengthImpl", "methodid":4401, "methodname":"net.sourceforge.ganttproject.task.TaskLengthImpl.-init-(net.sourceforge.ganttproject.time.TimeUnit,long)", "isreturn":0, "sourcecode":"public TaskLengthImpl(TimeUnit unit, long count) {\r\n    myUnit = unit;\r\n    myCount = count;\r\n}"},
 {"id":1075, "parametername":"TimeUnit unit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":563, "classname":"net.sourceforge.ganttproject.task.TaskLengthImpl", "methodid":4402, "methodname":"net.sourceforge.ganttproject.task.TaskLengthImpl.-init-(net.sourceforge.ganttproject.time.TimeUnit,float)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param unit\r\n * \t\t\r\n * @param length\r\n * \t\t\r\n */\r\npublic TaskLengthImpl(TimeUnit unit, float length) {\r\n    myUnit = unit;\r\n    myCount = length;\r\n}"},
 {"id":1076, "parametername":"TimeUnit unit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":563, "classname":"net.sourceforge.ganttproject.task.TaskLengthImpl", "methodid":4407, "methodname":"net.sourceforge.ganttproject.task.TaskLengthImpl.setLength(net.sourceforge.ganttproject.time.TimeUnit,long)", "isreturn":0, "sourcecode":"public void setLength(TimeUnit unit, long length) {\r\n    if (!(unit.equals(myUnit))) {\r\n        throw new IllegalArgumentException((((\"Cant convert unit=\" + unit) + \" to my unit=\") + (myUnit)));\r\n    }\r\n    myCount = length;\r\n}"},
 {"id":1077, "parametername":"TimeUnit unit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":563, "classname":"net.sourceforge.ganttproject.task.TaskLengthImpl", "methodid":4404, "methodname":"net.sourceforge.ganttproject.task.TaskLengthImpl.getLength(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public float getLength(TimeUnit unit) {\r\n    if (myUnit.isConstructedFrom(unit)) {\r\n        return ((float) (myCount)) * (myUnit.getAtomCount(unit));\r\n    } else\r\n        if (unit.isConstructedFrom(myUnit)) {\r\n            return ((float) (myCount)) / (unit.getAtomCount(myUnit));\r\n        } else\r\n            if (!(unit.equals(myUnit))) {\r\n                throw new IllegalArgumentException((((\"Cant convert unit=\" + unit) + \" to my unit=\") + (myUnit)));\r\n            }\r\n\r\n\r\n    return myCount;\r\n}"},
 {"id":1078, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":565, "classname":"net.sourceforge.ganttproject.task.TaskManager", "methodid":4435, "methodname":"net.sourceforge.ganttproject.task.TaskManager.registerTask(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public void registerTask(Task task);"},
 {"id":1079, "parametername":"TimeUnit unit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":565, "classname":"net.sourceforge.ganttproject.task.TaskManager", "methodid":4414, "methodname":"net.sourceforge.ganttproject.task.TaskManager.createLength(net.sourceforge.ganttproject.time.TimeUnit,float)", "isreturn":0, "sourcecode":"TaskLength createLength(TimeUnit unit, float length);"},
 {"id":1080, "parametername":"net.sourceforge.ganttproject.task.TaskLength", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":565, "classname":"net.sourceforge.ganttproject.task.TaskManager", "methodid":4414, "methodname":"net.sourceforge.ganttproject.task.TaskManager.createLength(net.sourceforge.ganttproject.time.TimeUnit,float)", "isreturn":1, "sourcecode":"TaskLength createLength(TimeUnit unit, float length);"},
 {"id":1081, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":565, "classname":"net.sourceforge.ganttproject.task.TaskManager", "methodid":4415, "methodname":"net.sourceforge.ganttproject.task.TaskManager.createLength(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,java.util.Date)", "isreturn":0, "sourcecode":"public TaskLength createLength(TimeUnit timeUnit, Date startDate, Date endDate);"},
 {"id":1082, "parametername":"net.sourceforge.ganttproject.task.TaskLength", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":565, "classname":"net.sourceforge.ganttproject.task.TaskManager", "methodid":4415, "methodname":"net.sourceforge.ganttproject.task.TaskManager.createLength(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,java.util.Date)", "isreturn":1, "sourcecode":"public TaskLength createLength(TimeUnit timeUnit, Date startDate, Date endDate);"},
 {"id":1083, "parametername":"TaskListener listener", "parametertype":"net.sourceforge.ganttproject.task.event.TaskListener", "parameterclass":621, "classid":565, "classname":"net.sourceforge.ganttproject.task.TaskManager", "methodid":4410, "methodname":"net.sourceforge.ganttproject.task.TaskManager.addTaskListener(net.sourceforge.ganttproject.task.event.TaskListener)", "isreturn":0, "sourcecode":"void addTaskListener(TaskListener listener);"},
 {"id":1084, "parametername":"TaskContainmentHierarchyFacade.Factory containmentFacadeFactory", "parametertype":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory", "parameterclass":551, "classid":564, "classname":"net.sourceforge.ganttproject.task.TaskManager$Access", "methodid":4437, "methodname":"net.sourceforge.ganttproject.task.TaskManager$Access.newInstance(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.TaskManagerConfig)", "isreturn":0, "sourcecode":"public static TaskManager newInstance(TaskContainmentHierarchyFacade.Factory containmentFacadeFactory, TaskManagerConfig config) {\r\n    return new TaskManagerImpl(containmentFacadeFactory, config, null);\r\n}"},
 {"id":1085, "parametername":"net.sourceforge.ganttproject.task.TaskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":564, "classname":"net.sourceforge.ganttproject.task.TaskManager$Access", "methodid":4437, "methodname":"net.sourceforge.ganttproject.task.TaskManager$Access.newInstance(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.TaskManagerConfig)", "isreturn":1, "sourcecode":"public static TaskManager newInstance(TaskContainmentHierarchyFacade.Factory containmentFacadeFactory, TaskManagerConfig config) {\r\n    return new TaskManagerImpl(containmentFacadeFactory, config, null);\r\n}"},
 {"id":1086, "parametername":"TaskManagerConfig config", "parametertype":"net.sourceforge.ganttproject.task.TaskManagerConfig", "parameterclass":566, "classid":564, "classname":"net.sourceforge.ganttproject.task.TaskManager$Access", "methodid":4437, "methodname":"net.sourceforge.ganttproject.task.TaskManager$Access.newInstance(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.TaskManagerConfig)", "isreturn":0, "sourcecode":"public static TaskManager newInstance(TaskContainmentHierarchyFacade.Factory containmentFacadeFactory, TaskManagerConfig config) {\r\n    return new TaskManagerImpl(containmentFacadeFactory, config, null);\r\n}"},
 {"id":1087, "parametername":"TaskContainmentHierarchyFacade.Factory factory", "parametertype":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory", "parameterclass":551, "classid":564, "classname":"net.sourceforge.ganttproject.task.TaskManager$Access", "methodid":4438, "methodname":"net.sourceforge.ganttproject.task.TaskManager$Access.newInstance(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.TaskManagerConfig,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"public static TaskManager newInstance(TaskContainmentHierarchyFacade.Factory factory, TaskManagerConfig taskConfig, CustomColumnsStorage customColumnsStorage) {\r\n    return new TaskManagerImpl(factory, taskConfig, customColumnsStorage);\r\n}"},
 {"id":1088, "parametername":"net.sourceforge.ganttproject.task.TaskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":564, "classname":"net.sourceforge.ganttproject.task.TaskManager$Access", "methodid":4438, "methodname":"net.sourceforge.ganttproject.task.TaskManager$Access.newInstance(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.TaskManagerConfig,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":1, "sourcecode":"public static TaskManager newInstance(TaskContainmentHierarchyFacade.Factory factory, TaskManagerConfig taskConfig, CustomColumnsStorage customColumnsStorage) {\r\n    return new TaskManagerImpl(factory, taskConfig, customColumnsStorage);\r\n}"},
 {"id":1089, "parametername":"TaskManagerConfig taskConfig", "parametertype":"net.sourceforge.ganttproject.task.TaskManagerConfig", "parameterclass":566, "classid":564, "classname":"net.sourceforge.ganttproject.task.TaskManager$Access", "methodid":4438, "methodname":"net.sourceforge.ganttproject.task.TaskManager$Access.newInstance(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.TaskManagerConfig,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"public static TaskManager newInstance(TaskContainmentHierarchyFacade.Factory factory, TaskManagerConfig taskConfig, CustomColumnsStorage customColumnsStorage) {\r\n    return new TaskManagerImpl(factory, taskConfig, customColumnsStorage);\r\n}"},
 {"id":1090, "parametername":"CustomColumnsStorage customColumnsStorage", "parametertype":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "parameterclass":535, "classid":564, "classname":"net.sourceforge.ganttproject.task.TaskManager$Access", "methodid":4438, "methodname":"net.sourceforge.ganttproject.task.TaskManager$Access.newInstance(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.TaskManagerConfig,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"public static TaskManager newInstance(TaskContainmentHierarchyFacade.Factory factory, TaskManagerConfig taskConfig, CustomColumnsStorage customColumnsStorage) {\r\n    return new TaskManagerImpl(factory, taskConfig, customColumnsStorage);\r\n}"},
 {"id":1091, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":565, "classname":"net.sourceforge.ganttproject.task.TaskManager", "methodid":4433, "methodname":"net.sourceforge.ganttproject.task.TaskManager.importData(net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"public Map importData(TaskManager taskManager);"},
 {"id":1092, "parametername":"TaskManager importedTaskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":565, "classname":"net.sourceforge.ganttproject.task.TaskManager", "methodid":4432, "methodname":"net.sourceforge.ganttproject.task.TaskManager.importAssignments(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.resource.ResourceManager,java.util.Map,java.util.Map)", "isreturn":0, "sourcecode":"public void importAssignments(TaskManager importedTaskManager, ResourceManager hrManager, Map original2importedTask, Map original2importedResource);"},
 {"id":1093, "parametername":"ResourceManager hrManager", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":565, "classname":"net.sourceforge.ganttproject.task.TaskManager", "methodid":4432, "methodname":"net.sourceforge.ganttproject.task.TaskManager.importAssignments(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.resource.ResourceManager,java.util.Map,java.util.Map)", "isreturn":0, "sourcecode":"public void importAssignments(TaskManager importedTaskManager, ResourceManager hrManager, Map original2importedTask, Map original2importedResource);"},
 {"id":1094, "parametername":"TaskNode root", "parametertype":"net.sourceforge.ganttproject.task.TaskNode", "parameterclass":572, "classid":565, "classname":"net.sourceforge.ganttproject.task.TaskManager", "methodid":4434, "methodname":"net.sourceforge.ganttproject.task.TaskManager.processCriticalPath(net.sourceforge.ganttproject.task.TaskNode)", "isreturn":0, "sourcecode":"/**\r\n * Processes the critical path findind on <code>root</code> tasks.\r\n *\r\n * @param root\r\n * \t\tThe root of the tasks to consider in the critical path\r\n * \t\tfinding.\r\n */\r\npublic void processCriticalPath(TaskNode root);"},
 {"id":1095, "parametername":"Task tasktoRemove", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":565, "classname":"net.sourceforge.ganttproject.task.TaskManager", "methodid":4418, "methodname":"net.sourceforge.ganttproject.task.TaskManager.deleteTask(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"// /**\r\n// * Resets the critical path, i.e. reset all critical tasks to normal\r\n// tasks.\r\n// * @param root The root of the tasks to consider.\r\n// */\r\n// public void resetCriticalPath(TaskNode root);\r\npublic void deleteTask(Task tasktoRemove);"},
 {"id":1096, "parametername":"TaskManagerImpl taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManagerImpl", "parameterclass":570, "classid":569, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap", "methodid":4506, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap.-init-(net.sourceforge.ganttproject.task.TaskManagerImpl)", "isreturn":0, "sourcecode":"TaskMap(TaskManagerImpl taskManager) {\r\n    myComparator = new TaskDocumentOrderComparator(taskManager);\r\n    myManager = taskManager;\r\n}"},
 {"id":1097, "parametername":"TaskContainmentHierarchyFacade.Factory containmentFacadeFactory", "parametertype":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory", "parameterclass":551, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4445, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.-init-(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.TaskManagerConfig,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"TaskManagerImpl(TaskContainmentHierarchyFacade.Factory containmentFacadeFactory, TaskManagerConfig config, CustomColumnsStorage columnStorage) {\r\n    myCustomColumnStorage = (columnStorage == null) ? new CustomColumnsStorage() : columnStorage;\r\n    myConfig = config;\r\n    myHierarchyManager = new TaskHierarchyManagerImpl();\r\n    EventDispatcher dispatcher = new EventDispatcher() {\r\n        public void fireDependencyAdded(TaskDependency dep) {\r\n            TaskManagerImpl.this.fireDependencyAdded(dep);\r\n        }\r\n\r\n        public void fireDependencyRemoved(TaskDependency dep) {\r\n            TaskManagerImpl.this.fireDependencyRemoved(dep);\r\n        }\r\n    };\r\n    myDependencyCollection = new TaskDependencyCollectionImpl(containmentFacadeFactory, dispatcher) {\r\n        private TaskContainmentHierarchyFacade myTaskHierarchy;\r\n\r\n        protected TaskContainmentHierarchyFacade getTaskHierarchy() {\r\n            if ((myTaskHierarchy) == null) {\r\n                myTaskHierarchy = TaskManagerImpl.this.getTaskHierarchy();\r\n            }\r\n            return myTaskHierarchy;\r\n        }\r\n    };\r\n    myFacadeFactory = (containmentFacadeFactory == null) ? new TaskManagerImpl.FacadeFactoryImpl() : containmentFacadeFactory;\r\n    // clear();\r\n    {\r\n        Calendar c = CalendarFactory.newCalendar();\r\n        Date today = c.getTime();\r\n        myRoot = new GanttTask(null, new GanttCalendar(today), 1, this, (-1));\r\n        myRoot.setStart(new GanttCalendar(today));\r\n        myRoot.setDuration(createLength(getConfig().getTimeUnitStack().getDefaultTimeUnit(), 1));\r\n        myRoot.setExpand(true);\r\n    }\r\n    FindPossibleDependeesAlgorithm alg1 = new FindPossibleDependeesAlgorithmImpl() {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return TaskManagerImpl.this.getTaskHierarchy();\r\n        }\r\n    };\r\n    AdjustTaskBoundsAlgorithm alg3 = new AdjustTaskBoundsAlgorithm() {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return TaskManagerImpl.this.getTaskHierarchy();\r\n        }\r\n    };\r\n    RecalculateTaskScheduleAlgorithm alg2 = new RecalculateTaskScheduleAlgorithm(alg3) {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return TaskManagerImpl.this.getTaskHierarchy();\r\n        }\r\n    };\r\n    RecalculateTaskCompletionPercentageAlgorithm alg4 = new RecalculateTaskCompletionPercentageAlgorithm() {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return TaskManagerImpl.this.getTaskHierarchy();\r\n        }\r\n    };\r\n    ProjectBoundsAlgorithm alg5 = new ProjectBoundsAlgorithm();\r\n    myAlgorithmCollection = new AlgorithmCollection(alg1, alg2, alg3, alg4, alg5);\r\n}"},
 {"id":1098, "parametername":"TaskManagerConfig config", "parametertype":"net.sourceforge.ganttproject.task.TaskManagerConfig", "parameterclass":566, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4445, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.-init-(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.TaskManagerConfig,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"TaskManagerImpl(TaskContainmentHierarchyFacade.Factory containmentFacadeFactory, TaskManagerConfig config, CustomColumnsStorage columnStorage) {\r\n    myCustomColumnStorage = (columnStorage == null) ? new CustomColumnsStorage() : columnStorage;\r\n    myConfig = config;\r\n    myHierarchyManager = new TaskHierarchyManagerImpl();\r\n    EventDispatcher dispatcher = new EventDispatcher() {\r\n        public void fireDependencyAdded(TaskDependency dep) {\r\n            TaskManagerImpl.this.fireDependencyAdded(dep);\r\n        }\r\n\r\n        public void fireDependencyRemoved(TaskDependency dep) {\r\n            TaskManagerImpl.this.fireDependencyRemoved(dep);\r\n        }\r\n    };\r\n    myDependencyCollection = new TaskDependencyCollectionImpl(containmentFacadeFactory, dispatcher) {\r\n        private TaskContainmentHierarchyFacade myTaskHierarchy;\r\n\r\n        protected TaskContainmentHierarchyFacade getTaskHierarchy() {\r\n            if ((myTaskHierarchy) == null) {\r\n                myTaskHierarchy = TaskManagerImpl.this.getTaskHierarchy();\r\n            }\r\n            return myTaskHierarchy;\r\n        }\r\n    };\r\n    myFacadeFactory = (containmentFacadeFactory == null) ? new TaskManagerImpl.FacadeFactoryImpl() : containmentFacadeFactory;\r\n    // clear();\r\n    {\r\n        Calendar c = CalendarFactory.newCalendar();\r\n        Date today = c.getTime();\r\n        myRoot = new GanttTask(null, new GanttCalendar(today), 1, this, (-1));\r\n        myRoot.setStart(new GanttCalendar(today));\r\n        myRoot.setDuration(createLength(getConfig().getTimeUnitStack().getDefaultTimeUnit(), 1));\r\n        myRoot.setExpand(true);\r\n    }\r\n    FindPossibleDependeesAlgorithm alg1 = new FindPossibleDependeesAlgorithmImpl() {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return TaskManagerImpl.this.getTaskHierarchy();\r\n        }\r\n    };\r\n    AdjustTaskBoundsAlgorithm alg3 = new AdjustTaskBoundsAlgorithm() {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return TaskManagerImpl.this.getTaskHierarchy();\r\n        }\r\n    };\r\n    RecalculateTaskScheduleAlgorithm alg2 = new RecalculateTaskScheduleAlgorithm(alg3) {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return TaskManagerImpl.this.getTaskHierarchy();\r\n        }\r\n    };\r\n    RecalculateTaskCompletionPercentageAlgorithm alg4 = new RecalculateTaskCompletionPercentageAlgorithm() {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return TaskManagerImpl.this.getTaskHierarchy();\r\n        }\r\n    };\r\n    ProjectBoundsAlgorithm alg5 = new ProjectBoundsAlgorithm();\r\n    myAlgorithmCollection = new AlgorithmCollection(alg1, alg2, alg3, alg4, alg5);\r\n}"},
 {"id":1099, "parametername":"CustomColumnsStorage columnStorage", "parametertype":"net.sourceforge.ganttproject.task.CustomColumnsStorage", "parameterclass":535, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4445, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.-init-(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.TaskManagerConfig,net.sourceforge.ganttproject.task.CustomColumnsStorage)", "isreturn":0, "sourcecode":"TaskManagerImpl(TaskContainmentHierarchyFacade.Factory containmentFacadeFactory, TaskManagerConfig config, CustomColumnsStorage columnStorage) {\r\n    myCustomColumnStorage = (columnStorage == null) ? new CustomColumnsStorage() : columnStorage;\r\n    myConfig = config;\r\n    myHierarchyManager = new TaskHierarchyManagerImpl();\r\n    EventDispatcher dispatcher = new EventDispatcher() {\r\n        public void fireDependencyAdded(TaskDependency dep) {\r\n            TaskManagerImpl.this.fireDependencyAdded(dep);\r\n        }\r\n\r\n        public void fireDependencyRemoved(TaskDependency dep) {\r\n            TaskManagerImpl.this.fireDependencyRemoved(dep);\r\n        }\r\n    };\r\n    myDependencyCollection = new TaskDependencyCollectionImpl(containmentFacadeFactory, dispatcher) {\r\n        private TaskContainmentHierarchyFacade myTaskHierarchy;\r\n\r\n        protected TaskContainmentHierarchyFacade getTaskHierarchy() {\r\n            if ((myTaskHierarchy) == null) {\r\n                myTaskHierarchy = TaskManagerImpl.this.getTaskHierarchy();\r\n            }\r\n            return myTaskHierarchy;\r\n        }\r\n    };\r\n    myFacadeFactory = (containmentFacadeFactory == null) ? new TaskManagerImpl.FacadeFactoryImpl() : containmentFacadeFactory;\r\n    // clear();\r\n    {\r\n        Calendar c = CalendarFactory.newCalendar();\r\n        Date today = c.getTime();\r\n        myRoot = new GanttTask(null, new GanttCalendar(today), 1, this, (-1));\r\n        myRoot.setStart(new GanttCalendar(today));\r\n        myRoot.setDuration(createLength(getConfig().getTimeUnitStack().getDefaultTimeUnit(), 1));\r\n        myRoot.setExpand(true);\r\n    }\r\n    FindPossibleDependeesAlgorithm alg1 = new FindPossibleDependeesAlgorithmImpl() {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return TaskManagerImpl.this.getTaskHierarchy();\r\n        }\r\n    };\r\n    AdjustTaskBoundsAlgorithm alg3 = new AdjustTaskBoundsAlgorithm() {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return TaskManagerImpl.this.getTaskHierarchy();\r\n        }\r\n    };\r\n    RecalculateTaskScheduleAlgorithm alg2 = new RecalculateTaskScheduleAlgorithm(alg3) {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return TaskManagerImpl.this.getTaskHierarchy();\r\n        }\r\n    };\r\n    RecalculateTaskCompletionPercentageAlgorithm alg4 = new RecalculateTaskCompletionPercentageAlgorithm() {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return TaskManagerImpl.this.getTaskHierarchy();\r\n        }\r\n    };\r\n    ProjectBoundsAlgorithm alg5 = new ProjectBoundsAlgorithm();\r\n    myAlgorithmCollection = new AlgorithmCollection(alg1, alg2, alg3, alg4, alg5);\r\n}"},
 {"id":1100, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":569, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap", "methodid":4507, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap.addTask(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"void addTask(Task task) {\r\n    myId2task.put(new Integer(task.getTaskID()), task);\r\n    isModified = true;\r\n}"},
 {"id":1101, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":569, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap", "methodid":4512, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl$TaskMap.removeTask(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public void removeTask(Task task) {\r\n    myId2task.remove(new Integer(task.getTaskID()));\r\n    Task[] nestedTasks = myManager.getTaskHierarchy().getNestedTasks(task);\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        removeTask(nestedTasks[i]);\r\n    }\r\n    isModified = true;\r\n}"},
 {"id":1102, "parametername":"Task tasktoRemove", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4457, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.deleteTask(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public void deleteTask(Task tasktoRemove) {\r\n    myTaskMap.removeTask(tasktoRemove);\r\n    // TaskDependency[] dep =\r\n    // myDependencyCollection.getDependencies(tasktoRemove);\r\n    // for(int i=0;i<dep.length; i++){\r\n    // dep[i].delete();\r\n    // }\r\n    // todo REMOVE TASK FROM TASKHIERARCHY\r\n    // fireTaskRemoved(tasktoRemove,myTaskContainment.getContainer(tasktoRemove));\r\n}"},
 {"id":1103, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4490, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.registerTask(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/* (non-Javadoc)\n\n@see net.sourceforge.ganttproject.task.TaskManager#registerTask(net.sourceforge.ganttproject.GanttTask)\n */\r\npublic void registerTask(Task task) {\r\n    int taskID = task.getTaskID();\r\n    if ((myTaskMap.getTask(taskID)) == null) {\r\n        // if the taskID is\r\n        // not in the map\r\n        myTaskMap.addTask(task);\r\n        if ((getMaxID()) < taskID) {\r\n            setMaxID((taskID + 1));\r\n        }\r\n    } else {\r\n        // taskID has been in the map. the newTask will not be added\r\n        throw new RuntimeException((\"There is a task that already has the ID \" + taskID));\r\n    }\r\n}"},
 {"id":1104, "parametername":"TaskImpl task", "parametertype":"net.sourceforge.ganttproject.task.TaskImpl", "parameterclass":560, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4487, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.isRegistered(net.sourceforge.ganttproject.task.TaskImpl)", "isreturn":0, "sourcecode":"boolean isRegistered(TaskImpl task) {\r\n    return (myTaskMap.getTask(task.getTaskID())) != null;\r\n}"},
 {"id":1105, "parametername":"TimeUnit unit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4453, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.createLength(net.sourceforge.ganttproject.time.TimeUnit,float)", "isreturn":0, "sourcecode":"public TaskLength createLength(TimeUnit unit, float length) {\r\n    return new TaskLengthImpl(unit, length);\r\n}"},
 {"id":1106, "parametername":"net.sourceforge.ganttproject.task.TaskLength", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4453, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.createLength(net.sourceforge.ganttproject.time.TimeUnit,float)", "isreturn":1, "sourcecode":"public TaskLength createLength(TimeUnit unit, float length) {\r\n    return new TaskLengthImpl(unit, length);\r\n}"},
 {"id":1107, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4454, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.createLength(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,java.util.Date)", "isreturn":0, "sourcecode":"public TaskLength createLength(TimeUnit timeUnit, Date startDate, Date endDate) {\r\n    TaskLength result;\r\n    int sign = 1;\r\n    if (endDate.before(startDate)) {\r\n        sign = -1;\r\n        Date temp = endDate;\r\n        endDate = startDate;\r\n        startDate = temp;\r\n    }\r\n    if (timeUnit instanceof DateFrameable) {\r\n        DateFrameable df = ((DateFrameable) (timeUnit));\r\n        int unitCount = 0;\r\n        for (; startDate.before(endDate); unitCount++) {\r\n            startDate = df.adjustRight(startDate);\r\n        }\r\n        result = new TaskLengthImpl(timeUnit, (unitCount * sign));\r\n    } else {\r\n        throw new IllegalArgumentException(((\"Time unit=\" + timeUnit) + \" is not date frameable\"));\r\n    }\r\n    return result;\r\n}"},
 {"id":1108, "parametername":"net.sourceforge.ganttproject.task.TaskLength", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4454, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.createLength(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date,java.util.Date)", "isreturn":1, "sourcecode":"public TaskLength createLength(TimeUnit timeUnit, Date startDate, Date endDate) {\r\n    TaskLength result;\r\n    int sign = 1;\r\n    if (endDate.before(startDate)) {\r\n        sign = -1;\r\n        Date temp = endDate;\r\n        endDate = startDate;\r\n        startDate = temp;\r\n    }\r\n    if (timeUnit instanceof DateFrameable) {\r\n        DateFrameable df = ((DateFrameable) (timeUnit));\r\n        int unitCount = 0;\r\n        for (; startDate.before(endDate); unitCount++) {\r\n            startDate = df.adjustRight(startDate);\r\n        }\r\n        result = new TaskLengthImpl(timeUnit, (unitCount * sign));\r\n    } else {\r\n        throw new IllegalArgumentException(((\"Time unit=\" + timeUnit) + \" is not date frameable\"));\r\n    }\r\n    return result;\r\n}"},
 {"id":1109, "parametername":"TaskListener listener", "parametertype":"net.sourceforge.ganttproject.task.event.TaskListener", "parameterclass":621, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4449, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.addTaskListener(net.sourceforge.ganttproject.task.event.TaskListener)", "isreturn":0, "sourcecode":"public void addTaskListener(TaskListener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":1110, "parametername":"Task changedTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4463, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireTaskProgressChanged(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public void fireTaskProgressChanged(Task changedTask) {\r\n    if (areEventsEnabled) {\r\n        TaskPropertyEvent e = new TaskPropertyEvent(changedTask);\r\n        for (int i = 0; i < (myListeners.size()); i++) {\r\n            TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n            next.taskProgressChanged(e);\r\n        }\r\n    }\r\n}"},
 {"id":1111, "parametername":"Task changedTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4466, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireTaskScheduleChanged(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"void fireTaskScheduleChanged(Task changedTask, GanttCalendar oldStartDate, GanttCalendar oldFinishDate) {\r\n    if (areEventsEnabled) {\r\n        TaskScheduleEvent e = new TaskScheduleEvent(changedTask, oldStartDate, oldFinishDate, changedTask.getStart(), changedTask.getEnd());\r\n        // List copy = new ArrayList(myListeners);\r\n        // myListeners.clear();\r\n        for (int i = 0; i < (myListeners.size()); i++) {\r\n            TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n            next.taskScheduleChanged(e);\r\n        }\r\n    }\r\n}"},
 {"id":1112, "parametername":"GanttCalendar oldStartDate", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4466, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireTaskScheduleChanged(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"void fireTaskScheduleChanged(Task changedTask, GanttCalendar oldStartDate, GanttCalendar oldFinishDate) {\r\n    if (areEventsEnabled) {\r\n        TaskScheduleEvent e = new TaskScheduleEvent(changedTask, oldStartDate, oldFinishDate, changedTask.getStart(), changedTask.getEnd());\r\n        // List copy = new ArrayList(myListeners);\r\n        // myListeners.clear();\r\n        for (int i = 0; i < (myListeners.size()); i++) {\r\n            TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n            next.taskScheduleChanged(e);\r\n        }\r\n    }\r\n}"},
 {"id":1113, "parametername":"GanttCalendar oldFinishDate", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4466, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireTaskScheduleChanged(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"void fireTaskScheduleChanged(Task changedTask, GanttCalendar oldStartDate, GanttCalendar oldFinishDate) {\r\n    if (areEventsEnabled) {\r\n        TaskScheduleEvent e = new TaskScheduleEvent(changedTask, oldStartDate, oldFinishDate, changedTask.getStart(), changedTask.getEnd());\r\n        // List copy = new ArrayList(myListeners);\r\n        // myListeners.clear();\r\n        for (int i = 0; i < (myListeners.size()); i++) {\r\n            TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n            next.taskScheduleChanged(e);\r\n        }\r\n    }\r\n}"},
 {"id":1114, "parametername":"TaskDependency newDependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4460, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireDependencyAdded(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"private void fireDependencyAdded(TaskDependency newDependency) {\r\n    if (areEventsEnabled) {\r\n        TaskDependencyEvent e = new TaskDependencyEvent(getDependencyCollection(), newDependency);\r\n        for (int i = 0; i < (myListeners.size()); i++) {\r\n            TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n            next.dependencyAdded(e);\r\n        }\r\n    }\r\n}"},
 {"id":1115, "parametername":"TaskDependency dep", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4461, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireDependencyRemoved(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"private void fireDependencyRemoved(TaskDependency dep) {\r\n    TaskDependencyEvent e = new TaskDependencyEvent(getDependencyCollection(), dep);\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n        next.dependencyRemoved(e);\r\n    }\r\n}"},
 {"id":1116, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4462, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireTaskAdded(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"private void fireTaskAdded(Task task) {\r\n    if (areEventsEnabled) {\r\n        TaskHierarchyEvent e = new TaskHierarchyEvent(this, task, null, getTaskHierarchy().getContainer(task));\r\n        for (int i = 0; i < (myListeners.size()); i++) {\r\n            TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n            next.taskAdded(e);\r\n        }\r\n    }\r\n}"},
 {"id":1117, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4465, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireTaskRemoved(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"private void fireTaskRemoved(Task task, Task oldSupertask) {\r\n    TaskHierarchyEvent e = new TaskHierarchyEvent(this, task, oldSupertask, null);\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n        next.taskRemoved(e);\r\n    }\r\n}"},
 {"id":1118, "parametername":"Task oldSupertask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4465, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireTaskRemoved(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"private void fireTaskRemoved(Task task, Task oldSupertask) {\r\n    TaskHierarchyEvent e = new TaskHierarchyEvent(this, task, oldSupertask, null);\r\n    for (int i = 0; i < (myListeners.size()); i++) {\r\n        TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n        next.taskRemoved(e);\r\n    }\r\n}"},
 {"id":1119, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4464, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.fireTaskPropertiesChanged(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"void fireTaskPropertiesChanged(Task task) {\r\n    if (areEventsEnabled) {\r\n        TaskPropertyEvent e = new TaskPropertyEvent(task);\r\n        for (int i = 0; i < (myListeners.size()); i++) {\r\n            TaskListener next = ((TaskListener) (myListeners.get(i)));\r\n            next.taskPropertiesChanged(e);\r\n        }\r\n    }\r\n}"},
 {"id":1120, "parametername":"Task container", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":568, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "methodid":4502, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.getNestedTasks(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"// public FacadeImpl(Task root) {\r\n// myRoot = root;\r\n// }\r\npublic Task[] getNestedTasks(Task container) {\r\n    return container.getNestedTasks();\r\n}"},
 {"id":1121, "parametername":"Task container", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":568, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "methodid":4504, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.hasNestedTasks(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public boolean hasNestedTasks(Task container) {\r\n    return (myRoot) == null ? false : myRoot.isMilestone();\r\n}"},
 {"id":1122, "parametername":"Task nestedTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":568, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "methodid":4500, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.getContainer(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public Task getContainer(Task nestedTask) {\r\n    return nestedTask.getSupertask();\r\n}"},
 {"id":1123, "parametername":"net.sourceforge.ganttproject.task.Task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":568, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "methodid":4500, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.getContainer(net.sourceforge.ganttproject.task.Task)", "isreturn":1, "sourcecode":"public Task getContainer(Task nestedTask) {\r\n    return nestedTask.getSupertask();\r\n}"},
 {"id":1124, "parametername":"Task first", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":568, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "methodid":4497, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.areUnrelated(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public boolean areUnrelated(Task first, Task second) {\r\n    myPathBuffer.clear();\r\n    for (Task container = getContainer(first); container != null; container = getContainer(container)) {\r\n        myPathBuffer.add(container);\r\n    }\r\n    if (myPathBuffer.contains(second)) {\r\n        return false;\r\n    }\r\n    myPathBuffer.clear();\r\n    for (Task container = getContainer(second); container != null; container = getContainer(container)) {\r\n        myPathBuffer.add(container);\r\n    }\r\n    if (myPathBuffer.contains(first)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"},
 {"id":1125, "parametername":"Task second", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":568, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "methodid":4497, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.areUnrelated(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public boolean areUnrelated(Task first, Task second) {\r\n    myPathBuffer.clear();\r\n    for (Task container = getContainer(first); container != null; container = getContainer(container)) {\r\n        myPathBuffer.add(container);\r\n    }\r\n    if (myPathBuffer.contains(second)) {\r\n        return false;\r\n    }\r\n    myPathBuffer.clear();\r\n    for (Task container = getContainer(second); container != null; container = getContainer(container)) {\r\n        myPathBuffer.add(container);\r\n    }\r\n    if (myPathBuffer.contains(first)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"},
 {"id":1126, "parametername":"Task whatMove", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":568, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "methodid":4505, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.move(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public void move(Task whatMove, Task whereMove) {\r\n    whatMove.move(whereMove);\r\n}"},
 {"id":1127, "parametername":"Task whereMove", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":568, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "methodid":4505, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.move(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public void move(Task whatMove, Task whereMove) {\r\n    whatMove.move(whereMove);\r\n}"},
 {"id":1128, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":568, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "methodid":4501, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.getDepth(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public int getDepth(Task task) {\r\n    int depth = 0;\r\n    while (task != (myRoot)) {\r\n        task = task.getSupertask();\r\n        depth++;\r\n    } \r\n    return depth;\r\n}"},
 {"id":1129, "parametername":"Task task1", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":568, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "methodid":4498, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.compareDocumentOrder(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public int compareDocumentOrder(Task task1, Task task2) {\r\n    if (task1 == task2) {\r\n        return 0;\r\n    }\r\n    List buffer1 = new ArrayList();\r\n    for (Task container = task1; container != null; container = getContainer(container)) {\r\n        buffer1.add(0, container);\r\n    }\r\n    List buffer2 = new ArrayList();\r\n    for (Task container = task2; container != null; container = getContainer(container)) {\r\n        buffer2.add(0, container);\r\n    }\r\n    if (((buffer1.get(0)) != (getRootTask())) && ((buffer2.get(0)) == (getRootTask()))) {\r\n        return -1;\r\n    }\r\n    if (((buffer1.get(0)) == (getRootTask())) && ((buffer2.get(0)) != (getRootTask()))) {\r\n        return 1;\r\n    }\r\n    int result = 0;\r\n    int i = 0;\r\n    Task commonRoot = null;\r\n    while (true) {\r\n        if (i == (buffer1.size())) {\r\n            return -1;\r\n        }\r\n        if (i == (buffer2.size())) {\r\n            return 1;\r\n        }\r\n        Task root1 = ((Task) (buffer1.get(i)));\r\n        Task root2 = ((Task) (buffer2.get(i)));\r\n        if (root1 != root2) {\r\n            assert commonRoot != null : ((((((\"Failure comparing task=\" + task1) + \" and task=\") + task2) + \"\n. Path1=\") + buffer1) + \"\nPath2=\") + buffer2;\r\n            Task[] nestedTasks = commonRoot.getNestedTasks();\r\n            for (int j = 0; j < (nestedTasks.length); j++) {\r\n                if ((nestedTasks[j]) == root1) {\r\n                    return -1;\r\n                }\r\n                if ((nestedTasks[j]) == root2) {\r\n                    return 1;\r\n                }\r\n            }\r\n            throw new IllegalStateException(\"We should not be here\");\r\n        }\r\n        i++;\r\n        commonRoot = root1;\r\n    } \r\n}"},
 {"id":1130, "parametername":"Task task2", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":568, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "methodid":4498, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.compareDocumentOrder(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public int compareDocumentOrder(Task task1, Task task2) {\r\n    if (task1 == task2) {\r\n        return 0;\r\n    }\r\n    List buffer1 = new ArrayList();\r\n    for (Task container = task1; container != null; container = getContainer(container)) {\r\n        buffer1.add(0, container);\r\n    }\r\n    List buffer2 = new ArrayList();\r\n    for (Task container = task2; container != null; container = getContainer(container)) {\r\n        buffer2.add(0, container);\r\n    }\r\n    if (((buffer1.get(0)) != (getRootTask())) && ((buffer2.get(0)) == (getRootTask()))) {\r\n        return -1;\r\n    }\r\n    if (((buffer1.get(0)) == (getRootTask())) && ((buffer2.get(0)) != (getRootTask()))) {\r\n        return 1;\r\n    }\r\n    int result = 0;\r\n    int i = 0;\r\n    Task commonRoot = null;\r\n    while (true) {\r\n        if (i == (buffer1.size())) {\r\n            return -1;\r\n        }\r\n        if (i == (buffer2.size())) {\r\n            return 1;\r\n        }\r\n        Task root1 = ((Task) (buffer1.get(i)));\r\n        Task root2 = ((Task) (buffer2.get(i)));\r\n        if (root1 != root2) {\r\n            assert commonRoot != null : ((((((\"Failure comparing task=\" + task1) + \" and task=\") + task2) + \"\n. Path1=\") + buffer1) + \"\nPath2=\") + buffer2;\r\n            Task[] nestedTasks = commonRoot.getNestedTasks();\r\n            for (int j = 0; j < (nestedTasks.length); j++) {\r\n                if ((nestedTasks[j]) == root1) {\r\n                    return -1;\r\n                }\r\n                if ((nestedTasks[j]) == root2) {\r\n                    return 1;\r\n                }\r\n            }\r\n            throw new IllegalStateException(\"We should not be here\");\r\n        }\r\n        i++;\r\n        commonRoot = root1;\r\n    } \r\n}"},
 {"id":1131, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":568, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl", "methodid":4499, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl$FacadeImpl.contains(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public boolean contains(Task task) {\r\n    throw new UnsupportedOperationException();\r\n}"},
 {"id":1132, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4485, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.importData(net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"public Map importData(TaskManager taskManager) {\r\n    Task importRoot = taskManager.getRootTask();\r\n    Map original2imported = new HashMap();\r\n    importData(importRoot, getRootTask(), original2imported);\r\n    TaskDependency[] deps = taskManager.getDependencyCollection().getDependencies();\r\n    for (int i = 0; i < (deps.length); i++) {\r\n        Task nextDependant = deps[i].getDependant();\r\n        Task nextDependee = deps[i].getDependee();\r\n        Task importedDependant = ((Task) (original2imported.get(nextDependant)));\r\n        Task importedDependee = ((Task) (original2imported.get(nextDependee)));\r\n        try {\r\n            TaskDependency dependency = getDependencyCollection().createDependency(importedDependant, importedDependee, new FinishStartConstraintImpl());\r\n            dependency.setConstraint(deps[i].getConstraint());\r\n            dependency.setDifference(deps[i].getDifference());\r\n            dependency.setHardness(deps[i].getHardness());\r\n        } catch (TaskDependencyException e) {\r\n            if (!(GPLogger.log(e))) {\r\n                e.printStackTrace(System.err);\r\n            }\r\n        }\r\n    }\r\n    return original2imported;\r\n}"},
 {"id":1133, "parametername":"Task importRoot", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4484, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.importData(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,java.util.Map)", "isreturn":0, "sourcecode":"private void importData(Task importRoot, Task root, Map original2imported) {\r\n    Task[] nested = importRoot.getManager().getTaskHierarchy().getNestedTasks(importRoot);\r\n    for (int i = (nested.length) - 1; i >= 0; i--) {\r\n        Task nextImported = createTask();\r\n        registerTask(nextImported);\r\n        nextImported.setName(nested[i].getName());\r\n        nextImported.setStart(nested[i].getStart().Clone());\r\n        nextImported.setDuration(nested[i].getDuration());\r\n        nextImported.setMilestone(nested[i].isMilestone());\r\n        nextImported.setColor(nested[i].getColor());\r\n        nextImported.setShape(nested[i].getShape());\r\n        nextImported.setCompletionPercentage(nested[i].getCompletionPercentage());\r\n        nextImported.setNotes(nested[i].getNotes());\r\n        nextImported.setTaskInfo(nested[i].getTaskInfo());\r\n        nextImported.setExpand(nested[i].getExpand());\r\n        if ((nested[i].getThird()) != null) {\r\n            nextImported.setThirdDate(nested[i].getThird().Clone());\r\n            nextImported.setThirdDateConstraint(nested[i].getThirdDateConstraint());\r\n        }\r\n        myCustomColumnStorage.processNewTask(nextImported);\r\n        CustomColumnsValues customValues = nested[i].getCustomValues();\r\n        Collection customColums = myCustomColumnStorage.getCustomColums();\r\n        for (Iterator it = customColums.iterator(); it.hasNext();) {\r\n            CustomColumn nextColumn = ((CustomColumn) (it.next()));\r\n            Object value = customValues.getValue(nextColumn.getName());\r\n            if (value != null) {\r\n                try {\r\n                    nextImported.getCustomValues().setValue(nextColumn.getName(), value);\r\n                } catch (CustomColumnsException e) {\r\n                    if (!(GPLogger.log(e))) {\r\n                        e.printStackTrace(System.err);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // System.out.println (\"Import : \" + nextImported.getTaskID() + \"\r\n        // -->> \" + nextImported.getName());\r\n        original2imported.put(nested[i], nextImported);\r\n        // nextImported.move(root);\r\n        getTaskHierarchy().move(nextImported, root);\r\n        importData(nested[i], nextImported, original2imported);\r\n    }\r\n}"},
 {"id":1134, "parametername":"Task root", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4484, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.importData(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,java.util.Map)", "isreturn":0, "sourcecode":"private void importData(Task importRoot, Task root, Map original2imported) {\r\n    Task[] nested = importRoot.getManager().getTaskHierarchy().getNestedTasks(importRoot);\r\n    for (int i = (nested.length) - 1; i >= 0; i--) {\r\n        Task nextImported = createTask();\r\n        registerTask(nextImported);\r\n        nextImported.setName(nested[i].getName());\r\n        nextImported.setStart(nested[i].getStart().Clone());\r\n        nextImported.setDuration(nested[i].getDuration());\r\n        nextImported.setMilestone(nested[i].isMilestone());\r\n        nextImported.setColor(nested[i].getColor());\r\n        nextImported.setShape(nested[i].getShape());\r\n        nextImported.setCompletionPercentage(nested[i].getCompletionPercentage());\r\n        nextImported.setNotes(nested[i].getNotes());\r\n        nextImported.setTaskInfo(nested[i].getTaskInfo());\r\n        nextImported.setExpand(nested[i].getExpand());\r\n        if ((nested[i].getThird()) != null) {\r\n            nextImported.setThirdDate(nested[i].getThird().Clone());\r\n            nextImported.setThirdDateConstraint(nested[i].getThirdDateConstraint());\r\n        }\r\n        myCustomColumnStorage.processNewTask(nextImported);\r\n        CustomColumnsValues customValues = nested[i].getCustomValues();\r\n        Collection customColums = myCustomColumnStorage.getCustomColums();\r\n        for (Iterator it = customColums.iterator(); it.hasNext();) {\r\n            CustomColumn nextColumn = ((CustomColumn) (it.next()));\r\n            Object value = customValues.getValue(nextColumn.getName());\r\n            if (value != null) {\r\n                try {\r\n                    nextImported.getCustomValues().setValue(nextColumn.getName(), value);\r\n                } catch (CustomColumnsException e) {\r\n                    if (!(GPLogger.log(e))) {\r\n                        e.printStackTrace(System.err);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // System.out.println (\"Import : \" + nextImported.getTaskID() + \"\r\n        // -->> \" + nextImported.getName());\r\n        original2imported.put(nested[i], nextImported);\r\n        // nextImported.move(root);\r\n        getTaskHierarchy().move(nextImported, root);\r\n        importData(nested[i], nextImported, original2imported);\r\n    }\r\n}"},
 {"id":1135, "parametername":"TaskNode root", "parametertype":"net.sourceforge.ganttproject.task.TaskNode", "parameterclass":572, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4489, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.processCriticalPath(net.sourceforge.ganttproject.task.TaskNode)", "isreturn":0, "sourcecode":"public void processCriticalPath(TaskNode root) {\r\n    try {\r\n        myAlgorithmCollection.getRecalculateTaskScheduleAlgorithm().run();\r\n    } catch (TaskDependencyException e) {\r\n        if (!(GPLogger.log(e))) {\r\n            e.printStackTrace(System.err);\r\n        }\r\n    }\r\n    CriticalPathAlgorithm criticAlgo = new CriticalPathAlgorithmImpl(root, getCalendar());\r\n    Task[] tasks = criticAlgo.getCriticalTasks();\r\n    resetCriticalPath(root);\r\n    for (int i = 0; i < (tasks.length); i++)\r\n        tasks[i].setCritical(true);\r\n\r\n}"},
 {"id":1136, "parametername":"TaskNode root", "parametertype":"net.sourceforge.ganttproject.task.TaskNode", "parameterclass":572, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4491, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.resetCriticalPath(net.sourceforge.ganttproject.task.TaskNode)", "isreturn":0, "sourcecode":"private void resetCriticalPath(TaskNode root) {\r\n    Enumeration en = root.preorderEnumeration();\r\n    while (en.hasMoreElements()) {\r\n        Object next = en.nextElement();\r\n        if (!(next instanceof TaskNode))\r\n            continue;\r\n\r\n        Task t = ((Task) (((TaskNode) (next)).getUserObject()));\r\n        t.setCritical(false);\r\n    } \r\n}"},
 {"id":1137, "parametername":"TaskManager importedTaskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4483, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.importAssignments(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.resource.ResourceManager,java.util.Map,java.util.Map)", "isreturn":0, "sourcecode":"public void importAssignments(TaskManager importedTaskManager, ResourceManager hrManager, Map original2importedTask, Map original2importedResource) {\r\n    Task[] tasks = importedTaskManager.getTasks();\r\n    for (int i = 0; i < (tasks.length); i++) {\r\n        ResourceAssignment[] assignments = tasks[i].getAssignments();\r\n        for (int j = 0; j < (assignments.length); j++) {\r\n            Task task = getTask(((Task) (original2importedTask.get(tasks[i]))).getTaskID());\r\n            ResourceAssignment assignment = task.getAssignmentCollection().addAssignment(((HumanResource) (original2importedResource.get(assignments[j].getResource()))));\r\n            assignment.setLoad(assignments[j].getLoad());\r\n            assignment.setCoordinator(assignments[j].isCoordinator());\r\n        }\r\n    }\r\n}"},
 {"id":1138, "parametername":"ResourceManager hrManager", "parametertype":"net.sourceforge.ganttproject.resource.ResourceManager", "parameterclass":509, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4483, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.importAssignments(net.sourceforge.ganttproject.task.TaskManager,net.sourceforge.ganttproject.resource.ResourceManager,java.util.Map,java.util.Map)", "isreturn":0, "sourcecode":"public void importAssignments(TaskManager importedTaskManager, ResourceManager hrManager, Map original2importedTask, Map original2importedResource) {\r\n    Task[] tasks = importedTaskManager.getTasks();\r\n    for (int i = 0; i < (tasks.length); i++) {\r\n        ResourceAssignment[] assignments = tasks[i].getAssignments();\r\n        for (int j = 0; j < (assignments.length); j++) {\r\n            Task task = getTask(((Task) (original2importedTask.get(tasks[i]))).getTaskID());\r\n            ResourceAssignment assignment = task.getAssignmentCollection().addAssignment(((HumanResource) (original2importedResource.get(assignments[j].getResource()))));\r\n            assignment.setLoad(assignments[j].getLoad());\r\n            assignment.setCoordinator(assignments[j].isCoordinator());\r\n        }\r\n    }\r\n}"},
 {"id":1139, "parametername":"TaskImpl task", "parametertype":"net.sourceforge.ganttproject.task.TaskImpl", "parameterclass":560, "classid":570, "classname":"net.sourceforge.ganttproject.task.TaskManagerImpl", "methodid":4488, "methodname":"net.sourceforge.ganttproject.task.TaskManagerImpl.onTaskMoved(net.sourceforge.ganttproject.task.TaskImpl)", "isreturn":0, "sourcecode":"void onTaskMoved(TaskImpl task) {\r\n    if (!(isRegistered(task))) {\r\n        registerTask(task);\r\n    }\r\n    myTaskMap.setDirty();\r\n}"},
 {"id":1140, "parametername":"GanttCalendar third", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":571, "classname":"net.sourceforge.ganttproject.task.TaskMutator", "methodid":4518, "methodname":"net.sourceforge.ganttproject.task.TaskMutator.setThird(net.sourceforge.ganttproject.GanttCalendar,int)", "isreturn":0, "sourcecode":"void setThird(GanttCalendar third, int thirdDateConstraint);"},
 {"id":1141, "parametername":"Task t", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":572, "classname":"net.sourceforge.ganttproject.task.TaskNode", "methodid":4520, "methodname":"net.sourceforge.ganttproject.task.TaskNode.-init-(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n * Creates an instance of TaskNode with the given task as reference.\r\n *\r\n * @param t\r\n * \t\tTask of reference.\r\n */\r\npublic TaskNode(Task t) {\r\n    super(t);\r\n    task = t;\r\n}"},
 {"id":1142, "parametername":"GanttCalendar startDate", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":572, "classname":"net.sourceforge.ganttproject.task.TaskNode", "methodid":4535, "methodname":"net.sourceforge.ganttproject.task.TaskNode.setStart(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"/**\r\n * Sets the start date of the task.\r\n *\r\n * @param startDate\r\n * \t\tThe start date of the task to be set.\r\n */\r\npublic void setStart(GanttCalendar startDate) {\r\n    TaskMutator mutator = task.createMutatorFixingDuration();\r\n    mutator.setStart(startDate);\r\n    mutator.commit();\r\n}"},
 {"id":1143, "parametername":"GanttCalendar endDate", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":572, "classname":"net.sourceforge.ganttproject.task.TaskNode", "methodid":4532, "methodname":"net.sourceforge.ganttproject.task.TaskNode.setEnd(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"/**\r\n * Sets the end date of the task.\r\n *\r\n * @param endDate\r\n * \t\tThe end date of the task to be set.\r\n */\r\npublic void setEnd(GanttCalendar endDate) {\r\n    TaskMutator mutator = task.createMutator();\r\n    mutator.setEnd(endDate);\r\n    mutator.commit();\r\n}"},
 {"id":1144, "parametername":"TaskLength length", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":572, "classname":"net.sourceforge.ganttproject.task.TaskNode", "methodid":4531, "methodname":"net.sourceforge.ganttproject.task.TaskNode.setDuration(net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"/**\r\n * Sets the duration of the task.\r\n *\r\n * @param length\r\n * \t\tThe duration to be set.\r\n */\r\npublic void setDuration(TaskLength length) {\r\n    TaskMutator mutator = task.createMutator();\r\n    mutator.setDuration(length);\r\n    mutator.commit();\r\n}"},
 {"id":1145, "parametername":"TaskInfo info", "parametertype":"net.sourceforge.ganttproject.task.TaskInfo", "parameterclass":561, "classid":572, "classname":"net.sourceforge.ganttproject.task.TaskNode", "methodid":4536, "methodname":"net.sourceforge.ganttproject.task.TaskNode.setTaskInfo(net.sourceforge.ganttproject.task.TaskInfo)", "isreturn":0, "sourcecode":"public void setTaskInfo(TaskInfo info) {\r\n    task.setTaskInfo(info);\r\n}"},
 {"id":1146, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":573, "classname":"net.sourceforge.ganttproject.task.TaskProperties", "methodid":4539, "methodname":"net.sourceforge.ganttproject.task.TaskProperties.getProperty(net.sourceforge.ganttproject.task.Task,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Returns the task property specified by <code>propertyID</code>.\r\n *\r\n * @param task\r\n * \t\tThe task from which we want the property.\r\n * @param propertyID\r\n * \t\tThe property ID which could be <code>ID_TASK_DATES</code>,\r\n * \t\t<code>ID_TASK_NAME</code>, ... or a custom column name.\r\n * @return the task property specified by <code>propertyID</code>. The\r\nresult may be <code>null</code>.\r\n */\r\npublic static Object getProperty(Task task, String propertyID) {\r\n    Object res = null;\r\n    StringBuffer sb = new StringBuffer();\r\n    if (propertyID != null) {\r\n        if (propertyID.equals(TaskProperties.ID_TASK_DATES)) {\r\n            sb.append(\" [ \");\r\n            sb.append((((task.getStart()) + \" - \") + (task.getEnd())));\r\n            sb.append(\" ] \");\r\n            res = sb.toString();\r\n        } else\r\n            if (propertyID.equals(TaskProperties.ID_TASK_NAME)) {\r\n                sb.append(((\" \" + (task.getName())) + \" \"));\r\n                res = sb.toString();\r\n            } else\r\n                if (propertyID.equals(TaskProperties.ID_TASK_LENGTH)) {\r\n                    sb.append(\" [ \");\r\n                    sb.append(((((int) (task.getDuration().getLength())) + \" \") + (GanttLanguage.getInstance().getText(\"days\"))));\r\n                    sb.append(\" ] \");\r\n                    res = sb.toString();\r\n                } else\r\n                    if (propertyID.equals(TaskProperties.ID_TASK_ADVANCEMENT)) {\r\n                        sb.append(\" [ \");\r\n                        sb.append(((task.getCompletionPercentage()) + \"%\"));\r\n                        sb.append(\" ] \");\r\n                        res = sb.toString();\r\n                    } else\r\n                        if (propertyID.equals(TaskProperties.ID_TASK_COORDINATOR)) {\r\n                            ResourceAssignment[] assignments = task.getAssignments();\r\n                            if ((assignments.length) > 0) {\r\n                                boolean first = true;\r\n                                boolean close = false;\r\n                                int j = 0;\r\n                                for (int i = 0; i < (assignments.length); i++) {\r\n                                    if (assignments[i].isCoordinator()) {\r\n                                        j++;\r\n                                        if (first) {\r\n                                            close = true;\r\n                                            first = false;\r\n                                            sb.append(\"{\");\r\n                                        }\r\n                                        if (j > 1) {\r\n                                            sb.append(\", \");\r\n                                        }\r\n                                        sb.append(assignments[i].getResource().getName());\r\n                                    }\r\n                                }\r\n                                if (close)\r\n                                    sb.append(\"}\");\r\n\r\n                            }\r\n                            res = sb.toString();\r\n                        } else\r\n                            if (propertyID.equals(TaskProperties.ID_TASK_RESOURCES)) {\r\n                                ResourceAssignment[] assignments = task.getAssignments();\r\n                                if ((assignments.length) > 0) {\r\n                                    sb.append(\" \");\r\n                                    /* Keep coordinators and other resources separate */\r\n                                    StringBuffer resources = new StringBuffer();\r\n                                    StringBuffer coordinators = new StringBuffer();\r\n                                    for (int i = 0; i < (assignments.length); i++) {\r\n                                        /* Creates list of resources in format {coordinators},resources */\r\n                                        if (assignments[i].isCoordinator()) {\r\n                                            if ((coordinators.length()) > 0) {\r\n                                                coordinators.append(\",\");\r\n                                            }\r\n                                            coordinators.append(assignments[i].getResource().getName());\r\n                                        } else {\r\n                                            if ((resources.length()) > 0) {\r\n                                                resources.append(\",\");\r\n                                            }\r\n                                            resources.append(assignments[i].getResource().getName());\r\n                                        }\r\n                                    }\r\n                                    if ((coordinators.length()) > 0) {\r\n                                        sb.append(\"{\");\r\n                                        sb.append(coordinators);\r\n                                        sb.append(\"}\");\r\n                                        if ((resources.length()) > 0) {\r\n                                            sb.append(\",\");\r\n                                        }\r\n                                    }\r\n                                    if ((resources.length()) > 0) {\r\n                                        sb.append(resources);\r\n                                    }\r\n                                    sb.append(\" \");\r\n                                }\r\n                                res = sb.toString();\r\n                            } else\r\n                                if (propertyID.equals(TaskProperties.ID_TASK_ID)) {\r\n                                    sb.append(\"# \").append(task.getTaskID());\r\n                                    res = sb.toString();\r\n                                } else\r\n                                    if (propertyID.equals(TaskProperties.ID_TASK_PREDECESSORS)) {\r\n                                        TaskDependency[] dep = task.getDependenciesAsDependant().toArray();\r\n                                        int i = 0;\r\n                                        if ((dep != null) && ((dep.length) > 0)) {\r\n                                            for (i = 0; i < ((dep.length) - 1); i++)\r\n                                                sb.append(((dep[i].getDependee().getTaskID()) + \", \"));\r\n\r\n                                            sb.append(dep[i].getDependee().getTaskID());\r\n                                        }\r\n                                        res = sb.toString();\r\n                                    } else {\r\n                                        res = task.getCustomValues().getValue(propertyID);\r\n                                    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    return res;\r\n}"},
 {"id":1147, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":575, "classname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "methodid":4542, "methodname":"net.sourceforge.ganttproject.task.TaskSelectionManager.addTask(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n * Adds <code>task</code> to the selected tasks.\r\n *\r\n * @param task\r\n * \t\tA task to add to the selected tasks.\r\n */\r\npublic void addTask(Task task) {\r\n    if (!(selectedTasks.contains(task))) {\r\n        selectedTasks.add(task);\r\n        fireSelectionChanged();\r\n    }\r\n}"},
 {"id":1148, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":575, "classname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "methodid":4551, "methodname":"net.sourceforge.ganttproject.task.TaskSelectionManager.removeTask(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n * Removes <code>task</code> from the selected tasks;\r\n *\r\n * @param task\r\n * \t\tA task to remove from the selected tasks.\r\n */\r\npublic void removeTask(Task task) {\r\n    if (selectedTasks.contains(task)) {\r\n        selectedTasks.remove(task);\r\n        fireSelectionChanged();\r\n    }\r\n}"},
 {"id":1149, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":575, "classname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "methodid":4549, "methodname":"net.sourceforge.ganttproject.task.TaskSelectionManager.isTaskSelected(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"/**\r\n * Returns <code>true</code> if <code>task</code> is selected,\r\n * <code>false</code> otherwise.\r\n *\r\n * @param task\r\n * \t\tThe task to test.\r\n * @return <code>true</code> if <code>task</code> is selected,\r\n<code>false</code> otherwise.\r\n */\r\npublic boolean isTaskSelected(Task task) {\r\n    return selectedTasks.contains(task);\r\n}"},
 {"id":1150, "parametername":"TaskSelectionManager.Listener listener", "parametertype":"net.sourceforge.ganttproject.task.TaskSelectionManager$Listener", "parameterclass":574, "classid":575, "classname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "methodid":4541, "methodname":"net.sourceforge.ganttproject.task.TaskSelectionManager.addSelectionListener(net.sourceforge.ganttproject.task.TaskSelectionManager$Listener)", "isreturn":0, "sourcecode":"public void addSelectionListener(TaskSelectionManager.Listener listener) {\r\n    myListeners.add(listener);\r\n}"},
 {"id":1151, "parametername":"TaskSelectionManager.Listener listener", "parametertype":"net.sourceforge.ganttproject.task.TaskSelectionManager$Listener", "parameterclass":574, "classid":575, "classname":"net.sourceforge.ganttproject.task.TaskSelectionManager", "methodid":4550, "methodname":"net.sourceforge.ganttproject.task.TaskSelectionManager.removeSelectionListener(net.sourceforge.ganttproject.task.TaskSelectionManager$Listener)", "isreturn":0, "sourcecode":"public void removeSelectionListener(TaskSelectionManager.Listener listener) {\r\n    myListeners.remove(listener);\r\n}"},
 {"id":1152, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":577, "classname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm", "methodid":4559, "methodname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm.run(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public void run(Task task) {\r\n    run(new Task[]{ task });\r\n}"},
 {"id":1153, "parametername":"Task supertask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":577, "classname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm", "methodid":4557, "methodname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm.adjustNestedTasks(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public void adjustNestedTasks(Task supertask) throws TaskDependencyException {\r\n    TaskContainmentHierarchyFacade containmentFacade = createContainmentFacade();\r\n    /* <Task> */\r\n    List nestedTasks = new ArrayList(Arrays.asList(containmentFacade.getNestedTasks(supertask)));\r\n    if ((nestedTasks.size()) == 0) {\r\n        return;\r\n    }\r\n    SortTasksAlgorithm sortAlgorithm = new SortTasksAlgorithm();\r\n    sortAlgorithm.sortTasksByStartDate(nestedTasks);\r\n    Set modifiedTasks = new HashSet();\r\n    for (int i = 0; i < (nestedTasks.size()); i++) {\r\n        Task nextNested = ((Task) (nestedTasks.get(i)));\r\n        if (nextNested.getStart().getTime().before(supertask.getStart().getTime())) {\r\n            TaskMutator mutator = nextNested.createMutatorFixingDuration();\r\n            mutator.setStart(supertask.getStart());\r\n            mutator.commit();\r\n            // \r\n            modifiedTasks.add(nextNested);\r\n        }\r\n        if (nextNested.getEnd().getTime().after(supertask.getEnd().getTime())) {\r\n            TaskMutator mutator = nextNested.createMutatorFixingDuration();\r\n            mutator.shift(supertask.getManager().createLength(supertask.getDuration().getTimeUnit(), nextNested.getEnd().getTime(), supertask.getEnd().getTime()));\r\n            mutator.commit();\r\n            // \r\n            modifiedTasks.add(nextNested);\r\n        }\r\n    }\r\n    run(((Task[]) (modifiedTasks.toArray(new Task[0]))));\r\n    RecalculateTaskScheduleAlgorithm alg = new RecalculateTaskScheduleAlgorithm(this) {\r\n        protected TaskContainmentHierarchyFacade createContainmentFacade() {\r\n            return AdjustTaskBoundsAlgorithm.this.createContainmentFacade();\r\n        }\r\n    };\r\n    alg.run(modifiedTasks);\r\n}"},
 {"id":1154, "parametername":"TaskContainmentHierarchyFacade containmentFacade", "parametertype":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "parameterclass":552, "classid":576, "classname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm$AlgorithmImpl", "methodid":4563, "methodname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm$AlgorithmImpl.recalculateSupertaskScheduleBottomUp(java.util.Set,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "isreturn":0, "sourcecode":"private void recalculateSupertaskScheduleBottomUp(Set supertasks, TaskContainmentHierarchyFacade containmentFacade) {\r\n    for (Iterator it = supertasks.iterator(); it.hasNext();) {\r\n        Task nextSupertask = ((Task) (it.next()));\r\n        recalculateSupertaskSchedule(nextSupertask, containmentFacade);\r\n    }\r\n}"},
 {"id":1155, "parametername":"final Task supertask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":576, "classname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm$AlgorithmImpl", "methodid":4562, "methodname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm$AlgorithmImpl.recalculateSupertaskSchedule(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "isreturn":0, "sourcecode":"private void recalculateSupertaskSchedule(final Task supertask, final TaskContainmentHierarchyFacade containmentFacade) {\r\n    Task[] nested = containmentFacade.getNestedTasks(supertask);\r\n    if ((nested.length) == 0) {\r\n        return;\r\n    }\r\n    GanttCalendar maxEnd = null;\r\n    GanttCalendar minStart = null;\r\n    for (int i = 0; i < (nested.length); i++) {\r\n        Task nextNested = nested[i];\r\n        GanttCalendar nextStart = nextNested.getStart();\r\n        if ((minStart == null) || ((nextStart.compareTo(minStart)) < 0)) {\r\n            minStart = nextStart;\r\n        }\r\n        GanttCalendar nextEnd = nextNested.getEnd();\r\n        if ((maxEnd == null) || ((nextEnd.compareTo(maxEnd)) > 0)) {\r\n            maxEnd = nextEnd;\r\n        }\r\n    }\r\n    TaskMutator mutator = supertask.createMutator();\r\n    if ((minStart.compareTo(supertask.getStart())) != 0) {\r\n        // System.err.println(\"recalculating supertask=\"+supertask.getTaskID()+\" start=\"+minStart);\r\n        // modifyTaskStart(supertask, minStart);\r\n        mutator.setStart(minStart);\r\n        myModifiedTasks.add(supertask);\r\n    }\r\n    if ((maxEnd.compareTo(supertask.getEnd())) != 0) {\r\n        // modifyTaskEnd(supertask, maxEnd);\r\n        mutator.setEnd(maxEnd);\r\n        myModifiedTasks.add(supertask);\r\n    }\r\n    mutator.commit();\r\n}"},
 {"id":1156, "parametername":"final TaskContainmentHierarchyFacade containmentFacade", "parametertype":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "parameterclass":552, "classid":576, "classname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm$AlgorithmImpl", "methodid":4562, "methodname":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm$AlgorithmImpl.recalculateSupertaskSchedule(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "isreturn":0, "sourcecode":"private void recalculateSupertaskSchedule(final Task supertask, final TaskContainmentHierarchyFacade containmentFacade) {\r\n    Task[] nested = containmentFacade.getNestedTasks(supertask);\r\n    if ((nested.length) == 0) {\r\n        return;\r\n    }\r\n    GanttCalendar maxEnd = null;\r\n    GanttCalendar minStart = null;\r\n    for (int i = 0; i < (nested.length); i++) {\r\n        Task nextNested = nested[i];\r\n        GanttCalendar nextStart = nextNested.getStart();\r\n        if ((minStart == null) || ((nextStart.compareTo(minStart)) < 0)) {\r\n            minStart = nextStart;\r\n        }\r\n        GanttCalendar nextEnd = nextNested.getEnd();\r\n        if ((maxEnd == null) || ((nextEnd.compareTo(maxEnd)) > 0)) {\r\n            maxEnd = nextEnd;\r\n        }\r\n    }\r\n    TaskMutator mutator = supertask.createMutator();\r\n    if ((minStart.compareTo(supertask.getStart())) != 0) {\r\n        // System.err.println(\"recalculating supertask=\"+supertask.getTaskID()+\" start=\"+minStart);\r\n        // modifyTaskStart(supertask, minStart);\r\n        mutator.setStart(minStart);\r\n        myModifiedTasks.add(supertask);\r\n    }\r\n    if ((maxEnd.compareTo(supertask.getEnd())) != 0) {\r\n        // modifyTaskEnd(supertask, maxEnd);\r\n        mutator.setEnd(maxEnd);\r\n        myModifiedTasks.add(supertask);\r\n    }\r\n    mutator.commit();\r\n}"},
 {"id":1157, "parametername":"FindPossibleDependeesAlgorithm myFindPossibleDependeesAlgorithm", "parametertype":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithm", "parameterclass":582, "classid":579, "classname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection", "methodid":4568, "methodname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection.-init-(net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithm,net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm,net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm,net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm,net.sourceforge.ganttproject.task.algorithm.ProjectBoundsAlgorithm)", "isreturn":0, "sourcecode":"public AlgorithmCollection(FindPossibleDependeesAlgorithm myFindPossibleDependeesAlgorithm, RecalculateTaskScheduleAlgorithm recalculateTaskScheduleAlgorithm, AdjustTaskBoundsAlgorithm adjustTaskBoundsAlgorithm, RecalculateTaskCompletionPercentageAlgorithm completionPercentageAlgorithm, ProjectBoundsAlgorithm projectBoundsAlgorithm) {\r\n    this.myFindPossibleDependeesAlgorithm = myFindPossibleDependeesAlgorithm;\r\n    myRecalculateTaskScheduleAlgorithm = recalculateTaskScheduleAlgorithm;\r\n    myAdjustTaskBoundsAlgorithm = adjustTaskBoundsAlgorithm;\r\n    myCompletionPercentageAlgorithm = completionPercentageAlgorithm;\r\n    myProjectBoundsAlgorithm = projectBoundsAlgorithm;\r\n    myShiftTaskTreeAlgorithm = new ShiftTaskTreeAlgorithm();\r\n}"},
 {"id":1158, "parametername":"RecalculateTaskScheduleAlgorithm recalculateTaskScheduleAlgorithm", "parametertype":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "parameterclass":587, "classid":579, "classname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection", "methodid":4568, "methodname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection.-init-(net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithm,net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm,net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm,net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm,net.sourceforge.ganttproject.task.algorithm.ProjectBoundsAlgorithm)", "isreturn":0, "sourcecode":"public AlgorithmCollection(FindPossibleDependeesAlgorithm myFindPossibleDependeesAlgorithm, RecalculateTaskScheduleAlgorithm recalculateTaskScheduleAlgorithm, AdjustTaskBoundsAlgorithm adjustTaskBoundsAlgorithm, RecalculateTaskCompletionPercentageAlgorithm completionPercentageAlgorithm, ProjectBoundsAlgorithm projectBoundsAlgorithm) {\r\n    this.myFindPossibleDependeesAlgorithm = myFindPossibleDependeesAlgorithm;\r\n    myRecalculateTaskScheduleAlgorithm = recalculateTaskScheduleAlgorithm;\r\n    myAdjustTaskBoundsAlgorithm = adjustTaskBoundsAlgorithm;\r\n    myCompletionPercentageAlgorithm = completionPercentageAlgorithm;\r\n    myProjectBoundsAlgorithm = projectBoundsAlgorithm;\r\n    myShiftTaskTreeAlgorithm = new ShiftTaskTreeAlgorithm();\r\n}"},
 {"id":1159, "parametername":"AdjustTaskBoundsAlgorithm adjustTaskBoundsAlgorithm", "parametertype":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm", "parameterclass":577, "classid":579, "classname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection", "methodid":4568, "methodname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection.-init-(net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithm,net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm,net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm,net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm,net.sourceforge.ganttproject.task.algorithm.ProjectBoundsAlgorithm)", "isreturn":0, "sourcecode":"public AlgorithmCollection(FindPossibleDependeesAlgorithm myFindPossibleDependeesAlgorithm, RecalculateTaskScheduleAlgorithm recalculateTaskScheduleAlgorithm, AdjustTaskBoundsAlgorithm adjustTaskBoundsAlgorithm, RecalculateTaskCompletionPercentageAlgorithm completionPercentageAlgorithm, ProjectBoundsAlgorithm projectBoundsAlgorithm) {\r\n    this.myFindPossibleDependeesAlgorithm = myFindPossibleDependeesAlgorithm;\r\n    myRecalculateTaskScheduleAlgorithm = recalculateTaskScheduleAlgorithm;\r\n    myAdjustTaskBoundsAlgorithm = adjustTaskBoundsAlgorithm;\r\n    myCompletionPercentageAlgorithm = completionPercentageAlgorithm;\r\n    myProjectBoundsAlgorithm = projectBoundsAlgorithm;\r\n    myShiftTaskTreeAlgorithm = new ShiftTaskTreeAlgorithm();\r\n}"},
 {"id":1160, "parametername":"RecalculateTaskCompletionPercentageAlgorithm completionPercentageAlgorithm", "parametertype":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm", "parameterclass":586, "classid":579, "classname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection", "methodid":4568, "methodname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection.-init-(net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithm,net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm,net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm,net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm,net.sourceforge.ganttproject.task.algorithm.ProjectBoundsAlgorithm)", "isreturn":0, "sourcecode":"public AlgorithmCollection(FindPossibleDependeesAlgorithm myFindPossibleDependeesAlgorithm, RecalculateTaskScheduleAlgorithm recalculateTaskScheduleAlgorithm, AdjustTaskBoundsAlgorithm adjustTaskBoundsAlgorithm, RecalculateTaskCompletionPercentageAlgorithm completionPercentageAlgorithm, ProjectBoundsAlgorithm projectBoundsAlgorithm) {\r\n    this.myFindPossibleDependeesAlgorithm = myFindPossibleDependeesAlgorithm;\r\n    myRecalculateTaskScheduleAlgorithm = recalculateTaskScheduleAlgorithm;\r\n    myAdjustTaskBoundsAlgorithm = adjustTaskBoundsAlgorithm;\r\n    myCompletionPercentageAlgorithm = completionPercentageAlgorithm;\r\n    myProjectBoundsAlgorithm = projectBoundsAlgorithm;\r\n    myShiftTaskTreeAlgorithm = new ShiftTaskTreeAlgorithm();\r\n}"},
 {"id":1161, "parametername":"ProjectBoundsAlgorithm projectBoundsAlgorithm", "parametertype":"net.sourceforge.ganttproject.task.algorithm.ProjectBoundsAlgorithm", "parameterclass":585, "classid":579, "classname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection", "methodid":4568, "methodname":"net.sourceforge.ganttproject.task.algorithm.AlgorithmCollection.-init-(net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithm,net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm,net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm,net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm,net.sourceforge.ganttproject.task.algorithm.ProjectBoundsAlgorithm)", "isreturn":0, "sourcecode":"public AlgorithmCollection(FindPossibleDependeesAlgorithm myFindPossibleDependeesAlgorithm, RecalculateTaskScheduleAlgorithm recalculateTaskScheduleAlgorithm, AdjustTaskBoundsAlgorithm adjustTaskBoundsAlgorithm, RecalculateTaskCompletionPercentageAlgorithm completionPercentageAlgorithm, ProjectBoundsAlgorithm projectBoundsAlgorithm) {\r\n    this.myFindPossibleDependeesAlgorithm = myFindPossibleDependeesAlgorithm;\r\n    myRecalculateTaskScheduleAlgorithm = recalculateTaskScheduleAlgorithm;\r\n    myAdjustTaskBoundsAlgorithm = adjustTaskBoundsAlgorithm;\r\n    myCompletionPercentageAlgorithm = completionPercentageAlgorithm;\r\n    myProjectBoundsAlgorithm = projectBoundsAlgorithm;\r\n    myShiftTaskTreeAlgorithm = new ShiftTaskTreeAlgorithm();\r\n}"},
 {"id":1162, "parametername":"TaskNode root", "parametertype":"net.sourceforge.ganttproject.task.TaskNode", "parameterclass":572, "classid":581, "classname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl", "methodid":4576, "methodname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl.-init-(net.sourceforge.ganttproject.task.TaskNode,net.sourceforge.ganttproject.calendar.GPCalendar)", "isreturn":0, "sourcecode":"public CriticalPathAlgorithmImpl(TaskNode root, GPCalendar cal) {\r\n    this.root = root;\r\n    this.calendar = cal;\r\n}"},
 {"id":1163, "parametername":"GPCalendar cal", "parametertype":"net.sourceforge.ganttproject.calendar.GPCalendar", "parameterclass":146, "classid":581, "classname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl", "methodid":4576, "methodname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl.-init-(net.sourceforge.ganttproject.task.TaskNode,net.sourceforge.ganttproject.calendar.GPCalendar)", "isreturn":0, "sourcecode":"public CriticalPathAlgorithmImpl(TaskNode root, GPCalendar cal) {\r\n    this.root = root;\r\n    this.calendar = cal;\r\n}"},
 {"id":1164, "parametername":"Task successor", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":581, "classname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl", "methodid":4577, "methodname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl.checkCriticalTasks(net.sourceforge.ganttproject.task.Task,java.util.List)", "isreturn":0, "sourcecode":"/**\r\n * Recursive method that adds critical task among predecessors of\r\n * <code>successor</code> in <code>criticalTasksList</code>\r\n *\r\n * @param successor\r\n * \t\tThe start task.\r\n * @param criticalTasksList\r\n * \t\tThe list in which critical tasks should be added.\r\n */\r\nprivate void checkCriticalTasks(Task successor, List criticalTasksList) {\r\n    TaskDependency[] rel = successor.getDependenciesAsDependant().toArray();\r\n    for (int i = 0; i < (rel.length); i++) {\r\n        Task t = rel[i].getDependee();\r\n        if (((t.getEnd().compareTo(successor.getStart())) == 0) || (CriticalPathAlgorithmImpl.isIntervalNonWorking(t.getEnd(), successor.getStart(), calendar))) {\r\n            criticalTasksList.add(t);\r\n            checkCriticalTasks(t, criticalTasksList);\r\n            // System.out.println(\"critical \" + t);\r\n        }\r\n        // else\r\n        // System.out.println(\"non critical \" + t);\r\n    }\r\n}"},
 {"id":1165, "parametername":"GanttCalendar d1", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":581, "classname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl", "methodid":4580, "methodname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl.isIntervalNonWorking(net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.calendar.GPCalendar)", "isreturn":0, "sourcecode":"private static boolean isIntervalNonWorking(GanttCalendar d1, GanttCalendar d2, GPCalendar cal) {\r\n    while ((d1.before(d2)) && ((cal.getWeekDayType(d1.getDayWeek())) != (GPCalendar.DayType.WORKING)))\r\n        d1.add(1);\r\n\r\n    return d1.equals(d2);\r\n}"},
 {"id":1166, "parametername":"GanttCalendar d2", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":581, "classname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl", "methodid":4580, "methodname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl.isIntervalNonWorking(net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.calendar.GPCalendar)", "isreturn":0, "sourcecode":"private static boolean isIntervalNonWorking(GanttCalendar d1, GanttCalendar d2, GPCalendar cal) {\r\n    while ((d1.before(d2)) && ((cal.getWeekDayType(d1.getDayWeek())) != (GPCalendar.DayType.WORKING)))\r\n        d1.add(1);\r\n\r\n    return d1.equals(d2);\r\n}"},
 {"id":1167, "parametername":"GPCalendar cal", "parametertype":"net.sourceforge.ganttproject.calendar.GPCalendar", "parameterclass":146, "classid":581, "classname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl", "methodid":4580, "methodname":"net.sourceforge.ganttproject.task.algorithm.CriticalPathAlgorithmImpl.isIntervalNonWorking(net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.calendar.GPCalendar)", "isreturn":0, "sourcecode":"private static boolean isIntervalNonWorking(GanttCalendar d1, GanttCalendar d2, GPCalendar cal) {\r\n    while ((d1.before(d2)) && ((cal.getWeekDayType(d1.getDayWeek())) != (GPCalendar.DayType.WORKING)))\r\n        d1.add(1);\r\n\r\n    return d1.equals(d2);\r\n}"},
 {"id":1168, "parametername":"Task dependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":582, "classname":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithm", "methodid":4581, "methodname":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithm.run(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"Task[] run(Task dependant);"},
 {"id":1169, "parametername":"Task dependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":583, "classname":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithmImpl", "methodid":4585, "methodname":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithmImpl.run(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public Task[] run(Task dependant) {\r\n    myContainmentFacade = createContainmentFacade();\r\n    ArrayList result = new ArrayList();\r\n    Task root = myContainmentFacade.getRootTask();\r\n    Task[] nestedTasks = myContainmentFacade.getNestedTasks(root);\r\n    processTask(nestedTasks, dependant, result);\r\n    return ((Task[]) (result.toArray(new Task[0])));\r\n}"},
 {"id":1170, "parametername":"Task dependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":583, "classname":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithmImpl", "methodid":4584, "methodname":"net.sourceforge.ganttproject.task.algorithm.FindPossibleDependeesAlgorithmImpl.processTask(net.sourceforge.ganttproject.task.Task[],net.sourceforge.ganttproject.task.Task,java.util.ArrayList)", "isreturn":0, "sourcecode":"private void processTask(Task[] taskList, Task dependant, ArrayList result) {\r\n    for (int i = 0; i < (taskList.length); i++) {\r\n        Task next = taskList[i];\r\n        if (!(next.equals(dependant))) {\r\n            Task[] nested = myContainmentFacade.getNestedTasks(next);\r\n            // if (nested.length==0) {\r\n            result.add(next);\r\n            // }\r\n            // else {\r\n            processTask(nested, dependant, result);\r\n            // }\r\n        }\r\n    }\r\n}"},
 {"id":1171, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":586, "classname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm", "methodid":4594, "methodname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm.run(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public void run(Task task) {\r\n    TaskContainmentHierarchyFacade facade = createContainmentFacade();\r\n    recalculateSupertaskCompletionPercentageBottomUp(task, facade);\r\n}"},
 {"id":1172, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":586, "classname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm", "methodid":4593, "methodname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm.recalculateSupertaskCompletionPercentageBottomUp(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "isreturn":0, "sourcecode":"private void recalculateSupertaskCompletionPercentageBottomUp(Task task, TaskContainmentHierarchyFacade facade) {\r\n    while (task != null) {\r\n        recalculateSupertaskCompletionPercentage(task, facade);\r\n        task = facade.getContainer(task);\r\n    } \r\n}"},
 {"id":1173, "parametername":"TaskContainmentHierarchyFacade facade", "parametertype":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "parameterclass":552, "classid":586, "classname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm", "methodid":4593, "methodname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm.recalculateSupertaskCompletionPercentageBottomUp(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "isreturn":0, "sourcecode":"private void recalculateSupertaskCompletionPercentageBottomUp(Task task, TaskContainmentHierarchyFacade facade) {\r\n    while (task != null) {\r\n        recalculateSupertaskCompletionPercentage(task, facade);\r\n        task = facade.getContainer(task);\r\n    } \r\n}"},
 {"id":1174, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":586, "classname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm", "methodid":4592, "methodname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm.recalculateSupertaskCompletionPercentage(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "isreturn":0, "sourcecode":"private void recalculateSupertaskCompletionPercentage(Task task, TaskContainmentHierarchyFacade facade) {\r\n    Task[] nestedTasks = facade.getNestedTasks(task);\r\n    if ((nestedTasks.length) > 0) {\r\n        int completedDays = 0;\r\n        long plannedDays = 0;\r\n        for (int i = 0; i < (nestedTasks.length); i++) {\r\n            Task next = nestedTasks[i];\r\n            long nextDuration = next.getDuration().getLength();\r\n            completedDays += nextDuration * (next.getCompletionPercentage());\r\n            plannedDays += nextDuration;\r\n        }\r\n        int completionPercentage = ((int) (completedDays / plannedDays));\r\n        task.setCompletionPercentage(completionPercentage);\r\n    }\r\n}"},
 {"id":1175, "parametername":"TaskContainmentHierarchyFacade facade", "parametertype":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "parameterclass":552, "classid":586, "classname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm", "methodid":4592, "methodname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskCompletionPercentageAlgorithm.recalculateSupertaskCompletionPercentage(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade)", "isreturn":0, "sourcecode":"private void recalculateSupertaskCompletionPercentage(Task task, TaskContainmentHierarchyFacade facade) {\r\n    Task[] nestedTasks = facade.getNestedTasks(task);\r\n    if ((nestedTasks.length) > 0) {\r\n        int completedDays = 0;\r\n        long plannedDays = 0;\r\n        for (int i = 0; i < (nestedTasks.length); i++) {\r\n            Task next = nestedTasks[i];\r\n            long nextDuration = next.getDuration().getLength();\r\n            completedDays += nextDuration * (next.getCompletionPercentage());\r\n            plannedDays += nextDuration;\r\n        }\r\n        int completionPercentage = ((int) (completedDays / plannedDays));\r\n        task.setCompletionPercentage(completionPercentage);\r\n    }\r\n}"},
 {"id":1176, "parametername":"AdjustTaskBoundsAlgorithm adjuster", "parametertype":"net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm", "parameterclass":577, "classid":587, "classname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "methodid":4595, "methodname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.-init-(net.sourceforge.ganttproject.task.algorithm.AdjustTaskBoundsAlgorithm)", "isreturn":0, "sourcecode":"public RecalculateTaskScheduleAlgorithm(AdjustTaskBoundsAlgorithm adjuster) {\r\n    myAdjuster = adjuster;\r\n}"},
 {"id":1177, "parametername":"Task changedTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":587, "classname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "methodid":4605, "methodname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.run(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public void run(Task changedTask) throws TaskDependencyException {\r\n    if (!(isEnabled())) {\r\n        return;\r\n    }\r\n    isRunning = true;\r\n    (myEntranceCounter)++;\r\n    myMarkedTasks.clear();\r\n    buildDistanceGraph(changedTask);\r\n    fulfilDependencies();\r\n    myDistance2dependencyList.clear();\r\n    myModifiedTasks.add(changedTask);\r\n    myAdjuster.run(((Task[]) (myModifiedTasks.toArray(new Task[0]))));\r\n    myDistance2dependencyList.clear();\r\n    myModifiedTasks.clear();\r\n    (myEntranceCounter)--;\r\n    isRunning = false;\r\n}"},
 {"id":1178, "parametername":"TaskContainmentHierarchyFacade facade", "parametertype":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade", "parameterclass":552, "classid":587, "classname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "methodid":4606, "methodname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.traverse(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade,net.sourceforge.ganttproject.task.Task,java.util.Set)", "isreturn":0, "sourcecode":"private void traverse(TaskContainmentHierarchyFacade facade, Task root, Set independentTasks) {\r\n    TaskDependency[] asDependant = root.getDependenciesAsDependant().toArray();\r\n    if ((asDependant.length) == 0) {\r\n        independentTasks.add(root);\r\n    }\r\n    Task[] nestedTasks = facade.getNestedTasks(root);\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        traverse(facade, nestedTasks[i], independentTasks);\r\n    }\r\n}"},
 {"id":1179, "parametername":"Task root", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":587, "classname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "methodid":4606, "methodname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.traverse(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade,net.sourceforge.ganttproject.task.Task,java.util.Set)", "isreturn":0, "sourcecode":"private void traverse(TaskContainmentHierarchyFacade facade, Task root, Set independentTasks) {\r\n    TaskDependency[] asDependant = root.getDependenciesAsDependant().toArray();\r\n    if ((asDependant.length) == 0) {\r\n        independentTasks.add(root);\r\n    }\r\n    Task[] nestedTasks = facade.getNestedTasks(root);\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        traverse(facade, nestedTasks[i], independentTasks);\r\n    }\r\n}"},
 {"id":1180, "parametername":"TaskDependency dependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":587, "classname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "methodid":4599, "methodname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.fulfilConstraints(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"private void fulfilConstraints(TaskDependency dependency) throws TaskDependencyException {\r\n    Task dependant = dependency.getDependant();\r\n    TaskDependency[] depsAsDependant = dependant.getDependenciesAsDependant().toArray();\r\n    if ((depsAsDependant.length) > 0) {\r\n        ArrayList startLaterVariations = new ArrayList();\r\n        ArrayList startEarlierVariations = new ArrayList();\r\n        ArrayList noVariations = new ArrayList();\r\n        // \r\n        for (int i = 0; i < (depsAsDependant.length); i++) {\r\n            TaskDependency next = depsAsDependant[i];\r\n            TaskDependencyConstraint.Collision nextCollision = next.getConstraint().getCollision();\r\n            GanttCalendar acceptableStart = nextCollision.getAcceptableStart();\r\n            switch (nextCollision.getVariation()) {\r\n                case TaskDependencyConstraint.Collision.START_EARLIER_VARIATION :\r\n                    {\r\n                        startEarlierVariations.add(acceptableStart);\r\n                        break;\r\n                    }\r\n                case TaskDependencyConstraint.Collision.START_LATER_VARIATION :\r\n                    {\r\n                        startLaterVariations.add(acceptableStart);\r\n                        break;\r\n                    }\r\n                case TaskDependencyConstraint.Collision.NO_VARIATION :\r\n                    {\r\n                        noVariations.add(acceptableStart);\r\n                        break;\r\n                    }\r\n            }\r\n        }\r\n        if ((noVariations.size()) > 1) {\r\n            throw new TaskDependencyException(((((\"Failed to fulfill constraints of task=\" + dependant) + \". There are \") + (noVariations.size())) + \" constraints which dont allow for task start variation\"));\r\n        }\r\n        // \r\n        Collections.sort(startEarlierVariations);\r\n        Collections.sort(startLaterVariations);\r\n        // \r\n        GanttCalendar solution;\r\n        GanttCalendar earliestStart = ((GanttCalendar) (((startEarlierVariations.size()) == 0) ? null : startEarlierVariations.get(0)));\r\n        GanttCalendar latestStart = ((GanttCalendar) (((startLaterVariations.size()) >= 0) ? startLaterVariations.get(((startLaterVariations.size()) - 1)) : null));\r\n        if ((earliestStart == null) && (latestStart == null)) {\r\n            solution = dependant.getStart();\r\n        } else {\r\n            if ((earliestStart == null) && (latestStart != null)) {\r\n                earliestStart = latestStart;\r\n            } else\r\n                if ((earliestStart != null) && (latestStart == null)) {\r\n                    latestStart = earliestStart;\r\n                }\r\n\r\n            if ((earliestStart.compareTo(latestStart)) < 0) {\r\n                throw new TaskDependencyException((\"Failed to fulfill constraints of task=\" + dependant));\r\n            }\r\n        }\r\n        if ((noVariations.size()) > 0) {\r\n            GanttCalendar notVariableStart = ((GanttCalendar) (noVariations.get(0)));\r\n            if (((notVariableStart.compareTo(earliestStart)) < 0) || ((notVariableStart.compareTo(latestStart)) > 0)) {\r\n                throw new TaskDependencyException((\"Failed to fulfill constraints of task=\" + dependant));\r\n            }\r\n            solution = notVariableStart;\r\n        } else {\r\n            solution = latestStart;\r\n        }\r\n        // \r\n        modifyTaskStart(dependant, solution);\r\n    }\r\n}"},
 {"id":1181, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":587, "classname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "methodid":4602, "methodname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.modifyTaskStart(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"private void modifyTaskStart(Task task, GanttCalendar newStart) {\r\n    TaskMutator mutator = task.createMutatorFixingDuration();\r\n    mutator.setStart(newStart);\r\n    mutator.commit();\r\n    myModifiedTasks.add(task);\r\n}"},
 {"id":1182, "parametername":"GanttCalendar newStart", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":587, "classname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "methodid":4602, "methodname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.modifyTaskStart(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"private void modifyTaskStart(Task task, GanttCalendar newStart) {\r\n    TaskMutator mutator = task.createMutatorFixingDuration();\r\n    mutator.setStart(newStart);\r\n    mutator.commit();\r\n    myModifiedTasks.add(task);\r\n}"},
 {"id":1183, "parametername":"Task changedTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":587, "classname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm", "methodid":4596, "methodname":"net.sourceforge.ganttproject.task.algorithm.RecalculateTaskScheduleAlgorithm.buildDistanceGraph(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"private void buildDistanceGraph(Task changedTask) {\r\n    TaskDependency[] depsAsDependee = changedTask.getDependenciesAsDependee().toArray();\r\n    buildDistanceGraph(depsAsDependee, 1);\r\n}"},
 {"id":1184, "parametername":"Task rootTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":588, "classname":"net.sourceforge.ganttproject.task.algorithm.ShiftTaskTreeAlgorithm", "methodid":4608, "methodname":"net.sourceforge.ganttproject.task.algorithm.ShiftTaskTreeAlgorithm.run(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"public void run(Task rootTask, TaskLength shift) {\r\n    shiftTask(rootTask, shift);\r\n}"},
 {"id":1185, "parametername":"TaskLength shift", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":588, "classname":"net.sourceforge.ganttproject.task.algorithm.ShiftTaskTreeAlgorithm", "methodid":4608, "methodname":"net.sourceforge.ganttproject.task.algorithm.ShiftTaskTreeAlgorithm.run(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"public void run(Task rootTask, TaskLength shift) {\r\n    shiftTask(rootTask, shift);\r\n}"},
 {"id":1186, "parametername":"Task rootTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":588, "classname":"net.sourceforge.ganttproject.task.algorithm.ShiftTaskTreeAlgorithm", "methodid":4609, "methodname":"net.sourceforge.ganttproject.task.algorithm.ShiftTaskTreeAlgorithm.shiftTask(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"private void shiftTask(Task rootTask, TaskLength shift) {\r\n    rootTask.shift(shift);\r\n    Task[] nestedTasks = rootTask.getManager().getTaskHierarchy().getNestedTasks(rootTask);\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        Task next = nestedTasks[i];\r\n        shiftTask(next, shift);\r\n    }\r\n}"},
 {"id":1187, "parametername":"TaskLength shift", "parametertype":"net.sourceforge.ganttproject.task.TaskLength", "parameterclass":562, "classid":588, "classname":"net.sourceforge.ganttproject.task.algorithm.ShiftTaskTreeAlgorithm", "methodid":4609, "methodname":"net.sourceforge.ganttproject.task.algorithm.ShiftTaskTreeAlgorithm.shiftTask(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.TaskLength)", "isreturn":0, "sourcecode":"private void shiftTask(Task rootTask, TaskLength shift) {\r\n    rootTask.shift(shift);\r\n    Task[] nestedTasks = rootTask.getManager().getTaskHierarchy().getNestedTasks(rootTask);\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        Task next = nestedTasks[i];\r\n        shiftTask(next, shift);\r\n    }\r\n}"},
 {"id":1188, "parametername":"TaskDependency dep", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":590, "classname":"net.sourceforge.ganttproject.task.dependency.EventDispatcher", "methodid":4613, "methodname":"net.sourceforge.ganttproject.task.dependency.EventDispatcher.fireDependencyAdded(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"void fireDependencyAdded(TaskDependency dep);"},
 {"id":1189, "parametername":"TaskDependency dep", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":590, "classname":"net.sourceforge.ganttproject.task.dependency.EventDispatcher", "methodid":4614, "methodname":"net.sourceforge.ganttproject.task.dependency.EventDispatcher.fireDependencyRemoved(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"void fireDependencyRemoved(TaskDependency dep);"},
 {"id":1190, "parametername":"TaskManager taskManager", "parametertype":"net.sourceforge.ganttproject.task.TaskManager", "parameterclass":565, "classid":591, "classname":"net.sourceforge.ganttproject.task.dependency.LoopDetector", "methodid":4615, "methodname":"net.sourceforge.ganttproject.task.dependency.LoopDetector.-init-(net.sourceforge.ganttproject.task.TaskManager)", "isreturn":0, "sourcecode":"public LoopDetector(TaskManager taskManager) {\r\n    myTaskManager = taskManager;\r\n}"},
 {"id":1191, "parametername":"TaskDependency dep", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":591, "classname":"net.sourceforge.ganttproject.task.dependency.LoopDetector", "methodid":4617, "methodname":"net.sourceforge.ganttproject.task.dependency.LoopDetector.isLooping(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"public boolean isLooping(TaskDependency dep) {\r\n    Set checked = new LinkedHashSet();\r\n    checked.add(dep.getDependee());\r\n    return isLooping(checked, dep.getDependant());\r\n}"},
 {"id":1192, "parametername":"Task incoming", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":591, "classname":"net.sourceforge.ganttproject.task.dependency.LoopDetector", "methodid":4616, "methodname":"net.sourceforge.ganttproject.task.dependency.LoopDetector.isLooping(java.util.Set,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"private boolean isLooping(Set checked, Task incoming) {\r\n    boolean result = false;\r\n    Set newChecked = new LinkedHashSet(checked);\r\n    newChecked.add(incoming);\r\n    TaskDependency[] nextDeps = incoming.getDependenciesAsDependee().toArray();\r\n    for (int i = 0; (!result) && (i < (nextDeps.length)); i++) {\r\n        if (!(newChecked.contains(nextDeps[i].getDependant()))) {\r\n            result = isLooping(newChecked, nextDeps[i].getDependant());\r\n        } else {\r\n            result = true;\r\n        }\r\n    }\r\n    if (!result) {\r\n        Task supertask = myTaskManager.getTaskHierarchy().getContainer(incoming);\r\n        if ((supertask != null) && ((myTaskManager.getTaskHierarchy().getRootTask()) != supertask)) {\r\n            result = isLooping(newChecked, supertask);\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":1193, "parametername":"Task dependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":592, "classname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection", "methodid":4619, "methodname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"TaskDependency createDependency(Task dependant, Task dependee) throws TaskDependencyException;"},
 {"id":1194, "parametername":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":592, "classname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection", "methodid":4619, "methodname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":1, "sourcecode":"TaskDependency createDependency(Task dependant, Task dependee) throws TaskDependencyException;"},
 {"id":1195, "parametername":"Task dependee", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":592, "classname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection", "methodid":4619, "methodname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"TaskDependency createDependency(Task dependant, Task dependee) throws TaskDependencyException;"},
 {"id":1196, "parametername":"Task dependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":592, "classname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection", "methodid":4620, "methodname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":0, "sourcecode":"TaskDependency createDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) throws TaskDependencyException;"},
 {"id":1197, "parametername":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":592, "classname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection", "methodid":4620, "methodname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":1, "sourcecode":"TaskDependency createDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) throws TaskDependencyException;"},
 {"id":1198, "parametername":"Task dependee", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":592, "classname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection", "methodid":4620, "methodname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":0, "sourcecode":"TaskDependency createDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) throws TaskDependencyException;"},
 {"id":1199, "parametername":"TaskDependencyConstraint constraint", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint", "parameterclass":606, "classid":592, "classname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection", "methodid":4620, "methodname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":0, "sourcecode":"TaskDependency createDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) throws TaskDependencyException;"},
 {"id":1200, "parametername":"TaskDependency dependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":592, "classname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection", "methodid":4621, "methodname":"net.sourceforge.ganttproject.task.dependency.MutableTaskDependencyCollection.deleteDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"void deleteDependency(TaskDependency dependency);"},
 {"id":1201, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":593, "classname":"net.sourceforge.ganttproject.task.dependency.RangeSearchFromKey", "methodid":4622, "methodname":"net.sourceforge.ganttproject.task.dependency.RangeSearchFromKey.-init-(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public RangeSearchFromKey(Task task) {\r\n    super((-1), task.getTaskID(), 0);\r\n}"},
 {"id":1202, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":594, "classname":"net.sourceforge.ganttproject.task.dependency.RangeSearchToKey", "methodid":4623, "methodname":"net.sourceforge.ganttproject.task.dependency.RangeSearchToKey.-init-(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public RangeSearchToKey(Task task) {\r\n    super(3, task.getTaskID(), 0);\r\n}"},
 {"id":1203, "parametername":"TaskDependencyImpl taskDependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "parameterclass":608, "classid":595, "classname":"net.sourceforge.ganttproject.task.dependency.SearchKey", "methodid":4624, "methodname":"net.sourceforge.ganttproject.task.dependency.SearchKey.-init-(int,net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl)", "isreturn":0, "sourcecode":"public SearchKey(int type, TaskDependencyImpl taskDependency) {\r\n    myType = type;\r\n    Task firstTask;\r\n    Task secondTask;\r\n    switch (type) {\r\n        case SearchKey.DEPENDANT :\r\n            {\r\n                firstTask = taskDependency.getDependant();\r\n                secondTask = taskDependency.getDependee();\r\n                break;\r\n            }\r\n        case SearchKey.DEPENDEE :\r\n            {\r\n                firstTask = taskDependency.getDependee();\r\n                secondTask = taskDependency.getDependant();\r\n                break;\r\n            }\r\n        default :\r\n            {\r\n                throw new RuntimeException((\"Invalid type=\" + type));\r\n            }\r\n    }\r\n    myFirstTaskID = firstTask.getTaskID();\r\n    mySecondTaskID = secondTask.getTaskID();\r\n}"},
 {"id":1204, "parametername":"TaskDependencyConstraint constraint", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint", "parameterclass":606, "classid":598, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "methodid":4637, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependency.setConstraint(net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":0, "sourcecode":"void setConstraint(TaskDependencyConstraint constraint);"},
 {"id":1205, "parametername":"TaskDependency.Hardness hardness", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness", "parameterclass":597, "classid":598, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "methodid":4639, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependency.setHardness(net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness)", "isreturn":0, "sourcecode":"void setHardness(TaskDependency.Hardness hardness);"},
 {"id":1206, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":599, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection", "methodid":4649, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection.getDependencies(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"TaskDependency[] getDependencies(Task task);"},
 {"id":1207, "parametername":"Task dependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":599, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection", "methodid":4650, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection.getDependenciesAsDependant(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"TaskDependency[] getDependenciesAsDependant(Task dependant);"},
 {"id":1208, "parametername":"Task dependee", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":599, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection", "methodid":4651, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection.getDependenciesAsDependee(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"TaskDependency[] getDependenciesAsDependee(Task dependee);"},
 {"id":1209, "parametername":"Task myDependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":599, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection", "methodid":4646, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection.canCreateDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"boolean canCreateDependency(Task myDependant, Task dependee);"},
 {"id":1210, "parametername":"Task dependee", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":599, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection", "methodid":4646, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection.canCreateDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"boolean canCreateDependency(Task myDependant, Task dependee);"},
 {"id":1211, "parametername":"TaskContainmentHierarchyFacade.Factory taskHierarchyFactory", "parametertype":"net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory", "parameterclass":551, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4652, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.-init-(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.dependency.EventDispatcher)", "isreturn":0, "sourcecode":"public TaskDependencyCollectionImpl(TaskContainmentHierarchyFacade.Factory taskHierarchyFactory, EventDispatcher myEventDispatcher) {\r\n    this.myEventDispatcher = myEventDispatcher;\r\n    myTaskHierarchyFactory = taskHierarchyFactory;\r\n}"},
 {"id":1212, "parametername":"EventDispatcher myEventDispatcher", "parametertype":"net.sourceforge.ganttproject.task.dependency.EventDispatcher", "parameterclass":590, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4652, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.-init-(net.sourceforge.ganttproject.task.TaskContainmentHierarchyFacade$Factory,net.sourceforge.ganttproject.task.dependency.EventDispatcher)", "isreturn":0, "sourcecode":"public TaskDependencyCollectionImpl(TaskContainmentHierarchyFacade.Factory taskHierarchyFactory, EventDispatcher myEventDispatcher) {\r\n    this.myEventDispatcher = myEventDispatcher;\r\n    myTaskHierarchyFactory = taskHierarchyFactory;\r\n}"},
 {"id":1213, "parametername":"TaskDependency myDependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":600, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutationInfo", "methodid":4674, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutationInfo.-init-(net.sourceforge.ganttproject.task.dependency.TaskDependency,int)", "isreturn":0, "sourcecode":"public MutationInfo(TaskDependency myDependency, int myOperation) {\r\n    this.myDependency = myDependency;\r\n    this.myOperation = myOperation;\r\n}"},
 {"id":1214, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4669, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.getDependencies(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public TaskDependency[] getDependencies(Task task) {\r\n    SearchKey fromKey = new RangeSearchFromKey(task);\r\n    SearchKey toKey = new RangeSearchToKey(task);\r\n    SortedMap submap = mySearchKey2dependency.subMap(fromKey, toKey);\r\n    return ((TaskDependency[]) (submap.values().toArray(new TaskDependency[0])));\r\n}"},
 {"id":1215, "parametername":"Task dependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4670, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.getDependenciesAsDependant(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public TaskDependency[] getDependenciesAsDependant(Task dependant) {\r\n    SearchKey fromKey = new SearchKey(SearchKey.DEPENDANT, dependant.getTaskID(), (-1));\r\n    SearchKey toKey = new SearchKey(SearchKey.DEPENDEE, dependant.getTaskID(), (-1));\r\n    SortedMap submap = mySearchKey2dependency.subMap(fromKey, toKey);\r\n    return ((TaskDependency[]) (submap.values().toArray(new TaskDependency[0])));\r\n}"},
 {"id":1216, "parametername":"Task dependee", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4671, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.getDependenciesAsDependee(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public TaskDependency[] getDependenciesAsDependee(Task dependee) {\r\n    SearchKey fromKey = new SearchKey(SearchKey.DEPENDEE, dependee.getTaskID(), (-1));\r\n    SearchKey toKey = new SearchKey(Integer.MAX_VALUE, dependee.getTaskID(), (-1));\r\n    SortedMap submap = mySearchKey2dependency.subMap(fromKey, toKey);\r\n    return ((TaskDependency[]) (submap.values().toArray(new TaskDependency[0])));\r\n}"},
 {"id":1217, "parametername":"Task dependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4661, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee) throws TaskDependencyException {\r\n    return createDependency(dependant, dependee, new FinishStartConstraintImpl());\r\n}"},
 {"id":1218, "parametername":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4661, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":1, "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee) throws TaskDependencyException {\r\n    return createDependency(dependant, dependee, new FinishStartConstraintImpl());\r\n}"},
 {"id":1219, "parametername":"Task dependee", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4661, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee) throws TaskDependencyException {\r\n    return createDependency(dependant, dependee, new FinishStartConstraintImpl());\r\n}"},
 {"id":1220, "parametername":"Task dependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4662, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":0, "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) throws TaskDependencyException {\r\n    TaskDependency result = auxCreateDependency(dependant, dependee, constraint);\r\n    addDependency(result);\r\n    return result;\r\n}"},
 {"id":1221, "parametername":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4662, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":1, "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) throws TaskDependencyException {\r\n    TaskDependency result = auxCreateDependency(dependant, dependee, constraint);\r\n    addDependency(result);\r\n    return result;\r\n}"},
 {"id":1222, "parametername":"Task dependee", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4662, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":0, "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) throws TaskDependencyException {\r\n    TaskDependency result = auxCreateDependency(dependant, dependee, constraint);\r\n    addDependency(result);\r\n    return result;\r\n}"},
 {"id":1223, "parametername":"TaskDependencyConstraint constraint", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint", "parameterclass":606, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4662, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":0, "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) throws TaskDependencyException {\r\n    TaskDependency result = auxCreateDependency(dependant, dependee, constraint);\r\n    addDependency(result);\r\n    return result;\r\n}"},
 {"id":1224, "parametername":"Task dependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4659, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.canCreateDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public boolean canCreateDependency(Task dependant, Task dependee) {\r\n    if (dependant == dependee) {\r\n        return false;\r\n    }\r\n    if (false == (getTaskHierarchy().areUnrelated(dependant, dependee))) {\r\n        return false;\r\n    }\r\n    SearchKey key = new SearchKey(SearchKey.DEPENDANT, dependant.getTaskID(), dependee.getTaskID());\r\n    if (mySearchKey2dependency.containsKey(key)) {\r\n        return false;\r\n    }\r\n    TaskDependency testDep = new TaskDependencyImpl(dependant, dependee, this);\r\n    if (isLooping(testDep)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"},
 {"id":1225, "parametername":"Task dependee", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4659, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.canCreateDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public boolean canCreateDependency(Task dependant, Task dependee) {\r\n    if (dependant == dependee) {\r\n        return false;\r\n    }\r\n    if (false == (getTaskHierarchy().areUnrelated(dependant, dependee))) {\r\n        return false;\r\n    }\r\n    SearchKey key = new SearchKey(SearchKey.DEPENDANT, dependant.getTaskID(), dependee.getTaskID());\r\n    if (mySearchKey2dependency.containsKey(key)) {\r\n        return false;\r\n    }\r\n    TaskDependency testDep = new TaskDependencyImpl(dependant, dependee, this);\r\n    if (isLooping(testDep)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"},
 {"id":1226, "parametername":"TaskDependency dependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4665, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.deleteDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"public void deleteDependency(TaskDependency dependency) {\r\n    delete(dependency);\r\n}"},
 {"id":1227, "parametername":"TaskDependency dependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4667, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.fireChanged(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"void fireChanged(TaskDependency dependency) {\r\n    myEventDispatcher.fireDependencyRemoved(dependency);\r\n    myEventDispatcher.fireDependencyAdded(dependency);\r\n}"},
 {"id":1228, "parametername":"Task dependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":601, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl", "methodid":4679, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee) throws TaskDependencyException {\r\n    return createDependency(dependant, dependee, new FinishFinishConstraintImpl());\r\n}"},
 {"id":1229, "parametername":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":601, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl", "methodid":4679, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":1, "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee) throws TaskDependencyException {\r\n    return createDependency(dependant, dependee, new FinishFinishConstraintImpl());\r\n}"},
 {"id":1230, "parametername":"Task dependee", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":601, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl", "methodid":4679, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee) throws TaskDependencyException {\r\n    return createDependency(dependant, dependee, new FinishFinishConstraintImpl());\r\n}"},
 {"id":1231, "parametername":"Task dependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":601, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl", "methodid":4680, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":0, "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) throws TaskDependencyException {\r\n    TaskDependency result = auxCreateDependency(dependant, dependee, constraint);\r\n    myQueue.put(result, new TaskDependencyCollectionImpl.MutationInfo(result, TaskDependencyCollectionImpl.MutationInfo.ADD));\r\n    return result;\r\n}"},
 {"id":1232, "parametername":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":601, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl", "methodid":4680, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":1, "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) throws TaskDependencyException {\r\n    TaskDependency result = auxCreateDependency(dependant, dependee, constraint);\r\n    myQueue.put(result, new TaskDependencyCollectionImpl.MutationInfo(result, TaskDependencyCollectionImpl.MutationInfo.ADD));\r\n    return result;\r\n}"},
 {"id":1233, "parametername":"Task dependee", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":601, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl", "methodid":4680, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":0, "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) throws TaskDependencyException {\r\n    TaskDependency result = auxCreateDependency(dependant, dependee, constraint);\r\n    myQueue.put(result, new TaskDependencyCollectionImpl.MutationInfo(result, TaskDependencyCollectionImpl.MutationInfo.ADD));\r\n    return result;\r\n}"},
 {"id":1234, "parametername":"TaskDependencyConstraint constraint", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint", "parameterclass":606, "classid":601, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl", "methodid":4680, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl.createDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":0, "sourcecode":"public TaskDependency createDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) throws TaskDependencyException {\r\n    TaskDependency result = auxCreateDependency(dependant, dependee, constraint);\r\n    myQueue.put(result, new TaskDependencyCollectionImpl.MutationInfo(result, TaskDependencyCollectionImpl.MutationInfo.ADD));\r\n    return result;\r\n}"},
 {"id":1235, "parametername":"TaskDependency dependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":601, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl", "methodid":4681, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl$MutatorImpl.deleteDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"public void deleteDependency(TaskDependency dependency) {\r\n    TaskDependencyCollectionImpl.MutationInfo info = ((TaskDependencyCollectionImpl.MutationInfo) (myQueue.get(dependency)));\r\n    if (info == null) {\r\n        myQueue.put(dependency, new TaskDependencyCollectionImpl.MutationInfo(dependency, TaskDependencyCollectionImpl.MutationInfo.DELETE));\r\n    } else\r\n        if ((info.myOperation) == (TaskDependencyCollectionImpl.MutationInfo.ADD)) {\r\n            myQueue.remove(dependency);\r\n        }\r\n\r\n}"},
 {"id":1236, "parametername":"Task dependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4658, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.auxCreateDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":0, "sourcecode":"private TaskDependency auxCreateDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) {\r\n    TaskDependency result = new TaskDependencyImpl(dependant, dependee, this);\r\n    result.setConstraint(constraint);\r\n    result.setDifference(0);\r\n    return result;\r\n}"},
 {"id":1237, "parametername":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4658, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.auxCreateDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":1, "sourcecode":"private TaskDependency auxCreateDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) {\r\n    TaskDependency result = new TaskDependencyImpl(dependant, dependee, this);\r\n    result.setConstraint(constraint);\r\n    result.setDifference(0);\r\n    return result;\r\n}"},
 {"id":1238, "parametername":"Task dependee", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4658, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.auxCreateDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":0, "sourcecode":"private TaskDependency auxCreateDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) {\r\n    TaskDependency result = new TaskDependencyImpl(dependant, dependee, this);\r\n    result.setConstraint(constraint);\r\n    result.setDifference(0);\r\n    return result;\r\n}"},
 {"id":1239, "parametername":"TaskDependencyConstraint constraint", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint", "parameterclass":606, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4658, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.auxCreateDependency(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":0, "sourcecode":"private TaskDependency auxCreateDependency(Task dependant, Task dependee, TaskDependencyConstraint constraint) {\r\n    TaskDependency result = new TaskDependencyImpl(dependant, dependee, this);\r\n    result.setConstraint(constraint);\r\n    result.setDifference(0);\r\n    return result;\r\n}"},
 {"id":1240, "parametername":"TaskDependency dep", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4657, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.addDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"void addDependency(TaskDependency dep) throws TaskDependencyException {\r\n    if (myDependencies.contains(dep)) {\r\n        throw new TaskDependencyException(((\"Dependency=\" + dep) + \" already exists\"));\r\n    }\r\n    if (this.isLooping(dep)) {\r\n        throw new TaskDependencyException(((\"Dependency=\" + dep) + \" is looping\"));\r\n    }\r\n    if (false == (getTaskHierarchy().areUnrelated(dep.getDependant(), dep.getDependee()))) {\r\n        throw new TaskDependencyException(((\"In dependency=\" + dep) + \" one of participants is a supertask of another\"));\r\n    }\r\n    myDependencies.add(dep);\r\n    // \r\n    mySearchKey2dependency.put(new SearchKey(SearchKey.DEPENDANT, ((TaskDependencyImpl) (dep))), dep);\r\n    mySearchKey2dependency.put(new SearchKey(SearchKey.DEPENDEE, ((TaskDependencyImpl) (dep))), dep);\r\n    myEventDispatcher.fireDependencyAdded(dep);\r\n}"},
 {"id":1241, "parametername":"TaskDependency dep", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4673, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.isLooping(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"boolean isLooping(TaskDependency dep) {\r\n    LoopDetector detector = new LoopDetector(dep.getDependant().getManager());\r\n    return detector.isLooping(dep);\r\n}"},
 {"id":1242, "parametername":"TaskDependency dep", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4655, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl._isLooping(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"boolean _isLooping(TaskDependency dep) {\r\n    Set tasksInvolved = new HashSet();\r\n    tasksInvolved.add(dep.getDependee());\r\n    return _isLooping(dep, tasksInvolved);\r\n}"},
 {"id":1243, "parametername":"TaskDependency dep", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4656, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl._isLooping(net.sourceforge.ganttproject.task.dependency.TaskDependency,java.util.Set)", "isreturn":0, "sourcecode":"private boolean _isLooping(TaskDependency dep, Set tasksInvolved) {\r\n    Task dependant = dep.getDependant();\r\n    if (tasksInvolved.contains(dependant)) {\r\n        return true;\r\n    }\r\n    for (Iterator tasks = tasksInvolved.iterator(); tasks.hasNext();) {\r\n        Task nextInvolved = ((Task) (tasks.next()));\r\n        if (false == (getTaskHierarchy().areUnrelated(nextInvolved, dependant))) {\r\n            return true;\r\n        }\r\n    }\r\n    tasksInvolved.add(dependant);\r\n    {\r\n        TaskDependency[] nextDeps = dependant.getDependenciesAsDependee().toArray();\r\n        for (int i = 0; i < (nextDeps.length); i++) {\r\n            if (_isLooping(nextDeps[i], tasksInvolved)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    Task[] nestedTasks = getTaskHierarchy().getNestedTasks(dependant);\r\n    for (int i = 0; i < (nestedTasks.length); i++) {\r\n        tasksInvolved.add(nestedTasks[i]);\r\n        TaskDependency[] nextDeps = nestedTasks[i].getDependenciesAsDependee().toArray();\r\n        for (int j = 0; j < (nextDeps.length); j++) {\r\n            if (_isLooping(nextDeps[j], tasksInvolved)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    tasksInvolved.remove(dependant);\r\n    return false;\r\n}"},
 {"id":1244, "parametername":"TaskDependency dep", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":602, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "methodid":4664, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl.delete(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"void delete(TaskDependency dep) {\r\n    myDependencies.remove(dep);\r\n    SearchKey key1 = new SearchKey(SearchKey.DEPENDANT, dep.getDependant().getTaskID(), dep.getDependee().getTaskID());\r\n    SearchKey key2 = new SearchKey(SearchKey.DEPENDEE, dep.getDependee().getTaskID(), dep.getDependant().getTaskID());\r\n    mySearchKey2dependency.remove(key1);\r\n    mySearchKey2dependency.remove(key2);\r\n    myEventDispatcher.fireDependencyRemoved(dep);\r\n    // SearchKey fromKey = new RangeSearchFromKey(dep.getDependant());\r\n    // SearchKey toKey = new RangeSearchToKey(dep.getDependant());\r\n    // mySearchKey2dependency.subMap(fromKey, toKey).clear();\r\n    // fromKey = new RangeSearchFromKey(dep.getDependee());\r\n    // toKey = new RangeSearchToKey(dep.getDependee());\r\n    // mySearchKey2dependency.subMap(fromKey, toKey).clear();\r\n}"},
 {"id":1245, "parametername":"GanttCalendar myAcceptableStart", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":605, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint$DefaultCollision", "methodid":4692, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint$DefaultCollision.-init-(net.sourceforge.ganttproject.GanttCalendar,int,boolean)", "isreturn":0, "sourcecode":"public DefaultCollision(GanttCalendar myAcceptableStart, int myVariation, boolean isActive) {\r\n    this.myAcceptableStart = myAcceptableStart;\r\n    this.myVariation = myVariation;\r\n    this.isActive = isActive;\r\n}"},
 {"id":1246, "parametername":"TaskDependency dependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":606, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint", "methodid":4688, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint.setTaskDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"void setTaskDependency(TaskDependency dependency);"},
 {"id":1247, "parametername":"Task dependant", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":608, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "methodid":4700, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl)", "isreturn":0, "sourcecode":"public TaskDependencyImpl(Task dependant, Task dependee, TaskDependencyCollectionImpl collection) {\r\n    myDependant = dependant;\r\n    myDependee = dependee;\r\n    myCollection = collection;\r\n    if ((dependee == null) || (dependant == null)) {\r\n        throw new IllegalArgumentException((((\"invalid participants of dependency: dependee=\" + dependee) + \" dependant=\") + dependant));\r\n    }\r\n    myHardness = TaskDependency.Hardness.STRONG;\r\n}"},
 {"id":1248, "parametername":"Task dependee", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":608, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "methodid":4700, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl)", "isreturn":0, "sourcecode":"public TaskDependencyImpl(Task dependant, Task dependee, TaskDependencyCollectionImpl collection) {\r\n    myDependant = dependant;\r\n    myDependee = dependee;\r\n    myCollection = collection;\r\n    if ((dependee == null) || (dependant == null)) {\r\n        throw new IllegalArgumentException((((\"invalid participants of dependency: dependee=\" + dependee) + \" dependant=\") + dependant));\r\n    }\r\n    myHardness = TaskDependency.Hardness.STRONG;\r\n}"},
 {"id":1249, "parametername":"TaskDependencyCollectionImpl collection", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl", "parameterclass":602, "classid":608, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "methodid":4700, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollectionImpl)", "isreturn":0, "sourcecode":"public TaskDependencyImpl(Task dependant, Task dependee, TaskDependencyCollectionImpl collection) {\r\n    myDependant = dependant;\r\n    myDependee = dependee;\r\n    myCollection = collection;\r\n    if ((dependee == null) || (dependant == null)) {\r\n        throw new IllegalArgumentException((((\"invalid participants of dependency: dependee=\" + dependee) + \" dependant=\") + dependant));\r\n    }\r\n    myHardness = TaskDependency.Hardness.STRONG;\r\n}"},
 {"id":1250, "parametername":"TaskDependencyConstraint constraint", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint", "parameterclass":606, "classid":608, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "methodid":4710, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.setConstraint(net.sourceforge.ganttproject.task.dependency.TaskDependencyConstraint)", "isreturn":0, "sourcecode":"public void setConstraint(TaskDependencyConstraint constraint) {\r\n    myConstraint = constraint;\r\n    constraint.setTaskDependency(this);\r\n    myCollection.fireChanged(this);\r\n}"},
 {"id":1251, "parametername":"TaskDependency.Hardness hardness", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness", "parameterclass":597, "classid":608, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl", "methodid":4712, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencyImpl.setHardness(net.sourceforge.ganttproject.task.dependency.TaskDependency$Hardness)", "isreturn":0, "sourcecode":"public void setHardness(TaskDependency.Hardness hardness) {\r\n    myHardness = hardness;\r\n}"},
 {"id":1252, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":610, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceAsDependant", "methodid":4717, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceAsDependant.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection)", "isreturn":0, "sourcecode":"public TaskDependencySliceAsDependant(Task task, TaskDependencyCollection dependencyCollection) {\r\n    super(task, dependencyCollection);\r\n}"},
 {"id":1253, "parametername":"TaskDependencyCollection dependencyCollection", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection", "parameterclass":599, "classid":610, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceAsDependant", "methodid":4717, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceAsDependant.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection)", "isreturn":0, "sourcecode":"public TaskDependencySliceAsDependant(Task task, TaskDependencyCollection dependencyCollection) {\r\n    super(task, dependencyCollection);\r\n}"},
 {"id":1254, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":611, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceAsDependee", "methodid":4719, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceAsDependee.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection)", "isreturn":0, "sourcecode":"public TaskDependencySliceAsDependee(Task task, TaskDependencyCollection dependencyCollection) {\r\n    super(task, dependencyCollection);\r\n}"},
 {"id":1255, "parametername":"TaskDependencyCollection dependencyCollection", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection", "parameterclass":599, "classid":611, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceAsDependee", "methodid":4719, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceAsDependee.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection)", "isreturn":0, "sourcecode":"public TaskDependencySliceAsDependee(Task task, TaskDependencyCollection dependencyCollection) {\r\n    super(task, dependencyCollection);\r\n}"},
 {"id":1256, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":612, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceImpl", "methodid":4721, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceImpl.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection)", "isreturn":0, "sourcecode":"public TaskDependencySliceImpl(Task task, TaskDependencyCollection dependencyCollection) {\r\n    myTask = task;\r\n    myDependencyCollection = dependencyCollection;\r\n}"},
 {"id":1257, "parametername":"TaskDependencyCollection dependencyCollection", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection", "parameterclass":599, "classid":612, "classname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceImpl", "methodid":4721, "methodname":"net.sourceforge.ganttproject.task.dependency.TaskDependencySliceImpl.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection)", "isreturn":0, "sourcecode":"public TaskDependencySliceImpl(Task task, TaskDependencyCollection dependencyCollection) {\r\n    myTask = task;\r\n    myDependencyCollection = dependencyCollection;\r\n}"},
 {"id":1258, "parametername":"TaskDependency dependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":613, "classname":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl", "methodid":4733, "methodname":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl.setTaskDependency(net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"public void setTaskDependency(TaskDependency dependency) {\r\n    myDependency = dependency;\r\n}"},
 {"id":1259, "parametername":"GanttCalendar calendar", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":613, "classname":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl", "methodid":4728, "methodname":"net.sourceforge.ganttproject.task.dependency.constraint.ConstraintImpl.addDelay(net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public void addDelay(GanttCalendar calendar) {\r\n    int difference = myDependency.getDifference();\r\n    calendar.add(difference);\r\n    GanttCalendar solutionStart = calendar.Clone();\r\n    solutionStart.add(((-1) * (myDependency.getDifference())));\r\n    for (int i = 0; i <= difference; i++) {\r\n        if (myDependency.getDependant().getManager().getCalendar().isNonWorkingDay(solutionStart.getTime())) {\r\n            calendar.add(1);\r\n            difference++;\r\n        }\r\n        solutionStart.add(1);\r\n    }\r\n}"},
 {"id":1260, "parametername":"TaskActivity dependantActivity", "parametertype":"net.sourceforge.ganttproject.task.TaskActivity", "parameterclass":549, "classid":614, "classname":"net.sourceforge.ganttproject.task.dependency.constraint.DependencyActivityBindingImpl", "methodid":4735, "methodname":"net.sourceforge.ganttproject.task.dependency.constraint.DependencyActivityBindingImpl.-init-(net.sourceforge.ganttproject.task.TaskActivity,net.sourceforge.ganttproject.task.TaskActivity,java.util.Date[])", "isreturn":0, "sourcecode":"DependencyActivityBindingImpl(TaskActivity dependantActivity, TaskActivity dependeeActivity, Date[] alignedBounds) {\r\n    myDependantActivity = dependantActivity;\r\n    myDependeeActivity = dependeeActivity;\r\n    myAlignedBounds = alignedBounds;\r\n}"},
 {"id":1261, "parametername":"TaskActivity dependeeActivity", "parametertype":"net.sourceforge.ganttproject.task.TaskActivity", "parameterclass":549, "classid":614, "classname":"net.sourceforge.ganttproject.task.dependency.constraint.DependencyActivityBindingImpl", "methodid":4735, "methodname":"net.sourceforge.ganttproject.task.dependency.constraint.DependencyActivityBindingImpl.-init-(net.sourceforge.ganttproject.task.TaskActivity,net.sourceforge.ganttproject.task.TaskActivity,java.util.Date[])", "isreturn":0, "sourcecode":"DependencyActivityBindingImpl(TaskActivity dependantActivity, TaskActivity dependeeActivity, Date[] alignedBounds) {\r\n    myDependantActivity = dependantActivity;\r\n    myDependeeActivity = dependeeActivity;\r\n    myAlignedBounds = alignedBounds;\r\n}"},
 {"id":1262, "parametername":"TaskDependencyCollection source", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection", "parameterclass":599, "classid":619, "classname":"net.sourceforge.ganttproject.task.event.TaskDependencyEvent", "methodid":4751, "methodname":"net.sourceforge.ganttproject.task.event.TaskDependencyEvent.-init-(net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection,net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"public TaskDependencyEvent(TaskDependencyCollection source, TaskDependency dependency) {\r\n    super(source);\r\n    myDependency = dependency;\r\n}"},
 {"id":1263, "parametername":"TaskDependency dependency", "parametertype":"net.sourceforge.ganttproject.task.dependency.TaskDependency", "parameterclass":598, "classid":619, "classname":"net.sourceforge.ganttproject.task.event.TaskDependencyEvent", "methodid":4751, "methodname":"net.sourceforge.ganttproject.task.event.TaskDependencyEvent.-init-(net.sourceforge.ganttproject.task.dependency.TaskDependencyCollection,net.sourceforge.ganttproject.task.dependency.TaskDependency)", "isreturn":0, "sourcecode":"public TaskDependencyEvent(TaskDependencyCollection source, TaskDependency dependency) {\r\n    super(source);\r\n    myDependency = dependency;\r\n}"},
 {"id":1264, "parametername":"Task myTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":620, "classname":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "methodid":4753, "methodname":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent.-init-(java.lang.Object,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public TaskHierarchyEvent(Object source, Task myTask, Task myOldContainer, Task myNewContainer) {\r\n    super(source);\r\n    this.myNewContainer = myNewContainer;\r\n    this.myTask = myTask;\r\n    this.myOldContainer = myOldContainer;\r\n}"},
 {"id":1265, "parametername":"Task myOldContainer", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":620, "classname":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "methodid":4753, "methodname":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent.-init-(java.lang.Object,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public TaskHierarchyEvent(Object source, Task myTask, Task myOldContainer, Task myNewContainer) {\r\n    super(source);\r\n    this.myNewContainer = myNewContainer;\r\n    this.myTask = myTask;\r\n    this.myOldContainer = myOldContainer;\r\n}"},
 {"id":1266, "parametername":"Task myNewContainer", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":620, "classname":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "methodid":4753, "methodname":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent.-init-(java.lang.Object,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public TaskHierarchyEvent(Object source, Task myTask, Task myOldContainer, Task myNewContainer) {\r\n    super(source);\r\n    this.myNewContainer = myNewContainer;\r\n    this.myTask = myTask;\r\n    this.myOldContainer = myOldContainer;\r\n}"},
 {"id":1267, "parametername":"TaskScheduleEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent", "parameterclass":624, "classid":621, "classname":"net.sourceforge.ganttproject.task.event.TaskListener", "methodid":4764, "methodname":"net.sourceforge.ganttproject.task.event.TaskListener.taskScheduleChanged(net.sourceforge.ganttproject.task.event.TaskScheduleEvent)", "isreturn":0, "sourcecode":"void taskScheduleChanged(TaskScheduleEvent e);"},
 {"id":1268, "parametername":"TaskDependencyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskDependencyEvent", "parameterclass":619, "classid":621, "classname":"net.sourceforge.ganttproject.task.event.TaskListener", "methodid":4757, "methodname":"net.sourceforge.ganttproject.task.event.TaskListener.dependencyAdded(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "isreturn":0, "sourcecode":"void dependencyAdded(TaskDependencyEvent e);"},
 {"id":1269, "parametername":"TaskDependencyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskDependencyEvent", "parameterclass":619, "classid":621, "classname":"net.sourceforge.ganttproject.task.event.TaskListener", "methodid":4758, "methodname":"net.sourceforge.ganttproject.task.event.TaskListener.dependencyRemoved(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "isreturn":0, "sourcecode":"void dependencyRemoved(TaskDependencyEvent e);"},
 {"id":1270, "parametername":"TaskHierarchyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "parameterclass":620, "classid":621, "classname":"net.sourceforge.ganttproject.task.event.TaskListener", "methodid":4759, "methodname":"net.sourceforge.ganttproject.task.event.TaskListener.taskAdded(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "isreturn":0, "sourcecode":"void taskAdded(TaskHierarchyEvent e);"},
 {"id":1271, "parametername":"TaskHierarchyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "parameterclass":620, "classid":621, "classname":"net.sourceforge.ganttproject.task.event.TaskListener", "methodid":4763, "methodname":"net.sourceforge.ganttproject.task.event.TaskListener.taskRemoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "isreturn":0, "sourcecode":"void taskRemoved(TaskHierarchyEvent e);"},
 {"id":1272, "parametername":"TaskHierarchyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "parameterclass":620, "classid":621, "classname":"net.sourceforge.ganttproject.task.event.TaskListener", "methodid":4760, "methodname":"net.sourceforge.ganttproject.task.event.TaskListener.taskMoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "isreturn":0, "sourcecode":"void taskMoved(TaskHierarchyEvent e);"},
 {"id":1273, "parametername":"TaskPropertyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskPropertyEvent", "parameterclass":623, "classid":621, "classname":"net.sourceforge.ganttproject.task.event.TaskListener", "methodid":4762, "methodname":"net.sourceforge.ganttproject.task.event.TaskListener.taskPropertiesChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "isreturn":0, "sourcecode":"void taskPropertiesChanged(TaskPropertyEvent e);"},
 {"id":1274, "parametername":"TaskPropertyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskPropertyEvent", "parameterclass":623, "classid":621, "classname":"net.sourceforge.ganttproject.task.event.TaskListener", "methodid":4761, "methodname":"net.sourceforge.ganttproject.task.event.TaskListener.taskProgressChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "isreturn":0, "sourcecode":"void taskProgressChanged(TaskPropertyEvent e);"},
 {"id":1275, "parametername":"TaskScheduleEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent", "parameterclass":624, "classid":622, "classname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "methodid":4773, "methodname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.taskScheduleChanged(net.sourceforge.ganttproject.task.event.TaskScheduleEvent)", "isreturn":0, "sourcecode":"public void taskScheduleChanged(TaskScheduleEvent e) {\r\n}"},
 {"id":1276, "parametername":"TaskDependencyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskDependencyEvent", "parameterclass":619, "classid":622, "classname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "methodid":4766, "methodname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.dependencyAdded(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "isreturn":0, "sourcecode":"public void dependencyAdded(TaskDependencyEvent e) {\r\n}"},
 {"id":1277, "parametername":"TaskDependencyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskDependencyEvent", "parameterclass":619, "classid":622, "classname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "methodid":4767, "methodname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.dependencyRemoved(net.sourceforge.ganttproject.task.event.TaskDependencyEvent)", "isreturn":0, "sourcecode":"public void dependencyRemoved(TaskDependencyEvent e) {\r\n}"},
 {"id":1278, "parametername":"TaskHierarchyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "parameterclass":620, "classid":622, "classname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "methodid":4768, "methodname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.taskAdded(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "isreturn":0, "sourcecode":"public void taskAdded(TaskHierarchyEvent e) {\r\n}"},
 {"id":1279, "parametername":"TaskHierarchyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "parameterclass":620, "classid":622, "classname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "methodid":4772, "methodname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.taskRemoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "isreturn":0, "sourcecode":"public void taskRemoved(TaskHierarchyEvent e) {\r\n}"},
 {"id":1280, "parametername":"TaskHierarchyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskHierarchyEvent", "parameterclass":620, "classid":622, "classname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "methodid":4769, "methodname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.taskMoved(net.sourceforge.ganttproject.task.event.TaskHierarchyEvent)", "isreturn":0, "sourcecode":"public void taskMoved(TaskHierarchyEvent e) {\r\n}"},
 {"id":1281, "parametername":"TaskPropertyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskPropertyEvent", "parameterclass":623, "classid":622, "classname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "methodid":4771, "methodname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.taskPropertiesChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "isreturn":0, "sourcecode":"public void taskPropertiesChanged(TaskPropertyEvent e) {\r\n}"},
 {"id":1282, "parametername":"TaskPropertyEvent e", "parametertype":"net.sourceforge.ganttproject.task.event.TaskPropertyEvent", "parameterclass":623, "classid":622, "classname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter", "methodid":4770, "methodname":"net.sourceforge.ganttproject.task.event.TaskListenerAdapter.taskProgressChanged(net.sourceforge.ganttproject.task.event.TaskPropertyEvent)", "isreturn":0, "sourcecode":"public void taskProgressChanged(TaskPropertyEvent e) {\r\n}"},
 {"id":1283, "parametername":"Task source", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":624, "classname":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent", "methodid":4776, "methodname":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public TaskScheduleEvent(Task source, GanttCalendar oldStartDate, GanttCalendar oldFinishDate, GanttCalendar newStartDate, GanttCalendar newFinishDate) {\r\n    super(source);\r\n    myOldStartDate = oldStartDate;\r\n    myOldFinishDate = oldFinishDate;\r\n    myNewStartDate = newStartDate;\r\n    myNewFinishDate = newFinishDate;\r\n}"},
 {"id":1284, "parametername":"GanttCalendar oldStartDate", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":624, "classname":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent", "methodid":4776, "methodname":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public TaskScheduleEvent(Task source, GanttCalendar oldStartDate, GanttCalendar oldFinishDate, GanttCalendar newStartDate, GanttCalendar newFinishDate) {\r\n    super(source);\r\n    myOldStartDate = oldStartDate;\r\n    myOldFinishDate = oldFinishDate;\r\n    myNewStartDate = newStartDate;\r\n    myNewFinishDate = newFinishDate;\r\n}"},
 {"id":1285, "parametername":"GanttCalendar oldFinishDate", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":624, "classname":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent", "methodid":4776, "methodname":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public TaskScheduleEvent(Task source, GanttCalendar oldStartDate, GanttCalendar oldFinishDate, GanttCalendar newStartDate, GanttCalendar newFinishDate) {\r\n    super(source);\r\n    myOldStartDate = oldStartDate;\r\n    myOldFinishDate = oldFinishDate;\r\n    myNewStartDate = newStartDate;\r\n    myNewFinishDate = newFinishDate;\r\n}"},
 {"id":1286, "parametername":"GanttCalendar newStartDate", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":624, "classname":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent", "methodid":4776, "methodname":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public TaskScheduleEvent(Task source, GanttCalendar oldStartDate, GanttCalendar oldFinishDate, GanttCalendar newStartDate, GanttCalendar newFinishDate) {\r\n    super(source);\r\n    myOldStartDate = oldStartDate;\r\n    myOldFinishDate = oldFinishDate;\r\n    myNewStartDate = newStartDate;\r\n    myNewFinishDate = newFinishDate;\r\n}"},
 {"id":1287, "parametername":"GanttCalendar newFinishDate", "parametertype":"net.sourceforge.ganttproject.GanttCalendar", "parameterclass":24, "classid":624, "classname":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent", "methodid":4776, "methodname":"net.sourceforge.ganttproject.task.event.TaskScheduleEvent.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar,net.sourceforge.ganttproject.GanttCalendar)", "isreturn":0, "sourcecode":"public TaskScheduleEvent(Task source, GanttCalendar oldStartDate, GanttCalendar oldFinishDate, GanttCalendar newStartDate, GanttCalendar newFinishDate) {\r\n    super(source);\r\n    myOldStartDate = oldStartDate;\r\n    myOldFinishDate = oldFinishDate;\r\n    myNewStartDate = newStartDate;\r\n    myNewFinishDate = newFinishDate;\r\n}"},
 {"id":1288, "parametername":"Task myTask", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":625, "classname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem", "methodid":4782, "methodname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem)", "isreturn":0, "sourcecode":"public TaskHierarchyItem(Task myTask, TaskHierarchyItem containerItem) {\r\n    this.myTask = myTask;\r\n    this.myContainerItem = containerItem;\r\n    if ((myContainerItem) != null) {\r\n        myContainerItem.addNestedItem(this);\r\n    }\r\n}"},
 {"id":1289, "parametername":"TaskHierarchyItem containerItem", "parametertype":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem", "parameterclass":625, "classid":625, "classname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem", "methodid":4782, "methodname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem.-init-(net.sourceforge.ganttproject.task.Task,net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem)", "isreturn":0, "sourcecode":"public TaskHierarchyItem(Task myTask, TaskHierarchyItem containerItem) {\r\n    this.myTask = myTask;\r\n    this.myContainerItem = containerItem;\r\n    if ((myContainerItem) != null) {\r\n        myContainerItem.addNestedItem(this);\r\n    }\r\n}"},
 {"id":1290, "parametername":"TaskHierarchyItem nested", "parametertype":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem", "parameterclass":625, "classid":625, "classname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem", "methodid":4783, "methodname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem.addNestedItem(net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem)", "isreturn":0, "sourcecode":"public void addNestedItem(TaskHierarchyItem nested) {\r\n    nested.myNextSiblingItem = myFirstNestedItem;\r\n    nested.myContainerItem = this;\r\n    myFirstNestedItem = nested;\r\n}"},
 {"id":1291, "parametername":"Task task", "parametertype":"net.sourceforge.ganttproject.task.Task", "parameterclass":548, "classid":626, "classname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyManagerImpl", "methodid":4789, "methodname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyManagerImpl.createItem(net.sourceforge.ganttproject.task.Task)", "isreturn":0, "sourcecode":"public TaskHierarchyItem createItem(Task task) {\r\n    TaskHierarchyItem result = new TaskHierarchyItem(task, myRootItem);\r\n    return result;\r\n}"},
 {"id":1292, "parametername":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem", "parametertype":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyItem", "parameterclass":625, "classid":626, "classname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyManagerImpl", "methodid":4789, "methodname":"net.sourceforge.ganttproject.task.hierarchy.TaskHierarchyManagerImpl.createItem(net.sourceforge.ganttproject.task.Task)", "isreturn":1, "sourcecode":"public TaskHierarchyItem createItem(Task task) {\r\n    TaskHierarchyItem result = new TaskHierarchyItem(task, myRootItem);\r\n    return result;\r\n}"},
 {"id":1293, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":628, "classname":"net.sourceforge.ganttproject.time.TextFormatter", "methodid":4794, "methodname":"net.sourceforge.ganttproject.time.TextFormatter.format(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date)", "isreturn":0, "sourcecode":"public TimeUnitText format(TimeUnit timeUnit, Date baseDate);"},
 {"id":1294, "parametername":"net.sourceforge.ganttproject.time.TimeUnitText", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitText", "parameterclass":640, "classid":628, "classname":"net.sourceforge.ganttproject.time.TextFormatter", "methodid":4794, "methodname":"net.sourceforge.ganttproject.time.TextFormatter.format(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date)", "isreturn":1, "sourcecode":"public TimeUnitText format(TimeUnit timeUnit, Date baseDate);"},
 {"id":1295, "parametername":"TimeUnit unitLine", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":629, "classname":"net.sourceforge.ganttproject.time.TimeFrame", "methodid":4799, "methodname":"net.sourceforge.ganttproject.time.TimeFrame.getUnitCount(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"int getUnitCount(TimeUnit unitLine);"},
 {"id":1296, "parametername":"TimeUnit unitLine", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":629, "classname":"net.sourceforge.ganttproject.time.TimeFrame", "methodid":4802, "methodname":"net.sourceforge.ganttproject.time.TimeFrame.getUnitText(net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"TimeUnitText getUnitText(TimeUnit unitLine, int position);"},
 {"id":1297, "parametername":"net.sourceforge.ganttproject.time.TimeUnitText", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitText", "parameterclass":640, "classid":629, "classname":"net.sourceforge.ganttproject.time.TimeFrame", "methodid":4802, "methodname":"net.sourceforge.ganttproject.time.TimeFrame.getUnitText(net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":1, "sourcecode":"TimeUnitText getUnitText(TimeUnit unitLine, int position);"},
 {"id":1298, "parametername":"TimeUnit unitLine", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":629, "classname":"net.sourceforge.ganttproject.time.TimeFrame", "methodid":4801, "methodname":"net.sourceforge.ganttproject.time.TimeFrame.getUnitStart(net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"Date getUnitStart(TimeUnit unitLine, int position);"},
 {"id":1299, "parametername":"TimeUnit unitLine", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":629, "classname":"net.sourceforge.ganttproject.time.TimeFrame", "methodid":4800, "methodname":"net.sourceforge.ganttproject.time.TimeFrame.getUnitFinish(net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"Date getUnitFinish(TimeUnit unitLine, int position);"},
 {"id":1300, "parametername":"TimeUnit unit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":630, "classname":"net.sourceforge.ganttproject.time.TimeUnit", "methodid":4808, "methodname":"net.sourceforge.ganttproject.time.TimeUnit.isConstructedFrom(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public boolean isConstructedFrom(TimeUnit unit);"},
 {"id":1301, "parametername":"TimeUnit atomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":630, "classname":"net.sourceforge.ganttproject.time.TimeUnit", "methodid":4805, "methodname":"net.sourceforge.ganttproject.time.TimeUnit.getAtomCount(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public int getAtomCount(TimeUnit atomUnit);"},
 {"id":1302, "parametername":"TextFormatter formatter", "parametertype":"net.sourceforge.ganttproject.time.TextFormatter", "parameterclass":628, "classid":630, "classname":"net.sourceforge.ganttproject.time.TimeUnit", "methodid":4809, "methodname":"net.sourceforge.ganttproject.time.TimeUnit.setTextFormatter(net.sourceforge.ganttproject.time.TextFormatter)", "isreturn":0, "sourcecode":"// \r\npublic void setTextFormatter(TextFormatter formatter);"},
 {"id":1303, "parametername":"TimeUnitGraph timeUnitGraph", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitGraph", "parameterclass":636, "classid":631, "classname":"net.sourceforge.ganttproject.time.TimeUnitDateFrameableImpl", "methodid":4810, "methodname":"net.sourceforge.ganttproject.time.TimeUnitDateFrameableImpl.-init-(java.lang.String,net.sourceforge.ganttproject.time.TimeUnitGraph,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.DateFrameable)", "isreturn":0, "sourcecode":"public TimeUnitDateFrameableImpl(String name, TimeUnitGraph timeUnitGraph, TimeUnit atomUnit, DateFrameable framer) {\r\n    super(name, timeUnitGraph, atomUnit);\r\n    myFramer = framer;\r\n}"},
 {"id":1304, "parametername":"TimeUnit atomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":631, "classname":"net.sourceforge.ganttproject.time.TimeUnitDateFrameableImpl", "methodid":4810, "methodname":"net.sourceforge.ganttproject.time.TimeUnitDateFrameableImpl.-init-(java.lang.String,net.sourceforge.ganttproject.time.TimeUnitGraph,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.DateFrameable)", "isreturn":0, "sourcecode":"public TimeUnitDateFrameableImpl(String name, TimeUnitGraph timeUnitGraph, TimeUnit atomUnit, DateFrameable framer) {\r\n    super(name, timeUnitGraph, atomUnit);\r\n    myFramer = framer;\r\n}"},
 {"id":1305, "parametername":"DateFrameable framer", "parametertype":"net.sourceforge.ganttproject.time.DateFrameable", "parameterclass":627, "classid":631, "classname":"net.sourceforge.ganttproject.time.TimeUnitDateFrameableImpl", "methodid":4810, "methodname":"net.sourceforge.ganttproject.time.TimeUnitDateFrameableImpl.-init-(java.lang.String,net.sourceforge.ganttproject.time.TimeUnitGraph,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.DateFrameable)", "isreturn":0, "sourcecode":"public TimeUnitDateFrameableImpl(String name, TimeUnitGraph timeUnitGraph, TimeUnit atomUnit, DateFrameable framer) {\r\n    super(name, timeUnitGraph, atomUnit);\r\n    myFramer = framer;\r\n}"},
 {"id":1306, "parametername":"TimeUnitGraph graph", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitGraph", "parameterclass":636, "classid":634, "classname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl", "methodid":4815, "methodname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl.-init-(java.lang.String,net.sourceforge.ganttproject.time.TimeUnitGraph,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.DateFrameable)", "isreturn":0, "sourcecode":"public TimeUnitFunctionOfDateImpl(String name, TimeUnitGraph graph, TimeUnit directAtomUnit, DateFrameable framer) {\r\n    super(name, graph, directAtomUnit, framer);\r\n    if (!(directAtomUnit instanceof DateFrameable)) {\r\n        throw new IllegalArgumentException(\"Only date frameable time units may be used as atoms for functions of date\");\r\n    }\r\n    myDirectFrameable = ((DateFrameable) (directAtomUnit));\r\n}"},
 {"id":1307, "parametername":"TimeUnit directAtomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":634, "classname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl", "methodid":4815, "methodname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl.-init-(java.lang.String,net.sourceforge.ganttproject.time.TimeUnitGraph,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.DateFrameable)", "isreturn":0, "sourcecode":"public TimeUnitFunctionOfDateImpl(String name, TimeUnitGraph graph, TimeUnit directAtomUnit, DateFrameable framer) {\r\n    super(name, graph, directAtomUnit, framer);\r\n    if (!(directAtomUnit instanceof DateFrameable)) {\r\n        throw new IllegalArgumentException(\"Only date frameable time units may be used as atoms for functions of date\");\r\n    }\r\n    myDirectFrameable = ((DateFrameable) (directAtomUnit));\r\n}"},
 {"id":1308, "parametername":"DateFrameable framer", "parametertype":"net.sourceforge.ganttproject.time.DateFrameable", "parameterclass":627, "classid":634, "classname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl", "methodid":4815, "methodname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl.-init-(java.lang.String,net.sourceforge.ganttproject.time.TimeUnitGraph,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.DateFrameable)", "isreturn":0, "sourcecode":"public TimeUnitFunctionOfDateImpl(String name, TimeUnitGraph graph, TimeUnit directAtomUnit, DateFrameable framer) {\r\n    super(name, graph, directAtomUnit, framer);\r\n    if (!(directAtomUnit instanceof DateFrameable)) {\r\n        throw new IllegalArgumentException(\"Only date frameable time units may be used as atoms for functions of date\");\r\n    }\r\n    myDirectFrameable = ((DateFrameable) (directAtomUnit));\r\n}"},
 {"id":1309, "parametername":"TimeUnit atomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":634, "classname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl", "methodid":4818, "methodname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl.getAtomCount(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public int getAtomCount(TimeUnit atomUnit) {\r\n    throw new UnsupportedOperationException(\"This time unit is function of date. Use method createTimeUnit() to create a parameterized instance.\");\r\n}"},
 {"id":1310, "parametername":"TimeUnit unit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":633, "classname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl", "methodid":4828, "methodname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl.isConstructedFrom(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public boolean isConstructedFrom(TimeUnit unit) {\r\n    return this.isConstructedFrom(unit);\r\n}"},
 {"id":1311, "parametername":"TimeUnit atomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":633, "classname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl", "methodid":4824, "methodname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl.getAtomCount(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public int getAtomCount(TimeUnit atomUnit) {\r\n    if ((atomUnit == (this)) || (atomUnit == (this))) {\r\n        return 1;\r\n    }\r\n    int directAtomCount = getDirectAtomCount();\r\n    return directAtomCount * (getDirectAtomUnit().getAtomCount(atomUnit));\r\n}"},
 {"id":1312, "parametername":"TextFormatter formatter", "parametertype":"net.sourceforge.ganttproject.time.TextFormatter", "parameterclass":628, "classid":633, "classname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl", "methodid":4830, "methodname":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDateImpl$ParameterizedTimeUnitImpl.setTextFormatter(net.sourceforge.ganttproject.time.TextFormatter)", "isreturn":0, "sourcecode":"public void setTextFormatter(TextFormatter formatter) {\r\n    this.setTextFormatter(formatter);\r\n}"},
 {"id":1313, "parametername":"TimeUnit atomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":635, "classname":"net.sourceforge.ganttproject.time.TimeUnitGraph$Composition", "methodid":4840, "methodname":"net.sourceforge.ganttproject.time.TimeUnitGraph$Composition.-init-(net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"Composition(TimeUnit atomUnit, int atomCount) {\r\n    myAtom = atomUnit;\r\n    myAtomCount = atomCount;\r\n}"},
 {"id":1314, "parametername":"TimeUnitGraph.Composition transitiveComposition", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitGraph$Composition", "parameterclass":635, "classid":635, "classname":"net.sourceforge.ganttproject.time.TimeUnitGraph$Composition", "methodid":4841, "methodname":"net.sourceforge.ganttproject.time.TimeUnitGraph$Composition.-init-(net.sourceforge.ganttproject.time.TimeUnitGraph$Composition,int)", "isreturn":0, "sourcecode":"Composition(TimeUnitGraph.Composition transitiveComposition, int atomCount) {\r\n    myAtomCount = atomCount * (transitiveComposition.myAtomCount);\r\n    myAtom = transitiveComposition.myAtom;\r\n}"},
 {"id":1315, "parametername":"TimeUnit atomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":636, "classname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "methodid":4836, "methodname":"net.sourceforge.ganttproject.time.TimeUnitGraph.createTimeUnit(java.lang.String,net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"TimeUnit createTimeUnit(String name, TimeUnit atomUnit, int count) {\r\n    TimeUnit result = new TimeUnitImpl(name, this, atomUnit);\r\n    registerTimeUnit(result, count);\r\n    return result;\r\n}"},
 {"id":1316, "parametername":"net.sourceforge.ganttproject.time.TimeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":636, "classname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "methodid":4836, "methodname":"net.sourceforge.ganttproject.time.TimeUnitGraph.createTimeUnit(java.lang.String,net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":1, "sourcecode":"TimeUnit createTimeUnit(String name, TimeUnit atomUnit, int count) {\r\n    TimeUnit result = new TimeUnitImpl(name, this, atomUnit);\r\n    registerTimeUnit(result, count);\r\n    return result;\r\n}"},
 {"id":1317, "parametername":"TimeUnit atomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":636, "classname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "methodid":4835, "methodname":"net.sourceforge.ganttproject.time.TimeUnitGraph.createDateFrameableTimeUnit(java.lang.String,net.sourceforge.ganttproject.time.TimeUnit,int,net.sourceforge.ganttproject.time.DateFrameable)", "isreturn":0, "sourcecode":"public TimeUnit createDateFrameableTimeUnit(String name, TimeUnit atomUnit, int atomCount, DateFrameable framer) {\r\n    TimeUnit result = new TimeUnitDateFrameableImpl(name, this, atomUnit, framer);\r\n    registerTimeUnit(result, atomCount);\r\n    return result;\r\n}"},
 {"id":1318, "parametername":"net.sourceforge.ganttproject.time.TimeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":636, "classname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "methodid":4835, "methodname":"net.sourceforge.ganttproject.time.TimeUnitGraph.createDateFrameableTimeUnit(java.lang.String,net.sourceforge.ganttproject.time.TimeUnit,int,net.sourceforge.ganttproject.time.DateFrameable)", "isreturn":1, "sourcecode":"public TimeUnit createDateFrameableTimeUnit(String name, TimeUnit atomUnit, int atomCount, DateFrameable framer) {\r\n    TimeUnit result = new TimeUnitDateFrameableImpl(name, this, atomUnit, framer);\r\n    registerTimeUnit(result, atomCount);\r\n    return result;\r\n}"},
 {"id":1319, "parametername":"DateFrameable framer", "parametertype":"net.sourceforge.ganttproject.time.DateFrameable", "parameterclass":627, "classid":636, "classname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "methodid":4835, "methodname":"net.sourceforge.ganttproject.time.TimeUnitGraph.createDateFrameableTimeUnit(java.lang.String,net.sourceforge.ganttproject.time.TimeUnit,int,net.sourceforge.ganttproject.time.DateFrameable)", "isreturn":0, "sourcecode":"public TimeUnit createDateFrameableTimeUnit(String name, TimeUnit atomUnit, int atomCount, DateFrameable framer) {\r\n    TimeUnit result = new TimeUnitDateFrameableImpl(name, this, atomUnit, framer);\r\n    registerTimeUnit(result, atomCount);\r\n    return result;\r\n}"},
 {"id":1320, "parametername":"TimeUnit atomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":636, "classname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "methodid":4837, "methodname":"net.sourceforge.ganttproject.time.TimeUnitGraph.createTimeUnitFunctionOfDate(java.lang.String,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.DateFrameable)", "isreturn":0, "sourcecode":"public TimeUnitFunctionOfDate createTimeUnitFunctionOfDate(String name, TimeUnit atomUnit, DateFrameable framer) {\r\n    TimeUnitFunctionOfDate result;\r\n    result = new TimeUnitFunctionOfDateImpl(name, this, atomUnit, framer);\r\n    registerTimeUnit(result, (-1));\r\n    return result;\r\n}"},
 {"id":1321, "parametername":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDate", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitFunctionOfDate", "parameterclass":632, "classid":636, "classname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "methodid":4837, "methodname":"net.sourceforge.ganttproject.time.TimeUnitGraph.createTimeUnitFunctionOfDate(java.lang.String,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.DateFrameable)", "isreturn":1, "sourcecode":"public TimeUnitFunctionOfDate createTimeUnitFunctionOfDate(String name, TimeUnit atomUnit, DateFrameable framer) {\r\n    TimeUnitFunctionOfDate result;\r\n    result = new TimeUnitFunctionOfDateImpl(name, this, atomUnit, framer);\r\n    registerTimeUnit(result, (-1));\r\n    return result;\r\n}"},
 {"id":1322, "parametername":"DateFrameable framer", "parametertype":"net.sourceforge.ganttproject.time.DateFrameable", "parameterclass":627, "classid":636, "classname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "methodid":4837, "methodname":"net.sourceforge.ganttproject.time.TimeUnitGraph.createTimeUnitFunctionOfDate(java.lang.String,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.DateFrameable)", "isreturn":0, "sourcecode":"public TimeUnitFunctionOfDate createTimeUnitFunctionOfDate(String name, TimeUnit atomUnit, DateFrameable framer) {\r\n    TimeUnitFunctionOfDate result;\r\n    result = new TimeUnitFunctionOfDateImpl(name, this, atomUnit, framer);\r\n    registerTimeUnit(result, (-1));\r\n    return result;\r\n}"},
 {"id":1323, "parametername":"TimeUnit unit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":636, "classname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "methodid":4839, "methodname":"net.sourceforge.ganttproject.time.TimeUnitGraph.registerTimeUnit(net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"private void registerTimeUnit(TimeUnit unit, int atomCount) {\r\n    TimeUnit atomUnit = unit.getDirectAtomUnit();\r\n    List transitiveCompositions = ((List) (myUnit2compositions.get(atomUnit)));\r\n    if (transitiveCompositions == null) {\r\n        throw new RuntimeException(((\"Atom unit=\" + atomUnit) + \" is unknown\"));\r\n    }\r\n    List compositions = new ArrayList(((transitiveCompositions.size()) + 1));\r\n    compositions.add(new TimeUnitGraph.Composition(unit, 1));\r\n    for (int i = 0; i < (transitiveCompositions.size()); i++) {\r\n        TimeUnitGraph.Composition nextTransitive = ((TimeUnitGraph.Composition) (transitiveCompositions.get(i)));\r\n        compositions.add(new TimeUnitGraph.Composition(nextTransitive, atomCount));\r\n    }\r\n    myUnit2compositions.put(unit, compositions);\r\n}"},
 {"id":1324, "parametername":"TimeUnitImpl timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitImpl", "parameterclass":637, "classid":636, "classname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "methodid":4838, "methodname":"net.sourceforge.ganttproject.time.TimeUnitGraph.getComposition(net.sourceforge.ganttproject.time.TimeUnitImpl,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public TimeUnitGraph.Composition getComposition(TimeUnitImpl timeUnit, TimeUnit atomUnit) {\r\n    TimeUnitGraph.Composition result = null;\r\n    List compositions = ((List) (myUnit2compositions.get(timeUnit)));\r\n    if (compositions == null) {\r\n        throw new RuntimeException(((\"Unit=\" + timeUnit) + \" has no compositions\"));\r\n    }\r\n    for (int i = 0; i < (compositions.size()); i++) {\r\n        TimeUnitGraph.Composition next = ((TimeUnitGraph.Composition) (compositions.get(i)));\r\n        if (next.myAtom.equals(atomUnit)) {\r\n            result = next;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":1325, "parametername":"TimeUnit atomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":636, "classname":"net.sourceforge.ganttproject.time.TimeUnitGraph", "methodid":4838, "methodname":"net.sourceforge.ganttproject.time.TimeUnitGraph.getComposition(net.sourceforge.ganttproject.time.TimeUnitImpl,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public TimeUnitGraph.Composition getComposition(TimeUnitImpl timeUnit, TimeUnit atomUnit) {\r\n    TimeUnitGraph.Composition result = null;\r\n    List compositions = ((List) (myUnit2compositions.get(timeUnit)));\r\n    if (compositions == null) {\r\n        throw new RuntimeException(((\"Unit=\" + timeUnit) + \" has no compositions\"));\r\n    }\r\n    for (int i = 0; i < (compositions.size()); i++) {\r\n        TimeUnitGraph.Composition next = ((TimeUnitGraph.Composition) (compositions.get(i)));\r\n        if (next.myAtom.equals(atomUnit)) {\r\n            result = next;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":1326, "parametername":"TimeUnitGraph graph", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitGraph", "parameterclass":636, "classid":637, "classname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "methodid":4843, "methodname":"net.sourceforge.ganttproject.time.TimeUnitImpl.-init-(java.lang.String,net.sourceforge.ganttproject.time.TimeUnitGraph,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public TimeUnitImpl(String name, TimeUnitGraph graph, TimeUnit directAtomUnit) {\r\n    myName = name;\r\n    myGraph = graph;\r\n    myDirectAtomUnit = directAtomUnit;\r\n}"},
 {"id":1327, "parametername":"TimeUnit directAtomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":637, "classname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "methodid":4843, "methodname":"net.sourceforge.ganttproject.time.TimeUnitImpl.-init-(java.lang.String,net.sourceforge.ganttproject.time.TimeUnitGraph,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public TimeUnitImpl(String name, TimeUnitGraph graph, TimeUnit directAtomUnit) {\r\n    myName = name;\r\n    myGraph = graph;\r\n    myDirectAtomUnit = directAtomUnit;\r\n}"},
 {"id":1328, "parametername":"TimeUnit atomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":637, "classname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "methodid":4851, "methodname":"net.sourceforge.ganttproject.time.TimeUnitImpl.isConstructedFrom(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public boolean isConstructedFrom(TimeUnit atomUnit) {\r\n    return (myGraph.getComposition(this, atomUnit)) != null;\r\n}"},
 {"id":1329, "parametername":"TimeUnit atomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":637, "classname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "methodid":4847, "methodname":"net.sourceforge.ganttproject.time.TimeUnitImpl.getAtomCount(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public int getAtomCount(TimeUnit atomUnit) {\r\n    TimeUnitGraph.Composition composition = myGraph.getComposition(this, atomUnit);\r\n    if (composition == null) {\r\n        throw new RuntimeException((((\"Failed to find a composition of time unit=\" + (this)) + \" from time unit=\") + atomUnit));\r\n    }\r\n    return composition.getAtomCount();\r\n}"},
 {"id":1330, "parametername":"TextFormatter formatter", "parametertype":"net.sourceforge.ganttproject.time.TextFormatter", "parameterclass":628, "classid":637, "classname":"net.sourceforge.ganttproject.time.TimeUnitImpl", "methodid":4853, "methodname":"net.sourceforge.ganttproject.time.TimeUnitImpl.setTextFormatter(net.sourceforge.ganttproject.time.TextFormatter)", "isreturn":0, "sourcecode":"public void setTextFormatter(TextFormatter formatter) {\r\n    myTextFormatter = formatter;\r\n}"},
 {"id":1331, "parametername":"TimeUnit topUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":638, "classname":"net.sourceforge.ganttproject.time.TimeUnitPair", "methodid":4855, "methodname":"net.sourceforge.ganttproject.time.TimeUnitPair.-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnitStack)", "isreturn":0, "sourcecode":"protected TimeUnitPair(TimeUnit topUnit, TimeUnit bottomUnit, TimeUnitStack timeUnitStack) {\r\n    myTopTimeUnit = topUnit;\r\n    myBottomTimeUnit = bottomUnit;\r\n    myTimeUnitStack = timeUnitStack;\r\n}"},
 {"id":1332, "parametername":"TimeUnit bottomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":638, "classname":"net.sourceforge.ganttproject.time.TimeUnitPair", "methodid":4855, "methodname":"net.sourceforge.ganttproject.time.TimeUnitPair.-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnitStack)", "isreturn":0, "sourcecode":"protected TimeUnitPair(TimeUnit topUnit, TimeUnit bottomUnit, TimeUnitStack timeUnitStack) {\r\n    myTopTimeUnit = topUnit;\r\n    myBottomTimeUnit = bottomUnit;\r\n    myTimeUnitStack = timeUnitStack;\r\n}"},
 {"id":1333, "parametername":"TimeUnitStack timeUnitStack", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitStack", "parameterclass":639, "classid":638, "classname":"net.sourceforge.ganttproject.time.TimeUnitPair", "methodid":4855, "methodname":"net.sourceforge.ganttproject.time.TimeUnitPair.-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnitStack)", "isreturn":0, "sourcecode":"protected TimeUnitPair(TimeUnit topUnit, TimeUnit bottomUnit, TimeUnitStack timeUnitStack) {\r\n    myTopTimeUnit = topUnit;\r\n    myBottomTimeUnit = bottomUnit;\r\n    myTimeUnitStack = timeUnitStack;\r\n}"},
 {"id":1334, "parametername":"TimeUnit topUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":639, "classname":"net.sourceforge.ganttproject.time.TimeUnitStack", "methodid":4859, "methodname":"net.sourceforge.ganttproject.time.TimeUnitStack.createTimeFrame(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"TimeFrame createTimeFrame(Date startDate, TimeUnit topUnit, TimeUnit bottomUnit);"},
 {"id":1335, "parametername":"net.sourceforge.ganttproject.time.TimeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":639, "classname":"net.sourceforge.ganttproject.time.TimeUnitStack", "methodid":4859, "methodname":"net.sourceforge.ganttproject.time.TimeUnitStack.createTimeFrame(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":1, "sourcecode":"TimeFrame createTimeFrame(Date startDate, TimeUnit topUnit, TimeUnit bottomUnit);"},
 {"id":1336, "parametername":"TimeUnit bottomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":639, "classname":"net.sourceforge.ganttproject.time.TimeUnitStack", "methodid":4859, "methodname":"net.sourceforge.ganttproject.time.TimeUnitStack.createTimeFrame(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"TimeFrame createTimeFrame(Date startDate, TimeUnit topUnit, TimeUnit bottomUnit);"},
 {"id":1337, "parametername":"TextLengthCalculator calculator", "parametertype":"net.sourceforge.ganttproject.util.TextLengthCalculator", "parameterclass":664, "classid":640, "classname":"net.sourceforge.ganttproject.time.TimeUnitText", "methodid":4867, "methodname":"net.sourceforge.ganttproject.time.TimeUnitText.getText(int,net.sourceforge.ganttproject.util.TextLengthCalculator)", "isreturn":0, "sourcecode":"public String getText(int requestedMaxLength, TextLengthCalculator calculator) {\r\n    String result = null;\r\n    if (!(calculator.getState().equals(myCalculatorState))) {\r\n        myCalculatorState = calculator.getState();\r\n        myMinimaxLong = calculator.getTextLength(myLongText);\r\n        myMinimaxMedium = calculator.getTextLength(myMediumText);\r\n        myMinimaxShort = calculator.getTextLength(myShortText);\r\n    }\r\n    result = getCachedText(requestedMaxLength);\r\n    return result == null ? \"\" : result;\r\n}"},
 {"id":1338, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":641, "classname":"net.sourceforge.ganttproject.time.gregorian.CachingTextFormatter", "methodid":4871, "methodname":"net.sourceforge.ganttproject.time.gregorian.CachingTextFormatter.format(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date)", "isreturn":0, "sourcecode":"public TimeUnitText format(TimeUnit timeUnit, Date baseDate) {\r\n    TimeUnitText result = null;\r\n    Date adjustedLeft = ((DateFrameable) (timeUnit)).adjustLeft(baseDate);\r\n    result = getCachedText(adjustedLeft);\r\n    if (result == null) {\r\n        result = createTimeUnitText(adjustedLeft);\r\n        myTextCache.put(adjustedLeft, result);\r\n    }\r\n    return result;\r\n}"},
 {"id":1339, "parametername":"net.sourceforge.ganttproject.time.TimeUnitText", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitText", "parameterclass":640, "classid":641, "classname":"net.sourceforge.ganttproject.time.gregorian.CachingTextFormatter", "methodid":4871, "methodname":"net.sourceforge.ganttproject.time.gregorian.CachingTextFormatter.format(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date)", "isreturn":1, "sourcecode":"public TimeUnitText format(TimeUnit timeUnit, Date baseDate) {\r\n    TimeUnitText result = null;\r\n    Date adjustedLeft = ((DateFrameable) (timeUnit)).adjustLeft(baseDate);\r\n    result = getCachedText(adjustedLeft);\r\n    if (result == null) {\r\n        result = createTimeUnitText(adjustedLeft);\r\n        myTextCache.put(adjustedLeft, result);\r\n    }\r\n    return result;\r\n}"},
 {"id":1340, "parametername":"GanttLanguage.Event event", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage$Event", "parameterclass":459, "classid":641, "classname":"net.sourceforge.ganttproject.time.gregorian.CachingTextFormatter", "methodid":4873, "methodname":"net.sourceforge.ganttproject.time.gregorian.CachingTextFormatter.languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "isreturn":0, "sourcecode":"public void languageChanged(GanttLanguage.Event event) {\r\n    myTextCache.clear();\r\n}"},
 {"id":1341, "parametername":"GanttLanguage i18n", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage", "parameterclass":461, "classid":645, "classname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack", "methodid":4882, "methodname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack.-init-(net.sourceforge.ganttproject.language.GanttLanguage)", "isreturn":0, "sourcecode":"/**\r\n *\r\n */\r\npublic GPTimeUnitStack(GanttLanguage i18n) {\r\n    TimeUnit atom = ourGraph.createAtomTimeUnit(\"atom\");\r\n    DAY = ourGraph.createDateFrameableTimeUnit(\"day\", atom, 1, new FramerImpl(Calendar.DATE));\r\n    DAY.setTextFormatter(new DayTextFormatter());\r\n    MONTH = ourGraph.createTimeUnitFunctionOfDate(\"month\", DAY, new FramerImpl(Calendar.MONTH));\r\n    MONTH.setTextFormatter(new MonthTextFormatter());\r\n    WEEK = ourGraph.createDateFrameableTimeUnit(\"week\", DAY, 7, new WeekFramerImpl());\r\n    MONTH_FROM_WEEKS = ourGraph.createTimeUnitFunctionOfDate(\"month_from_weeks\", WEEK, new FramerImpl(Calendar.MONTH));\r\n    WEEK.setTextFormatter(new WeekTextFormatter(((i18n.getText(\"week\")) + \" {0}\")));\r\n    WEEK_AS_BOTTOM_UNIT = ourGraph.createDateFrameableTimeUnit(\"week\", DAY, 7, new WeekFramerImpl());\r\n    WEEK_AS_BOTTOM_UNIT.setTextFormatter(new WeekTextFormatter(\"{0}\"));\r\n    YEAR = ourGraph.createTimeUnitFunctionOfDate(\"year\", DAY, new FramerImpl(Calendar.YEAR));\r\n    YEAR.setTextFormatter(new YearTextFormatter());\r\n    myPairs = new TimeUnitPair[]{ new GPTimeUnitStack.MyTimeUnitPair(WEEK, DAY), new GPTimeUnitStack.MyTimeUnitPair(WEEK, DAY), new GPTimeUnitStack.MyTimeUnitPair(MONTH, DAY), new GPTimeUnitStack.MyTimeUnitPair(MONTH, WEEK_AS_BOTTOM_UNIT), new GPTimeUnitStack.MyTimeUnitPair(MONTH, WEEK_AS_BOTTOM_UNIT), new GPTimeUnitStack.MyTimeUnitPair(MONTH, WEEK_AS_BOTTOM_UNIT), new GPTimeUnitStack.MyTimeUnitPair(MONTH, WEEK_AS_BOTTOM_UNIT), new GPTimeUnitStack.MyTimeUnitPair(YEAR, WEEK_AS_BOTTOM_UNIT), new GPTimeUnitStack.MyTimeUnitPair(YEAR, WEEK_AS_BOTTOM_UNIT) };\r\n}"},
 {"id":1342, "parametername":"TimeUnit topUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":644, "classname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack$MyTimeUnitPair", "methodid":4888, "methodname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack$MyTimeUnitPair.-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"MyTimeUnitPair(TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    super(topUnit, bottomUnit, this);\r\n}"},
 {"id":1343, "parametername":"TimeUnit bottomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":644, "classname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack$MyTimeUnitPair", "methodid":4888, "methodname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack$MyTimeUnitPair.-init-(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"MyTimeUnitPair(TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    super(topUnit, bottomUnit, this);\r\n}"},
 {"id":1344, "parametername":"TimeUnit topUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":645, "classname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack", "methodid":4884, "methodname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack.createTimeFrame(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public TimeFrame createTimeFrame(Date baseDate, TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    // if (topUnit instanceof TimeUnitFunctionOfDate) {\r\n    // topUnit = ((TimeUnitFunctionOfDate)topUnit).createTimeUnit(baseDate);\r\n    // }\r\n    return new TimeFrameImpl(baseDate, topUnit, bottomUnit);\r\n}"},
 {"id":1345, "parametername":"net.sourceforge.ganttproject.time.TimeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":645, "classname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack", "methodid":4884, "methodname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack.createTimeFrame(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":1, "sourcecode":"public TimeFrame createTimeFrame(Date baseDate, TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    // if (topUnit instanceof TimeUnitFunctionOfDate) {\r\n    // topUnit = ((TimeUnitFunctionOfDate)topUnit).createTimeUnit(baseDate);\r\n    // }\r\n    return new TimeFrameImpl(baseDate, topUnit, bottomUnit);\r\n}"},
 {"id":1346, "parametername":"TimeUnit bottomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":645, "classname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack", "methodid":4884, "methodname":"net.sourceforge.ganttproject.time.gregorian.GPTimeUnitStack.createTimeFrame(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public TimeFrame createTimeFrame(Date baseDate, TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    // if (topUnit instanceof TimeUnitFunctionOfDate) {\r\n    // topUnit = ((TimeUnitFunctionOfDate)topUnit).createTimeUnit(baseDate);\r\n    // }\r\n    return new TimeFrameImpl(baseDate, topUnit, bottomUnit);\r\n}"},
 {"id":1347, "parametername":"TimeUnit topUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":647, "classname":"net.sourceforge.ganttproject.time.gregorian.GregorianTimeUnitStack", "methodid":4898, "methodname":"net.sourceforge.ganttproject.time.gregorian.GregorianTimeUnitStack.createTimeFrame(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public TimeFrame createTimeFrame(Date baseDate, TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    if (topUnit instanceof TimeUnitFunctionOfDate) {\r\n        topUnit = ((TimeUnitFunctionOfDate) (topUnit)).createTimeUnit(baseDate);\r\n    }\r\n    return new TimeFrameImpl(baseDate, topUnit, bottomUnit);\r\n}"},
 {"id":1348, "parametername":"net.sourceforge.ganttproject.time.TimeFrame", "parametertype":"net.sourceforge.ganttproject.time.TimeFrame", "parameterclass":629, "classid":647, "classname":"net.sourceforge.ganttproject.time.gregorian.GregorianTimeUnitStack", "methodid":4898, "methodname":"net.sourceforge.ganttproject.time.gregorian.GregorianTimeUnitStack.createTimeFrame(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":1, "sourcecode":"public TimeFrame createTimeFrame(Date baseDate, TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    if (topUnit instanceof TimeUnitFunctionOfDate) {\r\n        topUnit = ((TimeUnitFunctionOfDate) (topUnit)).createTimeUnit(baseDate);\r\n    }\r\n    return new TimeFrameImpl(baseDate, topUnit, bottomUnit);\r\n}"},
 {"id":1349, "parametername":"TimeUnit bottomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":647, "classname":"net.sourceforge.ganttproject.time.gregorian.GregorianTimeUnitStack", "methodid":4898, "methodname":"net.sourceforge.ganttproject.time.gregorian.GregorianTimeUnitStack.createTimeFrame(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public TimeFrame createTimeFrame(Date baseDate, TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    if (topUnit instanceof TimeUnitFunctionOfDate) {\r\n        topUnit = ((TimeUnitFunctionOfDate) (topUnit)).createTimeUnit(baseDate);\r\n    }\r\n    return new TimeFrameImpl(baseDate, topUnit, bottomUnit);\r\n}"},
 {"id":1350, "parametername":"GanttLanguage.Event event", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage$Event", "parameterclass":459, "classid":648, "classname":"net.sourceforge.ganttproject.time.gregorian.MonthTextFormatter", "methodid":4905, "methodname":"net.sourceforge.ganttproject.time.gregorian.MonthTextFormatter.languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "isreturn":0, "sourcecode":"public void languageChanged(GanttLanguage.Event event) {\r\n    super.languageChanged(event);\r\n    initFormats();\r\n}"},
 {"id":1351, "parametername":"TimeUnit topUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4906, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.-init-(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"TimeFrameImpl(Date baseDate, TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    // if (!topUnit.isConstructedFrom(bottomUnit)) {\r\n    // throw new RuntimeException(\"Top unit=\"+topUnit+\" is not constructed\r\n    // from bottom unit=\"+bottomUnit);\r\n    // }\r\n    if (topUnit instanceof TimeUnitFunctionOfDate) {\r\n        topUnit = ((TimeUnitFunctionOfDate) (topUnit)).createTimeUnit(baseDate);\r\n    }\r\n    myBaseDate = baseDate;\r\n    myHighestFrameable = calculateHighestFrameableUnit(topUnit, bottomUnit);\r\n    myLowestFrameable = calculateLowestFrameableUnit(topUnit, bottomUnit);\r\n    // if (myHighestFrameable!=topUnit || myLowestFrameable!=bottomUnit) {\r\n    // throw new RuntimeException(\"Current implementation requires all units\r\n    // to be frameable. myHighestFrameable=\"+myHighestFrameable+\"\r\n    // myLowestFrameable=\"+myLowestFrameable);\r\n    // }\r\n    myTopUnit = topUnit;\r\n    myBottomUnit = bottomUnit;\r\n    myCalendar = CalendarFactory.newCalendar();\r\n    myCalendar.setTime(myBaseDate);\r\n    if ((myLowestFrameable) == null) {\r\n        throw new RuntimeException(\"Failed to find any time frameable unit :(\");\r\n    }\r\n    myStartDate = myLowestFrameable.adjustLeft(myBaseDate);\r\n    if (myStartDate.after(myBaseDate)) {\r\n        throw new IllegalStateException(\"Start date is after base date\");\r\n    }\r\n    // System.err.println(\"TimeFrame.init: myStartDate=\"+myStartDate+\"\r\n    // myBaseDate=\"+myBaseDate);\r\n    // myEndDate = calculateEndDate();\r\n    // myNextFrameStartDate = shiftDate(myBaseDate, myTopUnit, 1);\r\n}"},
 {"id":1352, "parametername":"TimeUnit bottomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4906, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.-init-(java.util.Date,net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"TimeFrameImpl(Date baseDate, TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    // if (!topUnit.isConstructedFrom(bottomUnit)) {\r\n    // throw new RuntimeException(\"Top unit=\"+topUnit+\" is not constructed\r\n    // from bottom unit=\"+bottomUnit);\r\n    // }\r\n    if (topUnit instanceof TimeUnitFunctionOfDate) {\r\n        topUnit = ((TimeUnitFunctionOfDate) (topUnit)).createTimeUnit(baseDate);\r\n    }\r\n    myBaseDate = baseDate;\r\n    myHighestFrameable = calculateHighestFrameableUnit(topUnit, bottomUnit);\r\n    myLowestFrameable = calculateLowestFrameableUnit(topUnit, bottomUnit);\r\n    // if (myHighestFrameable!=topUnit || myLowestFrameable!=bottomUnit) {\r\n    // throw new RuntimeException(\"Current implementation requires all units\r\n    // to be frameable. myHighestFrameable=\"+myHighestFrameable+\"\r\n    // myLowestFrameable=\"+myLowestFrameable);\r\n    // }\r\n    myTopUnit = topUnit;\r\n    myBottomUnit = bottomUnit;\r\n    myCalendar = CalendarFactory.newCalendar();\r\n    myCalendar.setTime(myBaseDate);\r\n    if ((myLowestFrameable) == null) {\r\n        throw new RuntimeException(\"Failed to find any time frameable unit :(\");\r\n    }\r\n    myStartDate = myLowestFrameable.adjustLeft(myBaseDate);\r\n    if (myStartDate.after(myBaseDate)) {\r\n        throw new IllegalStateException(\"Start date is after base date\");\r\n    }\r\n    // System.err.println(\"TimeFrame.init: myStartDate=\"+myStartDate+\"\r\n    // myBaseDate=\"+myBaseDate);\r\n    // myEndDate = calculateEndDate();\r\n    // myNextFrameStartDate = shiftDate(myBaseDate, myTopUnit, 1);\r\n}"},
 {"id":1353, "parametername":"TimeUnit myUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":649, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader", "methodid":4931, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader.-init-(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public LineHeader(TimeUnit myUnit) {\r\n    this.myUnit = myUnit;\r\n}"},
 {"id":1354, "parametername":"TimeUnit topUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4913, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.calculateLowestFrameableUnit(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"private DateFrameable calculateLowestFrameableUnit(TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    // DateFrameable lowestFrameable = null;\r\n    // for (TimeUnit timeUnit = topUnit; timeUnit!=null; timeUnit =\r\n    // timeUnit.getDirectAtomUnit()) {\r\n    // if (timeUnit instanceof DateFrameable) {\r\n    // lowestFrameable = (DateFrameable)timeUnit;\r\n    // }\r\n    // if (bottomUnit.equals(timeUnit)) {\r\n    // break;\r\n    // }\r\n    // }\r\n    // return lowestFrameable;\r\n    return bottomUnit;\r\n}"},
 {"id":1355, "parametername":"net.sourceforge.ganttproject.time.DateFrameable", "parametertype":"net.sourceforge.ganttproject.time.DateFrameable", "parameterclass":627, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4913, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.calculateLowestFrameableUnit(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":1, "sourcecode":"private DateFrameable calculateLowestFrameableUnit(TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    // DateFrameable lowestFrameable = null;\r\n    // for (TimeUnit timeUnit = topUnit; timeUnit!=null; timeUnit =\r\n    // timeUnit.getDirectAtomUnit()) {\r\n    // if (timeUnit instanceof DateFrameable) {\r\n    // lowestFrameable = (DateFrameable)timeUnit;\r\n    // }\r\n    // if (bottomUnit.equals(timeUnit)) {\r\n    // break;\r\n    // }\r\n    // }\r\n    // return lowestFrameable;\r\n    return bottomUnit;\r\n}"},
 {"id":1356, "parametername":"TimeUnit bottomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4913, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.calculateLowestFrameableUnit(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"private DateFrameable calculateLowestFrameableUnit(TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    // DateFrameable lowestFrameable = null;\r\n    // for (TimeUnit timeUnit = topUnit; timeUnit!=null; timeUnit =\r\n    // timeUnit.getDirectAtomUnit()) {\r\n    // if (timeUnit instanceof DateFrameable) {\r\n    // lowestFrameable = (DateFrameable)timeUnit;\r\n    // }\r\n    // if (bottomUnit.equals(timeUnit)) {\r\n    // break;\r\n    // }\r\n    // }\r\n    // return lowestFrameable;\r\n    return bottomUnit;\r\n}"},
 {"id":1357, "parametername":"TimeUnit topUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4911, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.calculateHighestFrameableUnit(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"private DateFrameable calculateHighestFrameableUnit(TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    // DateFrameable highestFrameable = null;\r\n    // for (TimeUnit timeUnit = topUnit; timeUnit!=null; timeUnit =\r\n    // timeUnit.getDirectAtomUnit()) {\r\n    // System.err.println(\"next time unit=\"+timeUnit);\r\n    // if (timeUnit instanceof DateFrameable) {\r\n    // highestFrameable = (DateFrameable)timeUnit;\r\n    // break;\r\n    // }\r\n    // if (timeUnit==bottomUnit) {\r\n    // break;\r\n    // }\r\n    // }\r\n    // return highestFrameable;\r\n    return topUnit;\r\n}"},
 {"id":1358, "parametername":"net.sourceforge.ganttproject.time.DateFrameable", "parametertype":"net.sourceforge.ganttproject.time.DateFrameable", "parameterclass":627, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4911, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.calculateHighestFrameableUnit(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":1, "sourcecode":"private DateFrameable calculateHighestFrameableUnit(TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    // DateFrameable highestFrameable = null;\r\n    // for (TimeUnit timeUnit = topUnit; timeUnit!=null; timeUnit =\r\n    // timeUnit.getDirectAtomUnit()) {\r\n    // System.err.println(\"next time unit=\"+timeUnit);\r\n    // if (timeUnit instanceof DateFrameable) {\r\n    // highestFrameable = (DateFrameable)timeUnit;\r\n    // break;\r\n    // }\r\n    // if (timeUnit==bottomUnit) {\r\n    // break;\r\n    // }\r\n    // }\r\n    // return highestFrameable;\r\n    return topUnit;\r\n}"},
 {"id":1359, "parametername":"TimeUnit bottomUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4911, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.calculateHighestFrameableUnit(net.sourceforge.ganttproject.time.TimeUnit,net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"private DateFrameable calculateHighestFrameableUnit(TimeUnit topUnit, TimeUnit bottomUnit) {\r\n    // DateFrameable highestFrameable = null;\r\n    // for (TimeUnit timeUnit = topUnit; timeUnit!=null; timeUnit =\r\n    // timeUnit.getDirectAtomUnit()) {\r\n    // System.err.println(\"next time unit=\"+timeUnit);\r\n    // if (timeUnit instanceof DateFrameable) {\r\n    // highestFrameable = (DateFrameable)timeUnit;\r\n    // break;\r\n    // }\r\n    // if (timeUnit==bottomUnit) {\r\n    // break;\r\n    // }\r\n    // }\r\n    // return highestFrameable;\r\n    return topUnit;\r\n}"},
 {"id":1360, "parametername":"TimeFrameImpl.LineHeader lastHeader", "parametertype":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader", "parameterclass":649, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4912, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.calculateLines(net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader)", "isreturn":0, "sourcecode":"private TimeFrameImpl.LineHeader calculateLines(TimeFrameImpl.LineHeader lastHeader) {\r\n    TimeUnit curUnit = (lastHeader == null) ? myTopUnit : lastHeader.myUnit.getDirectAtomUnit();\r\n    TimeFrameImpl.LineHeader curHeader = createHeader(curUnit);\r\n    fillLine(lastHeader, curHeader);\r\n    if (lastHeader != null) {\r\n        lastHeader.append(curHeader);\r\n    }\r\n    if (curUnit != (myBottomUnit)) {\r\n        calculateLines(curHeader);\r\n    }\r\n    return curHeader;\r\n}"},
 {"id":1361, "parametername":"TimeFrameImpl.LineHeader higherHeader", "parametertype":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader", "parameterclass":649, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4916, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.fillLine(net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader,net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader)", "isreturn":0, "sourcecode":"private void fillLine(TimeFrameImpl.LineHeader higherHeader, TimeFrameImpl.LineHeader header) {\r\n    if (higherHeader == null) {\r\n        Date startDate = myStartDate;\r\n        Date endDate = ((DateFrameable) (myTopUnit)).adjustRight(myBaseDate);\r\n        // System.err.println(\"filling line=\"+header+\" endDate=\"+endDate);\r\n        TimeFrameImpl.LineItem item = createLineItem(startDate, endDate);\r\n        header.myFirstItem = item;\r\n    } else {\r\n        // System.err.println(\"filling line=\"+header);\r\n        for (TimeFrameImpl.LineItem higherItem = higherHeader.myFirstItem; higherItem != null; higherItem = higherItem.myNextItem) {\r\n            int unitCount = getUnitCount(higherHeader, header, higherItem);\r\n            Date curStartDate = higherItem.myStartDate;\r\n            TimeFrameImpl.LineItem curItem = null;\r\n            // System.err.println(\"unit count=\"+unitCount+\"\r\n            // startDate=\"+curStartDate);\r\n            for (int i = 0; (i < unitCount) && ((curStartDate.compareTo(higherItem.myEndDate)) < 0); i++) {\r\n                Date nextEndDate = ((DateFrameable) (header.myUnit)).adjustRight(curStartDate);\r\n                TimeFrameImpl.LineItem newItem = createLineItem(curStartDate, nextEndDate);\r\n                if (curItem == null) {\r\n                    header.myFirstItem = newItem;\r\n                } else {\r\n                    curItem.myNextItem = newItem;\r\n                }\r\n                curItem = newItem;\r\n                curStartDate = nextEndDate;\r\n            }\r\n            // System.err.println(\"result: \"+header.fullDump());\r\n        }\r\n    }\r\n}"},
 {"id":1362, "parametername":"TimeFrameImpl.LineHeader header", "parametertype":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader", "parameterclass":649, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4916, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.fillLine(net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader,net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader)", "isreturn":0, "sourcecode":"private void fillLine(TimeFrameImpl.LineHeader higherHeader, TimeFrameImpl.LineHeader header) {\r\n    if (higherHeader == null) {\r\n        Date startDate = myStartDate;\r\n        Date endDate = ((DateFrameable) (myTopUnit)).adjustRight(myBaseDate);\r\n        // System.err.println(\"filling line=\"+header+\" endDate=\"+endDate);\r\n        TimeFrameImpl.LineItem item = createLineItem(startDate, endDate);\r\n        header.myFirstItem = item;\r\n    } else {\r\n        // System.err.println(\"filling line=\"+header);\r\n        for (TimeFrameImpl.LineItem higherItem = higherHeader.myFirstItem; higherItem != null; higherItem = higherItem.myNextItem) {\r\n            int unitCount = getUnitCount(higherHeader, header, higherItem);\r\n            Date curStartDate = higherItem.myStartDate;\r\n            TimeFrameImpl.LineItem curItem = null;\r\n            // System.err.println(\"unit count=\"+unitCount+\"\r\n            // startDate=\"+curStartDate);\r\n            for (int i = 0; (i < unitCount) && ((curStartDate.compareTo(higherItem.myEndDate)) < 0); i++) {\r\n                Date nextEndDate = ((DateFrameable) (header.myUnit)).adjustRight(curStartDate);\r\n                TimeFrameImpl.LineItem newItem = createLineItem(curStartDate, nextEndDate);\r\n                if (curItem == null) {\r\n                    header.myFirstItem = newItem;\r\n                } else {\r\n                    curItem.myNextItem = newItem;\r\n                }\r\n                curItem = newItem;\r\n                curStartDate = nextEndDate;\r\n            }\r\n            // System.err.println(\"result: \"+header.fullDump());\r\n        }\r\n    }\r\n}"},
 {"id":1363, "parametername":"TimeFrameImpl.LineHeader higherHeader", "parametertype":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader", "parameterclass":649, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4924, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getUnitCount(net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader,net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader,net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineItem)", "isreturn":0, "sourcecode":"private int getUnitCount(TimeFrameImpl.LineHeader higherHeader, TimeFrameImpl.LineHeader header, TimeFrameImpl.LineItem higherItem) {\r\n    TimeUnit higherUnit = ((higherHeader.myUnit) instanceof TimeUnitFunctionOfDate) ? ((TimeUnitFunctionOfDate) (higherHeader.myUnit)).createTimeUnit(higherItem.myStartDate) : higherHeader.myUnit;\r\n    TimeUnit lowerUnit = header.myUnit;\r\n    int result = higherUnit.getAtomCount(lowerUnit);\r\n    return result;\r\n}"},
 {"id":1364, "parametername":"TimeFrameImpl.LineHeader header", "parametertype":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader", "parameterclass":649, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4924, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getUnitCount(net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader,net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader,net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineItem)", "isreturn":0, "sourcecode":"private int getUnitCount(TimeFrameImpl.LineHeader higherHeader, TimeFrameImpl.LineHeader header, TimeFrameImpl.LineItem higherItem) {\r\n    TimeUnit higherUnit = ((higherHeader.myUnit) instanceof TimeUnitFunctionOfDate) ? ((TimeUnitFunctionOfDate) (higherHeader.myUnit)).createTimeUnit(higherItem.myStartDate) : higherHeader.myUnit;\r\n    TimeUnit lowerUnit = header.myUnit;\r\n    int result = higherUnit.getAtomCount(lowerUnit);\r\n    return result;\r\n}"},
 {"id":1365, "parametername":"TimeFrameImpl.LineItem higherItem", "parametertype":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineItem", "parameterclass":650, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4924, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getUnitCount(net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader,net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader,net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineItem)", "isreturn":0, "sourcecode":"private int getUnitCount(TimeFrameImpl.LineHeader higherHeader, TimeFrameImpl.LineHeader header, TimeFrameImpl.LineItem higherItem) {\r\n    TimeUnit higherUnit = ((higherHeader.myUnit) instanceof TimeUnitFunctionOfDate) ? ((TimeUnitFunctionOfDate) (higherHeader.myUnit)).createTimeUnit(higherItem.myStartDate) : higherHeader.myUnit;\r\n    TimeUnit lowerUnit = header.myUnit;\r\n    int result = higherUnit.getAtomCount(lowerUnit);\r\n    return result;\r\n}"},
 {"id":1366, "parametername":"TimeUnit unit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4914, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.createHeader(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"private TimeFrameImpl.LineHeader createHeader(TimeUnit unit) {\r\n    return new TimeFrameImpl.LineHeader(unit);\r\n}"},
 {"id":1367, "parametername":"TimeUnit unit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4923, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getUnitCount(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"public int getUnitCount(TimeUnit unit) {\r\n    TimeFrameImpl.LineHeader lineHeader = getLineHeader(unit);\r\n    if (lineHeader == null) {\r\n        lineHeader = new TimeFrameImpl.LineHeader(unit);\r\n        // return getUnitCount(getLineHeader(), lineHeader,\r\n        // getLineHeader().myFirstItem);\r\n        fillLine(getLineHeader(), lineHeader);\r\n        return lineHeader.getItemCount();\r\n    }\r\n    int result = (lineHeader == null) ? -1 : lineHeader.getItemCount();\r\n    if (result == (-1)) {\r\n        throw new RuntimeException(((\"There is not time unit=\" + unit) + \" in this time frame\"));\r\n    }\r\n    return result;\r\n}"},
 {"id":1368, "parametername":"TimeUnit timeUnit", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4920, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getLineHeader(net.sourceforge.ganttproject.time.TimeUnit)", "isreturn":0, "sourcecode":"private TimeFrameImpl.LineHeader getLineHeader(TimeUnit timeUnit) {\r\n    TimeFrameImpl.LineHeader result = getLineHeader();\r\n    for (; result != null; result = result.next()) {\r\n        if ((result.myUnit) == timeUnit) {\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}"},
 {"id":1369, "parametername":"TimeUnit unitLine", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4927, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getUnitText(net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"// public int getUnitCount(TimeUnit unitLine) {\r\n// int counter = 0;\r\n// for (Date nextUnitStart = shiftDate(myStartDate, unitLine, counter);\r\n// nextUnitStart.before(myNextFrameStartDate);\r\n// nextUnitStart = shiftDate(myStartDate, unitLine, ++counter)) {\r\n// //System.err.println(\"myStart=\"+myStartDate+\"\r\n// nextFrame=\"+myNextFrameStartDate+\" nextUnitStart=\"+nextUnitStart);\r\n// }\r\n// return counter;\r\n// }\r\npublic TimeUnitText getUnitText(TimeUnit unitLine, int position) {\r\n    TimeFrameImpl.LineHeader lineHeader = getLineHeader(unitLine);\r\n    TimeFrameImpl.LineItem lineItem = (lineHeader == null) ? null : lineHeader.getLineItem(position);\r\n    Date startDate = (lineItem == null) ? null : lineItem.myStartDate;\r\n    TimeUnitText result = (startDate == null) ? null : getUnitText(unitLine, startDate);\r\n    // if (\"31\".equals(result)) {\r\n    // System.err.println(\"unit line=\"+unitLine+\" position=\"+position);\r\n    // }\r\n    return result;\r\n}"},
 {"id":1370, "parametername":"net.sourceforge.ganttproject.time.TimeUnitText", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitText", "parameterclass":640, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4927, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getUnitText(net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":1, "sourcecode":"// public int getUnitCount(TimeUnit unitLine) {\r\n// int counter = 0;\r\n// for (Date nextUnitStart = shiftDate(myStartDate, unitLine, counter);\r\n// nextUnitStart.before(myNextFrameStartDate);\r\n// nextUnitStart = shiftDate(myStartDate, unitLine, ++counter)) {\r\n// //System.err.println(\"myStart=\"+myStartDate+\"\r\n// nextFrame=\"+myNextFrameStartDate+\" nextUnitStart=\"+nextUnitStart);\r\n// }\r\n// return counter;\r\n// }\r\npublic TimeUnitText getUnitText(TimeUnit unitLine, int position) {\r\n    TimeFrameImpl.LineHeader lineHeader = getLineHeader(unitLine);\r\n    TimeFrameImpl.LineItem lineItem = (lineHeader == null) ? null : lineHeader.getLineItem(position);\r\n    Date startDate = (lineItem == null) ? null : lineItem.myStartDate;\r\n    TimeUnitText result = (startDate == null) ? null : getUnitText(unitLine, startDate);\r\n    // if (\"31\".equals(result)) {\r\n    // System.err.println(\"unit line=\"+unitLine+\" position=\"+position);\r\n    // }\r\n    return result;\r\n}"},
 {"id":1371, "parametername":"TimeUnit unitLine", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4928, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getUnitText(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date)", "isreturn":0, "sourcecode":"private TimeUnitText getUnitText(TimeUnit unitLine, Date startDate) {\r\n    String result = null;\r\n    return unitLine.format(startDate);\r\n    // if (unitLine.equals(GregorianTimeUnitStack.DAY)) {\r\n    // result = \"\"+startDate.getDate();\r\n    // }\r\n    // return result;\r\n}"},
 {"id":1372, "parametername":"net.sourceforge.ganttproject.time.TimeUnitText", "parametertype":"net.sourceforge.ganttproject.time.TimeUnitText", "parameterclass":640, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4928, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getUnitText(net.sourceforge.ganttproject.time.TimeUnit,java.util.Date)", "isreturn":1, "sourcecode":"private TimeUnitText getUnitText(TimeUnit unitLine, Date startDate) {\r\n    String result = null;\r\n    return unitLine.format(startDate);\r\n    // if (unitLine.equals(GregorianTimeUnitStack.DAY)) {\r\n    // result = \"\"+startDate.getDate();\r\n    // }\r\n    // return result;\r\n}"},
 {"id":1373, "parametername":"TimeUnit unitLine", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4926, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getUnitStart(net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"public Date getUnitStart(TimeUnit unitLine, int position) {\r\n    TimeFrameImpl.LineHeader lineHeader = getLineHeader(unitLine);\r\n    TimeFrameImpl.LineItem lineItem = (lineHeader == null) ? null : lineHeader.getLineItem(position);\r\n    Date result = (lineItem == null) ? null : lineItem.myStartDate;\r\n    return result;\r\n}"},
 {"id":1374, "parametername":"TimeUnit unitLine", "parametertype":"net.sourceforge.ganttproject.time.TimeUnit", "parameterclass":630, "classid":652, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl", "methodid":4925, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl.getUnitFinish(net.sourceforge.ganttproject.time.TimeUnit,int)", "isreturn":0, "sourcecode":"public Date getUnitFinish(TimeUnit unitLine, int position) {\r\n    TimeFrameImpl.LineHeader lineHeader = getLineHeader(unitLine);\r\n    TimeFrameImpl.LineItem lineItem = (lineHeader == null) ? null : lineHeader.getLineItem(position);\r\n    Date result = (lineItem == null) ? null : lineItem.myEndDate;\r\n    return result;\r\n}"},
 {"id":1375, "parametername":"TimeFrameImpl.LineHeader next", "parametertype":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader", "parameterclass":649, "classid":649, "classname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader", "methodid":4932, "methodname":"net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader.append(net.sourceforge.ganttproject.time.gregorian.TimeFrameImpl$LineHeader)", "isreturn":0, "sourcecode":"void append(TimeFrameImpl.LineHeader next) {\r\n    myNextHeader = next;\r\n}"},
 {"id":1376, "parametername":"GanttLanguage.Event event", "parametertype":"net.sourceforge.ganttproject.language.GanttLanguage$Event", "parameterclass":459, "classid":654, "classname":"net.sourceforge.ganttproject.time.gregorian.WeekTextFormatter", "methodid":4947, "methodname":"net.sourceforge.ganttproject.time.gregorian.WeekTextFormatter.languageChanged(net.sourceforge.ganttproject.language.GanttLanguage$Event)", "isreturn":0, "sourcecode":"public void languageChanged(GanttLanguage.Event event) {\r\n    super.languageChanged(event);\r\n    myCalendar = CalendarFactory.newCalendar();\r\n}"},
 {"id":1377, "parametername":"GPUndoListener listener", "parametertype":"net.sourceforge.ganttproject.undo.GPUndoListener", "parameterclass":656, "classid":657, "classname":"net.sourceforge.ganttproject.undo.GPUndoManager", "methodid":4951, "methodname":"net.sourceforge.ganttproject.undo.GPUndoManager.addUndoableEditListener(net.sourceforge.ganttproject.undo.GPUndoListener)", "isreturn":0, "sourcecode":"void addUndoableEditListener(GPUndoListener listener);"},
 {"id":1378, "parametername":"GPUndoListener listener", "parametertype":"net.sourceforge.ganttproject.undo.GPUndoListener", "parameterclass":656, "classid":657, "classname":"net.sourceforge.ganttproject.undo.GPUndoManager", "methodid":4958, "methodname":"net.sourceforge.ganttproject.undo.GPUndoManager.removeUndoableEditListener(net.sourceforge.ganttproject.undo.GPUndoListener)", "isreturn":0, "sourcecode":"void removeUndoableEditListener(GPUndoListener listener);"},
 {"id":1379, "parametername":"IGanttProject project", "parametertype":"net.sourceforge.ganttproject.IGanttProject", "parameterclass":84, "classid":658, "classname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "methodid":4961, "methodname":"net.sourceforge.ganttproject.undo.UndoManagerImpl.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.parser.ParserFactory,net.sourceforge.ganttproject.document.DocumentManager)", "isreturn":0, "sourcecode":"public UndoManagerImpl(IGanttProject project, ParserFactory parserFactory, DocumentManager documentManager) {\r\n    myProject = project;\r\n    myParserFactory = parserFactory;\r\n    myDocumentManager = documentManager;\r\n    mySwingUndoManager = new UndoManager();\r\n    myUndoEventDispatcher = new UndoableEditSupport();\r\n}"},
 {"id":1380, "parametername":"ParserFactory parserFactory", "parametertype":"net.sourceforge.ganttproject.parser.ParserFactory", "parameterclass":475, "classid":658, "classname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "methodid":4961, "methodname":"net.sourceforge.ganttproject.undo.UndoManagerImpl.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.parser.ParserFactory,net.sourceforge.ganttproject.document.DocumentManager)", "isreturn":0, "sourcecode":"public UndoManagerImpl(IGanttProject project, ParserFactory parserFactory, DocumentManager documentManager) {\r\n    myProject = project;\r\n    myParserFactory = parserFactory;\r\n    myDocumentManager = documentManager;\r\n    mySwingUndoManager = new UndoManager();\r\n    myUndoEventDispatcher = new UndoableEditSupport();\r\n}"},
 {"id":1381, "parametername":"DocumentManager documentManager", "parametertype":"net.sourceforge.ganttproject.document.DocumentManager", "parameterclass":237, "classid":658, "classname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "methodid":4961, "methodname":"net.sourceforge.ganttproject.undo.UndoManagerImpl.-init-(net.sourceforge.ganttproject.IGanttProject,net.sourceforge.ganttproject.parser.ParserFactory,net.sourceforge.ganttproject.document.DocumentManager)", "isreturn":0, "sourcecode":"public UndoManagerImpl(IGanttProject project, ParserFactory parserFactory, DocumentManager documentManager) {\r\n    myProject = project;\r\n    myParserFactory = parserFactory;\r\n    myDocumentManager = documentManager;\r\n    mySwingUndoManager = new UndoManager();\r\n    myUndoEventDispatcher = new UndoableEditSupport();\r\n}"},
 {"id":1382, "parametername":"UndoableEditImpl swingEditImpl", "parametertype":"net.sourceforge.ganttproject.undo.UndoableEditImpl", "parameterclass":659, "classid":658, "classname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "methodid":4967, "methodname":"net.sourceforge.ganttproject.undo.UndoManagerImpl.fireUndoableEditHappened(net.sourceforge.ganttproject.undo.UndoableEditImpl)", "isreturn":0, "sourcecode":"private void fireUndoableEditHappened(UndoableEditImpl swingEditImpl) {\r\n    myUndoEventDispatcher.postEdit(swingEditImpl);\r\n}"},
 {"id":1383, "parametername":"GPUndoListener listener", "parametertype":"net.sourceforge.ganttproject.undo.GPUndoListener", "parameterclass":656, "classid":658, "classname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "methodid":4962, "methodname":"net.sourceforge.ganttproject.undo.UndoManagerImpl.addUndoableEditListener(net.sourceforge.ganttproject.undo.GPUndoListener)", "isreturn":0, "sourcecode":"public void addUndoableEditListener(GPUndoListener listener) {\r\n    myUndoEventDispatcher.addUndoableEditListener(listener);\r\n}"},
 {"id":1384, "parametername":"GPUndoListener listener", "parametertype":"net.sourceforge.ganttproject.undo.GPUndoListener", "parameterclass":656, "classid":658, "classname":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "methodid":4974, "methodname":"net.sourceforge.ganttproject.undo.UndoManagerImpl.removeUndoableEditListener(net.sourceforge.ganttproject.undo.GPUndoListener)", "isreturn":0, "sourcecode":"public void removeUndoableEditListener(GPUndoListener listener) {\r\n    myUndoEventDispatcher.removeUndoableEditListener(listener);\r\n}"},
 {"id":1385, "parametername":"UndoManagerImpl manager", "parametertype":"net.sourceforge.ganttproject.undo.UndoManagerImpl", "parameterclass":658, "classid":659, "classname":"net.sourceforge.ganttproject.undo.UndoableEditImpl", "methodid":4977, "methodname":"net.sourceforge.ganttproject.undo.UndoableEditImpl.-init-(java.lang.String,java.lang.Runnable,net.sourceforge.ganttproject.undo.UndoManagerImpl)", "isreturn":0, "sourcecode":"UndoableEditImpl(String localizedName, Runnable editImpl, UndoManagerImpl manager) throws IOException {\r\n    // System.out.println (\"UndoableEditImpl : \" + localizedName);\r\n    myManager = manager;\r\n    myPresentationName = localizedName;\r\n    myEditImpl = editImpl;\r\n    myDocumentBefore = saveFile();\r\n    editImpl.run();\r\n    myDocumentAfter = saveFile();\r\n}"},
 {"id":1386, "parametername":"Document document", "parametertype":"net.sourceforge.ganttproject.document.Document", "parameterclass":233, "classid":659, "classname":"net.sourceforge.ganttproject.undo.UndoableEditImpl", "methodid":4983, "methodname":"net.sourceforge.ganttproject.undo.UndoableEditImpl.restoreDocument(net.sourceforge.ganttproject.document.Document)", "isreturn":0, "sourcecode":"private void restoreDocument(Document document) throws IOException {\r\n    Document projectDocument = myManager.getProject().getDocument();\r\n    myManager.getProject().close();\r\n    document.read();\r\n    myManager.getProject().setDocument(projectDocument);\r\n}"}]