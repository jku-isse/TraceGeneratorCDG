[{"id":1, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":5, "classname":"edu.ncsu.csc.itrust.DBBuilder", "methodid":26, "methodname":"edu.ncsu.csc.itrust.DBBuilder.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"public DBBuilder(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":2, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":9, "classname":"edu.ncsu.csc.itrust.EmailUtil", "methodid":51, "methodname":"edu.ncsu.csc.itrust.EmailUtil.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"public EmailUtil(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":3, "parametername":"Email email", "parametertype":"edu.ncsu.csc.itrust.beans.Email", "parameterclass":251, "classid":9, "classname":"edu.ncsu.csc.itrust.EmailUtil", "methodid":52, "methodname":"edu.ncsu.csc.itrust.EmailUtil.sendEmail(edu.ncsu.csc.itrust.beans.Email)", "isreturn":0, "sourcecode":"// DO NOT SEND REAL EMAILS!!!!!\r\n// Sending emails - even to a throwaway account, is a waste of bandwidth and looks very suspicious.\r\n// If you want to know how to send emails from Java, just Google it on your own time.\r\npublic void sendEmail(Email email) throws DBException {\r\n    factory.getFakeEmailDAO().sendEmailRecord(email);\r\n}"},
 {"id":4, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":23, "classname":"edu.ncsu.csc.itrust.action.ActivityFeedAction", "methodid":84, "methodname":"edu.ncsu.csc.itrust.action.ActivityFeedAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person retrieving the logs.\r\n */\r\npublic ActivityFeedAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n}"},
 {"id":5, "parametername":"TransactionType code", "parametertype":"edu.ncsu.csc.itrust.enums.TransactionType", "parameterclass":490, "classid":23, "classname":"edu.ncsu.csc.itrust.action.ActivityFeedAction", "methodid":85, "methodname":"edu.ncsu.csc.itrust.action.ActivityFeedAction.getMessageAsSentence(java.lang.String,java.sql.Timestamp,edu.ncsu.csc.itrust.enums.TransactionType)", "isreturn":0, "sourcecode":"/**\r\n * Pulls Action Phrase from the associated TransactionType Enum\r\n * Forms an English sentence with actor, action, and timestamp.\r\n *\r\n * @param actor\r\n * \t\t\r\n * @param timestamp\r\n * \t\t\r\n * @param code\r\n * \t\t\r\n * @return \r\n */\r\npublic String getMessageAsSentence(String actor, Timestamp timestamp, TransactionType code) {\r\n    String result = actor + \" \";\r\n    for (TransactionType type : TransactionType.values()) {\r\n        if (((code.getCode()) == (type.getCode())) && (type.isPatientViewable()))\r\n            result += type.getActionPhrase();\r\n\r\n    }\r\n    SimpleDateFormat formatter = new SimpleDateFormat(\"h:mma.\");\r\n    switch (ActivityFeedAction.recent(new Date(timestamp.getTime()))) {\r\n        case 0 :\r\n            result += \" today\";\r\n            break;\r\n        case 1 :\r\n            result += \" yesterday\";\r\n            break;\r\n        case 2 :\r\n            DateFormat sdf = new SimpleDateFormat(\"MM/dd/yyyy\");\r\n            result += \" on \" + (sdf.format(new Date(timestamp.getTime())));\r\n            break;\r\n    }\r\n    result += \" at \" + (formatter.format(timestamp));\r\n    return replaceNameWithYou(result);\r\n}"},
 {"id":6, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":25, "classname":"edu.ncsu.csc.itrust.action.AddApptAction", "methodid":94, "methodname":"edu.ncsu.csc.itrust.action.AddApptAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public AddApptAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n}"},
 {"id":7, "parametername":"ApptBean appt", "parametertype":"edu.ncsu.csc.itrust.beans.ApptBean", "parameterclass":245, "classid":25, "classname":"edu.ncsu.csc.itrust.action.AddApptAction", "methodid":95, "methodname":"edu.ncsu.csc.itrust.action.AddApptAction.addAppt(edu.ncsu.csc.itrust.beans.ApptBean,boolean)", "isreturn":0, "sourcecode":"public String addAppt(ApptBean appt, boolean ignoreConflicts) throws FormValidationException, SQLException {\r\n    validator.validate(appt);\r\n    if (appt.getDate().before(new Timestamp(System.currentTimeMillis()))) {\r\n        return (\"The scheduled date of this Appointment (\" + (appt.getDate())) + \") has already passed.\";\r\n    }\r\n    if (!ignoreConflicts) {\r\n        if ((getConflictsForAppt(appt.getHcp(), appt).size()) > 0) {\r\n            return \"Warning! This appointment conflicts with other appointments\";\r\n        }\r\n    }\r\n    try {\r\n        apptDAO.scheduleAppt(appt);\r\n        return (((\"Success: \" + (appt.getApptType())) + \" for \") + (appt.getDate())) + \" added\";\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":8, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":27, "classname":"edu.ncsu.csc.itrust.action.AddApptRequestAction", "methodid":104, "methodname":"edu.ncsu.csc.itrust.action.AddApptRequestAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"public AddApptRequestAction(DAOFactory factory) {\r\n    aDAO = factory.getApptDAO();\r\n    arDAO = factory.getApptRequestDAO();\r\n    atDAO = factory.getApptTypeDAO();\r\n}"},
 {"id":9, "parametername":"ApptRequestBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ApptRequestBean", "parameterclass":246, "classid":27, "classname":"edu.ncsu.csc.itrust.action.AddApptRequestAction", "methodid":105, "methodname":"edu.ncsu.csc.itrust.action.AddApptRequestAction.addApptRequest(edu.ncsu.csc.itrust.beans.ApptRequestBean)", "isreturn":0, "sourcecode":"public String addApptRequest(ApptRequestBean bean) throws SQLException {\r\n    List<ApptBean> conflicts = aDAO.getAllHCPConflictsForAppt(bean.getRequestedAppt().getHcp(), bean.getRequestedAppt());\r\n    if ((conflicts != null) && (!(conflicts.isEmpty()))) {\r\n        return \"The appointment you requested conflicts with other existing appointments.\";\r\n    }\r\n    arDAO.addApptRequest(bean);\r\n    return \"Your appointment request has been saved and is pending.\";\r\n}"},
 {"id":10, "parametername":"ApptBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ApptBean", "parameterclass":245, "classid":27, "classname":"edu.ncsu.csc.itrust.action.AddApptRequestAction", "methodid":107, "methodname":"edu.ncsu.csc.itrust.action.AddApptRequestAction.getNextAvailableAppts(int,edu.ncsu.csc.itrust.beans.ApptBean)", "isreturn":0, "sourcecode":"public List<ApptBean> getNextAvailableAppts(int num, ApptBean bean) throws SQLException {\r\n    List<ApptBean> appts = new ArrayList<ApptBean>(num);\r\n    for (int i = 0; i < num; i++) {\r\n        ApptBean b = new ApptBean();\r\n        b.setApptType(bean.getApptType());\r\n        b.setHcp(bean.getHcp());\r\n        b.setPatient(bean.getPatient());\r\n        b.setDate(new Timestamp(bean.getDate().getTime()));\r\n        List<ApptBean> conflicts = null;\r\n        do {\r\n            conflicts = aDAO.getAllHCPConflictsForAppt(b.getHcp(), b);\r\n            if ((conflicts != null) && (!(conflicts.isEmpty()))) {\r\n                ApptBean lastConflict = conflicts.get(((conflicts.size()) - 1));\r\n                Timestamp afterConflict = endTime(lastConflict);\r\n                b.setDate(afterConflict);\r\n            }\r\n        } while ((conflicts != null) && (!(conflicts.isEmpty())) );\r\n        appts.add(b);\r\n        Timestamp nextTime = endTime(b);\r\n        bean.setDate(nextTime);\r\n    }\r\n    return appts;\r\n}"},
 {"id":11, "parametername":"ApptBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ApptBean", "parameterclass":245, "classid":27, "classname":"edu.ncsu.csc.itrust.action.AddApptRequestAction", "methodid":106, "methodname":"edu.ncsu.csc.itrust.action.AddApptRequestAction.endTime(edu.ncsu.csc.itrust.beans.ApptBean)", "isreturn":0, "sourcecode":"private Timestamp endTime(ApptBean bean) throws SQLException {\r\n    Timestamp d = new Timestamp(bean.getDate().getTime());\r\n    ApptTypeBean type = atDAO.getApptType(bean.getApptType());\r\n    d.setTime(((d.getTime()) + (((type.getDuration()) * 60) * 1000)));\r\n    return d;\r\n}"},
 {"id":12, "parametername":"AddDrugListAction.DrugStrategy uploadStrategy", "parametertype":"edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy", "parameterclass":29, "classid":32, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction", "methodid":112, "methodname":"edu.ncsu.csc.itrust.action.AddDrugListAction.-init-(edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "isreturn":0, "sourcecode":"public AddDrugListAction(AddDrugListAction.DrugStrategy uploadStrategy, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) {\r\n    this.strategy = uploadStrategy;\r\n    this.factory = factory;\r\n    this.loggingAction = loggingAction;\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":13, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":32, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction", "methodid":112, "methodname":"edu.ncsu.csc.itrust.action.AddDrugListAction.-init-(edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "isreturn":0, "sourcecode":"public AddDrugListAction(AddDrugListAction.DrugStrategy uploadStrategy, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) {\r\n    this.strategy = uploadStrategy;\r\n    this.factory = factory;\r\n    this.loggingAction = loggingAction;\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":14, "parametername":"EventLoggingAction loggingAction", "parametertype":"edu.ncsu.csc.itrust.action.EventLoggingAction", "parameterclass":100, "classid":32, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction", "methodid":112, "methodname":"edu.ncsu.csc.itrust.action.AddDrugListAction.-init-(edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "isreturn":0, "sourcecode":"public AddDrugListAction(AddDrugListAction.DrugStrategy uploadStrategy, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) {\r\n    this.strategy = uploadStrategy;\r\n    this.factory = factory;\r\n    this.loggingAction = loggingAction;\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":15, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":29, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy", "methodid":115, "methodname":"edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "isreturn":0, "sourcecode":"void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException;"},
 {"id":16, "parametername":"EventLoggingAction loggingAction", "parametertype":"edu.ncsu.csc.itrust.action.EventLoggingAction", "parameterclass":100, "classid":29, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy", "methodid":115, "methodname":"edu.ncsu.csc.itrust.action.AddDrugListAction$DrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "isreturn":0, "sourcecode":"void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException;"},
 {"id":17, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":31, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy", "methodid":119, "methodname":"edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "isreturn":0, "sourcecode":"public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"\t\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, ((\"\" + (bean.getNDCode())) + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // We just want to skip duplicate-entries. Let it pass.\r\n        }\r\n    } \r\n}"},
 {"id":18, "parametername":"EventLoggingAction loggingAction", "parametertype":"edu.ncsu.csc.itrust.action.EventLoggingAction", "parameterclass":100, "classid":31, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy", "methodid":119, "methodname":"edu.ncsu.csc.itrust.action.AddDrugListAction$SkipDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "isreturn":0, "sourcecode":"public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"\t\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, ((\"\" + (bean.getNDCode())) + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // We just want to skip duplicate-entries. Let it pass.\r\n        }\r\n    } \r\n}"},
 {"id":19, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":30, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy", "methodid":117, "methodname":"edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "isreturn":0, "sourcecode":"public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"\t\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // Overwrite duplicate entries\r\n            ndcodesDAO.updateCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_EDIT, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        }\r\n    } \r\n}"},
 {"id":20, "parametername":"EventLoggingAction loggingAction", "parametertype":"edu.ncsu.csc.itrust.action.EventLoggingAction", "parameterclass":100, "classid":30, "classname":"edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy", "methodid":117, "methodname":"edu.ncsu.csc.itrust.action.AddDrugListAction$OverwriteDuplicateDrugStrategy.LoadFile(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,edu.ncsu.csc.itrust.action.EventLoggingAction,long)", "isreturn":0, "sourcecode":"public void LoadFile(InputStream fileContent, DAOFactory factory, EventLoggingAction loggingAction, long loggedInMID) throws DBException, IOException {\r\n    NDCodesDAO ndcodesDAO = factory.getNDCodesDAO();\r\n    Scanner fileScanner = new Scanner(fileContent);\r\n    while (fileScanner.hasNextLine()) {\r\n        String ndCodeWithDash;\r\n        MedicationBean bean = new MedicationBean();\r\n        StringTokenizer tok = new StringTokenizer(fileScanner.nextLine(), \"\t\");\r\n        ndCodeWithDash = tok.nextToken();\r\n        String[] parts = ndCodeWithDash.split(\"-\");\r\n        // Skip drug type field\r\n        tok.nextToken();\r\n        bean.setNDCode(parts[0].concat(parts[1]));\r\n        bean.setDescription(tok.nextToken());\r\n        try {\r\n            ndcodesDAO.addNDCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_ADD, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        } catch (Exception e) {\r\n            // Overwrite duplicate entries\r\n            ndcodesDAO.updateCode(bean);\r\n            loggingAction.logEvent(TransactionType.DRUG_CODE_EDIT, loggedInMID, 0, (((\"\" + (bean.getNDCode())) + \" - \") + (bean.getDescription())));\r\n        }\r\n    } \r\n}"},
 {"id":21, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":34, "classname":"edu.ncsu.csc.itrust.action.AddERespAction", "methodid":124, "methodname":"edu.ncsu.csc.itrust.action.AddERespAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * \t\tfactory for creating the defaults.\r\n * @param loggedInMID\r\n * \t\tperson currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddERespAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":22, "parametername":"PersonnelBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parameterclass":270, "classid":34, "classname":"edu.ncsu.csc.itrust.action.AddERespAction", "methodid":125, "methodname":"edu.ncsu.csc.itrust.action.AddERespAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds the new user.  Event is logged.\r\n *\r\n * @param p\r\n * \t\tbean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.ER);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.ER, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}"},
 {"id":23, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":36, "classname":"edu.ncsu.csc.itrust.action.AddHCPAction", "methodid":129, "methodname":"edu.ncsu.csc.itrust.action.AddHCPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * \t\tfactory for creating the defaults.\r\n * @param loggedInMID\r\n * \t\tperson currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddHCPAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":24, "parametername":"PersonnelBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parameterclass":270, "classid":36, "classname":"edu.ncsu.csc.itrust.action.AddHCPAction", "methodid":130, "methodname":"edu.ncsu.csc.itrust.action.AddHCPAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds the new user.   Event is logged.\r\n *\r\n * @param p\r\n * \t\tbean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.HCP);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.HCP, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}"},
 {"id":25, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":38, "classname":"edu.ncsu.csc.itrust.action.AddLTAction", "methodid":134, "methodname":"edu.ncsu.csc.itrust.action.AddLTAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * \t\tfactory for creating the defaults.\r\n * @param loggedInMID\r\n * \t\tperson currently logged in\r\n */\r\npublic AddLTAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":26, "parametername":"PersonnelBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parameterclass":270, "classid":38, "classname":"edu.ncsu.csc.itrust.action.AddLTAction", "methodid":135, "methodname":"edu.ncsu.csc.itrust.action.AddLTAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds the new user.   Event is logged.\r\n *\r\n * @param p\r\n * \t\tbean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.LT);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.LT, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}"},
 {"id":27, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":40, "classname":"edu.ncsu.csc.itrust.action.AddOfficeVisitAction", "methodid":139, "methodname":"edu.ncsu.csc.itrust.action.AddOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param pidString\r\n * \t\tPatient ID to be validated by the superclass, {@link PatientBaseAction}\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic AddOfficeVisitAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.factory = factory;\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n}"},
 {"id":28, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":42, "classname":"edu.ncsu.csc.itrust.action.AddPHAAction", "methodid":148, "methodname":"edu.ncsu.csc.itrust.action.AddPHAAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * \t\tfactory for creating the defaults.\r\n * @param loggedInMID\r\n * \t\tperson currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddPHAAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":29, "parametername":"PersonnelBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parameterclass":270, "classid":42, "classname":"edu.ncsu.csc.itrust.action.AddPHAAction", "methodid":149, "methodname":"edu.ncsu.csc.itrust.action.AddPHAAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds the new user.   Event is logged.\r\n *\r\n * @param p\r\n * \t\tbean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.PHA);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.PHA, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}"},
 {"id":30, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":44, "classname":"edu.ncsu.csc.itrust.action.AddPatientAction", "methodid":153, "methodname":"edu.ncsu.csc.itrust.action.AddPatientAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Just the factory and logged in MID\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param loggedInMID\r\n * \t\t\r\n */\r\npublic AddPatientAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":31, "parametername":"PatientBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":44, "classname":"edu.ncsu.csc.itrust.action.AddPatientAction", "methodid":154, "methodname":"edu.ncsu.csc.itrust.action.AddPatientAction.addPatient(edu.ncsu.csc.itrust.beans.PatientBean)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new patient, returns the new MID. Adds a new user to the table along with a random password.\r\n *\r\n * @return the new MID of the patient\r\n * @throws DBException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic long addPatient(PatientBean p) throws DBException, FormValidationException {\r\n    new AddPatientValidator().validate(p);\r\n    long newMID = patientDAO.addEmptyPatient();\r\n    p.setMID(newMID);\r\n    String pwd = authDAO.addUser(newMID, Role.PATIENT, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    patientDAO.editPatient(p, loggedInMID);\r\n    return newMID;\r\n}"},
 {"id":32, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":46, "classname":"edu.ncsu.csc.itrust.action.AddPatientFileAction", "methodid":158, "methodname":"edu.ncsu.csc.itrust.action.AddPatientFileAction.-init-(java.io.InputStream,edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Accepts the DAO factory and the CSV stream from the view and parses it.\r\n *\r\n * @param factory\r\n * \t\tThe DAO factory\r\n * @param loggedInMID\r\n * \t\tThe MID of the HCP\r\n * @param CSVStream\r\n * \t\tThe CSV stream uploaded by the user\r\n * @throws CSVFormatException\r\n * \t\t\r\n * @throws AddPatientFileExceptionTest\r\n * \t\t\r\n */\r\npublic AddPatientFileAction(InputStream CSVStream, DAOFactory factory, long loggedInMID) throws AddPatientFileException, CSVFormatException {\r\n    if (factory != null) {\r\n        this.patientDAO = factory.getPatientDAO();\r\n        this.loggedInMID = loggedInMID;\r\n        this.authDAO = factory.getAuthDAO();\r\n    }\r\n    CSVParser parser = new CSVParser(CSVStream);\r\n    CSVHeader = parser.getHeader();\r\n    CSVData = parser.getData();\r\n    errors = parser.getErrors();\r\n    buildMappings(CSVHeader);\r\n    try {\r\n        createPatients();\r\n    } catch (DBException e) {\r\n        throw new AddPatientFileException(\"Database error while adding new patients!\");\r\n    }\r\n}"},
 {"id":33, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":48, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction", "methodid":170, "methodname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,long)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person recording the patients data.\r\n * @param patientMID\r\n * \t\tThe MID of the patient\r\n */\r\npublic AddRemoteMonitoringDataAction(DAOFactory factory, long loggedInMID, long patientMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.patientMID = patientMID;\r\n}"},
 {"id":34, "parametername":"RemoteMonitoringDataBean rmdBean", "parametertype":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "parameterclass":275, "classid":48, "classname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction", "methodid":171, "methodname":"edu.ncsu.csc.itrust.action.AddRemoteMonitoringDataAction.addRemoteMonitoringData(edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a patients telemedicine data to the database.\r\n *\r\n * @param weight\r\n * \t\t\r\n * @param pedometerReading\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void addRemoteMonitoringData(RemoteMonitoringDataBean rmdBean) throws DBException, FormValidationException, iTrustException {\r\n    validator.validate(rmdBean);\r\n    String role;\r\n    if ((loggedInMID) == (patientMID)) {\r\n        role = \"self-reported\";\r\n    } else\r\n        if (authDAO.getUserRole(loggedInMID).getUserRolesString().equals(\"uap\")) {\r\n            role = \"case-manager\";\r\n        } else {\r\n            role = \"patient representative\";\r\n        }\r\n\r\n    // Store in DB\r\n    rmDAO.storePatientData(patientMID, rmdBean, role, loggedInMID);\r\n}"},
 {"id":35, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":50, "classname":"edu.ncsu.csc.itrust.action.AddUAPAction", "methodid":191, "methodname":"edu.ncsu.csc.itrust.action.AddUAPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Sets up the defaults for the class\r\n *\r\n * @param factory\r\n * \t\tfactory for creating the defaults.\r\n * @param loggedInMID\r\n * \t\tperson currently logged in\r\n * @author Andy Meneely\r\n */\r\npublic AddUAPAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":36, "parametername":"PersonnelBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parameterclass":270, "classid":50, "classname":"edu.ncsu.csc.itrust.action.AddUAPAction", "methodid":192, "methodname":"edu.ncsu.csc.itrust.action.AddUAPAction.add(edu.ncsu.csc.itrust.beans.PersonnelBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds the new user.  Event is logged.\r\n *\r\n * @param p\r\n * \t\tbean containing the information for the new user\r\n * @return MID of the new user.\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic long add(PersonnelBean p) throws FormValidationException, iTrustException {\r\n    new AddPersonnelValidator().validate(p);\r\n    long newMID = personnelDAO.addEmptyPersonnel(Role.UAP);\r\n    p.setMID(newMID);\r\n    personnelDAO.editPersonnel(p);\r\n    String pwd = authDAO.addUser(newMID, Role.UAP, RandomPassword.getRandomPassword());\r\n    p.setPassword(pwd);\r\n    return newMID;\r\n}"},
 {"id":37, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":52, "classname":"edu.ncsu.csc.itrust.action.ApptAction", "methodid":196, "methodname":"edu.ncsu.csc.itrust.action.ApptAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public ApptAction(DAOFactory factory, long loggedInMID) {\r\n    this.apptDAO = factory.getApptDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n}"},
 {"id":38, "parametername":"ApptBean appt", "parametertype":"edu.ncsu.csc.itrust.beans.ApptBean", "parameterclass":245, "classid":52, "classname":"edu.ncsu.csc.itrust.action.ApptAction", "methodid":198, "methodname":"edu.ncsu.csc.itrust.action.ApptAction.getConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)", "isreturn":0, "sourcecode":"/**\r\n * Driver method to get all appointment conflicts, used in jsp files\r\n *\r\n * @param mid\r\n * \t\t\r\n * @param appt\r\n * \t\t\r\n * @return \r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic List<ApptBean> getConflictsForAppt(long mid, ApptBean appt) throws SQLException {\r\n    return apptDAO.getAllHCPConflictsForAppt(mid, appt);\r\n}"},
 {"id":39, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":54, "classname":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction", "methodid":202, "methodname":"edu.ncsu.csc.itrust.action.ChangeSessionTimeoutAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * Sets up defualts.\r\n *\r\n * @param factory\r\n * \t\t\r\n * @author Andy Meneely\r\n */\r\npublic ChangeSessionTimeoutAction(DAOFactory factory) {\r\n    this.accessDAO = factory.getAccessDAO();\r\n}"},
 {"id":40, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":56, "classname":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction", "methodid":209, "methodname":"edu.ncsu.csc.itrust.action.ChronicDiseaseRiskAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param loggedInMID\r\n * \t\t\r\n * @param pidString\r\n * \t\tThe patient ID to be validated and used\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n * @throws NoHealthRecordsException\r\n * \t\tThis is thrown if a patient is added without any health records to be checked. Try to avoid\r\n * \t\thaving this exception be thrown in a normal flow of events.\r\n * @author Andy Meneely\r\n */\r\npublic ChronicDiseaseRiskAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, NoHealthRecordsException, iTrustException {\r\n    super(factory, pidString);\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.diseaseMediator = new ChronicDiseaseMediator(factory, pid);\r\n}"},
 {"id":41, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":58, "classname":"edu.ncsu.csc.itrust.action.DeclareHCPAction", "methodid":216, "methodname":"edu.ncsu.csc.itrust.action.DeclareHCPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAO factory to be used for generating the DAOs for this action.\r\n * @param loggedInMID\r\n * \t\tThis patient\r\n * @author Andy Meneely\r\n */\r\npublic DeclareHCPAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":42, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":61, "classname":"edu.ncsu.csc.itrust.action.DrugInteractionAction", "methodid":232, "methodname":"edu.ncsu.csc.itrust.action.DrugInteractionAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAO factory to be used for generating the DAOs for this action.\r\n */\r\npublic DrugInteractionAction(DAOFactory factory, long loggedInMID) {\r\n    this.drugDAO = factory.getDrugInteractionDAO();\r\n    this.validator = new DrugInteractionValidator();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":43, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":63, "classname":"edu.ncsu.csc.itrust.action.EditApptAction", "methodid":245, "methodname":"edu.ncsu.csc.itrust.action.EditApptAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public EditApptAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n}"},
 {"id":44, "parametername":"ApptBean appt", "parametertype":"edu.ncsu.csc.itrust.beans.ApptBean", "parameterclass":245, "classid":63, "classname":"edu.ncsu.csc.itrust.action.EditApptAction", "methodid":246, "methodname":"edu.ncsu.csc.itrust.action.EditApptAction.editAppt(edu.ncsu.csc.itrust.beans.ApptBean,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Updates an existing appointment\r\n *\r\n * @param appt\r\n * \t\tAppointment Bean containing the updated information\r\n * @return Message to be displayed\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic String editAppt(ApptBean appt, boolean ignoreConflicts) throws FormValidationException, SQLException {\r\n    validator.validate(appt);\r\n    if (appt.getDate().before(new Timestamp(System.currentTimeMillis())))\r\n        return (\"The scheduled date of this appointment (\" + (appt.getDate())) + \") has already passed.\";\r\n\r\n    if (!ignoreConflicts) {\r\n        if ((getConflictsForAppt(appt.getHcp(), appt).size()) > 0) {\r\n            return \"Warning! This appointment conflicts with other appointments\";\r\n        }\r\n    }\r\n    try {\r\n        apptDAO.editAppt(appt);\r\n        return \"Success: Appointment changed\";\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":45, "parametername":"ApptBean appt", "parametertype":"edu.ncsu.csc.itrust.beans.ApptBean", "parameterclass":245, "classid":63, "classname":"edu.ncsu.csc.itrust.action.EditApptAction", "methodid":248, "methodname":"edu.ncsu.csc.itrust.action.EditApptAction.removeAppt(edu.ncsu.csc.itrust.beans.ApptBean)", "isreturn":0, "sourcecode":"/**\r\n * Removes an existing appointment\r\n *\r\n * @param appt\r\n * \t\tAppointment Bean containing the ID of the appointment to be removed.\r\n * @return Message to be displayed\r\n */\r\npublic String removeAppt(ApptBean appt) {\r\n    try {\r\n        apptDAO.removeAppt(appt);\r\n        return \"Success: Appointment removed\";\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":46, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":65, "classname":"edu.ncsu.csc.itrust.action.EditApptTypeAction", "methodid":256, "methodname":"edu.ncsu.csc.itrust.action.EditApptTypeAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public EditApptTypeAction(DAOFactory factory, long loggedInMID) {\r\n    this.apptTypeDAO = factory.getApptTypeDAO();\r\n}"},
 {"id":47, "parametername":"ApptTypeBean apptType", "parametertype":"edu.ncsu.csc.itrust.beans.ApptTypeBean", "parameterclass":247, "classid":65, "classname":"edu.ncsu.csc.itrust.action.EditApptTypeAction", "methodid":257, "methodname":"edu.ncsu.csc.itrust.action.EditApptTypeAction.addApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)", "isreturn":0, "sourcecode":"public String addApptType(ApptTypeBean apptType) throws FormValidationException, SQLException {\r\n    validator.validate(apptType);\r\n    List<ApptTypeBean> list = this.getApptTypes();\r\n    for (ApptTypeBean a : list) {\r\n        if (a.getName().equals(apptType.getName()))\r\n            return (\"Appointment Type: \" + (apptType.getName())) + \" already exists.\";\r\n\r\n    }\r\n    try {\r\n        if (apptTypeDAO.addApptType(apptType)) {\r\n            return (((\"Success: \" + (apptType.getName())) + \" - Duration: \") + (apptType.getDuration())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":48, "parametername":"ApptTypeBean apptType", "parametertype":"edu.ncsu.csc.itrust.beans.ApptTypeBean", "parameterclass":247, "classid":65, "classname":"edu.ncsu.csc.itrust.action.EditApptTypeAction", "methodid":258, "methodname":"edu.ncsu.csc.itrust.action.EditApptTypeAction.editApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)", "isreturn":0, "sourcecode":"public String editApptType(ApptTypeBean apptType) throws FormValidationException, SQLException {\r\n    validator.validate(apptType);\r\n    List<ApptTypeBean> list = this.getApptTypes();\r\n    int flag = 0;\r\n    for (ApptTypeBean a : list) {\r\n        if (a.getName().equals(apptType.getName())) {\r\n            flag = 1;\r\n            if ((a.getDuration()) == (apptType.getDuration()))\r\n                return (((\"Appointment Type: \" + (apptType.getName())) + \" already has a duration of \") + (apptType.getDuration())) + \" minutes.\";\r\n\r\n            break;\r\n        }\r\n    }\r\n    if (flag == 0) {\r\n        return (\"Appointment Type: \" + (apptType.getName())) + \" you are trying to update does not exist.\";\r\n    }\r\n    try {\r\n        if (apptTypeDAO.editApptType(apptType)) {\r\n            return (((\"Success: \" + (apptType.getName())) + \" - Duration: \") + (apptType.getDuration())) + \" updated\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":49, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":67, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction", "methodid":268, "methodname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "isreturn":0, "sourcecode":"public EditDiagnosesAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    icdDAO = factory.getICDCodesDAO();\r\n}"},
 {"id":50, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":67, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction", "methodid":269, "methodname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"public EditDiagnosesAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    icdDAO = factory.getICDCodesDAO();\r\n}"},
 {"id":51, "parametername":"DiagnosisBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "parameterclass":248, "classid":67, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction", "methodid":270, "methodname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.addDiagnosis(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "isreturn":0, "sourcecode":"public void addDiagnosis(DiagnosisBean bean) throws iTrustException {\r\n    verifySaved();\r\n    diagnosesDAO.add(bean);\r\n}"},
 {"id":52, "parametername":"DiagnosisBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "parameterclass":248, "classid":67, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction", "methodid":272, "methodname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.editDiagnosis(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "isreturn":0, "sourcecode":"public void editDiagnosis(DiagnosisBean bean) throws iTrustException {\r\n    verifySaved();\r\n    diagnosesDAO.edit(bean);\r\n}"},
 {"id":53, "parametername":"DiagnosisBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "parameterclass":248, "classid":67, "classname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction", "methodid":271, "methodname":"edu.ncsu.csc.itrust.action.EditDiagnosesAction.deleteDiagnosis(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "isreturn":0, "sourcecode":"public void deleteDiagnosis(DiagnosisBean bean) throws iTrustException {\r\n    verifySaved();\r\n    diagnosesDAO.remove(bean.getOvDiagnosisID());\r\n}"},
 {"id":54, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":69, "classname":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction", "methodid":282, "methodname":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * The patient ID is validated by the superclass\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory which will be used to generate the DAOs used for this action.\r\n * @param loggedInMID\r\n * \t\tThe user authorizing this action.\r\n * @param pidString\r\n * \t\tThe patient (or other user) who is being edited.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditHealthHistoryAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":55, "parametername":"HealthRecordForm hr", "parametertype":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "parameterclass":288, "classid":69, "classname":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction", "methodid":283, "methodname":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction.addHealthRecord(long,edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)", "isreturn":0, "sourcecode":"/**\r\n * Adds a health record for the given patient\r\n *\r\n * @param pid\r\n * \t\tThe patient record who is being edited.\r\n * @param hr\r\n * \t\tThe filled out health record form to be added.\r\n * @return message - \"Information Recorded\" or exceptions message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String addHealthRecord(long pid, HealthRecordForm hr) throws FormValidationException, iTrustException {\r\n    validator.validate(hr);\r\n    HealthRecord record = transferForm(pid, hr);\r\n    hrDAO.add(record);\r\n    return \"Information Recorded\";\r\n}"},
 {"id":56, "parametername":"HealthRecordForm form", "parametertype":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "parameterclass":288, "classid":69, "classname":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction", "methodid":286, "methodname":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction.transferForm(long,edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)", "isreturn":0, "sourcecode":"/**\r\n * Moves the information from the form to a HealthRecord\r\n *\r\n * @param pid\r\n * \t\tPatient of interest\r\n * @param form\r\n * \t\tForm to be translated\r\n * @return a HealthRecord containing all the information in the form\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\nprivate HealthRecord transferForm(long pid, HealthRecordForm form) throws FormValidationException {\r\n    HealthRecord record = new HealthRecord();\r\n    record.setPatientID(pid);\r\n    record.setPersonnelID(loggedInMID);\r\n    record.setBloodPressureD(Integer.valueOf(form.getBloodPressureD()));\r\n    record.setBloodPressureN(Integer.valueOf(form.getBloodPressureN()));\r\n    record.setCholesterolHDL(Integer.valueOf(form.getCholesterolHDL()));\r\n    record.setCholesterolLDL(Integer.valueOf(form.getCholesterolLDL()));\r\n    record.setCholesterolTri(Integer.valueOf(form.getCholesterolTri()));\r\n    if (((record.getTotalCholesterol()) < 100) || ((record.getTotalCholesterol()) > 600))\r\n        throw new FormValidationException(\"Total cholesterol must be in [100,600]\");\r\n\r\n    record.setHeight(Double.valueOf(form.getHeight()));\r\n    record.setWeight(Double.valueOf(form.getWeight()));\r\n    record.setSmoker(Integer.valueOf(form.getIsSmoker()));\r\n    return record;\r\n}"},
 {"id":57, "parametername":"edu.ncsu.csc.itrust.beans.HealthRecord", "parametertype":"edu.ncsu.csc.itrust.beans.HealthRecord", "parameterclass":257, "classid":69, "classname":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction", "methodid":286, "methodname":"edu.ncsu.csc.itrust.action.EditHealthHistoryAction.transferForm(long,edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)", "isreturn":1, "sourcecode":"/**\r\n * Moves the information from the form to a HealthRecord\r\n *\r\n * @param pid\r\n * \t\tPatient of interest\r\n * @param form\r\n * \t\tForm to be translated\r\n * @return a HealthRecord containing all the information in the form\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\nprivate HealthRecord transferForm(long pid, HealthRecordForm form) throws FormValidationException {\r\n    HealthRecord record = new HealthRecord();\r\n    record.setPatientID(pid);\r\n    record.setPersonnelID(loggedInMID);\r\n    record.setBloodPressureD(Integer.valueOf(form.getBloodPressureD()));\r\n    record.setBloodPressureN(Integer.valueOf(form.getBloodPressureN()));\r\n    record.setCholesterolHDL(Integer.valueOf(form.getCholesterolHDL()));\r\n    record.setCholesterolLDL(Integer.valueOf(form.getCholesterolLDL()));\r\n    record.setCholesterolTri(Integer.valueOf(form.getCholesterolTri()));\r\n    if (((record.getTotalCholesterol()) < 100) || ((record.getTotalCholesterol()) > 600))\r\n        throw new FormValidationException(\"Total cholesterol must be in [100,600]\");\r\n\r\n    record.setHeight(Double.valueOf(form.getHeight()));\r\n    record.setWeight(Double.valueOf(form.getWeight()));\r\n    record.setSmoker(Integer.valueOf(form.getIsSmoker()));\r\n    return record;\r\n}"},
 {"id":58, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":71, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction", "methodid":293, "methodname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "isreturn":0, "sourcecode":"public EditImmunizationsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}"},
 {"id":59, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":71, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction", "methodid":294, "methodname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"public EditImmunizationsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}"},
 {"id":60, "parametername":"ProcedureBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ProcedureBean", "parameterclass":273, "classid":71, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction", "methodid":295, "methodname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.addImmunization(edu.ncsu.csc.itrust.beans.ProcedureBean)", "isreturn":0, "sourcecode":"public void addImmunization(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.add(bean);\r\n}"},
 {"id":61, "parametername":"ProcedureBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ProcedureBean", "parameterclass":273, "classid":71, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction", "methodid":297, "methodname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.editImmunization(edu.ncsu.csc.itrust.beans.ProcedureBean)", "isreturn":0, "sourcecode":"public void editImmunization(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.edit(bean);\r\n}"},
 {"id":62, "parametername":"ProcedureBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ProcedureBean", "parameterclass":273, "classid":71, "classname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction", "methodid":296, "methodname":"edu.ncsu.csc.itrust.action.EditImmunizationsAction.deleteImmunization(edu.ncsu.csc.itrust.beans.ProcedureBean)", "isreturn":0, "sourcecode":"public void deleteImmunization(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.remove(bean.getOvProcedureID());\r\n}"},
 {"id":63, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "methodid":307, "methodname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "isreturn":0, "sourcecode":"public EditLabProceduresAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    loincDAO = factory.getLOINCDAO();\r\n}"},
 {"id":64, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "methodid":308, "methodname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"public EditLabProceduresAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    loincDAO = factory.getLOINCDAO();\r\n}"},
 {"id":65, "parametername":"LabProcedureBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "parameterclass":260, "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "methodid":309, "methodname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.addLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "isreturn":0, "sourcecode":"public void addLabProcedure(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    // TODO: choose lab tech if not assigned in bean\r\n    if (\"\".equals(bean.getStatus())) {\r\n        bean.setStatus(LabProcedureBean.In_Transit);\r\n    }\r\n    labProcedureDAO.addLabProcedure(bean);\r\n}"},
 {"id":66, "parametername":"LabProcedureBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "parameterclass":260, "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "methodid":310, "methodname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.autoAssignLabTech(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "isreturn":0, "sourcecode":"public LabProcedureBean autoAssignLabTech(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    // TODO: determine the lab tech using more intelligent means\r\n    List<PersonnelBean> techs = personnelDAO.getLabTechs();\r\n    if (!(techs.isEmpty())) {\r\n        bean.setLTID(techs.get(0).getMID());\r\n    } else {\r\n        bean.setLTID(0);\r\n    }\r\n    return bean;\r\n}"},
 {"id":67, "parametername":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "parametertype":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "parameterclass":260, "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "methodid":310, "methodname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.autoAssignLabTech(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "isreturn":1, "sourcecode":"public LabProcedureBean autoAssignLabTech(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    // TODO: determine the lab tech using more intelligent means\r\n    List<PersonnelBean> techs = personnelDAO.getLabTechs();\r\n    if (!(techs.isEmpty())) {\r\n        bean.setLTID(techs.get(0).getMID());\r\n    } else {\r\n        bean.setLTID(0);\r\n    }\r\n    return bean;\r\n}"},
 {"id":68, "parametername":"LabProcedureBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "parameterclass":260, "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "methodid":312, "methodname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.editLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "isreturn":0, "sourcecode":"public void editLabProcedure(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    labProcedureDAO.updateLabProcedure(bean);\r\n}"},
 {"id":69, "parametername":"LabProcedureBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "parameterclass":260, "classid":73, "classname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction", "methodid":311, "methodname":"edu.ncsu.csc.itrust.action.EditLabProceduresAction.deleteLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "isreturn":0, "sourcecode":"public void deleteLabProcedure(LabProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    labProcedureDAO.removeLabProcedure(bean.getProcedureID());\r\n}"},
 {"id":70, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":75, "classname":"edu.ncsu.csc.itrust.action.EditMonitoringListAction", "methodid":333, "methodname":"edu.ncsu.csc.itrust.action.EditMonitoringListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the HCP editing their monitoring list.\r\n */\r\npublic EditMonitoringListAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":71, "parametername":"TelemedicineBean tBean", "parametertype":"edu.ncsu.csc.itrust.beans.TelemedicineBean", "parameterclass":280, "classid":75, "classname":"edu.ncsu.csc.itrust.action.EditMonitoringListAction", "methodid":334, "methodname":"edu.ncsu.csc.itrust.action.EditMonitoringListAction.addToList(long,edu.ncsu.csc.itrust.beans.TelemedicineBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a patient to the current HCPs remote monitoring list\r\n *\r\n * @param patientMID\r\n * \t\tthe patient\r\n * @param permissions\r\n * \t\tArray indicating what data the patient is allowed to enter.\r\n * \t\tOrdered by Systolic Blood Pressure, Diastolic Blood Pressure, Glucose Level, Weight, Pedometer Reading.\r\n * @return true if added successfully. False if already in list.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean addToList(long patientMID, TelemedicineBean tBean) throws DBException {\r\n    return rmDAO.addPatientToList(patientMID, loggedInMID, tBean);\r\n}"},
 {"id":72, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "methodid":342, "methodname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Patient id and office visit id validated by super class\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory to be used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is authorizing this action.\r\n * @param pidString\r\n * \t\tThe patient who this action is performed on.\r\n * @param ovIDString\r\n * \t\tThe ID of the office visit in play.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, loggedInMID, pidString, ovIDString);\r\n    pid = Long.parseLong(pidString);\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalDAO = factory.getHospitalsDAO();\r\n    this.patDAO = factory.getPatientDAO();\r\n    this.prescriptionsAction = new EditPrescriptionsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.proceduresAction = new EditProceduresAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.immunizationsAction = new EditImmunizationsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.diagnosesAction = new EditDiagnosesAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.labProceduresAction = new EditLabProceduresAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.patientInstructionsAction = new EditPatientInstructionsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.referralsAction = new EditReferralsAction(factory, loggedInMID, pidString, ovIDString);\r\n    this.loggingAction = new EventLoggingAction(factory);\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":73, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "methodid":343, "methodname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Create an OfficeVisitAction that is not yet associated with an actual\r\n * office visit.  When update() is called, it will be saved.  Until then,\r\n * any attempt to save prescriptions, procedures, lab procedures,\r\n * immunizations, or diagnoses will raise an exception.\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param loggedInMID\r\n * \t\t\r\n * @param pidString\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditOfficeVisitAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, loggedInMID, pidString);\r\n    pid = Long.parseLong(pidString);\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalDAO = factory.getHospitalsDAO();\r\n    this.patDAO = factory.getPatientDAO();\r\n    this.prescriptionsAction = new EditPrescriptionsAction(factory, loggedInMID, pidString);\r\n    this.proceduresAction = new EditProceduresAction(factory, loggedInMID, pidString);\r\n    this.immunizationsAction = new EditImmunizationsAction(factory, loggedInMID, pidString);\r\n    this.diagnosesAction = new EditDiagnosesAction(factory, loggedInMID, pidString);\r\n    this.labProceduresAction = new EditLabProceduresAction(factory, loggedInMID, pidString);\r\n    this.patientInstructionsAction = new EditPatientInstructionsAction(factory, loggedInMID, pidString);\r\n    this.referralsAction = new EditReferralsAction(factory, loggedInMID, pidString);\r\n    this.loggingAction = new EventLoggingAction(factory);\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":74, "parametername":"EditOfficeVisitForm form", "parametertype":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm", "parameterclass":286, "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "methodid":360, "methodname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateInformation(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Updates the office visit with information from the form passed in.  If\r\n * the office visit has not yet been saved, calling this method will save\r\n * it as well as make the sub actions able to be saved.\r\n *\r\n * @param form\r\n * \t\tinformation to update\r\n * @return \"success\" or exceptions message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String updateInformation(EditOfficeVisitForm form, boolean isERIncident) throws FormValidationException {\r\n    String confirm = \"\";\r\n    try {\r\n        updateOv(form, isERIncident);\r\n        confirm = \"success\";\r\n        return confirm;\r\n    } catch (iTrustException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":75, "parametername":"TransactionType trans", "parametertype":"edu.ncsu.csc.itrust.enums.TransactionType", "parameterclass":490, "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "methodid":352, "methodname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.logOfficeVisitEvent(edu.ncsu.csc.itrust.enums.TransactionType)", "isreturn":0, "sourcecode":"/**\r\n * Helper that logs an office visit event.  The associated patient id, HCP\r\n * id, and office visit id are automatically included.\r\n *\r\n * @param trans\r\n * \t\tTransaction type for the log.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void logOfficeVisitEvent(TransactionType trans) throws DBException {\r\n    loggingAction.logEvent(trans, loggedInMID, getPid(), (\"Office visit ID: \" + (getOvID())));\r\n}"},
 {"id":76, "parametername":"TransactionType trans", "parametertype":"edu.ncsu.csc.itrust.enums.TransactionType", "parameterclass":490, "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "methodid":351, "methodname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.logIncidentReportEvent(edu.ncsu.csc.itrust.enums.TransactionType)", "isreturn":0, "sourcecode":"/**\r\n * Helper that logs an ER incident.  The associated patient id, ER\r\n * id, and incident report id are automatically included.\r\n *\r\n * @param trans\r\n * \t\tTransaction type for the log.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void logIncidentReportEvent(TransactionType trans) throws DBException {\r\n    loggingAction.logEvent(trans, loggedInMID, getPid(), (\"Incident Report ID: \" + (getOvID())));\r\n}"},
 {"id":77, "parametername":"EditOfficeVisitForm form", "parametertype":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm", "parameterclass":286, "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "methodid":361, "methodname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateOv(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Updates the office visit.\r\n *\r\n * @param form\r\n * \t\tform with all the information\r\n * @throws DBException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\nprivate void updateOv(EditOfficeVisitForm form, boolean isERIncident) throws DBException, FormValidationException, iTrustException {\r\n    validator.validate(form);\r\n    OfficeVisitBean ov = getBean();\r\n    ov.setNotes(form.getNotes());\r\n    ov.setVisitDateStr(form.getVisitDate());\r\n    ov.setHcpID(Long.valueOf(form.getHcpID()));\r\n    ov.setPatientID(Long.valueOf(form.getPatientID()));\r\n    ov.setHospitalID(form.getHospitalID());\r\n    ov.setERIncident(isERIncident);\r\n    updateBean(ov);\r\n}"},
 {"id":78, "parametername":"OfficeVisitBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "parameterclass":263, "classid":77, "classname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction", "methodid":359, "methodname":"edu.ncsu.csc.itrust.action.EditOfficeVisitAction.updateBean(edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "isreturn":0, "sourcecode":"/**\r\n * Update the office visit with the given data.  If the office visit has\r\n * not yet been saved, this will save it and reinitialize the sub actions.\r\n *\r\n * @param bean\r\n * \t\tThe data with which to update the office visit.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\nprivate void updateBean(OfficeVisitBean bean) throws DBException, iTrustException {\r\n    if (isUnsaved()) {\r\n        // bean.getID() == -1\r\n        ovID = ovDAO.add(bean);\r\n        reinitializeSubActions();\r\n    } else {\r\n        ovDAO.update(bean);\r\n    }\r\n}"},
 {"id":79, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "methodid":375, "methodname":"edu.ncsu.csc.itrust.action.EditPHRAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Super class validates the patient id\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory to be used in creating DAOs for this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the currently logged in user who is authorizing this action.\r\n * @param pidString\r\n * \t\tThe MID of the patient whose personal health records are being added.\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n * @throws NoHealthRecordsException\r\n * \t\t\r\n */\r\npublic EditPHRAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.familyDAO = factory.getFamilyDAO();\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.icdDAO = factory.getICDCodesDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.HCPUAP = personnelDAO.getPersonnel(loggedInMID);\r\n    this.patient = patientDAO.getPatient(pid);\r\n    this.procDAO = factory.getProceduresDAO();\r\n    this.ndcodesDAO = factory.getNDCodesDAO();// NEW\r\n\r\n    emailutil = new EmailUtil(factory);\r\n    this.factory = factory;\r\n}"},
 {"id":80, "parametername":"FamilyMemberBean member", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "methodid":379, "methodname":"edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveHighBP(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if a particular family member has high blood pressure\r\n *\r\n * @param member\r\n * \t\tthe family member to check\r\n * @return true if the family member has high blood pressure.  False if there are no records or the family member does not have high blood pressure\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveHighBP(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (((record.getBloodPressureSystolic()) > 240) || ((record.getBloodPressureDiastolic()) > 120))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":81, "parametername":"FamilyMemberBean member", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "methodid":380, "methodname":"edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveHighCholesterol(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if a particular family member has high cholesterol\r\n *\r\n * @param member\r\n * \t\tthe family member to check\r\n * @return true if the family member has high cholesterol.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (((record.getCholesterolHDL()) < 35) || ((record.getCholesterolLDL()) > 250))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":82, "parametername":"FamilyMemberBean member", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "methodid":377, "methodname":"edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveDiabetes(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if a particular family member has diabetes\r\n *\r\n * @param member\r\n * \t\tthe family member to check\r\n * @return true if the family member has diabetes.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveDiabetes(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"250\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":83, "parametername":"FamilyMemberBean member", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "methodid":376, "methodname":"edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveCancer(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if a particular family member has cancer\r\n *\r\n * @param member\r\n * \t\tthe family member to check\r\n * @return true if the family member has cancer.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveCancer(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"199\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":84, "parametername":"FamilyMemberBean member", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "methodid":378, "methodname":"edu.ncsu.csc.itrust.action.EditPHRAction.doesFamilyMemberHaveHeartDisease(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if a particular family member has heart disease\r\n *\r\n * @param member\r\n * \t\tthe family member to check\r\n * @return true if the family member has heart disease.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveHeartDisease(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"402\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":85, "parametername":"FamilyMemberBean member", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "methodid":390, "methodname":"edu.ncsu.csc.itrust.action.EditPHRAction.isFamilyMemberSmoker(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if a particular family member smokes\r\n *\r\n * @param member\r\n * \t\tthe family member to check\r\n * @return true if the family member smokes.  False if there are no records or the family member does not\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean isFamilyMemberSmoker(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (record.isSmoker())\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":86, "parametername":"FamilyMemberBean member", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":79, "classname":"edu.ncsu.csc.itrust.action.EditPHRAction", "methodid":387, "methodname":"edu.ncsu.csc.itrust.action.EditPHRAction.getFamilyMemberCOD(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if the family member is dead and returns their cause of death if so\r\n *\r\n * @param member\r\n * \t\tthe family member to check\r\n * @return the cause of death if there is one; otherwise null\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getFamilyMemberCOD(FamilyMemberBean member) throws iTrustException {\r\n    PatientBean patient = patientDAO.getPatient(member.getMid());\r\n    if ((patient.getCauseOfDeath()) == null)\r\n        return \"\";\r\n\r\n    DiagnosisBean diag = icdDAO.getICDCode(patient.getCauseOfDeath());\r\n    if (diag == null)\r\n        return \"\";\r\n\r\n    return diag.getDescription();\r\n}"},
 {"id":87, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":82, "classname":"edu.ncsu.csc.itrust.action.EditPatientAction", "methodid":405, "methodname":"edu.ncsu.csc.itrust.action.EditPatientAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * The super class validates the patient id\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs for this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is authorizing this action.\r\n * @param pidString\r\n * \t\tThe MID of the patient being edited.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditPatientAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    emailutil = new EmailUtil(factory);\r\n}"},
 {"id":88, "parametername":"PatientBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":82, "classname":"edu.ncsu.csc.itrust.action.EditPatientAction", "methodid":413, "methodname":"edu.ncsu.csc.itrust.action.EditPatientAction.updateInformation(edu.ncsu.csc.itrust.beans.PatientBean)", "isreturn":0, "sourcecode":"/**\r\n * Takes the information out of the PatientBean param and updates the patients information\r\n *\r\n * @param p\r\n * \t\tthe new patient information\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic void updateInformation(PatientBean p) throws FormValidationException, iTrustException {\r\n    p.setMID(pid);// for security reasons\r\n\r\n    validator.validate(p);\r\n    patientDAO.editPatient(p, loggedInMID);\r\n    emailutil.sendEmail(makeEmail());\r\n}"},
 {"id":89, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":84, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction", "methodid":425, "methodname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates an EditPatientInstructionsAction for an existing office visit.\r\n *\r\n * @param factory\r\n * \t\tThe DAO Factory.\r\n * @param hcpid\r\n * \t\tThe HCP id.\r\n * @param pidString\r\n * \t\tThe patient id as a string.\r\n * @param ovIDString\r\n * \t\tThe office visit as a string.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditPatientInstructionsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    instructionsDAO = factory.getPatientInstructionsDAO();\r\n}"},
 {"id":90, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":84, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction", "methodid":426, "methodname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates an EditPatientInstructionsAction for an non-existent office\r\n * visit.  Most methods will throw exceptions if built with this\r\n * constructor.\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param hcpid\r\n * \t\tThe HCP id.\r\n * @param pidString\r\n * \t\tThe patient ID as a string.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditPatientInstructionsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    instructionsDAO = factory.getPatientInstructionsDAO();\r\n}"},
 {"id":91, "parametername":"PatientInstructionsBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "parameterclass":268, "classid":84, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction", "methodid":427, "methodname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.addPatientInstructions(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "isreturn":0, "sourcecode":"/**\r\n * Add patient instructions to the office visit.\r\n *\r\n * @param bean\r\n * \t\tThe instructions to add.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void addPatientInstructions(PatientInstructionsBean bean) throws iTrustException {\r\n    verifySaved();\r\n    instructionsDAO.add(bean);\r\n}"},
 {"id":92, "parametername":"PatientInstructionsBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "parameterclass":268, "classid":84, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction", "methodid":429, "methodname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.editPatientInstructions(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "isreturn":0, "sourcecode":"/**\r\n * Modify patient instruction in this office visit.\r\n *\r\n * @param bean\r\n * \t\tThe instructions to modify\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void editPatientInstructions(PatientInstructionsBean bean) throws iTrustException {\r\n    verifySaved();\r\n    instructionsDAO.edit(bean);\r\n}"},
 {"id":93, "parametername":"PatientInstructionsBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "parameterclass":268, "classid":84, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction", "methodid":428, "methodname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.deletePatientInstructions(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "isreturn":0, "sourcecode":"/**\r\n * Delete patient instructions from this office visit.\r\n *\r\n * @param bean\r\n * \t\tThe instructions to delete.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void deletePatientInstructions(PatientInstructionsBean bean) throws iTrustException {\r\n    verifySaved();\r\n    instructionsDAO.remove(bean.getId());\r\n}"},
 {"id":94, "parametername":"PatientInstructionsBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "parameterclass":268, "classid":84, "classname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction", "methodid":431, "methodname":"edu.ncsu.csc.itrust.action.EditPatientInstructionsAction.validate(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "isreturn":0, "sourcecode":"/**\r\n * Verify the contents of the given instruction bean.\r\n *\r\n * @param bean\r\n * \t\tThe instructions to check.\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic void validate(PatientInstructionsBean bean) throws FormValidationException, iTrustException {\r\n    verifySaved();\r\n    PatientInstructionsBeanValidator validator = new PatientInstructionsBeanValidator();\r\n    validator.validate(bean);\r\n}"},
 {"id":95, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":86, "classname":"edu.ncsu.csc.itrust.action.EditPersonnelAction", "methodid":439, "methodname":"edu.ncsu.csc.itrust.action.EditPersonnelAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Super class validates the patient id\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs for this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user editing this personnel.\r\n * @param pidString\r\n * \t\tThe ID of the user being edited.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditPersonnelAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.authDAO = factory.getAuthDAO();\r\n    long pidlong = Long.parseLong(pidString);\r\n    Role editor = authDAO.getUserRole(loggedInMID);\r\n    Role editing = authDAO.getUserRole(pidlong);\r\n    if ((editor == editing) && (pidlong != loggedInMID)) {\r\n        throw new iTrustException(\"You can only edit your own demographics!\");\r\n    } else\r\n        if ((((editor == (Role.HCP)) && (editing == (Role.ADMIN))) || ((editor == (Role.UAP)) && (editing == (Role.HCP)))) || ((editor == (Role.ADMIN)) && (editing == (Role.UAP)))) {\r\n            throw new iTrustException(\"You are not authorized to edit this record!\");\r\n        }\r\n\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n}"},
 {"id":96, "parametername":"PersonnelBean personnelForm", "parametertype":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parameterclass":270, "classid":86, "classname":"edu.ncsu.csc.itrust.action.EditPersonnelAction", "methodid":440, "methodname":"edu.ncsu.csc.itrust.action.EditPersonnelAction.updateInformation(edu.ncsu.csc.itrust.beans.PersonnelBean)", "isreturn":0, "sourcecode":"/**\r\n * Takes information from the personnelForm param and updates the patient\r\n *\r\n * @param personnelForm\r\n * \t\tPersonnelBean with new information\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic void updateInformation(PersonnelBean personnelForm) throws FormValidationException, iTrustException {\r\n    personnelForm.setMID(pid);\r\n    validator.validate(personnelForm);\r\n    personnelDAO.editPersonnel(personnelForm);\r\n}"},
 {"id":97, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":449, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Creates a new action by initializing the office visit\r\n * database access object.\r\n *\r\n * @param factory\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditPrescriptionsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    init(factory);\r\n}"},
 {"id":98, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":450, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * A prescription action that is part of an office visit that is not yet\r\n * saved.  All attempts to modify this action will throw exceptions.  Once\r\n * the office visit is saved, obtain a new EditPrescriptionsAction using\r\n * the four-argument constructor.  (This is done automatically by the\r\n * EditOfficeVisitAction class.)\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param hcpid\r\n * \t\t\r\n * @param pidString\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditPrescriptionsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    init(factory);\r\n}"},
 {"id":99, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":462, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.init(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"private void init(DAOFactory factory) {\r\n    psDAO = factory.getPrescriptionsDAO();\r\n    medDAO = factory.getNDCodesDAO();\r\n    interactionsDAO = factory.getDrugInteractionDAO();\r\n    allergyDAO = factory.getAllergyDAO();\r\n    rptDAO = factory.getPrescriptionReportDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    emailUtil = new EmailUtil(factory);\r\n    personnelDAO = new PersonnelDAO(factory);\r\n    prescriptionOverrideDAO = new PrescriptionOverrideDAO(factory);\r\n    loggingAction = new EventLoggingAction(factory);\r\n}"},
 {"id":100, "parametername":"PrescriptionBean pres", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":453, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.checkForAllergiesAndInteractions(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks the prescription bean for interactions, allergies, and legal\r\n * values.\r\n *\r\n * @param pres\r\n * \t\tThe prescription bean.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\nprivate void checkForAllergiesAndInteractions(PrescriptionBean pres) throws iTrustException {\r\n    List<String> warnings = checkInteraction(pres);\r\n    warnings.addAll(checkAllergy(pres));\r\n    if (!(warnings.isEmpty())) {\r\n        PatientBean patient = patientDAO.getPatient(getPid());\r\n        PersonnelBean hcp = personnelDAO.getPersonnel(getHcpid());\r\n        loggingAction.logEvent(TransactionType.OVERRIDE_INTERACTION_WARNING, hcp.getMID(), patient.getMID(), (((pres.getMedication().getNDCode()) + \" Override: \") + (pres.getReasons().toString())));\r\n        if (validOverride(pres)) {\r\n            emailUtil.sendEmail(makeEmail(pres, warnings));\r\n        } else {\r\n            throw new PrescriptionWarningException(warnings);\r\n        }\r\n    }\r\n    if (\"\".equals(pres.getInstructions())) {\r\n        throw new PrescriptionFieldException(\"Instructions are required.\");\r\n    }\r\n}"},
 {"id":101, "parametername":"PrescriptionBean pres", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":464, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.validOverride(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":0, "sourcecode":"/**\r\n * Indicates if the prescription bean has a valid allergy/interaction\r\n * override.\r\n */\r\nprivate boolean validOverride(PrescriptionBean pres) {\r\n    return ((pres.getReasons()) != null) && ((pres.getReasons().size()) > 0);\r\n}"},
 {"id":102, "parametername":"PrescriptionBean newPrescription", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":459, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formatInteractionWarning(edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.DrugInteractionBean)", "isreturn":0, "sourcecode":"/**\r\n * Returns a string suitable for a user warning message that a\r\n * drug-interaction was detected.\r\n */\r\nprivate String formatInteractionWarning(PrescriptionBean newPrescription, PrescriptionBean oldPrescription, DrugInteractionBean bean) {\r\n    String startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getStartDate());\r\n    String endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getEndDate());\r\n    return String.format(\"Currently Prescribed: %s. Start Date: %s, End Date: %s. Interactions: %s - %s. Description: %s\", oldPrescription.getMedication().getDescription(), startDate, endDate, oldPrescription.getMedication().getDescription(), newPrescription.getMedication().getDescription(), bean.getDescription());\r\n}"},
 {"id":103, "parametername":"PrescriptionBean oldPrescription", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":459, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formatInteractionWarning(edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.DrugInteractionBean)", "isreturn":0, "sourcecode":"/**\r\n * Returns a string suitable for a user warning message that a\r\n * drug-interaction was detected.\r\n */\r\nprivate String formatInteractionWarning(PrescriptionBean newPrescription, PrescriptionBean oldPrescription, DrugInteractionBean bean) {\r\n    String startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getStartDate());\r\n    String endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getEndDate());\r\n    return String.format(\"Currently Prescribed: %s. Start Date: %s, End Date: %s. Interactions: %s - %s. Description: %s\", oldPrescription.getMedication().getDescription(), startDate, endDate, oldPrescription.getMedication().getDescription(), newPrescription.getMedication().getDescription(), bean.getDescription());\r\n}"},
 {"id":104, "parametername":"DrugInteractionBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.DrugInteractionBean", "parameterclass":250, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":459, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formatInteractionWarning(edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.PrescriptionBean,edu.ncsu.csc.itrust.beans.DrugInteractionBean)", "isreturn":0, "sourcecode":"/**\r\n * Returns a string suitable for a user warning message that a\r\n * drug-interaction was detected.\r\n */\r\nprivate String formatInteractionWarning(PrescriptionBean newPrescription, PrescriptionBean oldPrescription, DrugInteractionBean bean) {\r\n    String startDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getStartDate());\r\n    String endDate = new SimpleDateFormat(\"MM/dd/yyyy\").format(oldPrescription.getEndDate());\r\n    return String.format(\"Currently Prescribed: %s. Start Date: %s, End Date: %s. Interactions: %s - %s. Description: %s\", oldPrescription.getMedication().getDescription(), startDate, endDate, oldPrescription.getMedication().getDescription(), newPrescription.getMedication().getDescription(), bean.getDescription());\r\n}"},
 {"id":105, "parametername":"AllergyBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.AllergyBean", "parameterclass":244, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":458, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formatAllergyWarning(edu.ncsu.csc.itrust.beans.AllergyBean)", "isreturn":0, "sourcecode":"/**\r\n * Returns a string suitable for a user warning message that a\r\n * drug-allergy warning was detected.\r\n */\r\nprivate String formatAllergyWarning(AllergyBean bean) throws DBException {\r\n    return ((\"Allergy: \" + (bean.getDescription())) + \". First Found: \") + (new SimpleDateFormat(\"MM/dd/yyyy\").format(bean.getFirstFound()));\r\n}"},
 {"id":106, "parametername":"PrescriptionBean newPrescription", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":454, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.checkInteraction(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if the given prescription has an interaction with any\r\n * other previously prescribed prescriptions.\r\n *\r\n * @param newPrescription\r\n * \t\t\r\n * @return A list of interaction warning messages.  The list is empty if no\r\ninteractions were detected.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\nprivate List<String> checkInteraction(PrescriptionBean newPrescription) throws iTrustException {\r\n    ArrayList<String> warnings = new ArrayList<String>();\r\n    try {\r\n        SimpleDateFormat needed = new SimpleDateFormat(\"yyyy/MM/dd\");\r\n        String startdate = needed.format(newPrescription.getStartDate());\r\n        String enddate = needed.format(newPrescription.getEndDate());\r\n        String drug = newPrescription.getMedication().getNDCode();\r\n        startdate = startdate.replaceAll(\"/\", \"-\");\r\n        enddate = enddate.replaceAll(\"/\", \"-\");\r\n        List<PrescriptionReportBean> prBeanList = rptDAO.byDate(getPid(), startdate, enddate);\r\n        List<DrugInteractionBean> dBeanList = interactionsDAO.getInteractions(drug);\r\n        for (PrescriptionReportBean prBean : prBeanList) {\r\n            String oldDrug = prBean.getPrescription().getMedication().getNDCode();\r\n            PrescriptionBean oldPrescription = prBean.getPrescription();\r\n            for (DrugInteractionBean dBean : dBeanList) {\r\n                String intDrug1 = dBean.getFirstDrug();\r\n                String intDrug2 = dBean.getSecondDrug();\r\n                if ((oldDrug.equals(intDrug1)) && (drug.equals(intDrug2))) {\r\n                    warnings.add(formatInteractionWarning(newPrescription, oldPrescription, dBean));\r\n                } else\r\n                    if ((oldDrug.equals(intDrug2)) && (drug.equals(intDrug1))) {\r\n                        warnings.add(formatInteractionWarning(newPrescription, oldPrescription, dBean));\r\n                    }\r\n\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    return warnings;\r\n}"},
 {"id":107, "parametername":"PrescriptionBean pres", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":452, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.checkAllergy(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if the patient is allergic to the given prescription.\r\n *\r\n * @return A list of allergy warnings.  The list is empty if no allergies\r\nwere detected.\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws PrescriptionWarningException\r\n * \t\t\r\n */\r\nprivate List<String> checkAllergy(PrescriptionBean pres) throws PrescriptionWarningException, iTrustException {\r\n    ArrayList<String> warnings = new ArrayList<String>();\r\n    try {\r\n        List<AllergyBean> allergyList = allergyDAO.getAllergies(getPid());\r\n        MedicationBean medBean = pres.getMedication();\r\n        if (medBean != null) {\r\n            String newDrug = medBean.getNDCode();\r\n            for (AllergyBean allergyBean : allergyList) {\r\n                // Allergy: Aspirin. First Found: 12/20/2008.\r\n                if (newDrug.equals(allergyBean.getNDCode())) {\r\n                    warnings.add(formatAllergyWarning(allergyBean));\r\n                }\r\n            }\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    return warnings;\r\n}"},
 {"id":108, "parametername":"PrescriptionBean pres", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":456, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.editPrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":0, "sourcecode":"/**\r\n * Edits an existing prescription in the database.  If the office visit is\r\n * unsaved, this will throw an exception.\r\n *\r\n * @param pres\r\n * \t\tThe prescription bean that has been changed.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void editPrescription(PrescriptionBean pres) throws iTrustException {\r\n    verifySaved();\r\n    checkForAllergiesAndInteractions(pres);\r\n    psDAO.edit(pres);\r\n}"},
 {"id":109, "parametername":"PrescriptionBean pres", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":451, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.addPrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":0, "sourcecode":"/**\r\n * Add a prescription to this office visit.  If the office visit is\r\n * unsaved, this will throw an exception.\r\n *\r\n * @param pres\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void addPrescription(PrescriptionBean pres) throws iTrustException {\r\n    verifySaved();\r\n    checkForAllergiesAndInteractions(pres);\r\n    long medID = psDAO.add(pres);\r\n    for (OverrideReasonBean reason : pres.getReasons()) {\r\n        reason.setPresID(medID);\r\n        prescriptionOverrideDAO.add(reason);\r\n    }\r\n}"},
 {"id":110, "parametername":"PrescriptionBean pres", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":455, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.deletePrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":0, "sourcecode":"/**\r\n * Delete a prescription from this office visit.  If the office visit is\r\n * unsaved, this will throw an exception.\r\n *\r\n * @param pres\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void deletePrescription(PrescriptionBean pres) throws DBException, iTrustException {\r\n    verifySaved();\r\n    psDAO.remove(pres.getId());\r\n    prescriptionOverrideDAO.remove(pres.getId());\r\n}"},
 {"id":111, "parametername":"EditPrescriptionsForm form", "parametertype":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "parameterclass":287, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":457, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formToBean(edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Validates a prescription form, converts it into a bean, and returns that bean.\r\n *\r\n * @param form\r\n * \t\tThe form to convert.\r\n * @param defaultInstructions\r\n * \t\tThe default value given in the instructions\r\n * \t\tfield.  If the field equals this value, the validation will fail.\r\n * @return \r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic PrescriptionBean formToBean(EditPrescriptionsForm form, String defaultInstructions) throws DBException, FormValidationException {\r\n    EditPrescriptionsValidator validator = new EditPrescriptionsValidator(defaultInstructions);\r\n    validator.validate(form);\r\n    PrescriptionBean bean = new PrescriptionBean();\r\n    bean.setVisitID(getOvID());\r\n    MedicationBean med = medDAO.getNDCode(form.getMedID());\r\n    bean.setMedication(med);\r\n    bean.setDosage(Integer.valueOf(form.getDosage()));\r\n    bean.setStartDateStr(form.getStartDate());\r\n    bean.setEndDateStr(form.getEndDate());\r\n    bean.setInstructions(form.getInstructions());\r\n    ArrayList<OverrideReasonBean> reasons = new ArrayList<OverrideReasonBean>();\r\n    for (String reason : form.getOverrideCodes()) {\r\n        OverrideReasonBean override = new OverrideReasonBean();\r\n        override.setORCode(reason);\r\n        reasons.add(override);\r\n    }\r\n    bean.setReasons(reasons);\r\n    bean.setOverrideReasonOther(form.getOverrideOther());\r\n    return bean;\r\n}"},
 {"id":112, "parametername":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":457, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.formToBean(edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm,java.lang.String)", "isreturn":1, "sourcecode":"/**\r\n * Validates a prescription form, converts it into a bean, and returns that bean.\r\n *\r\n * @param form\r\n * \t\tThe form to convert.\r\n * @param defaultInstructions\r\n * \t\tThe default value given in the instructions\r\n * \t\tfield.  If the field equals this value, the validation will fail.\r\n * @return \r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic PrescriptionBean formToBean(EditPrescriptionsForm form, String defaultInstructions) throws DBException, FormValidationException {\r\n    EditPrescriptionsValidator validator = new EditPrescriptionsValidator(defaultInstructions);\r\n    validator.validate(form);\r\n    PrescriptionBean bean = new PrescriptionBean();\r\n    bean.setVisitID(getOvID());\r\n    MedicationBean med = medDAO.getNDCode(form.getMedID());\r\n    bean.setMedication(med);\r\n    bean.setDosage(Integer.valueOf(form.getDosage()));\r\n    bean.setStartDateStr(form.getStartDate());\r\n    bean.setEndDateStr(form.getEndDate());\r\n    bean.setInstructions(form.getInstructions());\r\n    ArrayList<OverrideReasonBean> reasons = new ArrayList<OverrideReasonBean>();\r\n    for (String reason : form.getOverrideCodes()) {\r\n        OverrideReasonBean override = new OverrideReasonBean();\r\n        override.setORCode(reason);\r\n        reasons.add(override);\r\n    }\r\n    bean.setReasons(reasons);\r\n    bean.setOverrideReasonOther(form.getOverrideOther());\r\n    return bean;\r\n}"},
 {"id":113, "parametername":"PrescriptionBean pres", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":463, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.makeEmail(edu.ncsu.csc.itrust.beans.PrescriptionBean,java.util.List)", "isreturn":0, "sourcecode":"/**\r\n * Creates a fake e-mail to notify the user that their records have been altered.\r\n *\r\n * @return the e-mail to be sent\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate Email makeEmail(PrescriptionBean pres, List<String> warnings) throws DBException {\r\n    Email email = new Email();\r\n    PatientBean patient = patientDAO.getPatient(getPid());\r\n    PersonnelBean hcp = personnelDAO.getPersonnel(getHcpid());\r\n    List<String> toAddrs = new ArrayList<String>();\r\n    toAddrs.add(patient.getEmail());\r\n    String message = (((\"Health care professional \" + (hcp.getFullName())) + \" has prescribed \") + (pres.getMedication().getDescription())) + \". However, the following warning(s) were found:\";\r\n    for (String warning : warnings) {\r\n        message += warning + \"\n\";\r\n    }\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(toAddrs);// patient and personal representative\r\n\r\n    email.setSubject(String.format(\"Prescription warning\"));\r\n    email.setBody(message);\r\n    return email;\r\n}"},
 {"id":114, "parametername":"edu.ncsu.csc.itrust.beans.Email", "parametertype":"edu.ncsu.csc.itrust.beans.Email", "parameterclass":251, "classid":88, "classname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction", "methodid":463, "methodname":"edu.ncsu.csc.itrust.action.EditPrescriptionsAction.makeEmail(edu.ncsu.csc.itrust.beans.PrescriptionBean,java.util.List)", "isreturn":1, "sourcecode":"/**\r\n * Creates a fake e-mail to notify the user that their records have been altered.\r\n *\r\n * @return the e-mail to be sent\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate Email makeEmail(PrescriptionBean pres, List<String> warnings) throws DBException {\r\n    Email email = new Email();\r\n    PatientBean patient = patientDAO.getPatient(getPid());\r\n    PersonnelBean hcp = personnelDAO.getPersonnel(getHcpid());\r\n    List<String> toAddrs = new ArrayList<String>();\r\n    toAddrs.add(patient.getEmail());\r\n    String message = (((\"Health care professional \" + (hcp.getFullName())) + \" has prescribed \") + (pres.getMedication().getDescription())) + \". However, the following warning(s) were found:\";\r\n    for (String warning : warnings) {\r\n        message += warning + \"\n\";\r\n    }\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(toAddrs);// patient and personal representative\r\n\r\n    email.setSubject(String.format(\"Prescription warning\"));\r\n    email.setBody(message);\r\n    return email;\r\n}"},
 {"id":115, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":90, "classname":"edu.ncsu.csc.itrust.action.EditProceduresAction", "methodid":481, "methodname":"edu.ncsu.csc.itrust.action.EditProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param hcpid\r\n * \t\t\r\n * @param pidString\r\n * \t\t\r\n * @param ovIDString\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditProceduresAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}"},
 {"id":116, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":90, "classname":"edu.ncsu.csc.itrust.action.EditProceduresAction", "methodid":482, "methodname":"edu.ncsu.csc.itrust.action.EditProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"public EditProceduresAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    cptDAO = factory.getCPTCodesDAO();\r\n}"},
 {"id":117, "parametername":"ProcedureBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ProcedureBean", "parameterclass":273, "classid":90, "classname":"edu.ncsu.csc.itrust.action.EditProceduresAction", "methodid":483, "methodname":"edu.ncsu.csc.itrust.action.EditProceduresAction.addProcedure(edu.ncsu.csc.itrust.beans.ProcedureBean)", "isreturn":0, "sourcecode":"public void addProcedure(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.add(bean);\r\n}"},
 {"id":118, "parametername":"ProcedureBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ProcedureBean", "parameterclass":273, "classid":90, "classname":"edu.ncsu.csc.itrust.action.EditProceduresAction", "methodid":485, "methodname":"edu.ncsu.csc.itrust.action.EditProceduresAction.editProcedure(edu.ncsu.csc.itrust.beans.ProcedureBean)", "isreturn":0, "sourcecode":"public void editProcedure(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.edit(bean);\r\n}"},
 {"id":119, "parametername":"ProcedureBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ProcedureBean", "parameterclass":273, "classid":90, "classname":"edu.ncsu.csc.itrust.action.EditProceduresAction", "methodid":484, "methodname":"edu.ncsu.csc.itrust.action.EditProceduresAction.deleteProcedure(edu.ncsu.csc.itrust.beans.ProcedureBean)", "isreturn":0, "sourcecode":"public void deleteProcedure(ProcedureBean bean) throws iTrustException {\r\n    verifySaved();\r\n    proceduresDAO.remove(bean.getOvProcedureID());\r\n}"},
 {"id":120, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":92, "classname":"edu.ncsu.csc.itrust.action.EditReferralsAction", "methodid":495, "methodname":"edu.ncsu.csc.itrust.action.EditReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "isreturn":0, "sourcecode":"public EditReferralsAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, hcpid, pidString, ovIDString);\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}"},
 {"id":121, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":92, "classname":"edu.ncsu.csc.itrust.action.EditReferralsAction", "methodid":496, "methodname":"edu.ncsu.csc.itrust.action.EditReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"public EditReferralsAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, hcpid, pidString);\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}"},
 {"id":122, "parametername":"ReferralBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":92, "classname":"edu.ncsu.csc.itrust.action.EditReferralsAction", "methodid":497, "methodname":"edu.ncsu.csc.itrust.action.EditReferralsAction.getPatientName(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"/**\r\n * Add a new referral to the database.  The id on the ReferralBean is\r\n * ignored.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\n/* public void addReferral(ReferralBean bean) throws iTrustException {\nverifySaved();\nreferralDAO.addReferral(bean);\n}\n */\r\n/**\r\n * Edit an existing referral.\r\n *\r\n * @param bean\r\n * \t\tThe bean to edit.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\n/* public void editReferral(ReferralBean bean) throws iTrustException {\nverifySaved();\nreferralDAO.editReferral(bean);\n}\n */\r\n/**\r\n * Delete an existing referral from the database.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\n/* public void deleteReferral(ReferralBean bean) throws iTrustException {\nverifySaved();\nreferralDAO.removeReferral(bean.getId());\n}\n */\r\n/**\r\n * Get the patient name associated with the given referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @return The patients name as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getPatientName(ReferralBean bean) throws iTrustException {\r\n    return patientDAO.getName(bean.getPatientID());\r\n}"},
 {"id":123, "parametername":"ReferralBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":92, "classname":"edu.ncsu.csc.itrust.action.EditReferralsAction", "methodid":498, "methodname":"edu.ncsu.csc.itrust.action.EditReferralsAction.getReceivingHCPName(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"/**\r\n * Get the name of the receiving HCP associated with the given referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @return The HCPs name as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getReceivingHCPName(ReferralBean bean) throws iTrustException {\r\n    return personnelDAO.getName(bean.getReceiverID());\r\n}"},
 {"id":124, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":94, "classname":"edu.ncsu.csc.itrust.action.EditRepresentativesAction", "methodid":506, "methodname":"edu.ncsu.csc.itrust.action.EditRepresentativesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Super class validates the patient mid\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the patient editing his/her representatives.\r\n * @param pidString\r\n * \t\tThe MID of the representative in question.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditRepresentativesAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":125, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "methodid":519, "methodname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public EditSingleReferralAction(DAOFactory factory, long hcpid) throws iTrustException {\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    messageAction = new SendMessageAction(factory, hcpid);\r\n    this.hcpid = hcpid;\r\n}"},
 {"id":126, "parametername":"ReferralBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "methodid":520, "methodname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.addReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"/**\r\n * Add a new referral to the database.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void addReferral(ReferralBean bean) throws Exception {\r\n    if ((bean.getSenderID()) != (hcpid)) {\r\n        throw new iTrustException(\"New referrals must be from the current HCP.\");\r\n    }\r\n    long id = referralDAO.addReferral(bean);\r\n    bean = referralDAO.getReferral(id);\r\n    sendReferralCreatedMessages(bean);\r\n}"},
 {"id":127, "parametername":"ReferralBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "methodid":522, "methodname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.editReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"/**\r\n * Edit an existing referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void editReferral(ReferralBean bean) throws iTrustException {\r\n    if ((bean.getSenderID()) != (hcpid)) {\r\n        throw new iTrustException(\"Edited referrals must be from the current HCP.\");\r\n    }\r\n    referralDAO.editReferral(bean);\r\n}"},
 {"id":128, "parametername":"ReferralBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "methodid":521, "methodname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.deleteReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"/**\r\n * Delete a referral from the database.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void deleteReferral(ReferralBean bean) throws Exception {\r\n    if ((bean.getSenderID()) != (hcpid)) {\r\n        throw new iTrustException(\"Deleted referrals must be from the current HCP.\");\r\n    }\r\n    referralDAO.removeReferral(bean.getId());\r\n    sendReferralCancelledMessages(bean);\r\n}"},
 {"id":129, "parametername":"ReferralBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "methodid":524, "methodname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.getPatientName(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"/**\r\n * Get the patient name associated with the given referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @return The patients name as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getPatientName(ReferralBean bean) throws iTrustException {\r\n    return patientDAO.getName(bean.getPatientID());\r\n}"},
 {"id":130, "parametername":"ReferralBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "methodid":525, "methodname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.getReceivingHCPName(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"/**\r\n * Get the name of the receiving HCP associated with the given referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @return The HCPs name as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getReceivingHCPName(ReferralBean bean) throws iTrustException {\r\n    return personnelDAO.getName(bean.getReceiverID());\r\n}"},
 {"id":131, "parametername":"ReferralBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "methodid":526, "methodname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.getReceivingHCPSpecialty(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"public String getReceivingHCPSpecialty(ReferralBean bean) throws iTrustException {\r\n    String s = personnelDAO.getPersonnel(bean.getReceiverID()).getSpecialty();\r\n    return s == null ? \"\" : s;\r\n}"},
 {"id":132, "parametername":"ReferralBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "methodid":523, "methodname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.getOfficeVisitDate(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"public String getOfficeVisitDate(ReferralBean bean) throws iTrustException {\r\n    return ovDAO.getOfficeVisit(bean.getOvid()).getVisitDateStr();\r\n}"},
 {"id":133, "parametername":"ReferralBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "methodid":529, "methodname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.sendReferralCreatedMessages(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"/**\r\n * Send messages to the users associated with creating a referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void sendReferralCreatedMessages(ReferralBean bean) throws Exception {\r\n    StringBuilder body = new StringBuilder();\r\n    body.append(\"Referral information:\n\");\r\n    String senderSpecialty = personnelDAO.getPersonnel(bean.getSenderID()).getSpecialty();\r\n    String receiverSpecialty = personnelDAO.getPersonnel(bean.getReceiverID()).getSpecialty();\r\n    senderSpecialty = (senderSpecialty == null) ? \"no specialty\" : senderSpecialty;\r\n    receiverSpecialty = (receiverSpecialty == null) ? \"no specialty\" : receiverSpecialty;\r\n    body.append(((((\"Sending HCP: \" + (personnelDAO.getName(bean.getSenderID()))) + \" (\") + senderSpecialty) + \")\n\"));\r\n    body.append(((((\"Receiving HCP: \" + (personnelDAO.getName(bean.getReceiverID()))) + \" (\") + receiverSpecialty) + \")\n\"));\r\n    body.append(((\"Patient: \" + (getPatientName(bean))) + \"\n\"));\r\n    body.append(((\"Notes: \" + (bean.getReferralDetails())) + \"\n\"));\r\n    body.append(((\"Created on: \" + (bean.getTimeStamp())) + \"\n\"));\r\n    MessageBean senderMsg = new MessageBean();\r\n    senderMsg.setFrom(bean.getSenderID());\r\n    senderMsg.setTo(bean.getSenderID());\r\n    senderMsg.setBody(body.toString());\r\n    senderMsg.setSubject(\"You Created a New Referral\");\r\n    senderMsg.setRead(0);\r\n    messageAction.sendMessage(senderMsg);\r\n    MessageBean receiverMsg = new MessageBean();\r\n    receiverMsg.setFrom(bean.getSenderID());\r\n    receiverMsg.setTo(bean.getReceiverID());\r\n    receiverMsg.setBody(body.toString());\r\n    receiverMsg.setSubject(\"You Received a New Referral\");\r\n    receiverMsg.setRead(0);\r\n    messageAction.sendMessage(receiverMsg);\r\n    MessageBean patientMsg = new MessageBean();\r\n    patientMsg.setFrom(bean.getSenderID());\r\n    patientMsg.setTo(bean.getPatientID());\r\n    patientMsg.setBody(body.toString());\r\n    patientMsg.setSubject(\"You Received a New Referral\");\r\n    patientMsg.setRead(0);\r\n    messageAction.sendMessage(patientMsg);\r\n}"},
 {"id":134, "parametername":"ReferralBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":96, "classname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction", "methodid":528, "methodname":"edu.ncsu.csc.itrust.action.EditSingleReferralAction.sendReferralCancelledMessages(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"/**\r\n * Send messages to the users associated with canceling a referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void sendReferralCancelledMessages(ReferralBean bean) throws Exception {\r\n    StringBuilder body = new StringBuilder();\r\n    body.append(((\"The referral created on \" + (bean.getTimeStamp())) + \"has been deleted.\n\n\"));\r\n    body.append(\"The referral is reproduced here for your convienence:\n\");\r\n    body.append(((((\"Sending HCP: \" + (personnelDAO.getName(bean.getSenderID()))) + \" (\") + (personnelDAO.getPersonnel(bean.getSenderID()).getSpecialty())) + \")\n\"));\r\n    body.append(((((\"Receiving HCP: \" + (personnelDAO.getName(bean.getReceiverID()))) + \" (\") + (personnelDAO.getPersonnel(bean.getReceiverID()).getSpecialty())) + \")\n\"));\r\n    body.append(((\"Patient: \" + (getPatientName(bean))) + \"\n\"));\r\n    body.append(((\"Notes: \" + (bean.getReferralDetails())) + \"\n\"));\r\n    body.append(((\"Created on: \" + (bean.getTimeStamp())) + \"\n\"));\r\n    MessageBean receiverMsg = new MessageBean();\r\n    receiverMsg.setFrom(bean.getSenderID());\r\n    receiverMsg.setTo(bean.getReceiverID());\r\n    receiverMsg.setBody(body.toString());\r\n    receiverMsg.setSubject(\"Your Referral Was Cancelled\");\r\n    receiverMsg.setRead(0);\r\n    messageAction.sendMessage(receiverMsg);\r\n    MessageBean patientMsg = new MessageBean();\r\n    patientMsg.setFrom(bean.getSenderID());\r\n    patientMsg.setTo(bean.getPatientID());\r\n    patientMsg.setBody(body.toString());\r\n    patientMsg.setSubject(\"Your Referral Was Cancelled\");\r\n    patientMsg.setRead(0);\r\n    messageAction.sendMessage(patientMsg);\r\n}"},
 {"id":135, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":98, "classname":"edu.ncsu.csc.itrust.action.EmergencyReportAction", "methodid":536, "methodname":"edu.ncsu.csc.itrust.action.EmergencyReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * The super class handles validating the pid Logs viewing of the report\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used in creating the DAOs for this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is looking at the emergency report.\r\n * @param pidString\r\n * \t\tThe ID of the patient whose report is being generated.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EmergencyReportAction(DAOFactory factory, long loggedInMID, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    emailutil = new EmailUtil(factory);\r\n    pb = patientDAO.getPatient(this.pid);\r\n    emailutil.sendEmail(makeEmail());\r\n}"},
 {"id":136, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":100, "classname":"edu.ncsu.csc.itrust.action.EventLoggingAction", "methodid":550, "methodname":"edu.ncsu.csc.itrust.action.EventLoggingAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * Set up\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person retrieving the logs.\r\n */\r\npublic EventLoggingAction(DAOFactory factory) {\r\n    this.transDAO = factory.getTransactionDAO();\r\n}"},
 {"id":137, "parametername":"TransactionType type", "parametertype":"edu.ncsu.csc.itrust.enums.TransactionType", "parameterclass":490, "classid":100, "classname":"edu.ncsu.csc.itrust.action.EventLoggingAction", "methodid":551, "methodname":"edu.ncsu.csc.itrust.action.EventLoggingAction.logEvent(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on\r\n * the transaction type.\r\n *\r\n * @param type\r\n * \t\tThe {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is logged in.\r\n * @param secondaryMID\r\n * \t\tTypically, the MID of the user who is being acted upon.\r\n * @param addedInfo\r\n * \t\tA note about a subtransaction, or specifics of this transaction (for posterity).\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void logEvent(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    this.transDAO.logTransaction(type, loggedInMID, secondaryMID, addedInfo);\r\n}"},
 {"id":138, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":102, "classname":"edu.ncsu.csc.itrust.action.FindExpertAction", "methodid":555, "methodname":"edu.ncsu.csc.itrust.action.FindExpertAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * Constructor simply is used to initialize the DAOs\r\n *\r\n * @param factory\r\n * \t\tused to initialize DAOs\r\n */\r\npublic FindExpertAction(DAOFactory factory) {\r\n    this.factory = factory;\r\n    hospitalsDAO = new HospitalsDAO(factory);\r\n    personnelDAO = new PersonnelDAO(factory);\r\n}"},
 {"id":139, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":104, "classname":"edu.ncsu.csc.itrust.action.GenerateCalendarAction", "methodid":565, "methodname":"edu.ncsu.csc.itrust.action.GenerateCalendarAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is viewing the calendar\r\n */\r\npublic GenerateCalendarAction(DAOFactory factory, long loggedInMID) {\r\n    a_action = new ViewMyApptsAction(factory, loggedInMID);\r\n    r_action = new ViewMyRecordsAction(factory, loggedInMID);\r\n    send = new ArrayList<ApptBean>();\r\n    apptTypeDAO = factory.getApptTypeDAO();\r\n}"},
 {"id":140, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":106, "classname":"edu.ncsu.csc.itrust.action.GetUserNameAction", "methodid":578, "methodname":"edu.ncsu.csc.itrust.action.GetUserNameAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used for creating the DAOs for this action.\r\n */\r\npublic GetUserNameAction(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":141, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "methodid":585, "methodname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tMID of the person who is logged in\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic GetVisitRemindersAction(DAOFactory factory, long loggedInMID) throws iTrustException {\r\n    this.loggedInMID = loggedInMID;\r\n    visitReminderDAO = factory.getVisitRemindersDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n}"},
 {"id":142, "parametername":"GetVisitRemindersAction.ReminderType type", "parametertype":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType", "parameterclass":108, "classid":109, "classname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction", "methodid":590, "methodname":"edu.ncsu.csc.itrust.action.GetVisitRemindersAction.getVisitReminders(edu.ncsu.csc.itrust.action.GetVisitRemindersAction$ReminderType)", "isreturn":0, "sourcecode":"/**\r\n * Returns a list of VisitReminderReturnForms for the type passed in as a param\r\n *\r\n * @param type\r\n * \t\tthe ReminderType\r\n * @return the list of VisitReminderReturnForms\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic List<VisitReminderReturnForm> getVisitReminders(GetVisitRemindersAction.ReminderType type) throws FormValidationException, iTrustException {\r\n    if (null == type)\r\n        throw new iTrustException(\"Reminder Type DNE\");\r\n\r\n    switch (type) {\r\n        case DIAGNOSED_CARE_NEEDERS :\r\n            return visitReminderDAO.getDiagnosedVisitNeeders(loggedInMID);\r\n            // return stripDupes(visitReminderDAO.getDiagnosedVisitNeeders(loggedInMID));\r\n        case FLU_SHOT_NEEDERS :\r\n            return visitReminderDAO.getFluShotDelinquents(loggedInMID);\r\n        case IMMUNIZATION_NEEDERS :\r\n            return getImmunizationNeeders(loggedInMID);\r\n        default :\r\n            throw new iTrustException(\"Reminder Type DNE\");\r\n    }\r\n}"},
 {"id":143, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":111, "classname":"edu.ncsu.csc.itrust.action.GroupReportAction", "methodid":626, "methodname":"edu.ncsu.csc.itrust.action.GroupReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param factory\r\n * \t\t\r\n */\r\npublic GroupReportAction(DAOFactory factory) {\r\n    pDAO = factory.getPatientDAO();\r\n    aDAO = factory.getAllergyDAO();\r\n    fDAO = factory.getFamilyDAO();\r\n    oDAO = factory.getOfficeVisitDAO();\r\n}"},
 {"id":144, "parametername":"PatientBean patient", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":111, "classname":"edu.ncsu.csc.itrust.action.GroupReportAction", "methodid":629, "methodname":"edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensiveDemographicInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param patient\r\n * \t\t\r\n * @param filterType\r\n * \t\t\r\n * @return \r\n */\r\npublic String getComprehensiveDemographicInfo(PatientBean patient, DemographicReportFilter.DemographicReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case GENDER :\r\n            return patient.getGender().toString();\r\n        case LAST_NAME :\r\n            return patient.getLastName();\r\n        case FIRST_NAME :\r\n            return patient.getFirstName();\r\n        case CONTACT_EMAIL :\r\n            return patient.getEmail();\r\n        case STREET_ADDR :\r\n            return ((patient.getStreetAddress1()) + \" \") + (patient.getStreetAddress2());\r\n        case CITY :\r\n            return patient.getCity();\r\n        case STATE :\r\n            return patient.getState();\r\n        case ZIP :\r\n            return patient.getZip();\r\n        case PHONE :\r\n            return patient.getPhone();\r\n        case EMER_CONTACT_NAME :\r\n            return patient.getEmergencyName();\r\n        case EMER_CONTACT_PHONE :\r\n            return patient.getEmergencyPhone();\r\n        case INSURE_NAME :\r\n            return patient.getIcName();\r\n        case INSURE_ADDR :\r\n            return ((patient.getIcAddress1()) + \" \") + (patient.getIcAddress2());\r\n        case INSURE_CITY :\r\n            return patient.getIcCity();\r\n        case INSURE_STATE :\r\n            return patient.getIcState();\r\n        case INSURE_ZIP :\r\n            return patient.getIcZip();\r\n        case INSURE_PHONE :\r\n            return patient.getIcPhone();\r\n        case MID :\r\n            return Long.toString(patient.getMID());\r\n        case INSURE_ID :\r\n            return patient.getIcID();\r\n        case PARENT_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean parent : parents) {\r\n                    out += (parent.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PARENT_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean parent : parents) {\r\n                    out += (parent.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CHILD_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean child : children) {\r\n                    out += (child.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CHILD_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean child : children) {\r\n                    out += (child.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case SIBLING_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean sibling : siblings) {\r\n                    out += (sibling.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case SIBLING_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean sibling : siblings) {\r\n                    out += (sibling.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case DEACTIVATED :\r\n            return patient.getDateOfDeactivationStr();\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}"},
 {"id":145, "parametername":"DemographicReportFilter.DemographicReportFilterType filterType", "parametertype":"edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType", "parameterclass":585, "classid":111, "classname":"edu.ncsu.csc.itrust.action.GroupReportAction", "methodid":629, "methodname":"edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensiveDemographicInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param patient\r\n * \t\t\r\n * @param filterType\r\n * \t\t\r\n * @return \r\n */\r\npublic String getComprehensiveDemographicInfo(PatientBean patient, DemographicReportFilter.DemographicReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case GENDER :\r\n            return patient.getGender().toString();\r\n        case LAST_NAME :\r\n            return patient.getLastName();\r\n        case FIRST_NAME :\r\n            return patient.getFirstName();\r\n        case CONTACT_EMAIL :\r\n            return patient.getEmail();\r\n        case STREET_ADDR :\r\n            return ((patient.getStreetAddress1()) + \" \") + (patient.getStreetAddress2());\r\n        case CITY :\r\n            return patient.getCity();\r\n        case STATE :\r\n            return patient.getState();\r\n        case ZIP :\r\n            return patient.getZip();\r\n        case PHONE :\r\n            return patient.getPhone();\r\n        case EMER_CONTACT_NAME :\r\n            return patient.getEmergencyName();\r\n        case EMER_CONTACT_PHONE :\r\n            return patient.getEmergencyPhone();\r\n        case INSURE_NAME :\r\n            return patient.getIcName();\r\n        case INSURE_ADDR :\r\n            return ((patient.getIcAddress1()) + \" \") + (patient.getIcAddress2());\r\n        case INSURE_CITY :\r\n            return patient.getIcCity();\r\n        case INSURE_STATE :\r\n            return patient.getIcState();\r\n        case INSURE_ZIP :\r\n            return patient.getIcZip();\r\n        case INSURE_PHONE :\r\n            return patient.getIcPhone();\r\n        case MID :\r\n            return Long.toString(patient.getMID());\r\n        case INSURE_ID :\r\n            return patient.getIcID();\r\n        case PARENT_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean parent : parents) {\r\n                    out += (parent.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PARENT_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> parents = fDAO.getParents(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean parent : parents) {\r\n                    out += (parent.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CHILD_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean child : children) {\r\n                    out += (child.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CHILD_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> children = fDAO.getChildren(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean child : children) {\r\n                    out += (child.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case SIBLING_FIRST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean sibling : siblings) {\r\n                    out += (sibling.getFirstName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case SIBLING_LAST_NAME :\r\n            try {\r\n                List<FamilyMemberBean> siblings = fDAO.getSiblings(patient.getMID());\r\n                String out = \"\";\r\n                for (FamilyMemberBean sibling : siblings) {\r\n                    out += (sibling.getLastName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case DEACTIVATED :\r\n            return patient.getDateOfDeactivationStr();\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}"},
 {"id":146, "parametername":"PatientBean patient", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":111, "classname":"edu.ncsu.csc.itrust.action.GroupReportAction", "methodid":630, "methodname":"edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensiveMedicalInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param patient\r\n * \t\t\r\n * @param filterType\r\n * \t\t\r\n * @return \r\n */\r\npublic String getComprehensiveMedicalInfo(PatientBean patient, MedicalReportFilter.MedicalReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case ALLERGY :\r\n            try {\r\n                List<AllergyBean> allergies = aDAO.getAllergies(patient.getMID());\r\n                String out = \"\";\r\n                for (AllergyBean allergy : allergies) {\r\n                    out += (allergy.getNDCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CURRENT_PRESCRIPTIONS :\r\n            try {\r\n                List<PrescriptionBean> prescriptions = pDAO.getCurrentPrescriptions(patient.getMID());\r\n                String out = \"\";\r\n                for (PrescriptionBean prescription : prescriptions) {\r\n                    out += (prescription.getMedication().getNDCodeFormatted()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case DIAGNOSIS_ICD_CODE :\r\n            try {\r\n                List<DiagnosisBean> diagnoses = pDAO.getDiagnoses(patient.getMID());\r\n                String out = \"\";\r\n                for (DiagnosisBean diagnosis : diagnoses) {\r\n                    out += (diagnosis.getICDCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case LOWER_OFFICE_VISIT_DATE :\r\n            try {\r\n                List<OfficeVisitBean> visits = oDAO.getAllOfficeVisits(patient.getMID());\r\n                String out = \"\";\r\n                for (OfficeVisitBean visit : visits) {\r\n                    out += (visit.getVisitDateStr()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PASTCURRENT_PRESCRIPTIONS :\r\n            try {\r\n                List<PrescriptionBean> prescriptions = pDAO.getPrescriptions(patient.getMID());\r\n                String out = \"\";\r\n                for (PrescriptionBean prescription : prescriptions) {\r\n                    out += (prescription.getMedication().getNDCodeFormatted()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PROCEDURE :\r\n            try {\r\n                List<ProcedureBean> procedures = pDAO.getProcedures(patient.getMID());\r\n                String out = \"\";\r\n                for (ProcedureBean procedure : procedures) {\r\n                    out += (procedure.getCPTCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}"},
 {"id":147, "parametername":"MedicalReportFilter.MedicalReportFilterType filterType", "parametertype":"edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType", "parameterclass":588, "classid":111, "classname":"edu.ncsu.csc.itrust.action.GroupReportAction", "methodid":630, "methodname":"edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensiveMedicalInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param patient\r\n * \t\t\r\n * @param filterType\r\n * \t\t\r\n * @return \r\n */\r\npublic String getComprehensiveMedicalInfo(PatientBean patient, MedicalReportFilter.MedicalReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case ALLERGY :\r\n            try {\r\n                List<AllergyBean> allergies = aDAO.getAllergies(patient.getMID());\r\n                String out = \"\";\r\n                for (AllergyBean allergy : allergies) {\r\n                    out += (allergy.getNDCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case CURRENT_PRESCRIPTIONS :\r\n            try {\r\n                List<PrescriptionBean> prescriptions = pDAO.getCurrentPrescriptions(patient.getMID());\r\n                String out = \"\";\r\n                for (PrescriptionBean prescription : prescriptions) {\r\n                    out += (prescription.getMedication().getNDCodeFormatted()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case DIAGNOSIS_ICD_CODE :\r\n            try {\r\n                List<DiagnosisBean> diagnoses = pDAO.getDiagnoses(patient.getMID());\r\n                String out = \"\";\r\n                for (DiagnosisBean diagnosis : diagnoses) {\r\n                    out += (diagnosis.getICDCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case LOWER_OFFICE_VISIT_DATE :\r\n            try {\r\n                List<OfficeVisitBean> visits = oDAO.getAllOfficeVisits(patient.getMID());\r\n                String out = \"\";\r\n                for (OfficeVisitBean visit : visits) {\r\n                    out += (visit.getVisitDateStr()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PASTCURRENT_PRESCRIPTIONS :\r\n            try {\r\n                List<PrescriptionBean> prescriptions = pDAO.getPrescriptions(patient.getMID());\r\n                String out = \"\";\r\n                for (PrescriptionBean prescription : prescriptions) {\r\n                    out += (prescription.getMedication().getNDCodeFormatted()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        case PROCEDURE :\r\n            try {\r\n                List<ProcedureBean> procedures = pDAO.getProcedures(patient.getMID());\r\n                String out = \"\";\r\n                for (ProcedureBean procedure : procedures) {\r\n                    out += (procedure.getCPTCode()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}"},
 {"id":148, "parametername":"PatientBean patient", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":111, "classname":"edu.ncsu.csc.itrust.action.GroupReportAction", "methodid":631, "methodname":"edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensivePersonnelInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param patient\r\n * \t\t\r\n * @param filterType\r\n * \t\t\r\n * @return \r\n */\r\npublic String getComprehensivePersonnelInfo(PatientBean patient, PersonnelReportFilter.PersonnelReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case DLHCP :\r\n            try {\r\n                List<PersonnelBean> dlhcps = pDAO.getDeclaredHCPs(patient.getMID());\r\n                String out = \"\";\r\n                for (PersonnelBean dlhcp : dlhcps) {\r\n                    out += (dlhcp.getFullName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}"},
 {"id":149, "parametername":"PersonnelReportFilter.PersonnelReportFilterType filterType", "parametertype":"edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType", "parameterclass":591, "classid":111, "classname":"edu.ncsu.csc.itrust.action.GroupReportAction", "methodid":631, "methodname":"edu.ncsu.csc.itrust.action.GroupReportAction.getComprehensivePersonnelInfo(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param patient\r\n * \t\t\r\n * @param filterType\r\n * \t\t\r\n * @return \r\n */\r\npublic String getComprehensivePersonnelInfo(PatientBean patient, PersonnelReportFilter.PersonnelReportFilterType filterType) {\r\n    switch (filterType) {\r\n        case DLHCP :\r\n            try {\r\n                List<PersonnelBean> dlhcps = pDAO.getDeclaredHCPs(patient.getMID());\r\n                String out = \"\";\r\n                for (PersonnelBean dlhcp : dlhcps) {\r\n                    out += (dlhcp.getFullName()) + \"\n\";\r\n                }\r\n                return out;\r\n            } catch (Exception e) {\r\n                break;\r\n            }\r\n        default :\r\n            break;\r\n    }\r\n    return null;\r\n}"},
 {"id":150, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":113, "classname":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction", "methodid":637, "methodname":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.util.List)", "isreturn":0, "sourcecode":"/**\r\n * Initializes the group report generator with a list of filters\r\n *\r\n * @param filters\r\n * \t\tList of filters to be used in the report\r\n */\r\npublic GroupReportGeneratorAction(DAOFactory factory, List<ReportFilter> filters) {\r\n    this.factory = factory;\r\n    this.filters = filters;\r\n    action = new GroupReportAction(factory);\r\n}"},
 {"id":151, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":113, "classname":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction", "methodid":638, "methodname":"edu.ncsu.csc.itrust.action.GroupReportGeneratorAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,javax.servlet.http.HttpServletRequest)", "isreturn":0, "sourcecode":"/**\r\n * Initializes the group report generator with a list of filters after parsing them\r\n *\r\n * @param filters\r\n * \t\tHttpServletRequest to grab and parse parameters from\r\n */\r\npublic GroupReportGeneratorAction(DAOFactory factory, HttpServletRequest request) {\r\n    this.factory = factory;\r\n    this.filters = new ArrayList<ReportFilter>();\r\n    parseFilters(request);\r\n    action = new GroupReportAction(factory);\r\n}"},
 {"id":152, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":115, "classname":"edu.ncsu.csc.itrust.action.LabProcHCPAction", "methodid":649, "methodname":"edu.ncsu.csc.itrust.action.LabProcHCPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tMID for the logged in HCP\r\n */\r\npublic LabProcHCPAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n    lpDAO = factory.getLabProcedureDAO();\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    validator = new LabProcedureValidator();\r\n}"},
 {"id":153, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":117, "classname":"edu.ncsu.csc.itrust.action.LabProcLTAction", "methodid":664, "methodname":"edu.ncsu.csc.itrust.action.LabProcLTAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Setup\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tLT who is logged in\r\n */\r\npublic LabProcLTAction(DAOFactory factory, long loggedInMID) {\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    lpDAO = factory.getLabProcedureDAO();\r\n    personDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":154, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":119, "classname":"edu.ncsu.csc.itrust.action.LabProcUAPAction", "methodid":682, "methodname":"edu.ncsu.csc.itrust.action.LabProcUAPAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Setup\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tUAP who is logged in\r\n */\r\npublic LabProcUAPAction(DAOFactory factory, long loggedInMID) {\r\n    factory.getTransactionDAO();\r\n    lpDAO = factory.getLabProcedureDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    validator = new LabProcedureValidator();\r\n    this.factory = factory;\r\n}"},
 {"id":155, "parametername":"LabProcedureBean b", "parametertype":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "parameterclass":260, "classid":119, "classname":"edu.ncsu.csc.itrust.action.LabProcUAPAction", "methodid":684, "methodname":"edu.ncsu.csc.itrust.action.LabProcUAPAction.updateProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates a lab procedure\r\n *\r\n * @param b\r\n * \t\tthe procedure to update\r\n * @throws DBException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic void updateProcedure(LabProcedureBean b) throws DBException, FormValidationException {\r\n    validator.validate(b);\r\n    // need to check if status is whats being changed - if new status!=old status send email\r\n    if (!(b.getStatus().equals(lpDAO.getLabProcedure(b.getProcedureID()).getStatus()))) {\r\n        new EmailUtil(factory).sendEmail(makeEmail(b));\r\n    }\r\n    lpDAO.updateLabProcedure(b);\r\n}"},
 {"id":156, "parametername":"LabProcedureBean b", "parametertype":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "parameterclass":260, "classid":119, "classname":"edu.ncsu.csc.itrust.action.LabProcUAPAction", "methodid":683, "methodname":"edu.ncsu.csc.itrust.action.LabProcUAPAction.makeEmail(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "isreturn":0, "sourcecode":"/**\r\n * Sends an e-mail informing the patient that their procedure has been updated\r\n *\r\n * @param b\r\n * \t\tthe procedure that was updated\r\n * @return an e-mail to the patient with the notice\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate Email makeEmail(LabProcedureBean b) throws DBException {\r\n    PatientBean p = new PatientDAO(factory).getPatient(b.getPid());\r\n    Email email = new Email();\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(Arrays.asList(p.getEmail()));\r\n    email.setSubject(\"A Lab Procedure Was Updated\");\r\n    email.setBody(String.format(\"Dear %s, \n Your Lab Procedure (%s) has a new updated status of %s. Log on to iTrust to view.\", p.getFullName(), b.getLoinc(), b.getStatus()));\r\n    return email;\r\n}"},
 {"id":157, "parametername":"edu.ncsu.csc.itrust.beans.Email", "parametertype":"edu.ncsu.csc.itrust.beans.Email", "parameterclass":251, "classid":119, "classname":"edu.ncsu.csc.itrust.action.LabProcUAPAction", "methodid":683, "methodname":"edu.ncsu.csc.itrust.action.LabProcUAPAction.makeEmail(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "isreturn":1, "sourcecode":"/**\r\n * Sends an e-mail informing the patient that their procedure has been updated\r\n *\r\n * @param b\r\n * \t\tthe procedure that was updated\r\n * @return an e-mail to the patient with the notice\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate Email makeEmail(LabProcedureBean b) throws DBException {\r\n    PatientBean p = new PatientDAO(factory).getPatient(b.getPid());\r\n    Email email = new Email();\r\n    email.setFrom(\"no-reply@itrust.com\");\r\n    email.setToList(Arrays.asList(p.getEmail()));\r\n    email.setSubject(\"A Lab Procedure Was Updated\");\r\n    email.setBody(String.format(\"Dear %s, \n Your Lab Procedure (%s) has a new updated status of %s. Log on to iTrust to view.\", p.getFullName(), b.getLoinc(), b.getStatus()));\r\n    return email;\r\n}"},
 {"id":158, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":121, "classname":"edu.ncsu.csc.itrust.action.LoginFailureAction", "methodid":691, "methodname":"edu.ncsu.csc.itrust.action.LoginFailureAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param ipAddr\r\n * \t\tThe IP address of the user making the login attempt.\r\n */\r\npublic LoginFailureAction(DAOFactory factory, String ipAddr) {\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.ipAddr = ipAddr;\r\n    validCaptcha = false;\r\n    hasAttempts = false;\r\n}"},
 {"id":159, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":123, "classname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction", "methodid":704, "methodname":"edu.ncsu.csc.itrust.action.ManageHospitalAssignmentsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user managing hospitals.\r\n */\r\npublic ManageHospitalAssignmentsAction(DAOFactory factory, long loggedInMID) {\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.hospitalsDAO = factory.getHospitalsDAO();\r\n}"},
 {"id":160, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":125, "classname":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction", "methodid":736, "methodname":"edu.ncsu.csc.itrust.action.MonitorAdverseEventAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param loggedInMID\r\n * \t\t\r\n */\r\npublic MonitorAdverseEventAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.messenger = new SendMessageAction(factory, loggedInMID);\r\n}"},
 {"id":161, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":128, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisAction", "methodid":750, "methodname":"edu.ncsu.csc.itrust.action.MyDiagnosisAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up for defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is looking at their diagnoses.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic MyDiagnosisAction(DAOFactory factory, long loggedInMID) throws iTrustException {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.officeVisitDAO = factory.getOfficeVisitDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.surveyDAO = factory.getSurveyDAO();\r\n    this.labprocDAO = factory.getLabProcedureDAO();\r\n    this.prescriptionsDAO = factory.getPrescriptionsDAO();\r\n}"},
 {"id":162, "parametername":"HCPDiagnosisBean a", "parametertype":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "parameterclass":254, "classid":127, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator", "methodid":756, "methodname":"edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator.compare(edu.ncsu.csc.itrust.beans.HCPDiagnosisBean,edu.ncsu.csc.itrust.beans.HCPDiagnosisBean)", "isreturn":0, "sourcecode":"/**\r\n * Compares one HCP with another\r\n *\r\n * @param a\r\n * \t\tthe first HCP\r\n * @param b\r\n * \t\tthe second HCP\r\n * @return -1 if a has had more patients, 1 if b has had more patients; otherwise 0\r\n */\r\npublic int compare(HCPDiagnosisBean a, HCPDiagnosisBean b) {\r\n    int ret = 0;\r\n    if ((a.getNumPatients()) > (b.getNumPatients()))\r\n        ret = -1;\r\n    else\r\n        if ((a.getNumPatients()) < (b.getNumPatients()))\r\n            ret = 1;\r\n\r\n\r\n    return ret;\r\n}"},
 {"id":163, "parametername":"HCPDiagnosisBean b", "parametertype":"edu.ncsu.csc.itrust.beans.HCPDiagnosisBean", "parameterclass":254, "classid":127, "classname":"edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator", "methodid":756, "methodname":"edu.ncsu.csc.itrust.action.MyDiagnosisAction$HCPDiagnosisBeanComparator.compare(edu.ncsu.csc.itrust.beans.HCPDiagnosisBean,edu.ncsu.csc.itrust.beans.HCPDiagnosisBean)", "isreturn":0, "sourcecode":"/**\r\n * Compares one HCP with another\r\n *\r\n * @param a\r\n * \t\tthe first HCP\r\n * @param b\r\n * \t\tthe second HCP\r\n * @return -1 if a has had more patients, 1 if b has had more patients; otherwise 0\r\n */\r\npublic int compare(HCPDiagnosisBean a, HCPDiagnosisBean b) {\r\n    int ret = 0;\r\n    if ((a.getNumPatients()) > (b.getNumPatients()))\r\n        ret = -1;\r\n    else\r\n        if ((a.getNumPatients()) < (b.getNumPatients()))\r\n            ret = 1;\r\n\r\n\r\n    return ret;\r\n}"},
 {"id":164, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":131, "classname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction", "methodid":766, "methodname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"public PatientRoomAssignmentAction(DAOFactory factory) {\r\n    this.factory = factory;\r\n    wardDAO = new WardDAO(factory);\r\n}"},
 {"id":165, "parametername":"WardRoomBean wardRoom", "parametertype":"edu.ncsu.csc.itrust.beans.WardRoomBean", "parameterclass":285, "classid":131, "classname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction", "methodid":768, "methodname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.assignPatientToRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,long)", "isreturn":0, "sourcecode":"public void assignPatientToRoom(WardRoomBean wardRoom, long patientMID) throws DBException {\r\n    wardRoom.setOccupiedBy(patientMID);\r\n    wardDAO.updateWardRoomOccupant(wardRoom);\r\n}"},
 {"id":166, "parametername":"WardRoomBean wardRoom", "parametertype":"edu.ncsu.csc.itrust.beans.WardRoomBean", "parameterclass":285, "classid":131, "classname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction", "methodid":767, "methodname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.assignPatientToRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,edu.ncsu.csc.itrust.beans.PatientBean)", "isreturn":0, "sourcecode":"public void assignPatientToRoom(WardRoomBean wardRoom, PatientBean patient) throws DBException {\r\n    assignPatientToRoom(wardRoom, patient.getMID());\r\n}"},
 {"id":167, "parametername":"PatientBean patient", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":131, "classname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction", "methodid":767, "methodname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.assignPatientToRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,edu.ncsu.csc.itrust.beans.PatientBean)", "isreturn":0, "sourcecode":"public void assignPatientToRoom(WardRoomBean wardRoom, PatientBean patient) throws DBException {\r\n    assignPatientToRoom(wardRoom, patient.getMID());\r\n}"},
 {"id":168, "parametername":"WardRoomBean wardRoom", "parametertype":"edu.ncsu.csc.itrust.beans.WardRoomBean", "parameterclass":285, "classid":131, "classname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction", "methodid":769, "methodname":"edu.ncsu.csc.itrust.action.PatientRoomAssignmentAction.removePatientFromRoom(edu.ncsu.csc.itrust.beans.WardRoomBean,java.lang.String)", "isreturn":0, "sourcecode":"public void removePatientFromRoom(WardRoomBean wardRoom, String reason) throws DBException {\r\n    long mid = wardRoom.getOccupiedBy();\r\n    wardDAO.checkOutPatientReason(mid, reason);\r\n    wardRoom.setOccupiedBy(null);\r\n    wardDAO.updateWardRoomOccupant(wardRoom);\r\n}"},
 {"id":169, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":133, "classname":"edu.ncsu.csc.itrust.action.PrescriptionReportAction", "methodid":774, "methodname":"edu.ncsu.csc.itrust.action.PrescriptionReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Super class validates pidString\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is making a prescription report.\r\n * @param pidString\r\n * \t\tThe MID of the patient in question.\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n * @throws NoHealthRecordsException\r\n * \t\t\r\n */\r\npublic PrescriptionReportAction(DAOFactory factory, long loggedInMID, String pidString) throws DBException, NoHealthRecordsException, iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.prDAO = factory.getPrescriptionReportDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":170, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":136, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction", "methodid":793, "methodname":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction.-init-(java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public ReportAdverseEventAction(String hcpID, DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.hcpID = Long.parseLong(hcpID);\r\n    this.validator = new AdverseEventValidator();\r\n}"},
 {"id":171, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":136, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction", "methodid":794, "methodname":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Constructor used to send e-mails only\r\n */\r\npublic ReportAdverseEventAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.adverseEventDAO = factory.getAdverseEventDAO();\r\n    this.validator = new AdverseEventValidator();\r\n}"},
 {"id":172, "parametername":"AdverseEventBean aeBean", "parametertype":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "parameterclass":243, "classid":136, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction", "methodid":796, "methodname":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction.sendMail(edu.ncsu.csc.itrust.beans.AdverseEventBean)", "isreturn":0, "sourcecode":"/**\r\n * A method used to send a single e-mail. Used in immunizations.\r\n *\r\n * @param aeBean\r\n * \t\t\r\n * @return Email returns the Email for testing purposes.\r\n */\r\npublic Email sendMail(AdverseEventBean aeBean) throws DBException, FormValidationException, iTrustException {\r\n    Email email = new Email();\r\n    String fromEmail;\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    List<String> toList = new ArrayList<String>();\r\n    PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n    PersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\r\n    toList.add(receiver.getEmail());\r\n    fromEmail = sender.getEmail();\r\n    email.setToList(toList);\r\n    email.setFrom(fromEmail);\r\n    email.setSubject(String.format(\"Adverse Event Report (Immunization)\"));\r\n    email.setBody(String.format(((((((((((\" Patient: \" + (patientDAO.getName(Long.parseLong(aeBean.getMID())))) + \" (MID \") + (aeBean.getMID())) + \") Has Reported the following adverse event\") + \" Drug: \") + (aeBean.getDrug())) + \"(\") + (aeBean.getCode())) + \") Description: \") + (aeBean.getDescription()))));\r\n    emailer.sendEmail(email);\r\n    return email;\r\n}"},
 {"id":173, "parametername":"edu.ncsu.csc.itrust.beans.Email", "parametertype":"edu.ncsu.csc.itrust.beans.Email", "parameterclass":251, "classid":136, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction", "methodid":796, "methodname":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction.sendMail(edu.ncsu.csc.itrust.beans.AdverseEventBean)", "isreturn":1, "sourcecode":"/**\r\n * A method used to send a single e-mail. Used in immunizations.\r\n *\r\n * @param aeBean\r\n * \t\t\r\n * @return Email returns the Email for testing purposes.\r\n */\r\npublic Email sendMail(AdverseEventBean aeBean) throws DBException, FormValidationException, iTrustException {\r\n    Email email = new Email();\r\n    String fromEmail;\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    List<String> toList = new ArrayList<String>();\r\n    PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n    PersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\r\n    toList.add(receiver.getEmail());\r\n    fromEmail = sender.getEmail();\r\n    email.setToList(toList);\r\n    email.setFrom(fromEmail);\r\n    email.setSubject(String.format(\"Adverse Event Report (Immunization)\"));\r\n    email.setBody(String.format(((((((((((\" Patient: \" + (patientDAO.getName(Long.parseLong(aeBean.getMID())))) + \" (MID \") + (aeBean.getMID())) + \") Has Reported the following adverse event\") + \" Drug: \") + (aeBean.getDrug())) + \"(\") + (aeBean.getCode())) + \") Description: \") + (aeBean.getDescription()))));\r\n    emailer.sendEmail(email);\r\n    return email;\r\n}"},
 {"id":174, "parametername":"AdverseEventBean aeBean", "parametertype":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "parameterclass":243, "classid":136, "classname":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction", "methodid":795, "methodname":"edu.ncsu.csc.itrust.action.ReportAdverseEventAction.addReport(edu.ncsu.csc.itrust.beans.AdverseEventBean)", "isreturn":0, "sourcecode":"/**\r\n * Method used to add a report to the data base\r\n *\r\n * @param aeBean\r\n * \t\tThe adverse event to add\r\n * @return a string for testing purposes only\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic String addReport(AdverseEventBean aeBean) throws DBException, FormValidationException, iTrustException {\r\n    try {\r\n        validator.validate(aeBean);\r\n    } catch (FormValidationException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n    try {\r\n        adverseEventDAO.addReport(aeBean, hcpID);\r\n    } catch (DBException e) {\r\n        throw new iTrustException(e.getMessage());\r\n    }\r\n    /**\r\n     * Old code used to send a single e-mail. Keep for reference\r\n     * Email email = new Email();\r\n     * String senderName;\r\n     * String fromEmail;\r\n     * email.setFrom(\"noreply@itrust.com\");\r\n     * List<String> toList = new ArrayList<String>();\r\n     *\r\n     * PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n     * PersonnelBean receiver = personnelDAO.getPersonnel(hcpID);\r\n     *\r\n     * toList.add(receiver.getEmail());\r\n     * senderName = sender.getFullName();\r\n     * fromEmail = sender.getEmail();\r\n     *\r\n     * email.setToList(toList);\r\n     * email.setFrom(fromEmail);\r\n     * email.setSubject(String.format(\"Adverse Event Report\"));\r\n     * email.setBody(String.format(\r\n     * \" Patient: \" + patientDAO.getName(Long.parseLong(aeBean.getMID()))\r\n     * + \" (MID \" + aeBean.getMID() + \") Has Reported the following adverse event(s)\" +\r\n     * \" Drug: \" + aeBean.getDrug() + \"(\" + aeBean.getCode() + \") Description: \" + aeBean.getDescription()\r\n     * ));\r\n     * emailer.sendEmail(email);\r\n     */\r\n    return \"\";\r\n}"},
 {"id":175, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":138, "classname":"edu.ncsu.csc.itrust.action.ResetPasswordAction", "methodid":806, "methodname":"edu.ncsu.csc.itrust.action.ResetPasswordAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n */\r\npublic ResetPasswordAction(DAOFactory factory) {\r\n    this.authDAO = factory.getAuthDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.factory = factory;\r\n}"},
 {"id":176, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":140, "classname":"edu.ncsu.csc.itrust.action.SearchUsersAction", "methodid":830, "methodname":"edu.ncsu.csc.itrust.action.SearchUsersAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is performing the search.\r\n */\r\npublic SearchUsersAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n}"},
 {"id":177, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":142, "classname":"edu.ncsu.csc.itrust.action.SendMessageAction", "methodid":850, "methodname":"edu.ncsu.csc.itrust.action.SendMessageAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user sending the message.\r\n */\r\npublic SendMessageAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.emailer = new EmailUtil(factory);\r\n    this.messageDAO = factory.getMessageDAO();\r\n    this.emailVal = new EMailValidator();\r\n    this.messVal = new MessageValidator();\r\n}"},
 {"id":178, "parametername":"MessageBean mBean", "parametertype":"edu.ncsu.csc.itrust.beans.MessageBean", "parameterclass":262, "classid":142, "classname":"edu.ncsu.csc.itrust.action.SendMessageAction", "methodid":857, "methodname":"edu.ncsu.csc.itrust.action.SendMessageAction.sendMessage(edu.ncsu.csc.itrust.beans.MessageBean)", "isreturn":0, "sourcecode":"/**\r\n * Sends a message\r\n *\r\n * @param mBean\r\n * \t\tmessage to be sent\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic void sendMessage(MessageBean mBean) throws FormValidationException, iTrustException, SQLException {\r\n    messVal.validate(mBean);\r\n    emailVal.validate(mBean);\r\n    messageDAO.addMessage(mBean);\r\n    Email email = new Email();\r\n    String senderName;\r\n    String fromEmail;\r\n    email.setFrom(\"noreply@itrust.com\");\r\n    List<String> toList = new ArrayList<String>();\r\n    if ((8999999999L < (mBean.getFrom())) && (8999999999L < (mBean.getTo()))) {\r\n        // when from and to are LHCPs\r\n        PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\r\n        PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\r\n        toList.add(receiver.getEmail());\r\n        senderName = sender.getFullName();\r\n        fromEmail = sender.getEmail();\r\n        email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/hcp/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n    } else {\r\n        if (6999999999L < (mBean.getFrom())) {\r\n            PersonnelBean sender = personnelDAO.getPersonnel(loggedInMID);\r\n            if (6999999999L < (mBean.getTo())) {\r\n                // when from is any personnel and to is any personnel\r\n                PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n                senderName = sender.getFullName();\r\n                email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/hcp/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n            } else {\r\n                // when from is any personnel and to is patient\r\n                PatientBean receiver = patientDAO.getPatient(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n                senderName = sender.getFullName();\r\n                email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/patient/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n            }\r\n            fromEmail = sender.getEmail();\r\n        } else {\r\n            PatientBean sender = patientDAO.getPatient(loggedInMID);\r\n            if (6999999999L < (mBean.getTo())) {\r\n                // when from is patient and to is any personnel\r\n                PersonnelBean receiver = personnelDAO.getPersonnel(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n                senderName = sender.getFullName();\r\n                email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/hcp/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n            } else {\r\n                // when from is patient and to is patient\r\n                PatientBean receiver = patientDAO.getPatient(mBean.getTo());\r\n                toList.add(receiver.getEmail());\r\n                senderName = sender.getFullName();\r\n                email.setBody(String.format(\"You have received a new message from %s in iTrust. To view it, go to \"http://localhost:8080/iTrust/auth/patient/messageInbox.jsp\" and log in to iTrust using your username and password.\", senderName));\r\n            }\r\n            fromEmail = sender.getEmail();\r\n        }\r\n    }\r\n    email.setToList(toList);\r\n    email.setFrom(fromEmail);\r\n    email.setSubject(String.format(\"A new message from %s\", senderName));\r\n    emailer.sendEmail(email);\r\n}"},
 {"id":179, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":144, "classname":"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction", "methodid":867, "methodname":"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param rLoggedInMID\r\n * \t\tThe MID of the user who is setting their security question.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic SetSecurityQuestionAction(DAOFactory factory, long rLoggedInMID) throws iTrustException {\r\n    this.authDAO = factory.getAuthDAO();\r\n    loggedInMID = checkMID(rLoggedInMID);\r\n}"},
 {"id":180, "parametername":"SecurityQA a", "parametertype":"edu.ncsu.csc.itrust.beans.SecurityQA", "parameterclass":277, "classid":144, "classname":"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction", "methodid":870, "methodname":"edu.ncsu.csc.itrust.action.SetSecurityQuestionAction.updateInformation(edu.ncsu.csc.itrust.beans.SecurityQA)", "isreturn":0, "sourcecode":"/**\r\n * Updates information in the database from the information held in the SecurityQA bean passed as a param\r\n *\r\n * @param a\r\n * \t\tSecurityQuestionBean that holds new information\r\n * @throws Exception\r\n * \t\t\r\n */\r\npublic void updateInformation(SecurityQA a) throws Exception {\r\n    SecurityQAValidator sqav = new SecurityQAValidator();\r\n    sqav.validate(a);\r\n    authDAO.setSecurityQuestionAnswer(a.getQuestion(), a.getAnswer(), loggedInMID);\r\n}"},
 {"id":181, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":146, "classname":"edu.ncsu.csc.itrust.action.SurveyAction", "methodid":877, "methodname":"edu.ncsu.csc.itrust.action.SurveyAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user taking the survey.\r\n */\r\npublic SurveyAction(DAOFactory factory, long loggedInMID) {\r\n    surveyDAO = factory.getSurveyDAO();\r\n    ovDAO = factory.getOfficeVisitDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":182, "parametername":"SurveyBean surveyBean", "parametertype":"edu.ncsu.csc.itrust.beans.SurveyBean", "parameterclass":278, "classid":146, "classname":"edu.ncsu.csc.itrust.action.SurveyAction", "methodid":878, "methodname":"edu.ncsu.csc.itrust.action.SurveyAction.addSurvey(edu.ncsu.csc.itrust.beans.SurveyBean,long)", "isreturn":0, "sourcecode":"/**\r\n * Pass the OfficeVistBean along with SurveyBean\r\n *\r\n * @param surveyBean\r\n * \t\tcontains data to be added to database\r\n * @param visitID\r\n * \t\tThe Office Visit ID corresponding to this Survey.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void addSurvey(SurveyBean surveyBean, long visitID) throws DBException {\r\n    surveyBean.setVisitID(visitID);// now set visit ID in the survey bean\r\n\r\n    surveyDAO.addCompletedSurvey(surveyBean, Calendar.getInstance().getTime());\r\n}"},
 {"id":183, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":147, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction", "methodid":880, "methodname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the administrator who is updating the CPTs.\r\n */\r\npublic UpdateCPTCodeListAction(DAOFactory factory, long loggedInMID) {\r\n    this.cptDAO = factory.getCPTCodesDAO();\r\n}"},
 {"id":184, "parametername":"ProcedureBean proc", "parametertype":"edu.ncsu.csc.itrust.beans.ProcedureBean", "parameterclass":273, "classid":147, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction", "methodid":881, "methodname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.addCPTCode(edu.ncsu.csc.itrust.beans.ProcedureBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a new cpt code (med procedure)\r\n *\r\n * @param proc\r\n * \t\tProcedureBean that holds the new cpt code\r\n * @return status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String addCPTCode(ProcedureBean proc) throws FormValidationException {\r\n    validator.validate(proc);\r\n    try {\r\n        if (cptDAO.addCPTCode(proc)) {\r\n            return (((\"Success: \" + (proc.getCPTCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":185, "parametername":"ProcedureBean proc", "parametertype":"edu.ncsu.csc.itrust.beans.ProcedureBean", "parameterclass":273, "classid":147, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction", "methodid":883, "methodname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.updateInformation(edu.ncsu.csc.itrust.beans.ProcedureBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates a procedure with new information from the ProcedureBean\r\n *\r\n * @param proc\r\n * \t\tProcedureBean with new information (but same CPT code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String updateInformation(ProcedureBean proc) throws FormValidationException {\r\n    validator.validate(proc);\r\n    try {\r\n        int rows = updateCode(proc);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found. To edit an actual code, \" + \"change the description and add a new code with the old description\";\r\n        } else {\r\n            return (\"Success: \" + rows) + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":186, "parametername":"ProcedureBean proc", "parametertype":"edu.ncsu.csc.itrust.beans.ProcedureBean", "parameterclass":273, "classid":147, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction", "methodid":882, "methodname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListAction.updateCode(edu.ncsu.csc.itrust.beans.ProcedureBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates the cpt code\r\n *\r\n * @param proc\r\n * \t\tthe code to be updated\r\n * @return updated code\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate int updateCode(ProcedureBean proc) throws DBException {\r\n    return cptDAO.updateCode(proc);\r\n}"},
 {"id":187, "parametername":"ProcedureBean proc", "parametertype":"edu.ncsu.csc.itrust.beans.ProcedureBean", "parameterclass":273, "classid":148, "classname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest", "methodid":886, "methodname":"edu.ncsu.csc.itrust.action.UpdateCPTCodeListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.ProcedureBean)", "isreturn":0, "sourcecode":"private String getAddCodeSuccessString(ProcedureBean proc) {\r\n    return (((\"Success: \" + (proc.getCPTCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}"},
 {"id":188, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":149, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction", "methodid":894, "methodname":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * \t\tThe MID of the person updating the hospitals.\r\n */\r\npublic UpdateHospitalListAction(DAOFactory factory, long performerID) {\r\n    this.hospDAO = factory.getHospitalsDAO();\r\n}"},
 {"id":189, "parametername":"HospitalBean hosp", "parametertype":"edu.ncsu.csc.itrust.beans.HospitalBean", "parameterclass":258, "classid":149, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction", "methodid":895, "methodname":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction.addHospital(edu.ncsu.csc.itrust.beans.HospitalBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a hospital using the HospitalBean passed as a parameter\r\n *\r\n * @param hosp\r\n * \t\tthe new hospital listing\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String addHospital(HospitalBean hosp) throws FormValidationException {\r\n    new HospitalBeanValidator().validate(hosp);\r\n    try {\r\n        if (hospDAO.addHospital(hosp)) {\r\n            return (((\"Success: \" + (hosp.getHospitalID())) + \" - \") + (hosp.getHospitalName())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":190, "parametername":"HospitalBean hosp", "parametertype":"edu.ncsu.csc.itrust.beans.HospitalBean", "parameterclass":258, "classid":149, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction", "methodid":897, "methodname":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction.updateInformation(edu.ncsu.csc.itrust.beans.HospitalBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates a hospital (based on the hospital id) using new information from the HospitalBean passed as a\r\n * parameter\r\n *\r\n * @param hosp\r\n * \t\tthe new hospital information with the same hospital id\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String updateInformation(HospitalBean hosp) throws FormValidationException {\r\n    new HospitalBeanValidator().validate(hosp);\r\n    try {\r\n        int rows = 0;\r\n        return 0 == (rows = updateHospital(hosp)) ? \"Error: Hospital not found.\" : (\"Success: \" + rows) + \" row(s) updated\";\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":191, "parametername":"HospitalBean hosp", "parametertype":"edu.ncsu.csc.itrust.beans.HospitalBean", "parameterclass":258, "classid":149, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction", "methodid":896, "methodname":"edu.ncsu.csc.itrust.action.UpdateHospitalListAction.updateHospital(edu.ncsu.csc.itrust.beans.HospitalBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates hospital\r\n *\r\n * @param hosp\r\n * \t\tnew information\r\n * @return id for the updated hospital\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate int updateHospital(HospitalBean hosp) throws DBException {\r\n    return hospDAO.updateHospital(hosp);\r\n}"},
 {"id":192, "parametername":"HospitalBean proc", "parametertype":"edu.ncsu.csc.itrust.beans.HospitalBean", "parameterclass":258, "classid":150, "classname":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest", "methodid":900, "methodname":"edu.ncsu.csc.itrust.action.UpdateHospitalListActionTest.getAddHospitalSuccessString(edu.ncsu.csc.itrust.beans.HospitalBean)", "isreturn":0, "sourcecode":"private String getAddHospitalSuccessString(HospitalBean proc) {\r\n    return (((\"Success: \" + (proc.getHospitalID())) + \" - \") + (proc.getHospitalName())) + \" added\";\r\n}"},
 {"id":193, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":151, "classname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListAction", "methodid":911, "methodname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * \t\tThe MID of the person udpating the ICDs.\r\n */\r\npublic UpdateICDCodeListAction(DAOFactory factory, long performerID) {\r\n    icdDAO = factory.getICDCodesDAO();\r\n}"},
 {"id":194, "parametername":"DiagnosisBean diagn", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "parameterclass":248, "classid":151, "classname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListAction", "methodid":912, "methodname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListAction.addICDCode(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a new ICD code (diagnosis) based on the DiagnosisBean passed as a param\r\n *\r\n * @param diagn\r\n * \t\tThe new diagnosis (ICD code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String addICDCode(DiagnosisBean diagn) throws FormValidationException {\r\n    validator.validate(diagn);\r\n    try {\r\n        if (icdDAO.addICDCode(diagn)) {\r\n            return (((\"Success: \" + (diagn.getICDCode())) + \" - \") + (diagn.getDescription())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":195, "parametername":"DiagnosisBean diagn", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "parameterclass":248, "classid":151, "classname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListAction", "methodid":913, "methodname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListAction.updateInformation(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates a diagnosis with new information from the DiagnosisBean passed as a param\r\n *\r\n * @param diagn\r\n * \t\tnew information to update (but same code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String updateInformation(DiagnosisBean diagn) throws FormValidationException {\r\n    validator.validate(diagn);\r\n    try {\r\n        int rows = icdDAO.updateCode(diagn);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            return (\"Success: \" + rows) + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":196, "parametername":"DiagnosisBean proc", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "parameterclass":248, "classid":152, "classname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest", "methodid":915, "methodname":"edu.ncsu.csc.itrust.action.UpdateICDCodeListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "isreturn":0, "sourcecode":"private String getAddCodeSuccessString(DiagnosisBean proc) {\r\n    return (((\"Success: \" + (proc.getICDCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}"},
 {"id":197, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":153, "classname":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction", "methodid":923, "methodname":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * Sets up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n */\r\npublic UpdateLOINCListAction(DAOFactory factory) {\r\n    lDAO = factory.getLOINCDAO();\r\n}"},
 {"id":198, "parametername":"LOINCbean diagn", "parametertype":"edu.ncsu.csc.itrust.beans.LOINCbean", "parameterclass":259, "classid":153, "classname":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction", "methodid":924, "methodname":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction.add(edu.ncsu.csc.itrust.beans.LOINCbean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a new LOINC\r\n *\r\n * @param diagn\r\n * \t\tNew LOINC\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String add(LOINCbean diagn) throws FormValidationException, iTrustException {\r\n    validator.validate(diagn);\r\n    List<LOINCbean> lblist = lDAO.getProcedures(diagn.getLabProcedureCode());\r\n    if (!(lblist.isEmpty())) {\r\n        throw new FormValidationException(\"Error: Code already exists.\");\r\n    }\r\n    lDAO.addLOINC(diagn);\r\n    return (\"Success: \" + (diagn.getLabProcedureCode())) + \" added\";\r\n}"},
 {"id":199, "parametername":"LOINCbean diagn", "parametertype":"edu.ncsu.csc.itrust.beans.LOINCbean", "parameterclass":259, "classid":153, "classname":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction", "methodid":927, "methodname":"edu.ncsu.csc.itrust.action.UpdateLOINCListAction.updateInformation(edu.ncsu.csc.itrust.beans.LOINCbean)", "isreturn":0, "sourcecode":"/**\r\n * Updates a LOINC\r\n *\r\n * @param diagn\r\n * \t\tnew information to update (but same code)\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String updateInformation(LOINCbean diagn) throws FormValidationException {\r\n    validator.validate(diagn);\r\n    try {\r\n        int rows = lDAO.update(diagn);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            return (\"Success: \" + (diagn.getLabProcedureCode())) + \" updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":200, "parametername":"LOINCbean proc", "parametertype":"edu.ncsu.csc.itrust.beans.LOINCbean", "parameterclass":259, "classid":154, "classname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest", "methodid":929, "methodname":"edu.ncsu.csc.itrust.action.UpdateLabProcListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.LOINCbean)", "isreturn":0, "sourcecode":"private String getAddCodeSuccessString(LOINCbean proc) {\r\n    return (\"Success: \" + (proc.getLabProcedureCode())) + \" added\";\r\n}"},
 {"id":201, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":155, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction", "methodid":943, "methodname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults.\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * \t\tThe MID of the user updating the ND lists.\r\n */\r\npublic UpdateNDCodeListAction(DAOFactory factory, long performerID) {\r\n    ndDAO = factory.getNDCodesDAO();\r\n}"},
 {"id":202, "parametername":"MedicationBean med", "parametertype":"edu.ncsu.csc.itrust.beans.MedicationBean", "parameterclass":261, "classid":155, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction", "methodid":944, "methodname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.addNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a new ND Code (prescription) to the list\r\n *\r\n * @param med\r\n * \t\tThe new ND Code to be added\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String addNDCode(MedicationBean med) throws FormValidationException {\r\n    validator.validate(med);\r\n    try {\r\n        if (ndDAO.addNDCode(med)) {\r\n            return (((\"Success: \" + (med.getNDCode())) + \" - \") + (med.getDescription())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":203, "parametername":"MedicationBean med", "parametertype":"edu.ncsu.csc.itrust.beans.MedicationBean", "parameterclass":261, "classid":155, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction", "methodid":947, "methodname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.updateInformation(edu.ncsu.csc.itrust.beans.MedicationBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates the ND Code with new information from the MedicationBean\r\n *\r\n * @param med\r\n * \t\tthe MedicationBean that holds new information but the same code\r\n * @return status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String updateInformation(MedicationBean med) throws FormValidationException {\r\n    validator.validate(med);\r\n    try {\r\n        int rows = updateCode(med);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            return (\"Success: \" + rows) + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":204, "parametername":"MedicationBean med", "parametertype":"edu.ncsu.csc.itrust.beans.MedicationBean", "parameterclass":261, "classid":155, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction", "methodid":946, "methodname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.updateCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "isreturn":0, "sourcecode":"/**\r\n * Medication information should already be validated\r\n *\r\n * @param med\r\n * \t\t\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate int updateCode(MedicationBean med) throws DBException {\r\n    return ndDAO.updateCode(med);\r\n}"},
 {"id":205, "parametername":"MedicationBean med", "parametertype":"edu.ncsu.csc.itrust.beans.MedicationBean", "parameterclass":261, "classid":155, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction", "methodid":945, "methodname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListAction.removeNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "isreturn":0, "sourcecode":"/**\r\n * Removes a ND Code (prescription) from the list\r\n *\r\n * @param med\r\n * \t\tThe ND Code to be removed\r\n * @return Status message\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic String removeNDCode(MedicationBean med) throws DBException {\r\n    try {\r\n        if ((ndDAO.getNDCode(med.getNDCode())) == null) {\r\n            return \"Drug does not exist or already has been removed from the database.\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n    try {\r\n        if (ndDAO.removeNDCode(med)) {\r\n            return (((\"Success: \" + (med.getNDCode())) + \" - \") + (med.getDescription())) + \" removed\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":206, "parametername":"MedicationBean proc", "parametertype":"edu.ncsu.csc.itrust.beans.MedicationBean", "parameterclass":261, "classid":156, "classname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest", "methodid":950, "methodname":"edu.ncsu.csc.itrust.action.UpdateNDCodeListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.MedicationBean)", "isreturn":0, "sourcecode":"private String getAddCodeSuccessString(MedicationBean proc) {\r\n    return (((\"Success: \" + (proc.getNDCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}"},
 {"id":207, "parametername":"MedicationBean proc", "parametertype":"edu.ncsu.csc.itrust.beans.MedicationBean", "parameterclass":261, "classid":157, "classname":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest", "methodid":960, "methodname":"edu.ncsu.csc.itrust.action.UpdateORCListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.MedicationBean)", "isreturn":0, "sourcecode":"private String getAddCodeSuccessString(MedicationBean proc) {\r\n    return (((\"Success: \" + (proc.getNDCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}"},
 {"id":208, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":158, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction", "methodid":967, "methodname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults.\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param performerID\r\n * \t\tThe MID of the user updating the ND lists.\r\n */\r\npublic UpdateReasonCodeListAction(DAOFactory factory, long performerID) {\r\n    orcDAO = factory.getORCodesDAO();\r\n}"},
 {"id":209, "parametername":"OverrideReasonBean orc", "parametertype":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "parameterclass":265, "classid":158, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction", "methodid":968, "methodname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.addORCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a new ND Code (prescription) to the list\r\n *\r\n * @param orc\r\n * \t\tThe new ND Code to be added\r\n * @return Status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String addORCode(OverrideReasonBean orc) throws FormValidationException {\r\n    validator.validate(orc);\r\n    try {\r\n        if (orcDAO.addORCode(orc)) {\r\n            return (((\"Success: \" + (orc.getORCode())) + \" - \") + (orc.getDescription())) + \" added\";\r\n        } else\r\n            return \"The database has become corrupt. Please contact the system administrator for assistance.\";\r\n\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    } catch (iTrustException e) {\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":210, "parametername":"OverrideReasonBean orc", "parametertype":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "parameterclass":265, "classid":158, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction", "methodid":970, "methodname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.updateInformation(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates the ND Code with new information from the OverrideReasonBean\r\n *\r\n * @param orc\r\n * \t\tthe OverrideReasonBean that holds new information but the same code\r\n * @return status message\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic String updateInformation(OverrideReasonBean orc) throws FormValidationException {\r\n    validator.validate(orc);\r\n    try {\r\n        int rows = updateCode(orc);\r\n        if (0 == rows) {\r\n            return \"Error: Code not found.\";\r\n        } else {\r\n            return (\"Success: \" + rows) + \" row(s) updated\";\r\n        }\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n        return e.getMessage();\r\n    }\r\n}"},
 {"id":211, "parametername":"OverrideReasonBean orc", "parametertype":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "parameterclass":265, "classid":158, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction", "methodid":969, "methodname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListAction.updateCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "isreturn":0, "sourcecode":"/**\r\n * Override Reason information should already be validated\r\n *\r\n * @param orc\r\n * \t\t\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate int updateCode(OverrideReasonBean orc) throws DBException {\r\n    return orcDAO.updateCode(orc);\r\n}"},
 {"id":212, "parametername":"MedicationBean proc", "parametertype":"edu.ncsu.csc.itrust.beans.MedicationBean", "parameterclass":261, "classid":159, "classname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest", "methodid":973, "methodname":"edu.ncsu.csc.itrust.action.UpdateReasonCodeListActionTest.getAddCodeSuccessString(edu.ncsu.csc.itrust.beans.MedicationBean)", "isreturn":0, "sourcecode":"private String getAddCodeSuccessString(MedicationBean proc) {\r\n    return (((\"Success: \" + (proc.getNDCode())) + \" - \") + (proc.getDescription())) + \" added\";\r\n}"},
 {"id":213, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":160, "classname":"edu.ncsu.csc.itrust.action.ViewAdverseEventAction", "methodid":980, "methodname":"edu.ncsu.csc.itrust.action.ViewAdverseEventAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"public ViewAdverseEventAction(DAOFactory factory) {\r\n    this.adEventDAO = factory.getAdverseEventDAO();\r\n}"},
 {"id":214, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":162, "classname":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction", "methodid":989, "methodname":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction.-init-(long,edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"public ViewApptRequestsAction(long hcpid, DAOFactory factory) {\r\n    arDAO = factory.getApptRequestDAO();\r\n    aDAO = factory.getApptDAO();\r\n    pnDAO = factory.getPersonnelDAO();\r\n    this.hcpid = hcpid;\r\n    msgAction = new SendMessageAction(factory, hcpid);\r\n}"},
 {"id":215, "parametername":"ApptBean appt", "parametertype":"edu.ncsu.csc.itrust.beans.ApptBean", "parameterclass":245, "classid":162, "classname":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction", "methodid":991, "methodname":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction.constructMessage(edu.ncsu.csc.itrust.beans.ApptBean,boolean)", "isreturn":0, "sourcecode":"private MessageBean constructMessage(ApptBean appt, boolean accepted) throws DBException, FormValidationException, iTrustException, SQLException {\r\n    MessageBean msg = new MessageBean();\r\n    msg.setFrom(appt.getHcp());\r\n    msg.setTo(appt.getPatient());\r\n    msg.setSubject(\"Your appointment request\");\r\n    msg.setSentDate(new Timestamp(System.currentTimeMillis()));\r\n    String body = (((\"Your appointment request with \" + (pnDAO.getName(appt.getHcp()))) + \" on \") + (appt.getDate())) + \" has been \";\r\n    if (accepted)\r\n        body += \"accepted.\";\r\n    else\r\n        body += \"rejected.\";\r\n\r\n    msg.setBody(body);\r\n    return msg;\r\n}"},
 {"id":216, "parametername":"edu.ncsu.csc.itrust.beans.MessageBean", "parametertype":"edu.ncsu.csc.itrust.beans.MessageBean", "parameterclass":262, "classid":162, "classname":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction", "methodid":991, "methodname":"edu.ncsu.csc.itrust.action.ViewApptRequestsAction.constructMessage(edu.ncsu.csc.itrust.beans.ApptBean,boolean)", "isreturn":1, "sourcecode":"private MessageBean constructMessage(ApptBean appt, boolean accepted) throws DBException, FormValidationException, iTrustException, SQLException {\r\n    MessageBean msg = new MessageBean();\r\n    msg.setFrom(appt.getHcp());\r\n    msg.setTo(appt.getPatient());\r\n    msg.setSubject(\"Your appointment request\");\r\n    msg.setSentDate(new Timestamp(System.currentTimeMillis()));\r\n    String body = (((\"Your appointment request with \" + (pnDAO.getName(appt.getHcp()))) + \" on \") + (appt.getDate())) + \" has been \";\r\n    if (accepted)\r\n        body += \"accepted.\";\r\n    else\r\n        body += \"rejected.\";\r\n\r\n    msg.setBody(body);\r\n    return msg;\r\n}"},
 {"id":217, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":164, "classname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction", "methodid":1000, "methodname":"edu.ncsu.csc.itrust.action.ViewDiagnosisStatisticsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * Constructor for the action. Initializes DAO fields\r\n *\r\n * @param factory\r\n * \t\tThe sessions factory for DAOs\r\n */\r\npublic ViewDiagnosisStatisticsAction(DAOFactory factory) {\r\n    this.icdDAO = factory.getICDCodesDAO();\r\n    this.diagnosesDAO = factory.getDiagnosesDAO();\r\n}"},
 {"id":218, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":167, "classname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction", "methodid":1026, "methodname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing the expired prescriptions.\r\n */\r\npublic ViewExpiredPrescriptionsAction(DAOFactory factory, long loggedInMID) {\r\n    this.emailer = new EmailUtil(factory);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":219, "parametername":"PrescriptionBean prescription", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":167, "classname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction", "methodid":1028, "methodname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":0, "sourcecode":"/**\r\n * Returns the prescribing HCP for a prescription\r\n *\r\n * @param prescription\r\n * \t\titem in question\r\n * @return HCP who prescribed the prescription\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {\r\n    return personnelDAO.getPrescribingDoctor(prescription);\r\n}"},
 {"id":220, "parametername":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parametertype":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parameterclass":270, "classid":167, "classname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction", "methodid":1028, "methodname":"edu.ncsu.csc.itrust.action.ViewExpiredPrescriptionsAction.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":1, "sourcecode":"/**\r\n * Returns the prescribing HCP for a prescription\r\n *\r\n * @param prescription\r\n * \t\titem in question\r\n * @return HCP who prescribed the prescription\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {\r\n    return personnelDAO.getPrescribingDoctor(prescription);\r\n}"},
 {"id":221, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":170, "classname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction", "methodid":1036, "methodname":"edu.ncsu.csc.itrust.action.ViewMyAccessLogAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person retrieving the logs.\r\n */\r\npublic ViewMyAccessLogAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.transDAO = factory.getTransactionDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n}"},
 {"id":222, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":172, "classname":"edu.ncsu.csc.itrust.action.ViewMyApptsAction", "methodid":1051, "methodname":"edu.ncsu.csc.itrust.action.ViewMyApptsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public ViewMyApptsAction(DAOFactory factory, long loggedInMID) {\r\n    super(factory, loggedInMID);\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":223, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":174, "classname":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction", "methodid":1060, "methodname":"edu.ncsu.csc.itrust.action.ViewMyLabProceduresAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public ViewMyLabProceduresAction(DAOFactory factory, long loggedInMID) {\r\n    labProcedureDAO = factory.getLabProcedureDAO();\r\n    patient = loggedInMID;\r\n}"},
 {"id":224, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "methodid":1067, "methodname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is viewing their messages.\r\n */\r\npublic ViewMyMessagesAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.messageDAO = factory.getMessageDAO();\r\n    this.referralDAO = factory.getReferralDAO();\r\n}"},
 {"id":225, "parametername":"MessageBean mBean", "parametertype":"edu.ncsu.csc.itrust.beans.MessageBean", "parameterclass":262, "classid":176, "classname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction", "methodid":1082, "methodname":"edu.ncsu.csc.itrust.action.ViewMyMessagesAction.setRead(edu.ncsu.csc.itrust.beans.MessageBean)", "isreturn":0, "sourcecode":"/**\r\n * Set the state of the MessageBean to read, after\r\n * it is read by a user.\r\n *\r\n * @param mBean\r\n * \t\tMessageBean to be read\r\n */\r\npublic void setRead(MessageBean mBean) {\r\n    try {\r\n        messageDAO.updateRead(mBean);\r\n    } catch (DBException e) {\r\n        e.printStackTrace();\r\n    }\r\n}"},
 {"id":226, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "methodid":1100, "methodname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing the records.\r\n */\r\npublic ViewMyRecordsAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.allergyDAO = factory.getAllergyDAO();\r\n    this.familyDAO = factory.getFamilyDAO();\r\n    this.hrDAO = factory.getHealthRecordsDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.surveyDAO = factory.getSurveyDAO();\r\n    this.labDAO = factory.getLabProcedureDAO();\r\n    this.emailDAO = factory.getFakeEmailDAO();\r\n    this.reportRequestDAO = factory.getReportRequestDAO();\r\n    this.icdDAO = factory.getICDCodesDAO();\r\n    this.procDAO = factory.getProceduresDAO();\r\n    this.loincDAO = factory.getLOINCDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":227, "parametername":"FamilyMemberBean member", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "methodid":1104, "methodname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveHighBP(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if family members have high blood pressure\r\n *\r\n * @param member\r\n * \t\tthe family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveHighBP(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (((record.getBloodPressureSystolic()) > 240) || ((record.getBloodPressureDiastolic()) > 120))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":228, "parametername":"FamilyMemberBean member", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "methodid":1105, "methodname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveHighCholesterol(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if family members have high cholesterol\r\n *\r\n * @param member\r\n * \t\tthe family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveHighCholesterol(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (((record.getCholesterolHDL()) < 35) || ((record.getCholesterolLDL()) > 250))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":229, "parametername":"FamilyMemberBean member", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "methodid":1102, "methodname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveDiabetes(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if family members have diabetes\r\n *\r\n * @param member\r\n * \t\tthe family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveDiabetes(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"250\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":230, "parametername":"FamilyMemberBean member", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "methodid":1101, "methodname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveCancer(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if family members have cancer\r\n *\r\n * @param member\r\n * \t\tthe family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveCancer(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"199\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":231, "parametername":"FamilyMemberBean member", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "methodid":1103, "methodname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.doesFamilyMemberHaveHeartDisease(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if family members have heart disease\r\n *\r\n * @param member\r\n * \t\tthe family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean doesFamilyMemberHaveHeartDisease(FamilyMemberBean member) throws iTrustException {\r\n    List<DiagnosisBean> diagnoses = patientDAO.getDiagnoses(member.getMid());\r\n    if ((diagnoses.size()) == 0)\r\n        return false;\r\n\r\n    for (DiagnosisBean diag : diagnoses) {\r\n        if (diag.getICDCode().startsWith(\"402\"))\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":232, "parametername":"FamilyMemberBean member", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "methodid":1125, "methodname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.isFamilyMemberSmoker(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if family members smoke\r\n *\r\n * @param member\r\n * \t\tthe family member in question\r\n * @return true if the family member has the risk factor, otherwise false.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean isFamilyMemberSmoker(FamilyMemberBean member) throws iTrustException {\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(member.getMid());\r\n    if ((records.size()) == 0)\r\n        return false;\r\n\r\n    for (HealthRecord record : records) {\r\n        if (record.isSmoker())\r\n            return true;\r\n\r\n    }\r\n    return false;\r\n}"},
 {"id":233, "parametername":"FamilyMemberBean member", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":178, "classname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction", "methodid":1114, "methodname":"edu.ncsu.csc.itrust.action.ViewMyRecordsAction.getFamilyMemberCOD(edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if family member is dead, and if so, what their cause of death was\r\n *\r\n * @param member\r\n * \t\tthe family member in question\r\n * @return the cause of death for the family member\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getFamilyMemberCOD(FamilyMemberBean member) throws iTrustException {\r\n    PatientBean patient = patientDAO.getPatient(member.getMid());\r\n    if ((patient.getCauseOfDeath()) == null)\r\n        return \"\";\r\n\r\n    DiagnosisBean diag = icdDAO.getICDCode(patient.getCauseOfDeath());\r\n    if (diag == null)\r\n        return \"\";\r\n\r\n    return diag.getDescription();\r\n}"},
 {"id":234, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":180, "classname":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction", "methodid":1156, "methodname":"edu.ncsu.csc.itrust.action.ViewMyRemoteMonitoringListAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Constructor\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the HCP retrieving the patient data.\r\n */\r\npublic ViewMyRemoteMonitoringListAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.rmDAO = factory.getRemoteMonitoringDAO();\r\n    this.authDAO = factory.getAuthDAO();\r\n}"},
 {"id":235, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":182, "classname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction", "methodid":1170, "methodname":"edu.ncsu.csc.itrust.action.ViewMyReportRequestsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"// private DAOFactory factory;\r\n/**\r\n * Set up\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing their report requests.\r\n */\r\npublic ViewMyReportRequestsAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.reportRequestDAO = factory.getReportRequestDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    // this.factory = factory;\r\n}"},
 {"id":236, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":185, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction", "methodid":1189, "methodname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Super class handles validating the loggedInMid and ovIDString\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing their office visits.\r\n * @param ovIDString\r\n * \t\tThe unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String ovIDString) throws iTrustException {\r\n    super(factory, String.valueOf(loggedInMID), ovIDString);\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    prescriptionsDAO = factory.getPrescriptionsDAO();\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    labProceduresDAO = factory.getLabProcedureDAO();\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n}"},
 {"id":237, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":185, "classname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction", "methodid":1190, "methodname":"edu.ncsu.csc.itrust.action.ViewOfficeVisitAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Super class handles validating the pidString and ovIDString. Usually used for representing a patient.\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param repPIDString\r\n * \t\tThe MID of the representative viewing the records.\r\n * @param ovIDString\r\n * \t\tThe unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic ViewOfficeVisitAction(DAOFactory factory, long loggedInMID, String repPIDString, String ovIDString) throws iTrustException {\r\n    super(factory, repPIDString, ovIDString);\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    prescriptionsDAO = factory.getPrescriptionsDAO();\r\n    proceduresDAO = factory.getProceduresDAO();\r\n    labProceduresDAO = factory.getLabProcedureDAO();\r\n    diagnosesDAO = factory.getDiagnosesDAO();\r\n    checkRepresented(loggedInMID, repPIDString);\r\n}"},
 {"id":238, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":187, "classname":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction", "methodid":1207, "methodname":"edu.ncsu.csc.itrust.action.ViewPatientInstructionsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Construct a ViewPatientInstructionsAction for a given patient.\r\n *\r\n * @param factory\r\n * \t\tThe DAO Factory.\r\n * @param pidString\r\n * \t\tThe patient ID as a string.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic ViewPatientInstructionsAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.instructionsDAO = new PatientInstructionsDAO(factory);\r\n    this.personnelDAO = new PersonnelDAO(factory);\r\n    this.ovDAO = new OfficeVisitDAO(factory);\r\n}"},
 {"id":239, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":189, "classname":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction", "methodid":1216, "methodname":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing the office visits.\r\n */\r\npublic ViewPatientOfficeVisitHistoryAction(DAOFactory factory, long loggedInMID) {\r\n    this.loggedInMID = loggedInMID;\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    officevisitDAO = factory.getOfficeVisitDAO();\r\n    this.patientDAO = factory.getPatientDAO();\r\n    visits = new ArrayList<PatientVisitBean>();\r\n}"},
 {"id":240, "parametername":"PatientBean pb", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":189, "classname":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction", "methodid":1217, "methodname":"edu.ncsu.csc.itrust.action.ViewPatientOfficeVisitHistoryAction.PatientInList(edu.ncsu.csc.itrust.beans.PatientBean,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if a patient is in the list of  visits\r\n *\r\n * @param pb\r\n * \t\tpatient to check\r\n * @param date\r\n * \t\tdate of the visit\r\n * @return True if the patient is in the list of visits.\r\n */\r\nprivate boolean PatientInList(PatientBean pb, String date) {\r\n    Iterator<PatientVisitBean> it = visits.iterator();\r\n    PatientVisitBean visitBean;\r\n    while (it.hasNext()) {\r\n        visitBean = it.next();\r\n        if (visitBean.getPatientName().equals(pb.getFullName())) {\r\n            if ((visitBean.getLastOVDateY().compareTo(date)) < 0) {\r\n                visitBean.setLastOVDate(date);\r\n            }\r\n            return true;\r\n        }\r\n    } \r\n    return false;\r\n}"},
 {"id":241, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":191, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction", "methodid":1225, "methodname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public ViewPatientReferralsAction(DAOFactory factory, long patientID) throws iTrustException {\r\n    this.referralDAO = factory.getReferralDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.patientID = patientID;\r\n}"},
 {"id":242, "parametername":"SortDirection dir", "parametertype":"edu.ncsu.csc.itrust.enums.SortDirection", "parameterclass":487, "classid":191, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction", "methodid":1228, "methodname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.getReferrals(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)", "isreturn":0, "sourcecode":"/**\r\n * Get all referrals for a patient sorted by the given field and in the given direction.\r\n *\r\n * @param field\r\n * \t\tThe name of the pseudo-field to sort by.\r\n * @param dir\r\n * \t\tThe direction of the sort.\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<VerboseReferralBean> getReferrals(String field, SortDirection dir) throws DBException {\r\n    return referralDAO.getPatientQuery(patientID).query(field, dir);\r\n}"},
 {"id":243, "parametername":"ReferralBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":191, "classname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction", "methodid":1231, "methodname":"edu.ncsu.csc.itrust.action.ViewPatientReferralsAction.updateReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"/**\r\n * This method updates the referral in the DAO\r\n *\r\n * @param bean\r\n * \t\t\r\n * @return a boolean expression used for testability\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean updateReferral(ReferralBean bean) throws DBException {\r\n    referralDAO.editReferral(bean);\r\n    return true;\r\n}"},
 {"id":244, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":193, "classname":"edu.ncsu.csc.itrust.action.ViewPersonnelAction", "methodid":1239, "methodname":"edu.ncsu.csc.itrust.action.ViewPersonnelAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person retrieving personnel beans.\r\n */\r\npublic ViewPersonnelAction(DAOFactory factory, long loggedInMID) {\r\n    this.emailDAO = factory.getFakeEmailDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":245, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":195, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction", "methodid":1247, "methodname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing prescription records.\r\n */\r\npublic ViewPrescriptionRecordsAction(DAOFactory factory, long loggedInMID) {\r\n    this.emailer = new EmailUtil(factory);\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.personnelDAO = factory.getPersonnelDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":246, "parametername":"PrescriptionBean prescription", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":195, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction", "methodid":1249, "methodname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":0, "sourcecode":"/**\r\n * Returns the prescribing HCP for a prescription\r\n *\r\n * @param prescription\r\n * \t\titem in question\r\n * @return HCP who prescribed the prescription\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {\r\n    return personnelDAO.getPrescribingDoctor(prescription);\r\n}"},
 {"id":247, "parametername":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parametertype":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parameterclass":270, "classid":195, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction", "methodid":1249, "methodname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRecordsAction.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":1, "sourcecode":"/**\r\n * Returns the prescribing HCP for a prescription\r\n *\r\n * @param prescription\r\n * \t\titem in question\r\n * @return HCP who prescribed the prescription\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws iTrustException {\r\n    return personnelDAO.getPrescribingDoctor(prescription);\r\n}"},
 {"id":248, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":197, "classname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsAction", "methodid":1258, "methodname":"edu.ncsu.csc.itrust.action.ViewPrescriptionRenewalNeedsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing the prescription renewals.\r\n */\r\npublic ViewPrescriptionRenewalNeedsAction(DAOFactory factory, long loggedInMID) {\r\n    this.patientDAO = factory.getPatientDAO();\r\n    this.loggedInMID = loggedInMID;\r\n}"},
 {"id":249, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":199, "classname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction", "methodid":1266, "methodname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public ViewReceivingReferralsAction(DAOFactory factory, long patientID) throws iTrustException {\r\n    this.referralDAO = factory.getReferralDAO();\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.hcpID = patientID;\r\n}"},
 {"id":250, "parametername":"ReferralBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":199, "classname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction", "methodid":1271, "methodname":"edu.ncsu.csc.itrust.action.ViewReceivingReferralsAction.updateReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"public boolean updateReferral(ReferralBean bean) throws DBException {\r\n    referralDAO.editReferral(bean);\r\n    return true;\r\n}"},
 {"id":251, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":201, "classname":"edu.ncsu.csc.itrust.action.ViewReportAction", "methodid":1279, "methodname":"edu.ncsu.csc.itrust.action.ViewReportAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing the report.\r\n */\r\npublic ViewReportAction(DAOFactory factory, long loggedInMID) {\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}"},
 {"id":252, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":203, "classname":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction", "methodid":1294, "methodname":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public ViewSentReferralsAction(DAOFactory factory, long hcpid) throws iTrustException {\r\n    this.hcpid = hcpid;\r\n    referralDAO = factory.getReferralDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    personnelDAO = factory.getPersonnelDAO();\r\n}"},
 {"id":253, "parametername":"SortDirection dir", "parametertype":"edu.ncsu.csc.itrust.enums.SortDirection", "parameterclass":487, "classid":203, "classname":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction", "methodid":1298, "methodname":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getReferrals(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)", "isreturn":0, "sourcecode":"/**\r\n * Get all sent referrals sorted by the time they were created.\r\n *\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\n/* public List<VerboseReferralBean> getReferrals() throws DBException {\nreturn referralDAO.getSenderQuery(hcpid).query(\"timestamp\", SortDirection.DESCENDING);\n}\n */\r\n/**\r\n * Get all sent referrals sorted by the given field and in the given\r\n * direction.\r\n *\r\n * @param field\r\n * \t\tThe name of the pseudo-field to sort by.\r\n * @param dir\r\n * \t\tThe direction of the sort.\r\n * @return \r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<VerboseReferralBean> getReferrals(String field, SortDirection dir) throws DBException {\r\n    return referralDAO.getSenderQuery(hcpid).query(field, dir);\r\n}"},
 {"id":254, "parametername":"ReferralBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":203, "classname":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction", "methodid":1295, "methodname":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getPatientName(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"/**\r\n * Edit an existing referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\n/* public void editReferral(ReferralBean bean) throws iTrustException {\nreferralDAO.editReferral(bean);\n}\n */\r\n/**\r\n * Delete an existing referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\n/* public void deleteReferral(ReferralBean bean) throws iTrustException {\nreferralDAO.removeReferral(bean.getId());\n}\n */\r\n/**\r\n * Get the patient name associated with the given referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @return The patients name as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getPatientName(ReferralBean bean) throws iTrustException {\r\n    return patientDAO.getName(bean.getPatientID());\r\n}"},
 {"id":255, "parametername":"ReferralBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":203, "classname":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction", "methodid":1296, "methodname":"edu.ncsu.csc.itrust.action.ViewSentReferralsAction.getReceivingHCPName(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"/**\r\n * Get the name of the receiving HCP associated with the given referral.\r\n *\r\n * @param bean\r\n * \t\t\r\n * @return The HCPs name as a String.\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic String getReceivingHCPName(ReferralBean bean) throws iTrustException {\r\n    return personnelDAO.getName(bean.getReceiverID());\r\n}"},
 {"id":256, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":205, "classname":"edu.ncsu.csc.itrust.action.ViewSurveyResultAction", "methodid":1304, "methodname":"edu.ncsu.csc.itrust.action.ViewSurveyResultAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults.\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person retrieving survey results.\r\n */\r\npublic ViewSurveyResultAction(DAOFactory factory, long loggedInMID) {\r\n    surveyResultDAO = factory.getSurveyResultDAO();\r\n    this.loggedInMID = loggedInMID;\r\n    validator = new SurveySearchValidator();\r\n}"},
 {"id":257, "parametername":"SurveyResultBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "parameterclass":279, "classid":205, "classname":"edu.ncsu.csc.itrust.action.ViewSurveyResultAction", "methodid":1305, "methodname":"edu.ncsu.csc.itrust.action.ViewSurveyResultAction.getSurveyResultsForHospital(edu.ncsu.csc.itrust.beans.SurveyResultBean)", "isreturn":0, "sourcecode":"/**\r\n * Retrieves survey results for a whole hospital.\r\n *\r\n * @param bean\r\n * \t\tThe SurveyResultBean containing the survey result specs.\r\n * @return A java.util.List of Survey Results.\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic List<SurveyResultBean> getSurveyResultsForHospital(SurveyResultBean bean) throws FormValidationException, iTrustException {\r\n    return surveyResultDAO.getSurveyResultsForHospital(bean.getHCPhospital(), bean.getHCPspecialty());\r\n}"},
 {"id":258, "parametername":"SurveyResultBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "parameterclass":279, "classid":205, "classname":"edu.ncsu.csc.itrust.action.ViewSurveyResultAction", "methodid":1306, "methodname":"edu.ncsu.csc.itrust.action.ViewSurveyResultAction.getSurveyResultsForZip(edu.ncsu.csc.itrust.beans.SurveyResultBean)", "isreturn":0, "sourcecode":"/**\r\n * Retrieves survey results for a given zip code.\r\n *\r\n * @param bean\r\n * \t\tThe SurveyResultBean containing the survey result specs.\r\n * @return A java.util.List of Survey Results.\r\n * @throws iTrustException\r\n * \t\t\r\n * @throws FormValidationException\r\n * \t\t\r\n */\r\npublic List<SurveyResultBean> getSurveyResultsForZip(SurveyResultBean bean) throws FormValidationException, iTrustException {\r\n    validator.validate(bean);\r\n    return surveyResultDAO.getSurveyResultsForZip(bean.getHCPzip(), bean.getHCPspecialty());\r\n}"},
 {"id":259, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":207, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction", "methodid":1312, "methodname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Set up defaults\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory used to create the DAOs used in this action.\r\n * @param loggedInMID\r\n * \t\tThe MID of the person viewing the visited HCPs.\r\n */\r\npublic ViewVisitedHCPsAction(DAOFactory factory, long loggedInMID) {\r\n    patientMID = loggedInMID;\r\n    docDAO = factory.getPersonnelDAO();\r\n    visitDAO = factory.getOfficeVisitDAO();\r\n    patientDAO = factory.getPatientDAO();\r\n    // visits = new ArrayList<HCPVisitBean>();\r\n    declareAction = new DeclareHCPAction(factory, loggedInMID);\r\n}"},
 {"id":260, "parametername":"PersonnelBean pb", "parametertype":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parameterclass":270, "classid":207, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction", "methodid":1319, "methodname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.makeHCPVisitBean(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Create an HCPVisitBean from a given PersonnelBean and office visit date.\r\n *\r\n * @param pb\r\n * \t\tThe PersonnelBean that will be visited.\r\n * @param visitDate\r\n * \t\tThe date of the visit.  This may be the empty string.\r\n * @return The new HCPVisitBean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate HCPVisitBean makeHCPVisitBean(PersonnelBean pb, String visitDate) throws DBException {\r\n    long hcpid = pb.getMID();\r\n    HCPVisitBean visitBean = new HCPVisitBean();\r\n    visitBean.setHCPMID(hcpid);\r\n    visitBean.setHCPName(pb.getFullName());\r\n    visitBean.setOVDate(visitDate);\r\n    visitBean.setHCPSpecialty(pb.getSpecialty());\r\n    visitBean.setHCPAddr((((((((((pb.getStreetAddress1()) + \" \") + (pb.getStreetAddress2())) + \" \") + (pb.getCity())) + \", \") + (pb.getState())) + \" \") + (pb.getZip())));\r\n    visitBean.setDesignated(patientDAO.checkDeclaredHCP(patientMID, hcpid));\r\n    return visitBean;\r\n}"},
 {"id":261, "parametername":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "parametertype":"edu.ncsu.csc.itrust.beans.HCPVisitBean", "parameterclass":256, "classid":207, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction", "methodid":1319, "methodname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.makeHCPVisitBean(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String)", "isreturn":1, "sourcecode":"/**\r\n * Create an HCPVisitBean from a given PersonnelBean and office visit date.\r\n *\r\n * @param pb\r\n * \t\tThe PersonnelBean that will be visited.\r\n * @param visitDate\r\n * \t\tThe date of the visit.  This may be the empty string.\r\n * @return The new HCPVisitBean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprivate HCPVisitBean makeHCPVisitBean(PersonnelBean pb, String visitDate) throws DBException {\r\n    long hcpid = pb.getMID();\r\n    HCPVisitBean visitBean = new HCPVisitBean();\r\n    visitBean.setHCPMID(hcpid);\r\n    visitBean.setHCPName(pb.getFullName());\r\n    visitBean.setOVDate(visitDate);\r\n    visitBean.setHCPSpecialty(pb.getSpecialty());\r\n    visitBean.setHCPAddr((((((((((pb.getStreetAddress1()) + \" \") + (pb.getStreetAddress2())) + \" \") + (pb.getCity())) + \", \") + (pb.getState())) + \" \") + (pb.getZip())));\r\n    visitBean.setDesignated(patientDAO.checkDeclaredHCP(patientMID, hcpid));\r\n    return visitBean;\r\n}"},
 {"id":262, "parametername":"PersonnelBean pb", "parametertype":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parameterclass":270, "classid":207, "classname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction", "methodid":1320, "methodname":"edu.ncsu.csc.itrust.action.ViewVisitedHCPsAction.matchPersonnel(edu.ncsu.csc.itrust.beans.PersonnelBean,java.lang.String,java.lang.String,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Checks to see if a PersonnelBean matches against a given set of\r\n * criteria.\r\n *\r\n * @param pb\r\n * \t\tThe PersonnelBean to check.\r\n * @param lastName\r\n * \t\tThe last name to check against.  May be null or the empty string to ignore.\r\n * @param specialty\r\n * \t\tThe specialty to check against.  May be null or the empty string to ignore.\r\n * @param zip\r\n * \t\tThe zip code to check against.  May be null or the empty string to ignore.\r\n * @return true if the PersonnelBean matches all the given parameters, or false otherwise.\r\n */\r\nprivate boolean matchPersonnel(PersonnelBean pb, String lastName, String specialty, String zip) {\r\n    if (((lastName != null) && (!(lastName.equals(\"\")))) && (!(pb.getLastName().startsWith(lastName)))) {\r\n        return false;\r\n    }\r\n    if (((specialty != null) && (!(specialty.equals(\"\")))) && (!(specialty.equals(pb.getSpecialty())))) {\r\n        return false;\r\n    }\r\n    if (((zip != null) && (!(zip.equals(\"\")))) && (!(zip.equals(pb.getZip())))) {\r\n        return false;\r\n    }\r\n    return true;\r\n}"},
 {"id":263, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":209, "classname":"edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction", "methodid":1336, "methodname":"edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param pidString\r\n * \t\t\r\n * @param ovIDString\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditOfficeVisitBaseAction(DAOFactory factory, long hcpid, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, pidString, ovIDString);\r\n    this.hcpid = hcpid;\r\n}"},
 {"id":264, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":209, "classname":"edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction", "methodid":1337, "methodname":"edu.ncsu.csc.itrust.action.base.EditOfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * An office visit that is initially unsaved.\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param hcpid\r\n * \t\t\r\n * @param pidString\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic EditOfficeVisitBaseAction(DAOFactory factory, long hcpid, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.hcpid = hcpid;\r\n}"},
 {"id":265, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":210, "classname":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction", "methodid":1339, "methodname":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * The default constructor.\r\n *\r\n * @param factory\r\n * \t\tA database access object factory for supplying a runtime context.\r\n * @param pidString\r\n * \t\tThe patients MID as a String, to be passed to the super constructor (for PatientBaseAction)\r\n * @param ovIDString\r\n * \t\tThe unique identifier of the office visit as a String.\r\n * @throws iTrustException\r\n * \t\tIf any of the supplied parameters is incorrect or there is a DB problem.\r\n */\r\npublic OfficeVisitBaseAction(DAOFactory factory, String pidString, String ovIDString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.ovID = checkOfficeVisitID(ovIDString);\r\n}"},
 {"id":266, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":210, "classname":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction", "methodid":1340, "methodname":"edu.ncsu.csc.itrust.action.base.OfficeVisitBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Constructs an action that is initially unsaved.  Like the three-argument\r\n * constructor except that the office visit id is a sentinel value and does\r\n * not represent a valid office visit.\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param pidString\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic OfficeVisitBaseAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    super(factory, pidString);\r\n    this.ovDAO = factory.getOfficeVisitDAO();\r\n    this.ovID = OfficeVisitBaseAction.UNSAVED_VISIT_ID;\r\n}"},
 {"id":267, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":211, "classname":"edu.ncsu.csc.itrust.action.base.PatientBaseAction", "methodid":1346, "methodname":"edu.ncsu.csc.itrust.action.base.PatientBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * The default constructor.\r\n *\r\n * @param factory\r\n * \t\tA factory to create a database access object.\r\n * @param pidString\r\n * \t\tThe patients ID to associate with this action.\r\n * @throws iTrustException\r\n * \t\tIf the patients ID is incorrect or there is a DB problem.\r\n */\r\npublic PatientBaseAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    this.factory = factory;\r\n    this.pid = checkPatientID(pidString);\r\n}"},
 {"id":268, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":212, "classname":"edu.ncsu.csc.itrust.action.base.PersonnelBaseAction", "methodid":1350, "methodname":"edu.ncsu.csc.itrust.action.base.PersonnelBaseAction.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * The default constructor.\r\n *\r\n * @param factory\r\n * \t\tA factory to create a database access object.\r\n * @param pidString\r\n * \t\tThe personnels ID to associate with this action.\r\n * @throws iTrustException\r\n * \t\tIf the personnels ID is incorrect or there is a DB problem.\r\n */\r\npublic PersonnelBaseAction(DAOFactory factory, String pidString) throws iTrustException {\r\n    this.factory = factory;\r\n    this.pid = checkPersonnelID(pidString);\r\n}"},
 {"id":269, "parametername":"ApptBean appt", "parametertype":"edu.ncsu.csc.itrust.beans.ApptBean", "parameterclass":245, "classid":246, "classname":"edu.ncsu.csc.itrust.beans.ApptRequestBean", "methodid":1531, "methodname":"edu.ncsu.csc.itrust.beans.ApptRequestBean.setRequestedAppt(edu.ncsu.csc.itrust.beans.ApptBean)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param appt\r\n * \t\t\r\n */\r\npublic void setRequestedAppt(ApptBean appt) {\r\n    requestedAppt = appt;\r\n}"},
 {"id":270, "parametername":"Email other", "parametertype":"edu.ncsu.csc.itrust.beans.Email", "parameterclass":251, "classid":251, "classname":"edu.ncsu.csc.itrust.beans.Email", "methodid":1574, "methodname":"edu.ncsu.csc.itrust.beans.Email.equals(edu.ncsu.csc.itrust.beans.Email)", "isreturn":0, "sourcecode":"private boolean equals(Email other) {\r\n    return (((from.equals(other.from)) && (subject.equals(other.subject))) && (body.equals(other.body))) && (listEquals(toList, other.toList));\r\n}"},
 {"id":271, "parametername":"HospitalBean other", "parametertype":"edu.ncsu.csc.itrust.beans.HospitalBean", "parameterclass":258, "classid":258, "classname":"edu.ncsu.csc.itrust.beans.HospitalBean", "methodid":1680, "methodname":"edu.ncsu.csc.itrust.beans.HospitalBean.equals(edu.ncsu.csc.itrust.beans.HospitalBean)", "isreturn":0, "sourcecode":"private boolean equals(HospitalBean other) {\r\n    return (hospitalID.equals(other.hospitalID)) && (hospitalName.equals(other.hospitalName));\r\n}"},
 {"id":272, "parametername":"MedicationBean other", "parametertype":"edu.ncsu.csc.itrust.beans.MedicationBean", "parameterclass":261, "classid":261, "classname":"edu.ncsu.csc.itrust.beans.MedicationBean", "methodid":1756, "methodname":"edu.ncsu.csc.itrust.beans.MedicationBean.equals(edu.ncsu.csc.itrust.beans.MedicationBean)", "isreturn":0, "sourcecode":"private boolean equals(MedicationBean other) {\r\n    return (description.equals(other.description)) && (NDCode.equals(other.NDCode));\r\n}"},
 {"id":273, "parametername":"BloodType bloodType", "parametertype":"edu.ncsu.csc.itrust.enums.BloodType", "parameterclass":479, "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "methodid":1879, "methodname":"edu.ncsu.csc.itrust.beans.PatientBean.setBloodType(edu.ncsu.csc.itrust.enums.BloodType)", "isreturn":0, "sourcecode":"public void setBloodType(BloodType bloodType) {\r\n    this.bloodType = bloodType;\r\n}"},
 {"id":274, "parametername":"Ethnicity ethnicity", "parametertype":"edu.ncsu.csc.itrust.enums.Ethnicity", "parameterclass":481, "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "methodid":1893, "methodname":"edu.ncsu.csc.itrust.beans.PatientBean.setEthnicity(edu.ncsu.csc.itrust.enums.Ethnicity)", "isreturn":0, "sourcecode":"public void setEthnicity(Ethnicity ethnicity) {\r\n    this.ethnicity = ethnicity;\r\n}"},
 {"id":275, "parametername":"Gender gender", "parametertype":"edu.ncsu.csc.itrust.enums.Gender", "parameterclass":483, "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "methodid":1897, "methodname":"edu.ncsu.csc.itrust.beans.PatientBean.setGender(edu.ncsu.csc.itrust.enums.Gender)", "isreturn":0, "sourcecode":"public void setGender(Gender gender) {\r\n    this.gender = gender;\r\n}"},
 {"id":276, "parametername":"PatientBean o", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":266, "classname":"edu.ncsu.csc.itrust.beans.PatientBean", "methodid":1828, "methodname":"edu.ncsu.csc.itrust.beans.PatientBean.compareTo(edu.ncsu.csc.itrust.beans.PatientBean)", "isreturn":0, "sourcecode":"public int compareTo(PatientBean o) {\r\n    return ((int) ((o.MID) - (this.MID)));\r\n}"},
 {"id":277, "parametername":"PatientBean patient", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":269, "classname":"edu.ncsu.csc.itrust.beans.PatientVisitBean", "methodid":1956, "methodname":"edu.ncsu.csc.itrust.beans.PatientVisitBean.setPatient(edu.ncsu.csc.itrust.beans.PatientBean)", "isreturn":0, "sourcecode":"public void setPatient(PatientBean patient) {\r\n    this.patient = patient;\r\n}"},
 {"id":278, "parametername":"Role role", "parametertype":"edu.ncsu.csc.itrust.enums.Role", "parameterclass":486, "classid":270, "classname":"edu.ncsu.csc.itrust.beans.PersonnelBean", "methodid":1989, "methodname":"edu.ncsu.csc.itrust.beans.PersonnelBean.setRole(edu.ncsu.csc.itrust.enums.Role)", "isreturn":0, "sourcecode":"public void setRole(Role role) {\r\n}"},
 {"id":279, "parametername":"PrescriptionBean other", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "methodid":2000, "methodname":"edu.ncsu.csc.itrust.beans.PrescriptionBean.equals(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param other\r\n * \t\t\r\n * @return \r\n */\r\nprivate boolean equals(PrescriptionBean other) {\r\n    return (((((((medication) == (other.medication)) || (((medication) != null) && (medication.equals(other.medication)))) && ((visitID) == (other.visitID))) && (startDateStr.equals(other.startDateStr))) && (endDateStr.equals(other.endDateStr))) && ((dosage) == (other.dosage))) && (instructions.equals(other.instructions));\r\n}"},
 {"id":280, "parametername":"OverrideReasonBean reason", "parametertype":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "parameterclass":265, "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "methodid":1999, "methodname":"edu.ncsu.csc.itrust.beans.PrescriptionBean.addReason(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "isreturn":0, "sourcecode":"public void addReason(OverrideReasonBean reason) {\r\n    if ((reasons) == null) {\r\n        reasons = new ArrayList<OverrideReasonBean>();\r\n    }\r\n    reasons.add(reason);\r\n}"},
 {"id":281, "parametername":"MedicationBean medication", "parametertype":"edu.ncsu.csc.itrust.beans.MedicationBean", "parameterclass":261, "classid":271, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "methodid":2019, "methodname":"edu.ncsu.csc.itrust.beans.PrescriptionBean.setMedication(edu.ncsu.csc.itrust.beans.MedicationBean)", "isreturn":0, "sourcecode":"public void setMedication(MedicationBean medication) {\r\n    this.medication = medication;\r\n}"},
 {"id":282, "parametername":"PrescriptionBean prescription", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":272, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean", "methodid":2028, "methodname":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean.setPrescription(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":0, "sourcecode":"public void setPrescription(PrescriptionBean prescription) {\r\n    this.prescription = prescription;\r\n}"},
 {"id":283, "parametername":"OfficeVisitBean officeVisit", "parametertype":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "parameterclass":263, "classid":272, "classname":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean", "methodid":2027, "methodname":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean.setOfficeVisit(edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "isreturn":0, "sourcecode":"public void setOfficeVisit(OfficeVisitBean officeVisit) {\r\n    this.officeVisit = officeVisit;\r\n}"},
 {"id":284, "parametername":"ReferralBean other", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":274, "classname":"edu.ncsu.csc.itrust.beans.ReferralBean", "methodid":2051, "methodname":"edu.ncsu.csc.itrust.beans.ReferralBean.equals(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"private boolean equals(ReferralBean other) {\r\n    return ((((((((id) == (other.id)) && ((senderID) == (other.senderID))) && ((receiverID) == (other.receiverID))) && ((ovid) == (other.ovid))) && ((viewedByPatient) == (other.viewedByPatient))) && ((viewedByHCP) == (other.viewedByHCP))) && (timeStamp.equals(other.timeStamp))) && (referralDetails.equals(other.referralDetails));\r\n}"},
 {"id":285, "parametername":"TransactionType tranactionType", "parametertype":"edu.ncsu.csc.itrust.enums.TransactionType", "parameterclass":490, "classid":281, "classname":"edu.ncsu.csc.itrust.beans.TransactionBean", "methodid":2193, "methodname":"edu.ncsu.csc.itrust.beans.TransactionBean.setTransactionType(edu.ncsu.csc.itrust.enums.TransactionType)", "isreturn":0, "sourcecode":"public void setTransactionType(TransactionType tranactionType) {\r\n    this.transactionType = tranactionType;\r\n}"},
 {"id":286, "parametername":"VerboseReferralBean other", "parametertype":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "parameterclass":282, "classid":282, "classname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "methodid":2195, "methodname":"edu.ncsu.csc.itrust.beans.VerboseReferralBean.equals(edu.ncsu.csc.itrust.beans.VerboseReferralBean)", "isreturn":0, "sourcecode":"private boolean equals(VerboseReferralBean other) {\r\n    return ((((((((id) == (other.id)) && ((senderID) == (other.senderID))) && ((receiverID) == (other.receiverID))) && ((ovid) == (other.ovid))) && ((viewedByPatient) == (other.viewedByPatient))) && ((viewedByHCP) == (other.viewedByHCP))) && (timeStamp.equals(other.timeStamp))) && (referralDetails.equals(other.referralDetails));\r\n}"},
 {"id":287, "parametername":"WardBean other", "parametertype":"edu.ncsu.csc.itrust.beans.WardBean", "parameterclass":284, "classid":284, "classname":"edu.ncsu.csc.itrust.beans.WardBean", "methodid":2234, "methodname":"edu.ncsu.csc.itrust.beans.WardBean.equals(edu.ncsu.csc.itrust.beans.WardBean)", "isreturn":0, "sourcecode":"private boolean equals(WardBean other) {\r\n    return ((wardID) == (other.wardID)) && (requiredSpecialty.equals(other.requiredSpecialty));\r\n}"},
 {"id":288, "parametername":"WardRoomBean other", "parametertype":"edu.ncsu.csc.itrust.beans.WardRoomBean", "parameterclass":285, "classid":285, "classname":"edu.ncsu.csc.itrust.beans.WardRoomBean", "methodid":2244, "methodname":"edu.ncsu.csc.itrust.beans.WardRoomBean.equals(edu.ncsu.csc.itrust.beans.WardRoomBean)", "isreturn":0, "sourcecode":"private boolean equals(WardRoomBean other) {\r\n    return ((roomID) == (other.roomID)) && (roomName.equals(other.roomName));\r\n}"},
 {"id":289, "parametername":"VisitFlag vf1", "parametertype":"edu.ncsu.csc.itrust.beans.VisitFlag", "parameterclass":283, "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "methodid":2311, "methodname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm$1.compare(edu.ncsu.csc.itrust.beans.VisitFlag,edu.ncsu.csc.itrust.beans.VisitFlag)", "isreturn":0, "sourcecode":"public int compare(VisitFlag vf1, VisitFlag vf2) {\r\n    return vf1.getType().compareToIgnoreCase(vf2.getType());\r\n}"},
 {"id":290, "parametername":"VisitFlag vf2", "parametertype":"edu.ncsu.csc.itrust.beans.VisitFlag", "parameterclass":283, "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "methodid":2311, "methodname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm$1.compare(edu.ncsu.csc.itrust.beans.VisitFlag,edu.ncsu.csc.itrust.beans.VisitFlag)", "isreturn":0, "sourcecode":"public int compare(VisitFlag vf1, VisitFlag vf2) {\r\n    return vf1.getType().compareToIgnoreCase(vf2.getType());\r\n}"},
 {"id":291, "parametername":"VisitFlag flag", "parametertype":"edu.ncsu.csc.itrust.beans.VisitFlag", "parameterclass":283, "classid":289, "classname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "methodid":2304, "methodname":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm.addVisitFlag(edu.ncsu.csc.itrust.beans.VisitFlag)", "isreturn":0, "sourcecode":"public void addVisitFlag(VisitFlag flag) {\r\n    if (null == (visitFlags))\r\n        visitFlags = new ArrayList<VisitFlag>();\r\n\r\n    visitFlags.add(flag);\r\n}"},
 {"id":292, "parametername":"AdverseEventBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "parameterclass":243, "classid":290, "classname":"edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader", "methodid":2320, "methodname":"edu.ncsu.csc.itrust.beans.loaders.AdverseEventBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.AdverseEventBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, AdverseEventBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":293, "parametername":"AllergyBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.AllergyBean", "parameterclass":244, "classid":291, "classname":"edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader", "methodid":2324, "methodname":"edu.ncsu.csc.itrust.beans.loaders.AllergyBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.AllergyBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, AllergyBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":294, "parametername":"ApptBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ApptBean", "parameterclass":245, "classid":292, "classname":"edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader", "methodid":2328, "methodname":"edu.ncsu.csc.itrust.beans.loaders.ApptBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, ApptBean bean) throws SQLException {\r\n    ps.setString(1, bean.getApptType());\r\n    ps.setLong(2, bean.getPatient());\r\n    ps.setLong(3, bean.getHcp());\r\n    ps.setTimestamp(4, bean.getDate());\r\n    ps.setString(5, bean.getComment());\r\n    return ps;\r\n}"},
 {"id":295, "parametername":"ApptRequestBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ApptRequestBean", "parameterclass":246, "classid":293, "classname":"edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader", "methodid":2332, "methodname":"edu.ncsu.csc.itrust.beans.loaders.ApptRequestBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptRequestBean)", "isreturn":0, "sourcecode":"/**\r\n *\r\n */\r\npublic PreparedStatement loadParameters(PreparedStatement ps, ApptRequestBean bean) throws SQLException {\r\n    PreparedStatement ps2 = loader.loadParameters(ps, bean.getRequestedAppt());\r\n    ps2.setBoolean(6, bean.isPending());\r\n    ps2.setBoolean(7, bean.isAccepted());\r\n    return ps2;\r\n}"},
 {"id":296, "parametername":"ApptTypeBean apptType", "parametertype":"edu.ncsu.csc.itrust.beans.ApptTypeBean", "parameterclass":247, "classid":294, "classname":"edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader", "methodid":2336, "methodname":"edu.ncsu.csc.itrust.beans.loaders.ApptTypeBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ApptTypeBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, ApptTypeBean apptType) throws SQLException {\r\n    ps.setString(1, apptType.getName());\r\n    ps.setInt(2, apptType.getDuration());\r\n    return ps;\r\n}"},
 {"id":297, "parametername":"DiagnosisBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "parameterclass":248, "classid":296, "classname":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader", "methodid":2344, "methodname":"edu.ncsu.csc.itrust.beans.loaders.DiagnosisBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.DiagnosisBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, DiagnosisBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":298, "parametername":"DrugInteractionBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.DrugInteractionBean", "parameterclass":250, "classid":297, "classname":"edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader", "methodid":2348, "methodname":"edu.ncsu.csc.itrust.beans.loaders.DrugInteractionBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.DrugInteractionBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, DrugInteractionBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":299, "parametername":"OverrideReasonBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "parameterclass":265, "classid":298, "classname":"edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader", "methodid":2352, "methodname":"edu.ncsu.csc.itrust.beans.loaders.DrugReactionOverrideBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, OverrideReasonBean bean) throws SQLException {\r\n    return null;\r\n}"},
 {"id":300, "parametername":"Email email", "parametertype":"edu.ncsu.csc.itrust.beans.Email", "parameterclass":251, "classid":299, "classname":"edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader", "methodid":2356, "methodname":"edu.ncsu.csc.itrust.beans.loaders.EmailBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.Email)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, Email email) throws SQLException {\r\n    ps.setString(1, email.getToListStr());\r\n    ps.setString(2, email.getFrom());\r\n    ps.setString(3, email.getSubject());\r\n    ps.setString(4, email.getBody());\r\n    return ps;\r\n}"},
 {"id":301, "parametername":"FamilyMemberBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":300, "classname":"edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader", "methodid":2360, "methodname":"edu.ncsu.csc.itrust.beans.loaders.FamilyBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, FamilyMemberBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":302, "parametername":"HealthRecord bean", "parametertype":"edu.ncsu.csc.itrust.beans.HealthRecord", "parameterclass":257, "classid":301, "classname":"edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader", "methodid":2364, "methodname":"edu.ncsu.csc.itrust.beans.loaders.HealthRecordsBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.HealthRecord)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, HealthRecord bean) throws SQLException {\r\n    int i = 1;\r\n    ps.setLong((i++), bean.getPatientID());\r\n    ps.setDouble((i++), bean.getHeight());\r\n    ps.setDouble((i++), bean.getWeight());\r\n    ps.setInt((i++), (bean.isSmoker() ? 1 : 0));\r\n    ps.setInt((i++), bean.getSmokingStatus());\r\n    ps.setInt((i++), bean.getBloodPressureN());\r\n    ps.setInt((i++), bean.getBloodPressureD());\r\n    ps.setInt((i++), bean.getCholesterolHDL());\r\n    ps.setInt((i++), bean.getCholesterolLDL());\r\n    ps.setInt((i++), bean.getCholesterolTri());\r\n    ps.setLong((i++), bean.getPersonnelID());\r\n    return ps;\r\n}"},
 {"id":303, "parametername":"HospitalBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.HospitalBean", "parameterclass":258, "classid":302, "classname":"edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader", "methodid":2368, "methodname":"edu.ncsu.csc.itrust.beans.loaders.HospitalBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.HospitalBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, HospitalBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":304, "parametername":"LOINCbean bean", "parametertype":"edu.ncsu.csc.itrust.beans.LOINCbean", "parameterclass":259, "classid":303, "classname":"edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader", "methodid":2372, "methodname":"edu.ncsu.csc.itrust.beans.loaders.LOINCBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.LOINCbean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, LOINCbean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":305, "parametername":"LabProcedureBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "parameterclass":260, "classid":304, "classname":"edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader", "methodid":2376, "methodname":"edu.ncsu.csc.itrust.beans.loaders.LabProcedureBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.LabProcedureBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, LabProcedureBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":306, "parametername":"MedicationBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.MedicationBean", "parameterclass":261, "classid":305, "classname":"edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader", "methodid":2380, "methodname":"edu.ncsu.csc.itrust.beans.loaders.MedicationBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.MedicationBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, MedicationBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":307, "parametername":"MessageBean message", "parametertype":"edu.ncsu.csc.itrust.beans.MessageBean", "parameterclass":262, "classid":306, "classname":"edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader", "methodid":2384, "methodname":"edu.ncsu.csc.itrust.beans.loaders.MessageBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.MessageBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, MessageBean message) throws SQLException {\r\n    ps.setLong(1, message.getFrom());\r\n    ps.setLong(2, message.getTo());\r\n    ps.setString(3, message.getBody());\r\n    ps.setString(4, message.getSubject());\r\n    ps.setInt(5, message.getRead());\r\n    ps.setLong(6, message.getParentMessageId());\r\n    ps.setLong(7, message.getOriginalMessageId());\r\n    return ps;\r\n}"},
 {"id":308, "parametername":"OfficeVisitBean p", "parametertype":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "parameterclass":263, "classid":307, "classname":"edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader", "methodid":2388, "methodname":"edu.ncsu.csc.itrust.beans.loaders.OfficeVisitLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, OfficeVisitBean p) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":309, "parametername":"OperationalProfile bean", "parametertype":"edu.ncsu.csc.itrust.beans.OperationalProfile", "parameterclass":264, "classid":308, "classname":"edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader", "methodid":2392, "methodname":"edu.ncsu.csc.itrust.beans.loaders.OperationalProfileLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OperationalProfile)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, OperationalProfile bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":310, "parametername":"OverrideReasonBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "parameterclass":265, "classid":309, "classname":"edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader", "methodid":2396, "methodname":"edu.ncsu.csc.itrust.beans.loaders.OverrideReasonBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, OverrideReasonBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":311, "parametername":"PatientInstructionsBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "parameterclass":268, "classid":310, "classname":"edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader", "methodid":2400, "methodname":"edu.ncsu.csc.itrust.beans.loaders.PatientInstructionsBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "isreturn":0, "sourcecode":"/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.beans.loaders.BeanLoader#loadParameters(java.sql.PreparedStatement, java.lang.Object)\n */\r\npublic PreparedStatement loadParameters(PreparedStatement ps, PatientInstructionsBean bean) throws SQLException {\r\n    ps.setLong(1, bean.getVisitID());\r\n    ps.setTimestamp(2, new Timestamp(bean.getModified().getTime()));\r\n    ps.setString(3, bean.getName());\r\n    ps.setString(4, bean.getUrl());\r\n    ps.setString(5, bean.getComment());\r\n    return ps;\r\n}"},
 {"id":312, "parametername":"PatientBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":311, "classname":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader", "methodid":2403, "methodname":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadCommon(java.sql.ResultSet,edu.ncsu.csc.itrust.beans.PatientBean)", "isreturn":0, "sourcecode":"private void loadCommon(ResultSet rs, PatientBean p) throws SQLException {\r\n    p.setMID(rs.getInt(\"MID\"));\r\n    p.setFirstName(rs.getString(\"firstName\"));\r\n    p.setLastName(rs.getString(\"LastName\"));\r\n    Date dateOfBirth = rs.getDate(\"DateOfBirth\");\r\n    if (dateOfBirth != null) {\r\n        p.setDateOfBirthStr(DATE_FORMAT.format(dateOfBirth));\r\n    }\r\n    Date dateOfDeath = rs.getDate(\"DateOfDeath\");\r\n    if (dateOfDeath != null) {\r\n        p.setDateOfDeathStr(DATE_FORMAT.format(dateOfDeath));\r\n    }\r\n    p.setCauseOfDeath(rs.getString(\"CauseOfDeath\"));\r\n    p.setEmail(rs.getString(\"Email\"));\r\n    p.setStreetAddress1(rs.getString(\"address1\"));\r\n    p.setStreetAddress2(rs.getString(\"address2\"));\r\n    p.setCity(rs.getString(\"City\"));\r\n    p.setState(rs.getString(\"State\"));\r\n    p.setZip(rs.getString(\"Zip\"));\r\n    p.setPhone(rs.getString(\"phone\"));\r\n    p.setEmergencyName(rs.getString(\"eName\"));\r\n    p.setEmergencyPhone(rs.getString(\"ePhone\"));\r\n    p.setIcName(rs.getString(\"icName\"));\r\n    p.setIcAddress1(rs.getString(\"icAddress1\"));\r\n    p.setIcAddress2(rs.getString(\"icAddress2\"));\r\n    p.setIcCity(rs.getString(\"icCity\"));\r\n    p.setIcState(rs.getString(\"icState\"));\r\n    p.setIcZip(rs.getString(\"icZip\"));\r\n    p.setIcPhone(rs.getString(\"icPhone\"));\r\n    p.setIcID(rs.getString(\"icID\"));\r\n    p.setMotherMID(rs.getString(\"MotherMID\"));\r\n    p.setFatherMID(rs.getString(\"FatherMID\"));\r\n    p.setBloodTypeStr(rs.getString(\"BloodType\"));\r\n    p.setEthnicityStr(rs.getString(\"Ethnicity\"));\r\n    p.setGenderStr(rs.getString(\"Gender\"));\r\n    p.setTopicalNotes(rs.getString(\"TopicalNotes\"));\r\n    p.setCreditCardType(rs.getString(\"CreditCardType\"));\r\n    p.setCreditCardNumber(rs.getString(\"CreditCardNumber\"));\r\n    p.setDirectionsToHome(rs.getString(\"DirectionsToHome\"));\r\n    p.setReligion(rs.getString(\"Religion\"));\r\n    p.setLanguage(rs.getString(\"Language\"));\r\n    p.setSpiritualPractices(rs.getString(\"SpiritualPractices\"));\r\n    p.setAlternateName(rs.getString(\"AlternateName\"));\r\n    Date dateOfDeactivation = rs.getDate(\"DateOfDeactivation\");\r\n    if (dateOfDeactivation != null) {\r\n        p.setDateOfDeactivationStr(DATE_FORMAT.format(dateOfDeactivation));\r\n    }\r\n}"},
 {"id":313, "parametername":"PatientBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":311, "classname":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader", "methodid":2405, "methodname":"edu.ncsu.csc.itrust.beans.loaders.PatientLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PatientBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, PatientBean p) throws SQLException {\r\n    int i = 1;\r\n    ps.setString((i++), p.getFirstName());\r\n    ps.setString((i++), p.getLastName());\r\n    ps.setString((i++), p.getEmail());\r\n    // ps.setString(i++, p.getSecurityQuestion());\r\n    // ps.setString(i++, p.getSecurityAnswer());\r\n    ps.setString((i++), p.getStreetAddress1());\r\n    ps.setString((i++), p.getStreetAddress2());\r\n    ps.setString((i++), p.getCity());\r\n    ps.setString((i++), p.getState());\r\n    ps.setString((i++), p.getZip());\r\n    ps.setString((i++), p.getPhone());\r\n    ps.setString((i++), p.getEmergencyName());\r\n    ps.setString((i++), p.getEmergencyPhone());\r\n    ps.setString((i++), p.getIcName());\r\n    ps.setString((i++), p.getIcAddress1());\r\n    ps.setString((i++), p.getIcAddress2());\r\n    ps.setString((i++), p.getIcCity());\r\n    ps.setString((i++), p.getIcState());\r\n    ps.setString((i++), p.getIcZip());\r\n    ps.setString((i++), p.getIcPhone());\r\n    ps.setString((i++), p.getIcID());\r\n    Date date = null;\r\n    try {\r\n        date = new Date(DATE_FORMAT.parse(p.getDateOfBirthStr()).getTime());\r\n    } catch (ParseException e) {\r\n        e.printStackTrace();\r\n    }\r\n    ps.setDate((i++), date);\r\n    date = null;\r\n    try {\r\n        date = new Date(DATE_FORMAT.parse(p.getDateOfDeathStr()).getTime());\r\n    } catch (ParseException e) {\r\n        if (\"\".equals(p.getDateOfDeathStr())) {\r\n            date = null;\r\n        } else {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    ps.setDate((i++), date);\r\n    ps.setString((i++), p.getCauseOfDeath());\r\n    ps.setString((i++), p.getMotherMID());\r\n    ps.setString((i++), p.getFatherMID());\r\n    ps.setString((i++), p.getBloodType().getName());\r\n    ps.setString((i++), p.getEthnicity().getName());\r\n    ps.setString((i++), p.getGender().getName());\r\n    ps.setString((i++), p.getTopicalNotes());\r\n    ps.setString((i++), p.getCreditCardType());\r\n    ps.setString((i++), p.getCreditCardNumber());\r\n    ps.setString((i++), p.getDirectionsToHome());\r\n    ps.setString((i++), p.getReligion());\r\n    ps.setString((i++), p.getLanguage());\r\n    ps.setString((i++), p.getSpiritualPractices());\r\n    ps.setString((i++), p.getAlternateName());\r\n    date = null;\r\n    try {\r\n        date = new Date(DATE_FORMAT.parse(p.getDateOfDeactivationStr()).getTime());\r\n    } catch (ParseException e) {\r\n        if (\"\".equals(p.getDateOfDeactivationStr())) {\r\n            date = null;\r\n        } else {\r\n            e.printStackTrace();\r\n        }\r\n    } catch (NullPointerException e) {\r\n        if (\"\".equals(p.getDateOfDeactivationStr())) {\r\n            date = null;\r\n        } else {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    ps.setDate((i++), date);\r\n    return ps;\r\n}"},
 {"id":314, "parametername":"PersonnelBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parameterclass":270, "classid":312, "classname":"edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader", "methodid":2410, "methodname":"edu.ncsu.csc.itrust.beans.loaders.PersonnelLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PersonnelBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, PersonnelBean p) throws SQLException {\r\n    int i = 1;\r\n    ps.setLong((i++), p.getAMID());\r\n    ps.setString((i++), p.getFirstName());\r\n    ps.setString((i++), p.getLastName());\r\n    ps.setString((i++), p.getPhone());\r\n    ps.setString((i++), p.getStreetAddress1());\r\n    ps.setString((i++), p.getStreetAddress2());\r\n    ps.setString((i++), p.getCity());\r\n    ps.setString((i++), p.getState());\r\n    ps.setString((i++), p.getZip());\r\n    ps.setString((i++), p.getSpecialty());\r\n    ps.setString((i++), p.getEmail());\r\n    return ps;\r\n}"},
 {"id":315, "parametername":"PrescriptionBean pres", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":313, "classname":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader", "methodid":2414, "methodname":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, PrescriptionBean pres) throws SQLException {\r\n    ps.setLong(1, pres.getVisitID());\r\n    ps.setString(2, pres.getMedication().getNDCode());\r\n    ps.setDate(3, new Date(pres.getStartDate().getTime()));\r\n    ps.setDate(4, new Date(pres.getEndDate().getTime()));\r\n    ps.setInt(5, pres.getDosage());\r\n    ps.setString(6, pres.getInstructions());\r\n    ps.setString(7, pres.getOverrideReasonOther());\r\n    return ps;\r\n}"},
 {"id":316, "parametername":"PrescriptionReportBean pres", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean", "parameterclass":272, "classid":314, "classname":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader", "methodid":2418, "methodname":"edu.ncsu.csc.itrust.beans.loaders.PrescriptionReportBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.PrescriptionReportBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, PrescriptionReportBean pres) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":317, "parametername":"ProcedureBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ProcedureBean", "parameterclass":273, "classid":315, "classname":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader", "methodid":2423, "methodname":"edu.ncsu.csc.itrust.beans.loaders.ProcedureBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ProcedureBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, ProcedureBean bean) throws SQLException {\r\n    ps.setString(1, bean.getDescription());\r\n    return ps;\r\n}"},
 {"id":318, "parametername":"ReferralBean ref", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":316, "classname":"edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader", "methodid":2427, "methodname":"edu.ncsu.csc.itrust.beans.loaders.ReferralBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, ReferralBean ref) throws SQLException {\r\n    ps.setLong(1, ref.getPatientID());\r\n    ps.setLong(2, ref.getSenderID());\r\n    ps.setLong(3, ref.getReceiverID());\r\n    ps.setString(4, ref.getReferralDetails());\r\n    ps.setLong(5, ref.getOvid());\r\n    ps.setBoolean(6, ref.isViewedByPatient());\r\n    ps.setBoolean(7, ref.isViewedByHCP());\r\n    ps.setInt(8, ref.getPriority());\r\n    return ps;\r\n}"},
 {"id":319, "parametername":"RemoteMonitoringDataBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "parameterclass":275, "classid":317, "classname":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader", "methodid":2431, "methodname":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringDataBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, RemoteMonitoringDataBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":320, "parametername":"TelemedicineBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.TelemedicineBean", "parameterclass":280, "classid":318, "classname":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader", "methodid":2435, "methodname":"edu.ncsu.csc.itrust.beans.loaders.RemoteMonitoringListsBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.TelemedicineBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, TelemedicineBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":321, "parametername":"ReportRequestBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ReportRequestBean", "parameterclass":276, "classid":319, "classname":"edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader", "methodid":2439, "methodname":"edu.ncsu.csc.itrust.beans.loaders.ReportRequestBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.ReportRequestBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, ReportRequestBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":322, "parametername":"SurveyBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.SurveyBean", "parameterclass":278, "classid":320, "classname":"edu.ncsu.csc.itrust.beans.loaders.SurveyLoader", "methodid":2443, "methodname":"edu.ncsu.csc.itrust.beans.loaders.SurveyLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.SurveyBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, SurveyBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":323, "parametername":"SurveyResultBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "parameterclass":279, "classid":321, "classname":"edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader", "methodid":2447, "methodname":"edu.ncsu.csc.itrust.beans.loaders.SurveyResultBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.SurveyResultBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, SurveyResultBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":324, "parametername":"TransactionBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.TransactionBean", "parameterclass":281, "classid":322, "classname":"edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader", "methodid":2451, "methodname":"edu.ncsu.csc.itrust.beans.loaders.TransactionBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.TransactionBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, TransactionBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":325, "parametername":"VerboseReferralBean ref", "parametertype":"edu.ncsu.csc.itrust.beans.VerboseReferralBean", "parameterclass":282, "classid":323, "classname":"edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader", "methodid":2455, "methodname":"edu.ncsu.csc.itrust.beans.loaders.VerboseReferralBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.VerboseReferralBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, VerboseReferralBean ref) throws SQLException {\r\n    throw new RuntimeException(\"Not Implemented\");\r\n}"},
 {"id":326, "parametername":"VisitReminderReturnForm bean", "parametertype":"edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm", "parameterclass":289, "classid":324, "classname":"edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader", "methodid":2459, "methodname":"edu.ncsu.csc.itrust.beans.loaders.VisitReminderReturnFormLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.forms.VisitReminderReturnForm)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, VisitReminderReturnForm bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":327, "parametername":"WardBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.WardBean", "parameterclass":284, "classid":325, "classname":"edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader", "methodid":2463, "methodname":"edu.ncsu.csc.itrust.beans.loaders.WardBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.WardBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, WardBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":328, "parametername":"WardRoomBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.WardRoomBean", "parameterclass":285, "classid":326, "classname":"edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader", "methodid":2467, "methodname":"edu.ncsu.csc.itrust.beans.loaders.WardRoomBeanLoader.loadParameters(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.WardRoomBean)", "isreturn":0, "sourcecode":"public PreparedStatement loadParameters(PreparedStatement ps, WardRoomBean bean) throws SQLException {\r\n    throw new IllegalStateException(\"unimplemented!\");\r\n}"},
 {"id":329, "parametername":"DiagnosisStatisticsBean DiagnosisBean", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean", "parameterclass":249, "classid":329, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData", "methodid":2489, "methodname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.initializeDiagnosisStatistics(edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Called from the JSP to initialize the list of HealthRecords needed\r\n * to produce the desired chart.\r\n *\r\n * @param hRecs\r\n * \t\tHealth records for the patient being viewed.\r\n * @param name\r\n * \t\tType of data that is being graphed (originally Height, Weight, and BMI).\r\n */\r\npublic void initializeDiagnosisStatistics(DiagnosisStatisticsBean DiagnosisBean, String name) {\r\n    this.dsBean = DiagnosisBean;\r\n    this.diagnosisName = name;\r\n    values = new int[2];\r\n    values[0] = ((int) (dsBean.getZipStats()));\r\n    values[1] = ((int) (dsBean.getRegionStats()));\r\n}"},
 {"id":330, "parametername":"DiagnosisStatisticsBean avgBean", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean", "parameterclass":249, "classid":329, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData", "methodid":2488, "methodname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.initializeAvgDiagnosisStatistics(edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,java.lang.String)", "isreturn":0, "sourcecode":"public void initializeAvgDiagnosisStatistics(DiagnosisStatisticsBean avgBean, DiagnosisStatisticsBean dsBean, String name) {\r\n    this.dsBean = dsBean;\r\n    this.avgBean = avgBean;\r\n    this.diagnosisName = name;\r\n    this.epidemic = true;\r\n    values = new int[4];\r\n    values[0] = ((int) (dsBean.getZipStats()));\r\n    values[1] = ((int) (avgBean.getZipStats()));\r\n    values[2] = ((int) (dsBean.getRegionStats()));\r\n    values[3] = ((int) (avgBean.getRegionStats()));\r\n}"},
 {"id":331, "parametername":"DiagnosisStatisticsBean dsBean", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean", "parameterclass":249, "classid":329, "classname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData", "methodid":2488, "methodname":"edu.ncsu.csc.itrust.charts.DiagnosisTrendData.initializeAvgDiagnosisStatistics(edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,edu.ncsu.csc.itrust.beans.DiagnosisStatisticsBean,java.lang.String)", "isreturn":0, "sourcecode":"public void initializeAvgDiagnosisStatistics(DiagnosisStatisticsBean avgBean, DiagnosisStatisticsBean dsBean, String name) {\r\n    this.dsBean = dsBean;\r\n    this.avgBean = avgBean;\r\n    this.diagnosisName = name;\r\n    this.epidemic = true;\r\n    values = new int[4];\r\n    values[0] = ((int) (dsBean.getZipStats()));\r\n    values[1] = ((int) (avgBean.getZipStats()));\r\n    values[2] = ((int) (dsBean.getRegionStats()));\r\n    values[3] = ((int) (avgBean.getRegionStats()));\r\n}"},
 {"id":332, "parametername":"DiagnosisBean o1", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "parameterclass":248, "classid":346, "classname":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest", "methodid":2618, "methodname":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest$1.compare(edu.ncsu.csc.itrust.beans.DiagnosisBean,edu.ncsu.csc.itrust.beans.DiagnosisBean)", "isreturn":0, "sourcecode":"public int compare(DiagnosisBean o1, DiagnosisBean o2) {\r\n    return Long.valueOf(o1.getOvDiagnosisID()).compareTo(Long.valueOf(o2.getOvDiagnosisID()));\r\n}"},
 {"id":333, "parametername":"DiagnosisBean o2", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "parameterclass":248, "classid":346, "classname":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest", "methodid":2618, "methodname":"edu.ncsu.csc.itrust.dao.access.UpdatePrivacyLevelTest$1.compare(edu.ncsu.csc.itrust.beans.DiagnosisBean,edu.ncsu.csc.itrust.beans.DiagnosisBean)", "isreturn":0, "sourcecode":"public int compare(DiagnosisBean o1, DiagnosisBean o2) {\r\n    return Long.valueOf(o1.getOvDiagnosisID()).compareTo(Long.valueOf(o2.getOvDiagnosisID()));\r\n}"},
 {"id":334, "parametername":"FamilyMemberBean o1", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":366, "classname":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest", "methodid":2723, "methodname":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.compare(edu.ncsu.csc.itrust.beans.FamilyMemberBean,edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"public int compare(FamilyMemberBean o1, FamilyMemberBean o2) {\r\n    return o1.getFirstName().compareTo(o2.getFirstName());\r\n}"},
 {"id":335, "parametername":"FamilyMemberBean o2", "parametertype":"edu.ncsu.csc.itrust.beans.FamilyMemberBean", "parameterclass":252, "classid":366, "classname":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest", "methodid":2723, "methodname":"edu.ncsu.csc.itrust.dao.family.FamilyMembersTest.compare(edu.ncsu.csc.itrust.beans.FamilyMemberBean,edu.ncsu.csc.itrust.beans.FamilyMemberBean)", "isreturn":0, "sourcecode":"public int compare(FamilyMemberBean o1, FamilyMemberBean o2) {\r\n    return o1.getFirstName().compareTo(o2.getFirstName());\r\n}"},
 {"id":336, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":381, "classname":"edu.ncsu.csc.itrust.dao.mysql.AccessDAO", "methodid":2818, "methodname":"edu.ncsu.csc.itrust.dao.mysql.AccessDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic AccessDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":337, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":382, "classname":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO", "methodid":2822, "methodname":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic AdverseEventDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.aeLoader = new AdverseEventBeanLoader();\r\n}"},
 {"id":338, "parametername":"AdverseEventBean aeBean", "parametertype":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "parameterclass":243, "classid":382, "classname":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO", "methodid":2823, "methodname":"edu.ncsu.csc.itrust.dao.mysql.AdverseEventDAO.addReport(edu.ncsu.csc.itrust.beans.AdverseEventBean,long)", "isreturn":0, "sourcecode":"/**\r\n * Adds a message to the database.\r\n *\r\n * @param mBean\r\n * \t\tA bean representing the message to be added.\r\n * @throws SQLException\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void addReport(AdverseEventBean aeBean, long hcpmid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO adverseevents (PatientMID, PresImmu, Code, Comment, Prescriber, Status) \" + \"VALUES (?, ?, ?, ?, ?, ?)\"));\r\n        ps.setString(1, aeBean.getMID());\r\n        ps.setString(2, aeBean.getDrug());\r\n        ps.setString(3, aeBean.getCode());\r\n        ps.setString(4, aeBean.getDescription());\r\n        ps.setLong(5, hcpmid);\r\n        ps.setString(6, \"Active\");\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":339, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":383, "classname":"edu.ncsu.csc.itrust.dao.mysql.AllergyDAO", "methodid":2832, "methodname":"edu.ncsu.csc.itrust.dao.mysql.AllergyDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic AllergyDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":340, "parametername":"AllergyBean allergy", "parametertype":"edu.ncsu.csc.itrust.beans.AllergyBean", "parameterclass":244, "classid":383, "classname":"edu.ncsu.csc.itrust.dao.mysql.AllergyDAO", "methodid":2833, "methodname":"edu.ncsu.csc.itrust.dao.mysql.AllergyDAO.addAllergy(edu.ncsu.csc.itrust.beans.AllergyBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds an allergy to this patients list.\r\n *\r\n * @param allergy:\r\n * \t\tallergy bean\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void addAllergy(AllergyBean allergy) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO allergies(PatientID, Code, FirstFound, Description) VALUES (?,?,?,?)\");\r\n        ps.setLong(1, allergy.getPatientID());\r\n        ps.setString(2, allergy.getNDCode());\r\n        if ((allergy.getFirstFound()) == null) {\r\n            ps.setDate(3, null);\r\n        } else {\r\n            ps.setDate(3, new Date(allergy.getFirstFound().getTime()));\r\n        }\r\n        ps.setString(4, allergy.getDescription());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":341, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "methodid":2835, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"public ApptDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.apptTypeDAO = factory.getApptTypeDAO();\r\n    this.abloader = new ApptBeanLoader();\r\n}"},
 {"id":342, "parametername":"ApptBean appt", "parametertype":"edu.ncsu.csc.itrust.beans.ApptBean", "parameterclass":245, "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "methodid":2845, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.scheduleAppt(edu.ncsu.csc.itrust.beans.ApptBean)", "isreturn":0, "sourcecode":"public void scheduleAppt(ApptBean appt) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"INSERT INTO appointment (appt_type, patient_id, doctor_id, sched_date, comment) \" + \"VALUES (?, ?, ?, ?, ?)\"));\r\n    ps = this.abloader.loadParameters(ps, appt);\r\n    ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n}"},
 {"id":343, "parametername":"ApptBean appt", "parametertype":"edu.ncsu.csc.itrust.beans.ApptBean", "parameterclass":245, "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "methodid":2836, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.editAppt(edu.ncsu.csc.itrust.beans.ApptBean)", "isreturn":0, "sourcecode":"public void editAppt(ApptBean appt) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"UPDATE appointment SET appt_type=?, sched_date=?, comment=? WHERE appt_id=?\");\r\n    ps.setString(1, appt.getApptType());\r\n    ps.setTimestamp(2, appt.getDate());\r\n    ps.setString(3, appt.getComment());\r\n    ps.setInt(4, appt.getApptID());\r\n    ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n}"},
 {"id":344, "parametername":"ApptBean appt", "parametertype":"edu.ncsu.csc.itrust.beans.ApptBean", "parameterclass":245, "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "methodid":2844, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.removeAppt(edu.ncsu.csc.itrust.beans.ApptBean)", "isreturn":0, "sourcecode":"public void removeAppt(ApptBean appt) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"DELETE FROM appointment WHERE appt_id=?\");\r\n    ps.setInt(1, appt.getApptID());\r\n    ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n}"},
 {"id":345, "parametername":"ApptBean appt", "parametertype":"edu.ncsu.csc.itrust.beans.ApptBean", "parameterclass":245, "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "methodid":2840, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllHCPConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)", "isreturn":0, "sourcecode":"public List<ApptBean> getAllHCPConflictsForAppt(long mid, ApptBean appt) throws SQLException {\r\n    int duration = apptTypeDAO.getApptType(appt.getApptType()).getDuration();\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"SELECT * \" + ((((((\"FROM appointment a, appointmenttype type \"// and the corresponding types\r\n     + \"WHERE a.appt_type=type.appt_type AND \")// match them with types\r\n     + \"((DATE_ADD(a.sched_date, INTERVAL type.duration MINUTE)>? AND \")// a1 ends after a2 starts AND\r\n     + \"a.sched_date<=?) OR \")// a1 starts before a2 OR\r\n     + \"(DATE_ADD(?, INTERVAL ? MINUTE)>a.sched_date AND \")// a2 ends after a1 starts AND\r\n     + \"?<=a.sched_date)) AND \")// a2 starts before a1 starts\r\n     + \"a.doctor_id=? AND a.appt_id!=?;\")));\r\n    ps.setTimestamp(1, appt.getDate());\r\n    ps.setTimestamp(2, appt.getDate());\r\n    ps.setTimestamp(3, appt.getDate());\r\n    ps.setInt(4, duration);\r\n    ps.setTimestamp(5, appt.getDate());\r\n    ps.setLong(6, mid);\r\n    ps.setInt(7, appt.getApptID());\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> conflictList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return conflictList;\r\n}"},
 {"id":346, "parametername":"ApptBean appt", "parametertype":"edu.ncsu.csc.itrust.beans.ApptBean", "parameterclass":245, "classid":384, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO", "methodid":2841, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ApptDAO.getAllPatientConflictsForAppt(long,edu.ncsu.csc.itrust.beans.ApptBean)", "isreturn":0, "sourcecode":"public List<ApptBean> getAllPatientConflictsForAppt(long mid, ApptBean appt) throws SQLException {\r\n    int duration = apptTypeDAO.getApptType(appt.getApptType()).getDuration();\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"SELECT * \" + ((((((\"FROM appointment a, appointmenttype type \"// and the corresponding types\r\n     + \"WHERE a.appt_type=type.appt_type AND \")// match them with types\r\n     + \"((DATE_ADD(a.sched_date, INTERVAL type.duration MINUTE)>? AND \")// a1 ends after a2 starts AND\r\n     + \"a.sched_date<=?) OR \")// a1 starts before a2 OR\r\n     + \"(DATE_ADD(?, INTERVAL ? MINUTE)>a.sched_date AND \")// a2 ends after a1 starts AND\r\n     + \"?<=a.sched_date)) AND \")// a2 starts before a1 starts\r\n     + \"a.patient_id=? AND a.appt_id!=?;\")));\r\n    ps.setTimestamp(1, appt.getDate());\r\n    ps.setTimestamp(2, appt.getDate());\r\n    ps.setTimestamp(3, appt.getDate());\r\n    ps.setInt(4, duration);\r\n    ps.setTimestamp(5, appt.getDate());\r\n    ps.setLong(6, mid);\r\n    ps.setInt(7, appt.getApptID());\r\n    ResultSet rs = ps.executeQuery();\r\n    List<ApptBean> conflictList = this.abloader.loadList(rs);\r\n    DBUtil.closeConnection(conn, ps);\r\n    return conflictList;\r\n}"},
 {"id":347, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":385, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO", "methodid":2846, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"public ApptRequestDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    loader = new ApptRequestBeanLoader();\r\n}"},
 {"id":348, "parametername":"ApptRequestBean req", "parametertype":"edu.ncsu.csc.itrust.beans.ApptRequestBean", "parameterclass":246, "classid":385, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO", "methodid":2847, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.addApptRequest(edu.ncsu.csc.itrust.beans.ApptRequestBean)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param req\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic void addApptRequest(ApptRequestBean req) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement stmt = null;\r\n    conn = factory.getConnection();\r\n    stmt = conn.prepareStatement(\"INSERT INTO appointmentrequests (appt_type, patient_id, doctor_id, sched_date, comment, pending, accepted) VALUES (?, ?, ?, ?, ?, ?, ?)\");\r\n    loader.loadParameters(stmt, req);\r\n    stmt.executeUpdate();\r\n    DBUtil.closeConnection(conn, stmt);\r\n}"},
 {"id":349, "parametername":"ApptRequestBean req", "parametertype":"edu.ncsu.csc.itrust.beans.ApptRequestBean", "parameterclass":246, "classid":385, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO", "methodid":2850, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ApptRequestDAO.updateApptRequest(edu.ncsu.csc.itrust.beans.ApptRequestBean)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param req\r\n * \t\t\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic void updateApptRequest(ApptRequestBean req) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement stmt = null;\r\n    conn = factory.getConnection();\r\n    stmt = conn.prepareStatement(\"UPDATE appointmentrequests SET pending=?, accepted=? WHERE appt_id=?\");\r\n    stmt.setBoolean(1, req.isPending());\r\n    stmt.setBoolean(2, req.isAccepted());\r\n    stmt.setInt(3, req.getRequestedAppt().getApptID());\r\n    stmt.executeUpdate();\r\n    DBUtil.closeConnection(conn, stmt);\r\n}"},
 {"id":350, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":386, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO", "methodid":2851, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"public ApptTypeDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.atLoader = new ApptTypeBeanLoader();\r\n}"},
 {"id":351, "parametername":"ApptTypeBean apptType", "parametertype":"edu.ncsu.csc.itrust.beans.ApptTypeBean", "parameterclass":247, "classid":386, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO", "methodid":2852, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.addApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)", "isreturn":0, "sourcecode":"public boolean addApptType(ApptTypeBean apptType) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"INSERT INTO appointmenttype (appt_type, duration) \" + \"VALUES (?, ?)\"));\r\n    this.atLoader.loadParameters(ps, apptType);\r\n    int x = ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n    if (x > 0)\r\n        return true;\r\n    else\r\n        return false;\r\n\r\n}"},
 {"id":352, "parametername":"ApptTypeBean apptType", "parametertype":"edu.ncsu.csc.itrust.beans.ApptTypeBean", "parameterclass":247, "classid":386, "classname":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO", "methodid":2853, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ApptTypeDAO.editApptType(edu.ncsu.csc.itrust.beans.ApptTypeBean)", "isreturn":0, "sourcecode":"public boolean editApptType(ApptTypeBean apptType) throws DBException, SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement(\"UPDATE appointmenttype SET duration=? WHERE appt_type=?\");\r\n    ps.setInt(1, apptType.getDuration());\r\n    ps.setString(2, apptType.getName());\r\n    int x = ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n    if (x > 0)\r\n        return true;\r\n    else\r\n        return false;\r\n\r\n}"},
 {"id":353, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "methodid":2856, "methodname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic AuthDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":354, "parametername":"Role role", "parametertype":"edu.ncsu.csc.itrust.enums.Role", "parameterclass":486, "classid":387, "classname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO", "methodid":2857, "methodname":"edu.ncsu.csc.itrust.dao.mysql.AuthDAO.addUser(java.lang.Long,edu.ncsu.csc.itrust.enums.Role,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Add a particular user to the system. Does not add user-specific information (e.g. Patient or HCP).\r\n * Initially sets security question to a random set of characters, so that nobody should be able to guess\r\n * its value.\r\n *\r\n * @param mid\r\n * \t\tThe users MID as a Long.\r\n * @param role\r\n * \t\tThe role of the user as a Role enum {@link Role}\r\n * @param password\r\n * \t\tThe password for the new user.\r\n * @return A string representing the newly added randomly-generated password.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic String addUser(Long mid, Role role, String password) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement pstmt = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        pstmt = conn.prepareStatement(\"INSERT INTO users (MID, PASSWORD, ROLE, sQuestion, sAnswer) VALUES (?,?,?,?,?)\");\r\n        pstmt.setLong(1, mid);\r\n        String hashedPassword = DigestUtils.shaHex(password);\r\n        pstmt.setString(2, hashedPassword);\r\n        pstmt.setString(3, role.toString());\r\n        pstmt.setString(4, \"Enter the random password given in your account email\");\r\n        pstmt.setString(5, password);\r\n        pstmt.executeUpdate();\r\n        return password;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, pstmt);\r\n    }\r\n}"},
 {"id":355, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":388, "classname":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO", "methodid":2875, "methodname":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic CPTCodesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":356, "parametername":"ProcedureBean proc", "parametertype":"edu.ncsu.csc.itrust.beans.ProcedureBean", "parameterclass":273, "classid":388, "classname":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO", "methodid":2876, "methodname":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.addCPTCode(edu.ncsu.csc.itrust.beans.ProcedureBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a new CPT code, returns that it was added successfully\r\n *\r\n * @param proc\r\n * \t\tA ProcedureBean representing the new code information.\r\n * @return A boolean for whether the operation was successful.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean addCPTCode(ProcedureBean proc) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO cptcodes (Code, Description, Attribute) \" + \"VALUES (?,?,?)\"));\r\n        ps.setString(1, proc.getCPTCode());\r\n        ps.setString(2, proc.getDescription());\r\n        ps.setString(3, proc.getAttribute());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":357, "parametername":"ProcedureBean proc", "parametertype":"edu.ncsu.csc.itrust.beans.ProcedureBean", "parameterclass":273, "classid":388, "classname":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO", "methodid":2881, "methodname":"edu.ncsu.csc.itrust.dao.mysql.CPTCodesDAO.updateCode(edu.ncsu.csc.itrust.beans.ProcedureBean)", "isreturn":0, "sourcecode":"/**\r\n * Change the procedure description for a particular CPT code\r\n *\r\n * @param proc\r\n * \t\tA ProcedureBean representing the new code information.\r\n * @return A boolean for whether the operation was successful.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int updateCode(ProcedureBean proc) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE cptcodes SET Description = ?, Attribute = ? WHERE Code = ?\");\r\n        ps.setString(1, proc.getDescription());\r\n        ps.setString(2, proc.getAttribute());\r\n        ps.setString(3, proc.getCPTCode());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":358, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":389, "classname":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO", "methodid":2882, "methodname":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param factory\r\n * \t\t\r\n */\r\npublic DiagnosesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":359, "parametername":"DiagnosisBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "parameterclass":248, "classid":389, "classname":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO", "methodid":2883, "methodname":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.add(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a diagnosis bean to the database.\r\n *\r\n * @param pres\r\n * \t\tThe prescription bean to be added.\r\n * @return The unique ID of the newly added bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long add(DiagnosisBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"INSERT INTO ovdiagnosis \" + \"(VisitID,ICDCode) VALUES (?,?)\";\r\n        ps = conn.prepareStatement(statement);\r\n        ps.setLong(1, bean.getVisitID());\r\n        ps.setString(2, bean.getICDCode());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":360, "parametername":"DiagnosisBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "parameterclass":248, "classid":389, "classname":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO", "methodid":2884, "methodname":"edu.ncsu.csc.itrust.dao.mysql.DiagnosesDAO.edit(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "isreturn":0, "sourcecode":"/**\r\n * Edits an existing prescription bean.\r\n *\r\n * @param pres\r\n * \t\tThe newly updated prescription bean.\r\n * @return A long indicating the ID of the newly updated prescription bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long edit(DiagnosisBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        // String statement = \"UPDATE ovdiagnosis \" +\r\n        // \"SET VisitID=?, ICDCode=? \" +\r\n        // \"WHERE ID=?\";\r\n        String statement = \"UPDATE ovdiagnosis \" + (\"SET VisitID=?, ICDCode=? \" + \"WHERE ID = ?\");\r\n        ps = conn.prepareStatement(statement);\r\n        ps.setLong(1, bean.getVisitID());\r\n        ps.setString(2, bean.getICDCode());\r\n        ps.setLong(3, bean.getOvDiagnosisID());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":361, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":390, "classname":"edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO", "methodid":2891, "methodname":"edu.ncsu.csc.itrust.dao.mysql.DrugInteractionDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic DrugInteractionDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    interactionLoader = new DrugInteractionBeanLoader();\r\n}"},
 {"id":362, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":391, "classname":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO", "methodid":2895, "methodname":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic DrugReactionOverrideCodesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":363, "parametername":"OverrideReasonBean orc", "parametertype":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "parameterclass":265, "classid":391, "classname":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO", "methodid":2896, "methodname":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.addORCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a new override reason code, returns whether or not the change was made. If the code already exists, an\r\n * iTrustException is thrown.\r\n *\r\n * @param orc\r\n * \t\tThe overridereason bean to be added.\r\n * @return A boolean indicating success or failure.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean addORCode(OverrideReasonBean orc) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO drugreactionoverridecodes (Code, Description) \" + \"VALUES (?,?)\"));\r\n        ps.setString(1, orc.getORCode());\r\n        ps.setString(2, orc.getDescription());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":364, "parametername":"OverrideReasonBean orc", "parametertype":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "parameterclass":265, "classid":391, "classname":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO", "methodid":2899, "methodname":"edu.ncsu.csc.itrust.dao.mysql.DrugReactionOverrideCodesDAO.updateCode(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates a particular codes description\r\n *\r\n * @param orc\r\n * \t\tA bean representing the particular override reason to be updated.\r\n * @return An int representing the number of updated rows.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int updateCode(OverrideReasonBean orc) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE drugreactionoverridecodes SET Description = ? \" + \"WHERE Code = ?\"));\r\n        ps.setString(1, orc.getDescription());\r\n        ps.setString(2, orc.getORCode());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":365, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":392, "classname":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO", "methodid":2900, "methodname":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic FakeEmailDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":366, "parametername":"Email email", "parametertype":"edu.ncsu.csc.itrust.beans.Email", "parameterclass":251, "classid":392, "classname":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO", "methodid":2904, "methodname":"edu.ncsu.csc.itrust.dao.mysql.FakeEmailDAO.sendEmailRecord(edu.ncsu.csc.itrust.beans.Email)", "isreturn":0, "sourcecode":"/**\r\n * \"Send\" an email, which just inserts it into the database.\r\n *\r\n * @param email\r\n * \t\tThe Email object to insert.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void sendEmailRecord(Email email) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO fakeemail (ToAddr, FromAddr, Subject, Body) \" + \"VALUES (?,?,?,?)\"));\r\n        emailBeanLoader.loadParameters(ps, email);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":367, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":393, "classname":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO", "methodid":2905, "methodname":"edu.ncsu.csc.itrust.dao.mysql.FamilyDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic FamilyDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":368, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":394, "classname":"edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO", "methodid":2910, "methodname":"edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic HealthRecordsDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":369, "parametername":"HealthRecord record", "parametertype":"edu.ncsu.csc.itrust.beans.HealthRecord", "parameterclass":257, "classid":394, "classname":"edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO", "methodid":2911, "methodname":"edu.ncsu.csc.itrust.dao.mysql.HealthRecordsDAO.add(edu.ncsu.csc.itrust.beans.HealthRecord)", "isreturn":0, "sourcecode":"/**\r\n * Adds a health record for a particular patient\r\n *\r\n * @param record\r\n * \t\tThe HealthRecord object to insert.\r\n * @return A boolean indicating whether the insert was successful.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic boolean add(HealthRecord record) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO personalhealthinformation(PatientID,Height,Weight,\" + (\"Smoker,SmokingStatus,BloodPressureN,BloodPressureD,CholesterolHDL,CholesterolLDL,CholesterolTri,\" + \"HCPID) VALUES(?,?,?,?,?,?,?,?,?,?,?)\")));\r\n        loader.loadParameters(ps, record);\r\n        int numInserted = ps.executeUpdate();\r\n        return numInserted == 1;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":370, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":395, "classname":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO", "methodid":2913, "methodname":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic HospitalsDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":371, "parametername":"HospitalBean hosp", "parametertype":"edu.ncsu.csc.itrust.beans.HospitalBean", "parameterclass":258, "classid":395, "classname":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO", "methodid":2914, "methodname":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.addHospital(edu.ncsu.csc.itrust.beans.HospitalBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a hospital\r\n *\r\n * @param hosp\r\n * \t\tThe HospitalBean object to insert.\r\n * @return A boolean indicating whether the insertion was successful.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean addHospital(HospitalBean hosp) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO hospitals (HospitalID, HospitalName, Address, City, State, Zip) \" + \"VALUES (?,?,?,?,?,?)\"));\r\n        ps.setString(1, hosp.getHospitalID());\r\n        ps.setString(2, hosp.getHospitalName());\r\n        ps.setString(3, hosp.getHospitalAddress());\r\n        ps.setString(4, hosp.getHospitalCity());\r\n        ps.setString(5, hosp.getHospitalState());\r\n        ps.setString(6, hosp.getHospitalZip());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Hospital already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":372, "parametername":"HospitalBean hosp", "parametertype":"edu.ncsu.csc.itrust.beans.HospitalBean", "parameterclass":258, "classid":395, "classname":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO", "methodid":2921, "methodname":"edu.ncsu.csc.itrust.dao.mysql.HospitalsDAO.updateHospital(edu.ncsu.csc.itrust.beans.HospitalBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates a particular hospitals description. Returns the number of rows affected (should be 1)\r\n *\r\n * @param hosp\r\n * \t\tThe HospitalBean to update.\r\n * @return An int indicating the number of affected rows.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int updateHospital(HospitalBean hosp) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE hospitals SET HospitalName=?,Address=?,City=?,State=?,Zip=?\" + \"WHERE HospitalID = ?\"));\r\n        ps.setString(1, hosp.getHospitalName());\r\n        ps.setString(2, hosp.getHospitalAddress());\r\n        ps.setString(3, hosp.getHospitalCity());\r\n        ps.setString(4, hosp.getHospitalState());\r\n        ps.setString(5, hosp.getHospitalZip());\r\n        ps.setString(6, hosp.getHospitalID());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":373, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":396, "classname":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO", "methodid":2922, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic ICDCodesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":374, "parametername":"DiagnosisBean diag", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "parameterclass":248, "classid":396, "classname":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO", "methodid":2923, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.addICDCode(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds an ICD9CM code. Returns whether or not the change was made.\r\n *\r\n * @param diag\r\n * \t\tThe DiagnosisBean representing the changes.\r\n * @return A boolean indicating success.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean addICDCode(DiagnosisBean diag) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO icdcodes (Code, Description, Chronic) \" + \"VALUES (?,?,?)\"));\r\n        ps.setString(1, diag.getICDCode());\r\n        ps.setString(2, diag.getDescription());\r\n        ps.setString(3, diag.getClassification());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":375, "parametername":"DiagnosisBean diag", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "parameterclass":248, "classid":396, "classname":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO", "methodid":2926, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ICDCodesDAO.updateCode(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "isreturn":0, "sourcecode":"/**\r\n * Changes a the description of a particular code.\r\n *\r\n * @param diag\r\n * \t\tA DiagnosisBean representing the changes.\r\n * @return A boolean indicating the number of updated rows.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int updateCode(DiagnosisBean diag) throws DBException {\r\n    int rows;\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE icdcodes SET Description = ?, Chronic = ?, URL = ? WHERE Code = ?\");\r\n        ps.setString(1, diag.getDescription());\r\n        ps.setString(2, diag.getClassification());\r\n        ps.setString(3, diag.getURL());\r\n        ps.setString(4, diag.getICDCode());\r\n        rows = ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n    return rows;\r\n}"},
 {"id":376, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":397, "classname":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO", "methodid":2927, "methodname":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic LOINCDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    LOINCLoader = new LOINCBeanLoader();\r\n}"},
 {"id":377, "parametername":"LOINCbean hosp", "parametertype":"edu.ncsu.csc.itrust.beans.LOINCbean", "parameterclass":259, "classid":397, "classname":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO", "methodid":2928, "methodname":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.addLOINC(edu.ncsu.csc.itrust.beans.LOINCbean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a LOINC\r\n *\r\n * @param hosp\r\n * \t\tThe LOINCbean representing the new code to be added.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic void addLOINC(LOINCbean hosp) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO loinc (LaboratoryProcedureCode, Component, KindOfProperty, TimeAspect, System, ScaleType, MethodType) \" + \"VALUES (?,?,?,?,?,?,?)\"));\r\n        ps.setString(1, hosp.getLabProcedureCode());\r\n        ps.setString(2, hosp.getComponent());\r\n        ps.setString(3, hosp.getKindOfProperty());\r\n        ps.setString(4, hosp.getTimeAspect());\r\n        ps.setString(5, hosp.getSystem());\r\n        ps.setString(6, hosp.getScaleType());\r\n        ps.setString(7, hosp.getMethodType());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: LOINC already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":378, "parametername":"LOINCbean ov", "parametertype":"edu.ncsu.csc.itrust.beans.LOINCbean", "parameterclass":259, "classid":397, "classname":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO", "methodid":2931, "methodname":"edu.ncsu.csc.itrust.dao.mysql.LOINCDAO.update(edu.ncsu.csc.itrust.beans.LOINCbean)", "isreturn":0, "sourcecode":"/**\r\n * Updates the information in LOINC.\r\n *\r\n * @param ov\r\n * \t\t\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int update(LOINCbean ov) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE loinc SET Component=?, KindOfProperty=?, TimeAspect=?, System=?, ScaleType=?, MethodType=? WHERE LaboratoryProcedureCode=?\");\r\n        ps.setString(1, ov.getComponent());\r\n        ps.setString(2, ov.getKindOfProperty());\r\n        ps.setString(3, ov.getTimeAspect());\r\n        ps.setString(4, ov.getSystem());\r\n        ps.setString(5, ov.getScaleType());\r\n        ps.setString(6, ov.getMethodType());\r\n        ps.setString(7, ov.getLabProcedureCode());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":379, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "methodid":2932, "methodname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic LabProcedureDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    labProcedureLoader = new LabProcedureBeanLoader();\r\n}"},
 {"id":380, "parametername":"LabProcedureBean b", "parametertype":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "parameterclass":260, "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "methodid":2933, "methodname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.addLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "isreturn":0, "sourcecode":"/**\r\n * Inserts a lab procedure into the database.\r\n *\r\n * @param b\r\n * \t\tThe LabProcedureBean to be inserted.\r\n * @return A long containing the ID of the newly inserted lab procedure bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long addLabProcedure(LabProcedureBean b) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if ((b.getPid()) == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO labprocedure \" + (((\"(PatientMID, LaboratoryProcedureCode, Status, Commentary, \" + \"Results, OfficeVisitID, Rights, LabTechID, PriorityCode, \") + \"NumericalResults, LowerBound, UpperBound) \") + \"VALUES (?,?,?,?,?,?,?,?,?,?,?,?)\")));\r\n        ps.setLong(1, b.getPid());\r\n        ps.setString(2, b.getLoinc());\r\n        ps.setString(3, b.getStatus());\r\n        ps.setString(4, b.getCommentary());\r\n        ps.setString(5, b.getResults());\r\n        ps.setLong(6, b.getOvID());\r\n        ps.setString(7, b.getRights());\r\n        ps.setLong(8, b.getLTID());\r\n        ps.setInt(9, b.getPriorityCode());\r\n        ps.setString(10, b.getNumericalResult());\r\n        ps.setString(11, b.getLowerBound());\r\n        ps.setString(12, b.getUpperBound());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":381, "parametername":"LabProcedureBean b", "parametertype":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "parameterclass":260, "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "methodid":2959, "methodname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.updateLabProcedure(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates an existing lab procedure.\r\n *\r\n * @param b\r\n * \t\tThe LabProcedureBean representing the procedure to be updated.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void updateLabProcedure(LabProcedureBean b) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if ((b.getPid()) == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE labprocedure SET \" + (((\" Status = ?, Commentary = ?, Results = ?, UpdatedDate = ?, \" + \" LabTechID = ?, PriorityCode = ? , NumericalResults = ?, \") + \" LowerBound = ?, UpperBound = ? \") + \" WHERE LaboratoryProcedureID=?\")));\r\n        ps.setString(1, b.getStatus());\r\n        ps.setString(2, b.getCommentary());\r\n        ps.setString(3, b.getResults());\r\n        ps.setTimestamp(4, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(5, b.getLTID());\r\n        ps.setInt(6, b.getPriorityCode());\r\n        ps.setString(7, b.getNumericalResult());\r\n        ps.setString(8, b.getLowerBound());\r\n        ps.setString(9, b.getUpperBound());\r\n        ps.setLong(10, b.getProcedureID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":382, "parametername":"LabProcedureBean b", "parametertype":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "parameterclass":260, "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "methodid":2954, "methodname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.markViewed(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "isreturn":0, "sourcecode":"/**\r\n * Marks a lab procedure as viewed by the patient\r\n *\r\n * @param b\r\n * \t\tThe LabProcedureBean representing the procedure to be marked as viewed.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void markViewed(LabProcedureBean b) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if ((b.getPid()) == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET ViewedByPatient = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setBoolean(1, b.isViewedByPatient());\r\n        ps.setLong(2, b.getProcedureID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":383, "parametername":"LabProcedureBean b", "parametertype":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "parameterclass":260, "classid":398, "classname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO", "methodid":2960, "methodname":"edu.ncsu.csc.itrust.dao.mysql.LabProcedureDAO.updateRights(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates the rights of a user on a given lab procedure.\r\n *\r\n * @param b\r\n * \t\tThe LabProcedureBean in question.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void updateRights(LabProcedureBean b) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        if ((b.getPid()) == 0L)\r\n            throw new SQLException(\"PatientMID cannot be null\");\r\n\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE labprocedure SET Rights = ?, UpdatedDate = ? WHERE LaboratoryProcedureID=?\");\r\n        ps.setString(1, b.getRights());\r\n        ps.setTimestamp(2, new Timestamp(System.currentTimeMillis()));\r\n        ps.setLong(3, b.getProcedureID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":384, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "methodid":2961, "methodname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic MessageDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.mbLoader = new MessageBeanLoader();\r\n}"},
 {"id":385, "parametername":"MessageBean mBean", "parametertype":"edu.ncsu.csc.itrust.beans.MessageBean", "parameterclass":262, "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "methodid":2962, "methodname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.addMessage(edu.ncsu.csc.itrust.beans.MessageBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a message to the database.\r\n *\r\n * @param mBean\r\n * \t\tA bean representing the message to be added.\r\n * @throws SQLException\r\n * \t\t\r\n */\r\npublic void addMessage(MessageBean mBean) throws SQLException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    conn = factory.getConnection();\r\n    ps = conn.prepareStatement((\"INSERT INTO message (from_id, to_id, sent_date, message, subject, been_read, parent_msg_id, original_msg_id) \" + \"  VALUES (?, ?, NOW(), ?, ?, ?, ?, ?)\"));\r\n    this.mbLoader.loadParameters(ps, mBean);\r\n    ps.executeUpdate();\r\n    DBUtil.closeConnection(conn, ps);\r\n}"},
 {"id":386, "parametername":"MessageBean mBean", "parametertype":"edu.ncsu.csc.itrust.beans.MessageBean", "parameterclass":262, "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "methodid":2973, "methodname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.updateRead(edu.ncsu.csc.itrust.beans.MessageBean)", "isreturn":0, "sourcecode":"public void updateRead(MessageBean mBean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"UPDATE message SET been_read=1 WHERE message_id=?\");\r\n        ps.setLong(1, mBean.getMessageId());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":387, "parametername":"MessageBean mBean", "parametertype":"edu.ncsu.csc.itrust.beans.MessageBean", "parameterclass":262, "classid":399, "classname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO", "methodid":2964, "methodname":"edu.ncsu.csc.itrust.dao.mysql.MessageDAO.getMessageID(edu.ncsu.csc.itrust.beans.MessageBean)", "isreturn":0, "sourcecode":"public long getMessageID(MessageBean mBean) throws DBException {\r\n    return mBean.getMessageId();\r\n}"},
 {"id":388, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":400, "classname":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO", "methodid":2974, "methodname":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic NDCodesDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":389, "parametername":"MedicationBean med", "parametertype":"edu.ncsu.csc.itrust.beans.MedicationBean", "parameterclass":261, "classid":400, "classname":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO", "methodid":2975, "methodname":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.addNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a new ND code, returns whether or not the change was made. If the code already exists, an\r\n * iTrustException is thrown.\r\n *\r\n * @param med\r\n * \t\tThe medication bean to be added.\r\n * @return A boolean indicating success or failure.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean addNDCode(MedicationBean med) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO ndcodes (Code, Description) \" + \"VALUES (?,?)\"));\r\n        ps.setString(1, med.getNDCode());\r\n        ps.setString(2, med.getDescription());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Code already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":390, "parametername":"MedicationBean med", "parametertype":"edu.ncsu.csc.itrust.beans.MedicationBean", "parameterclass":261, "classid":400, "classname":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO", "methodid":2979, "methodname":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.updateCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates a particular codes description\r\n *\r\n * @param med\r\n * \t\tA bean representing the particular medication to be updated.\r\n * @return An int representing the number of updated rows.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int updateCode(MedicationBean med) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE ndcodes SET Description = ? \" + \"WHERE Code = ?\"));\r\n        ps.setString(1, med.getDescription());\r\n        ps.setString(2, med.getNDCode());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":391, "parametername":"MedicationBean med", "parametertype":"edu.ncsu.csc.itrust.beans.MedicationBean", "parameterclass":261, "classid":400, "classname":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO", "methodid":2978, "methodname":"edu.ncsu.csc.itrust.dao.mysql.NDCodesDAO.removeNDCode(edu.ncsu.csc.itrust.beans.MedicationBean)", "isreturn":0, "sourcecode":"/**\r\n * Removes a ND code, returns whether or not the change was made.\r\n *\r\n * @param med\r\n * \t\tThe medication bean to be removed.\r\n * @return A boolean indicating success or failure.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean removeNDCode(MedicationBean med) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"DELETE FROM ndcodes WHERE Code=?\");\r\n        ps.setString(1, med.getNDCode());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":392, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":401, "classname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO", "methodid":2980, "methodname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/* private PrescriptionBeanLoader prescriptionLoader = new PrescriptionBeanLoader();\nprivate PrescriptionReportBeanLoader prescriptionReportBeanLoader = new PrescriptionReportBeanLoader();\nprivate ProcedureBeanLoader procedureBeanLoader = new ProcedureBeanLoader(true);\n */\r\n/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic OfficeVisitDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":393, "parametername":"OfficeVisitBean ov", "parametertype":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "parameterclass":263, "classid":401, "classname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO", "methodid":2981, "methodname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.add(edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds an visit and return its ID\r\n *\r\n * @param ov\r\n * \t\tThe OfficeVisitBean to be added.\r\n * @return A long indicating the unique ID for the office visit.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long add(OfficeVisitBean ov) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO officevisits (VisitDate, Notes, HCPID, PatientID, HospitalID, IsERIncident) VALUES (?,?,?,?,?,?)\");\r\n        setValues(ps, ov);\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":394, "parametername":"OfficeVisitBean ov", "parametertype":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "parameterclass":263, "classid":401, "classname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO", "methodid":2989, "methodname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.setValues(java.sql.PreparedStatement,edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "isreturn":0, "sourcecode":"private void setValues(PreparedStatement ps, OfficeVisitBean ov) throws SQLException {\r\n    ps.setDate(1, new Date(ov.getVisitDate().getTime()));\r\n    ps.setString(2, ov.getNotes());\r\n    ps.setLong(3, ov.getHcpID());\r\n    ps.setLong(4, ov.getPatientID());\r\n    ps.setString(5, ov.getHospitalID());\r\n    ps.setBoolean(6, ov.isERIncident());\r\n}"},
 {"id":395, "parametername":"OfficeVisitBean ov", "parametertype":"edu.ncsu.csc.itrust.beans.OfficeVisitBean", "parameterclass":263, "classid":401, "classname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO", "methodid":2990, "methodname":"edu.ncsu.csc.itrust.dao.mysql.OfficeVisitDAO.update(edu.ncsu.csc.itrust.beans.OfficeVisitBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates the information in a particular office visit.\r\n *\r\n * @param ov\r\n * \t\tThe Office Visit bean representing the changes.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void update(OfficeVisitBean ov) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE officevisits SET VisitDate=?, Notes=?, HCPID=?, \" + \"PatientID=?, HospitalID=? WHERE ID=?\"));\r\n        setValues(ps, ov);\r\n        ps.setLong(6, ov.getID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":396, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "methodid":2991, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic PatientDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.patientLoader = new PatientLoader();\r\n    this.personnelLoader = new PersonnelLoader();\r\n    this.diagnosisLoader = new DiagnosisBeanLoader(true);\r\n    this.prescriptionLoader = new PrescriptionBeanLoader();\r\n    this.procedureLoader = new ProcedureBeanLoader(true);\r\n}"},
 {"id":397, "parametername":"PatientBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":402, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO", "methodid":2998, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PatientDAO.editPatient(edu.ncsu.csc.itrust.beans.PatientBean,long)", "isreturn":0, "sourcecode":"/**\r\n * Updates a patients information for the given MID\r\n *\r\n * @param p\r\n * \t\tThe patient bean representing the new information for the patient.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void editPatient(PatientBean p, long hcpid) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE patients SET firstName=?,lastName=?,email=?,\" + ((((((\"address1=?,address2=?,city=?,state=?,zip=?,phone=?,\" + \"eName=?,ePhone=?,iCName=?,iCAddress1=?,iCAddress2=?,iCCity=?,\") + \"ICState=?,iCZip=?,iCPhone=?,iCID=?,DateOfBirth=?,\") + \"DateOfDeath=?,CauseOfDeath=?,MotherMID=?,FatherMID=?,\") + \"BloodType=?,Ethnicity=?,Gender=?,TopicalNotes=?, CreditCardType=?, CreditCardNumber=?, \") + \"DirectionsToHome=?, Religion=?, Language=?, SpiritualPractices=?, \") + \"AlternateName=?, DateOfDeactivation=? WHERE MID=?\")));\r\n        patientLoader.loadParameters(ps, p);\r\n        ps.setLong(37, p.getMID());\r\n        ps.executeUpdate();\r\n        addHistory(p.getMID(), hcpid);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":398, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":403, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO", "methodid":3020, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"public PatientInstructionsDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":399, "parametername":"PatientInstructionsBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "parameterclass":268, "classid":403, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO", "methodid":3021, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.add(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "isreturn":0, "sourcecode":"/**\r\n * Add a new patient instructions record.\r\n *\r\n * @param bean\r\n * \t\tThe instructions to add.\r\n * @return The id of the newly added instructions record.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long add(PatientInstructionsBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"INSERT INTO patientspecificinstructions \" + \"(VisitID,Modified,Name,URL,Comment) VALUES (?,?,?,?,?)\";\r\n        ps = conn.prepareStatement(statement);\r\n        ps = loader.loadParameters(ps, bean);\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":400, "parametername":"PatientInstructionsBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "parameterclass":268, "classid":403, "classname":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO", "methodid":3022, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PatientInstructionsDAO.edit(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "isreturn":0, "sourcecode":"/**\r\n * Edit an existing patient instructions record in the database.\r\n *\r\n * @param bean\r\n * \t\tThe instruction to modify.\r\n * @return The id of the modified instruction.  This will be that same as the id given in the bean itself.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long edit(PatientInstructionsBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"UPDATE patientspecificinstructions \" + (\"SET VisitID=?, Modified=?, Name=?, URL=?, Comment=? \" + \"WHERE ID=?\");\r\n        ps = conn.prepareStatement(statement);\r\n        loader.loadParameters(ps, bean);\r\n        ps.setLong(6, bean.getId());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":401, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "methodid":3026, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic PersonnelDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    personnelLoader = new PersonnelLoader();\r\n    hospitalBeanLoader = new HospitalBeanLoader();\r\n}"},
 {"id":402, "parametername":"Role role", "parametertype":"edu.ncsu.csc.itrust.enums.Role", "parameterclass":486, "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "methodid":3034, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getNextID(edu.ncsu.csc.itrust.enums.Role)", "isreturn":0, "sourcecode":"public long getNextID(Role role) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    // long newID = 9000000000L;\r\n    long minID = (role.getMidFirstDigit()) * 1000000000L;\r\n    minID = (minID == 0) ? 1 : minID;// Do not use 0 as an ID.\r\n\r\n    long maxID = minID + 999999998L;\r\n    long nextID = minID;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT MAX(users.mid) FROM users WHERE mid BETWEEN ? AND ?\");\r\n        ps.setLong(1, minID);\r\n        ps.setLong(2, maxID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next()) {\r\n            nextID = (rs.getLong(1)) + 1;\r\n            if (nextID < minID) {\r\n                nextID = minID;\r\n            }\r\n        }\r\n        return nextID;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":403, "parametername":"Role role", "parametertype":"edu.ncsu.csc.itrust.enums.Role", "parameterclass":486, "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "methodid":3027, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.addEmptyPersonnel(edu.ncsu.csc.itrust.enums.Role)", "isreturn":0, "sourcecode":"/**\r\n * Adds an empty personnel, and returns the MID.\r\n *\r\n * @return A long indicating the new MID.\r\n * @param role\r\n * \t\tA {@link Role} enum indicating the personnels specific role.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic long addEmptyPersonnel(Role role) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    long nextID = getNextID(role);\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO personnel(MID, Role) VALUES(?,?)\");\r\n        ps.setString(1, (\"\" + nextID));\r\n        ps.setString(2, role.name());\r\n        ps.executeUpdate();\r\n        return nextID;\r\n    } catch (SQLException e) {\r\n        System.out.println(e.getMessage());\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":404, "parametername":"PersonnelBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parameterclass":270, "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "methodid":3029, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.editPersonnel(edu.ncsu.csc.itrust.beans.PersonnelBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates the demographics for a personnel.\r\n *\r\n * @param p\r\n * \t\tThe personnel bean with the updated information.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void editPersonnel(PersonnelBean p) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE personnel SET AMID=?,firstName=?,lastName=?,\" + (\"phone=?, address1=?,address2=?,city=?, state=?, zip=?, specialty=?, email=?\" + \" WHERE MID=?\")));\r\n        personnelLoader.loadParameters(ps, p);\r\n        ps.setLong(12, p.getMID());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":405, "parametername":"PrescriptionBean prescription", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "methodid":3038, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":0, "sourcecode":"/**\r\n * Given a prescription that has been given, this method returns all the information for the\r\n * doctor who authorized that prescription.\r\n *\r\n * @param prescription\r\n * \t\tThe PrescriptionBean describing the prescription in question.\r\n * @return The PersonnelBean describing the doctor who authorized it.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE MID IN (SELECT HCPID FROM officevisits WHERE ID=?)\");\r\n        ps.setLong(1, prescription.getVisitID());\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs).get(0);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":406, "parametername":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parametertype":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parameterclass":270, "classid":404, "classname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO", "methodid":3038, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PersonnelDAO.getPrescribingDoctor(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":1, "sourcecode":"/**\r\n * Given a prescription that has been given, this method returns all the information for the\r\n * doctor who authorized that prescription.\r\n *\r\n * @param prescription\r\n * \t\tThe PrescriptionBean describing the prescription in question.\r\n * @return The PersonnelBean describing the doctor who authorized it.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic PersonnelBean getPrescribingDoctor(PrescriptionBean prescription) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM personnel WHERE MID IN (SELECT HCPID FROM officevisits WHERE ID=?)\");\r\n        ps.setLong(1, prescription.getVisitID());\r\n        ResultSet rs = ps.executeQuery();\r\n        return personnelLoader.loadList(rs).get(0);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":407, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":405, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO", "methodid":3041, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"public PrescriptionOverrideDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":408, "parametername":"OverrideReasonBean pres", "parametertype":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "parameterclass":265, "classid":405, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO", "methodid":3042, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionOverrideDAO.add(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a prescription bean to the database.\r\n *\r\n * @param pres\r\n * \t\tThe prescription bean to be added.\r\n * @return The unique ID of the newly added bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long add(OverrideReasonBean pres) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovreactionoverride (OVMedicationID,OverrideCode) VALUES (?,?)\");\r\n        ps.setLong(1, pres.getPresID());\r\n        ps.setString(2, pres.getORCode());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":409, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":406, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO", "methodid":3045, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionReportDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"public PrescriptionReportDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":410, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":407, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO", "methodid":3050, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"public PrescriptionsDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":411, "parametername":"PrescriptionBean pres", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":407, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO", "methodid":3051, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.add(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a prescription bean to the database.\r\n *\r\n * @param pres\r\n * \t\tThe prescription bean to be added.\r\n * @return The unique ID of the newly added bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long add(PrescriptionBean pres) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovmedication (VisitID,NDCode,StartDate,EndDate,Dosage,Instructions,OverrideOther) VALUES (?,?,?,?,?,?,?)\");\r\n        loader.loadParameters(ps, pres);\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":412, "parametername":"PrescriptionBean pres", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionBean", "parameterclass":271, "classid":407, "classname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO", "methodid":3052, "methodname":"edu.ncsu.csc.itrust.dao.mysql.PrescriptionsDAO.edit(edu.ncsu.csc.itrust.beans.PrescriptionBean)", "isreturn":0, "sourcecode":"/**\r\n * Edits an existing prescription bean.\r\n *\r\n * @param pres\r\n * \t\tThe newly updated prescription bean.\r\n * @return A long indicating the ID of the newly updated prescription bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long edit(PrescriptionBean pres) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        // ps = conn.prepareStatement(\"UPDATE OVMedication (VisitID,NDCode,StartDate,EndDate,Dosage,Instructions) VALUES (?,?,?,?,?,?)\");\r\n        String statement = \"UPDATE ovmedication \" + (\"SET VisitID=?, NDCode=?, StartDate=?, EndDate=?, Dosage=?, Instructions=?, OverrideOther=? \" + \"WHERE ID=?\");\r\n        ps = conn.prepareStatement(statement);\r\n        loader.loadParameters(ps, pres);\r\n        ps.setLong(8, pres.getId());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":413, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":408, "classname":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO", "methodid":3055, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param factory\r\n * \t\t\r\n */\r\npublic ProceduresDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":414, "parametername":"ProcedureBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ProcedureBean", "parameterclass":273, "classid":408, "classname":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO", "methodid":3056, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.add(edu.ncsu.csc.itrust.beans.ProcedureBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a diagnosis bean to the database.\r\n *\r\n * @param pres\r\n * \t\tThe prescription bean to be added.\r\n * @return The unique ID of the newly added bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long add(ProcedureBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"INSERT INTO ovprocedure \" + \"(VisitID,CPTCode) VALUES (?,?)\";\r\n        ps = conn.prepareStatement(statement);\r\n        ps.setLong(1, bean.getVisitID());\r\n        ps.setString(2, bean.getCPTCode());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":415, "parametername":"ProcedureBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ProcedureBean", "parameterclass":273, "classid":408, "classname":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO", "methodid":3057, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ProceduresDAO.edit(edu.ncsu.csc.itrust.beans.ProcedureBean)", "isreturn":0, "sourcecode":"/**\r\n * Edits an existing procedure bean.\r\n *\r\n * @param pres\r\n * \t\tThe newly updated prescription bean.\r\n * @return A long indicating the ID of the newly updated prescription bean.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long edit(ProcedureBean bean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        String statement = \"UPDATE ovprocedure \" + (\"SET VisitID=?, CPTCode=?\" + \"WHERE ID=?\");\r\n        ps = conn.prepareStatement(statement);\r\n        ps.setLong(1, bean.getVisitID());\r\n        ps.setString(2, bean.getCPTCode());\r\n        ps.setLong(3, bean.getOvProcedureID());\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":416, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "methodid":3062, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic ReferralDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    referralLoader = new ReferralBeanLoader();\r\n    verboseLoader = new VerboseReferralBeanLoader();\r\n}"},
 {"id":417, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":411, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery", "methodid":3084, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Create a new ReferralListQuery object.\r\n *\r\n * @param factory\r\n * \t\t\r\n * @param userid\r\n * \t\t\r\n */\r\npublic ReferralListQuery(DAOFactory factory, long userid) {\r\n    this.factory = factory;\r\n    this.userid = userid;\r\n    // initialize lookup map\r\n    sortColumns = new HashMap<String, String>();\r\n    sortColumns.put(\"patientName\", \"CONCAT(patients.lastName,  , patients.firstName)\");\r\n    sortColumns.put(\"receiverName\", \"CONCAT(preceiver.lastName, preceiver.firstName)\");\r\n    sortColumns.put(\"senderName\", \"CONCAT(psender.lastName, psender.firstName)\");\r\n    sortColumns.put(\"timestamp\", \"referrals.timestamp\");\r\n    sortColumns.put(\"priority\", \"referrals.PriorityCode\");\r\n}"},
 {"id":418, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":412, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$SenderReferralListQuery", "methodid":3090, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$SenderReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public SenderReferralListQuery(DAOFactory factory, long userid) {\r\n    super(factory, userid);\r\n}"},
 {"id":419, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":410, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReceiverReferralListQuery", "methodid":3082, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReceiverReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public ReceiverReferralListQuery(DAOFactory factory, long userid) {\r\n    super(factory, userid);\r\n}"},
 {"id":420, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":409, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$PatientReferralListQuery", "methodid":3080, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$PatientReferralListQuery.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public PatientReferralListQuery(DAOFactory factory, long userid) {\r\n    super(factory, userid);\r\n}"},
 {"id":421, "parametername":"ReferralBean r", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "methodid":3065, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.editReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates a given referral in the database.\r\n *\r\n * @param r\r\n * \t\tThe referral to update.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void editReferral(ReferralBean r) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE referrals SET PatientID=?,SenderID=?,ReceiverID=?,\" + \"ReferralDetails=?,OVID=?,viewed_by_patient=?,viewed_by_HCP=?,PriorityCode=?  WHERE ID=?\"));\r\n        referralLoader.loadParameters(ps, r);\r\n        ps.setLong(9, r.getId());\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":422, "parametername":"ReferralBean r", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":413, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO", "methodid":3064, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO.addReferral(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a given referral to the database.\r\n *\r\n * @param r\r\n * \t\tThe referral to add.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic long addReferral(ReferralBean r) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO referrals (PatientID,SenderID,ReceiverID,\" + (\"ReferralDetails,OVID,viewed_by_patient,viewed_by_HCP,PriorityCode,TimeStamp)  \" + \"VALUES (?,?,?,?,?,?,?,?,NOW())\")));\r\n        ps = referralLoader.loadParameters(ps, r);\r\n        ps.executeUpdate();\r\n        return DBUtil.getLastInsert(conn);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":423, "parametername":"SortDirection dir", "parametertype":"edu.ncsu.csc.itrust.enums.SortDirection", "parameterclass":487, "classid":411, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery", "methodid":3086, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.doquery(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)", "isreturn":0, "sourcecode":"/**\r\n * Perform the query.\r\n *\r\n * @param sortField\r\n * \t\tThe pseudo-field name in which to sort.\r\n * @param dir\r\n * \t\tThe direction of the desired sort (ascending or\r\n * \t\tdescending)\r\n * @return A list of VerboseReferralBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\nprotected List<VerboseReferralBean> doquery(String sortField, SortDirection dir) throws DBException {\r\n    String stmt = \"SELECT \" + (((((((((((((((\"CONCAT(psender.firstName, ,psender.lastName) AS senderName, \" + \"CONCAT(preceiver.firstName, ,preceiver.lastName) AS receiverName, \") + \"referrals.*, \") + \"officevisits.visitDate, \") + \"CONCAT(patients.firstName, ,patients.lastName) AS patientName \") + \"FROM \") + \"referrals, \") + \"personnel AS psender, \") + \"personnel AS preceiver, \") + \"patients, \") + \"officevisits \") + \"WHERE \") + \"referrals.SenderID=psender.mid \") + \"AND referrals.ReceiverID=preceiver.mid \") + \"AND referrals.PatientID=patients.mid \") + \"AND referrals.ovid=officevisits.id \");\r\n    stmt += String.format(\"AND %s = ? \", getUserField());\r\n    stmt += buildSort(sortField, dir);\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(stmt);\r\n        ps.setLong(1, getUserId());\r\n        ResultSet rs = ps.executeQuery();\r\n        return verboseLoader.loadList(rs);\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":424, "parametername":"SortDirection dir", "parametertype":"edu.ncsu.csc.itrust.enums.SortDirection", "parameterclass":487, "classid":411, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery", "methodid":3089, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.query(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)", "isreturn":0, "sourcecode":"/**\r\n * Perform the query.\r\n *\r\n * @param sortField\r\n * \t\tThe pseudo-field name in which to sort.\r\n * @param dir\r\n * \t\tThe direction of the desired sort (ascending or\r\n * \t\tdescending)\r\n * @return A list of VerboseReferralBeans.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic List<VerboseReferralBean> query(String sortField, SortDirection dir) throws DBException {\r\n    List<VerboseReferralBean> beans = doquery(sortField, dir);\r\n    return beans;\r\n}"},
 {"id":425, "parametername":"SortDirection dir", "parametertype":"edu.ncsu.csc.itrust.enums.SortDirection", "parameterclass":487, "classid":411, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery", "methodid":3085, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ReferralDAO$ReferralListQuery.buildSort(java.lang.String,edu.ncsu.csc.itrust.enums.SortDirection)", "isreturn":0, "sourcecode":"/**\r\n * Builds the sort portion of the SQL query (i.e. the ORDER BY... portion).\r\n *\r\n * @param sortField\r\n * \t\tThe pseudo-field to sort on.\r\n * @param dir\r\n * \t\tThe sort direction.\r\n * @return A string which can be a part of an SQL query.\r\n */\r\nprotected String buildSort(String sortField, SortDirection dir) {\r\n    String sortexp = sortColumns.get(sortField);\r\n    return String.format(\" ORDER BY %s %s \", sortexp, dir);\r\n}"},
 {"id":426, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":414, "classname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO", "methodid":3092, "methodname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic RemoteMonitoringDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":427, "parametername":"RemoteMonitoringDataBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "parameterclass":275, "classid":414, "classname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO", "methodid":3101, "methodname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.storePatientData(long,edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean,java.lang.String,long)", "isreturn":0, "sourcecode":"/**\r\n * Store pedometer reading and height/weight data for a given patient in the RemoteMonitoringData table\r\n *\r\n * @param patientMID\r\n * \t\tThe MID of the patient\r\n * @param height\r\n * \t\tThe height of the patient\r\n * @param weight\r\n * \t\tThe weight of the patient\r\n * @param pedometerReading\r\n * \t\tThe pedometer reading of the patient\r\n * @param reporterRole\r\n * \t\tThe role of the person that reported these monitoring stats\r\n * @param reporterMID\r\n * \t\tThe MID of the person that reported these monitoring stats\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void storePatientData(long patientMID, RemoteMonitoringDataBean bean, String reporterRole, long reporterMID) throws DBException, iTrustException {\r\n    float height = bean.getHeight();\r\n    float weight = bean.getWeight();\r\n    int pedometer = bean.getPedometerReading();\r\n    int sbp = bean.getSystolicBloodPressure();\r\n    int dbp = bean.getDiastolicBloodPressure();\r\n    int glucose = bean.getGlucoseLevel();\r\n    if (height == 0)\r\n        height = -1;\r\n\r\n    if (weight == 0)\r\n        weight = -1;\r\n\r\n    if (pedometer == 0)\r\n        pedometer = -1;\r\n\r\n    if (sbp == 0)\r\n        sbp = -1;\r\n\r\n    if (dbp == 0)\r\n        dbp = -1;\r\n\r\n    if (glucose == 0)\r\n        glucose = -1;\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"height\")) >= 1) && (height != (-1)))\r\n        throw new iTrustException(\"Patient height entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"weight\")) >= 1) && (weight != (-1)))\r\n        throw new iTrustException(\"Patient weight entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"pedometerReading\")) >= 1) && (pedometer != (-1)))\r\n        throw new iTrustException(\"Patient pedometer reading entries for today cannot exceed 1.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"glucoseLevel\")) >= 10) && (glucose != (-1)))\r\n        throw new iTrustException(\"Patient glucose level entries for today cannot exceed 10.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"systolicBloodPressure\")) >= 10) && (sbp != (-1)))\r\n        throw new iTrustException(\"Patient systolic blood pressure entries for today cannot exceed 10.\");\r\n\r\n    if (((getNumberOfDailyEntries(patientMID, \"diastolicBloodPressure\")) >= 10) && (dbp != (-1)))\r\n        throw new iTrustException(\"Patient diastolic blood pressure entries for today cannot exceed 10.\");\r\n\r\n    if (reporterRole.equals(\"patient representative\"))\r\n        validatePR(reporterMID, patientMID);\r\n\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO remotemonitoringdata(PatientID, height, weight, \" + \"pedometerReading, systolicBloodPressure, diastolicBloodPressure, glucoseLevel, ReporterRole, ReporterID) VALUES(?,?,?,?,?,?,?,?,?)\"));\r\n        ps.setLong(1, patientMID);\r\n        ps.setFloat(2, height);\r\n        ps.setFloat(3, weight);\r\n        ps.setInt(4, pedometer);\r\n        ps.setInt(5, sbp);\r\n        ps.setInt(6, dbp);\r\n        ps.setInt(7, glucose);\r\n        ps.setString(8, reporterRole);\r\n        ps.setLong(9, reporterMID);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":428, "parametername":"TelemedicineBean tBean", "parametertype":"edu.ncsu.csc.itrust.beans.TelemedicineBean", "parameterclass":280, "classid":414, "classname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO", "methodid":3093, "methodname":"edu.ncsu.csc.itrust.dao.mysql.RemoteMonitoringDAO.addPatientToList(long,long,edu.ncsu.csc.itrust.beans.TelemedicineBean)", "isreturn":0, "sourcecode":"/**\r\n * Add a patient to the list of HCPs monitoring lists of Patients\r\n *\r\n * @param patientMID\r\n * \t\tThe MID of the patient\r\n * @param HCPMID\r\n * \t\tThe MID of the HCP\r\n * @param tBean\r\n * \t\tThe TelemedicineBean indicating what telemedicine data the patient is allowed to enter.\r\n * @return true if added successfully, false if already in list\r\n */\r\npublic boolean addPatientToList(long patientMID, long HCPMID, TelemedicineBean tBean) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"SELECT * FROM remotemonitoringlists WHERE PatientMID = ? AND HCPMID = ?\");\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        ResultSet rs = ps.executeQuery();\r\n        if (rs.next())\r\n            return false;\r\n\r\n        String permissionPS = \"SystolicBloodPressure, DiastolicBloodPressure, GlucoseLevel, Height, Weight, PedometerReading\";\r\n        ps = conn.prepareStatement(((\"INSERT INTO remotemonitoringlists(PatientMID, HCPMID, \" + permissionPS) + \") VALUES(?,?,?,?,?,?,?,?)\"));\r\n        ps.setLong(1, patientMID);\r\n        ps.setLong(2, HCPMID);\r\n        ps.setBoolean(3, tBean.isSystolicBloodPressureAllowed());\r\n        ps.setBoolean(4, tBean.isDiastolicBloodPressureAllowed());\r\n        ps.setBoolean(5, tBean.isGlucoseLevelAllowed());\r\n        ps.setBoolean(6, tBean.isHeightAllowed());\r\n        ps.setBoolean(7, tBean.isWeightAllowed());\r\n        ps.setBoolean(8, tBean.isPedometerReadingAllowed());\r\n        ps.executeUpdate();\r\n        return true;\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":429, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":415, "classname":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO", "methodid":3103, "methodname":"edu.ncsu.csc.itrust.dao.mysql.ReportRequestDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic ReportRequestDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    loader = new ReportRequestBeanLoader();\r\n}"},
 {"id":430, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":416, "classname":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO", "methodid":3109, "methodname":"edu.ncsu.csc.itrust.dao.mysql.RiskDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic RiskDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":431, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":417, "classname":"edu.ncsu.csc.itrust.dao.mysql.SurveyDAO", "methodid":3117, "methodname":"edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic SurveyDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.surveyLoader = new SurveyLoader();\r\n}"},
 {"id":432, "parametername":"SurveyBean surveyBean", "parametertype":"edu.ncsu.csc.itrust.beans.SurveyBean", "parameterclass":278, "classid":417, "classname":"edu.ncsu.csc.itrust.dao.mysql.SurveyDAO", "methodid":3118, "methodname":"edu.ncsu.csc.itrust.dao.mysql.SurveyDAO.addCompletedSurvey(edu.ncsu.csc.itrust.beans.SurveyBean,java.util.Date)", "isreturn":0, "sourcecode":"/**\r\n * Insert survey data into database.\r\n *\r\n * @param surveyBean\r\n * \t\tThe Bean representing the users responses which will be inserted.\r\n * @param date\r\n * \t\tThe date the survey was completed.\r\n */\r\npublic void addCompletedSurvey(SurveyBean surveyBean, Date date) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement(\"INSERT INTO ovsurvey (VisitID, SurveyDate) VALUES (?,?)\");\r\n        ps.setLong(1, surveyBean.getVisitID());\r\n        ps.setTimestamp(2, new Timestamp(date.getTime()));\r\n        ps.executeUpdate();\r\n        if ((surveyBean.getWaitingRoomMinutes()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set WaitingRoomMinutes = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getWaitingRoomMinutes());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if ((surveyBean.getExamRoomMinutes()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set ExamRoomMinutes = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getExamRoomMinutes());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if ((surveyBean.getVisitSatisfaction()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set VisitSatisfaction = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getVisitSatisfaction());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n        if ((surveyBean.getTreatmentSatisfaction()) > 0) {\r\n            ps = conn.prepareStatement(\"update ovsurvey set TreatmentSatisfaction = ? where VisitID = ?\");\r\n            ps.setFloat(1, surveyBean.getTreatmentSatisfaction());\r\n            ps.setLong(2, surveyBean.getVisitID());\r\n            ps.executeUpdate();\r\n        }\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":433, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":418, "classname":"edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO", "methodid":3121, "methodname":"edu.ncsu.csc.itrust.dao.mysql.SurveyResultDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic SurveyResultDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n    this.loader = new SurveyResultBeanLoader();\r\n}"},
 {"id":434, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":419, "classname":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO", "methodid":3124, "methodname":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic TransactionDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":435, "parametername":"TransactionType type", "parametertype":"edu.ncsu.csc.itrust.enums.TransactionType", "parameterclass":490, "classid":419, "classname":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO", "methodid":3131, "methodname":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.logTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long)", "isreturn":0, "sourcecode":"/**\r\n * Log a transaction, just giving it the person who is logged in and the type\r\n *\r\n * @param type\r\n * \t\tThe {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is logged in.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void logTransaction(TransactionType type, long loggedInMID) throws DBException {\r\n    logTransaction(type, loggedInMID, 0L, \"\");\r\n}"},
 {"id":436, "parametername":"TransactionType type", "parametertype":"edu.ncsu.csc.itrust.enums.TransactionType", "parameterclass":490, "classid":419, "classname":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO", "methodid":3132, "methodname":"edu.ncsu.csc.itrust.dao.mysql.TransactionDAO.logTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "isreturn":0, "sourcecode":"/**\r\n * Log a transaction, with all of the info. The meaning of secondaryMID and addedInfo changes depending on\r\n * the transaction type.\r\n *\r\n * @param type\r\n * \t\tThe {@link TransactionType} enum representing the type this transaction is.\r\n * @param loggedInMID\r\n * \t\tThe MID of the user who is logged in.\r\n * @param secondaryMID\r\n * \t\tTypically, the MID of the user who is being acted upon.\r\n * @param addedInfo\r\n * \t\tA note about a subtransaction, or specifics of this transaction (for posterity).\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic void logTransaction(TransactionType type, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO transactionlog(loggedInMID, secondaryMID, \" + \"transactionCode, addedInfo) VALUES(?,?,?,?)\"));\r\n        ps.setLong(1, loggedInMID);\r\n        ps.setLong(2, secondaryMID);\r\n        ps.setInt(3, type.getCode());\r\n        ps.setString(4, addedInfo);\r\n        ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":437, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":420, "classname":"edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO", "methodid":3133, "methodname":"edu.ncsu.csc.itrust.dao.mysql.VisitRemindersDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic VisitRemindersDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":438, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "methodid":3137, "methodname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The typical constructor.\r\n *\r\n * @param factory\r\n * \t\tThe {@link DAOFactory} associated with this DAO, which is used for obtaining SQL connections, etc.\r\n */\r\npublic WardDAO(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":439, "parametername":"WardBean ward", "parametertype":"edu.ncsu.csc.itrust.beans.WardBean", "parameterclass":284, "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "methodid":3138, "methodname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.addWard(edu.ncsu.csc.itrust.beans.WardBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a Ward\r\n *\r\n * @param ward\r\n * \t\tThe WardBean object to insert.\r\n * @return A boolean indicating whether the insertion was successful.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean addWard(WardBean ward) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO Wards (RequiredSpecialty, InHospital) \" + \"VALUES (?,?)\"));\r\n        ps.setString(1, ward.getRequiredSpecialty());\r\n        ps.setLong(2, ward.getInHospital());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: Ward already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":440, "parametername":"WardBean ward", "parametertype":"edu.ncsu.csc.itrust.beans.WardBean", "parameterclass":284, "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "methodid":3154, "methodname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.updateWard(edu.ncsu.csc.itrust.beans.WardBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates a particular wards information. Returns the number of rows affected (should be 1)\r\n *\r\n * @param ward\r\n * \t\tThe WardBean to update.\r\n * @return An int indicating the number of affected rows.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int updateWard(WardBean ward) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE wards SET RequiredSpecialty=?, InHospital=? \" + \"WHERE WardID = ?\"));\r\n        ps.setString(1, ward.getRequiredSpecialty());\r\n        ps.setLong(2, ward.getInHospital());\r\n        ps.setLong(3, ward.getWardID());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":441, "parametername":"WardRoomBean wardRoom", "parametertype":"edu.ncsu.csc.itrust.beans.WardRoomBean", "parameterclass":285, "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "methodid":3139, "methodname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.addWardRoom(edu.ncsu.csc.itrust.beans.WardRoomBean)", "isreturn":0, "sourcecode":"/**\r\n * Adds a WardRoom\r\n *\r\n * @param wardRoom\r\n * \t\tThe WardRoomBean object to insert.\r\n * @return A boolean indicating whether the insertion was successful.\r\n * @throws DBException\r\n * \t\t\r\n * @throws iTrustException\r\n * \t\t\r\n */\r\npublic boolean addWardRoom(WardRoomBean wardRoom) throws DBException, iTrustException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"INSERT INTO WardRooms (InWard, RoomName, Status) \" + \"VALUES (?,?,?)\"));\r\n        ps.setLong(1, wardRoom.getInWard());\r\n        ps.setString(2, wardRoom.getRoomName());\r\n        ps.setString(3, wardRoom.getStatus());\r\n        return 1 == (ps.executeUpdate());\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        if (1062 == (e.getErrorCode()))\r\n            throw new iTrustException(\"Error: WardRoom already exists.\");\r\n\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":442, "parametername":"WardRoomBean wardRoom", "parametertype":"edu.ncsu.csc.itrust.beans.WardRoomBean", "parameterclass":285, "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "methodid":3155, "methodname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.updateWardRoom(edu.ncsu.csc.itrust.beans.WardRoomBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates a particular wardrooms information. Returns the number of rows affected (should be 1)\r\n *\r\n * @param wardRoom\r\n * \t\tThe WardRoomBean to update.\r\n * @return An int indicating the number of affected rows.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int updateWardRoom(WardRoomBean wardRoom) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE wardrooms SET InWard=?, RoomName=?, Status=? \" + \"WHERE RoomID = ?\"));\r\n        ps.setLong(1, wardRoom.getInWard());\r\n        ps.setString(2, wardRoom.getRoomName());\r\n        ps.setString(3, wardRoom.getStatus());\r\n        ps.setLong(4, wardRoom.getRoomID());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":443, "parametername":"WardRoomBean wardRoom", "parametertype":"edu.ncsu.csc.itrust.beans.WardRoomBean", "parameterclass":285, "classid":421, "classname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO", "methodid":3156, "methodname":"edu.ncsu.csc.itrust.dao.mysql.WardDAO.updateWardRoomOccupant(edu.ncsu.csc.itrust.beans.WardRoomBean)", "isreturn":0, "sourcecode":"/**\r\n * Updates a particular wardrooms occupiedBy information. Returns the number of rows affected (should be 1)\r\n *\r\n * @param wardRoom\r\n * \t\tThe WardRoomBean to update.\r\n * @return An int indicating the number of affected rows.\r\n * @throws DBException\r\n * \t\t\r\n */\r\npublic int updateWardRoomOccupant(WardRoomBean wardRoom) throws DBException {\r\n    Connection conn = null;\r\n    PreparedStatement ps = null;\r\n    try {\r\n        conn = factory.getConnection();\r\n        ps = conn.prepareStatement((\"UPDATE wardRooms SET OccupiedBy=? \" + \"WHERE RoomID = ?\"));\r\n        if ((wardRoom.getOccupiedBy()) == null) {\r\n            ps.setNull(1, Types.BIGINT);\r\n        } else {\r\n            ps.setLong(1, wardRoom.getOccupiedBy());\r\n        }\r\n        ps.setLong(2, wardRoom.getRoomID());\r\n        return ps.executeUpdate();\r\n    } catch (SQLException e) {\r\n        e.printStackTrace();\r\n        throw new DBException(e);\r\n    } finally {\r\n        DBUtil.closeConnection(conn, ps);\r\n    }\r\n}"},
 {"id":444, "parametername":"PrescriptionReportBean prescription", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean", "parameterclass":272, "classid":425, "classname":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest", "methodid":3174, "methodname":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.assertPrescription(edu.ncsu.csc.itrust.beans.PrescriptionReportBean)", "isreturn":0, "sourcecode":"private void assertPrescription(PrescriptionReportBean prescription) {\r\n    assertEquals(\"009042407\", prescription.getPrescription().getMedication().getNDCode());\r\n    assertEquals(\"Tetracycline\", prescription.getPrescription().getMedication().getDescription());\r\n    assertEquals(955L, prescription.getPrescription().getVisitID());\r\n    assertEquals(5, prescription.getPrescription().getDosage());\r\n    assertEquals(\"10/10/2006\", prescription.getPrescription().getStartDateStr());\r\n    assertEquals(\"10/11/2006\", prescription.getPrescription().getEndDateStr());\r\n    assertEquals(\"Take twice daily\", prescription.getPrescription().getInstructions());\r\n    assertEquals(9000000000L, prescription.getOfficeVisit().getHcpID());\r\n    assertEquals(\"1\", prescription.getOfficeVisit().getHospitalID());\r\n    assertEquals(2L, prescription.getOfficeVisit().getPatientID());\r\n    assertEquals(\"06/10/2007\", prescription.getOfficeVisit().getVisitDateStr());\r\n}"},
 {"id":445, "parametername":"PrescriptionReportBean prescription", "parametertype":"edu.ncsu.csc.itrust.beans.PrescriptionReportBean", "parameterclass":272, "classid":425, "classname":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest", "methodid":3175, "methodname":"edu.ncsu.csc.itrust.dao.officevisit.GetPrescriptionsTest.assertPrescription2(edu.ncsu.csc.itrust.beans.PrescriptionReportBean)", "isreturn":0, "sourcecode":"private void assertPrescription2(PrescriptionReportBean prescription) {\r\n    assertEquals(\"647641512\", prescription.getPrescription().getMedication().getNDCode());\r\n    assertEquals(\"Prioglitazone\", prescription.getPrescription().getMedication().getDescription());\r\n    assertEquals(955L, prescription.getPrescription().getVisitID());\r\n    assertEquals(5, prescription.getPrescription().getDosage());\r\n    assertEquals(\"10/10/2006\", prescription.getPrescription().getStartDateStr());\r\n    assertEquals(\"10/11/2020\", prescription.getPrescription().getEndDateStr());\r\n    assertEquals(\"Take twice daily\", prescription.getPrescription().getInstructions());\r\n    assertEquals(9000000000L, prescription.getOfficeVisit().getHcpID());\r\n    assertEquals(\"1\", prescription.getOfficeVisit().getHospitalID());\r\n    assertEquals(2L, prescription.getOfficeVisit().getPatientID());\r\n    assertEquals(\"06/10/2007\", prescription.getOfficeVisit().getVisitDateStr());\r\n}"},
 {"id":446, "parametername":"PatientBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":437, "classname":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest", "methodid":3240, "methodname":"edu.ncsu.csc.itrust.dao.patient.EditPatientTest.assertIsPatient2(edu.ncsu.csc.itrust.beans.PatientBean)", "isreturn":0, "sourcecode":"private void assertIsPatient2(PatientBean p) {\r\n    assertEquals(2L, p.getMID());\r\n    assertEquals(\"Andy\", p.getFirstName());\r\n    assertEquals(\"Programmer\", p.getLastName());\r\n    assertEquals(\"05/19/1984\", p.getDateOfBirthStr());\r\n    assertEquals(\"250.10\", p.getCauseOfDeath());\r\n    assertEquals(\"andy.programmer@gmail.com\", p.getEmail());\r\n    assertEquals(\"344 Bob Street\", p.getStreetAddress1());\r\n    assertEquals(\"\", p.getStreetAddress2());\r\n    assertEquals(\"Raleigh\", p.getCity());\r\n    assertEquals(\"NC\", p.getState());\r\n    assertEquals(\"27607\", p.getZip());\r\n    assertEquals(\"555-555-5555\", p.getPhone());\r\n    assertEquals(\"Mr Emergency\", p.getEmergencyName());\r\n    assertEquals(\"555-555-5551\", p.getEmergencyPhone());\r\n    assertEquals(\"IC\", p.getIcName());\r\n    assertEquals(\"Street1\", p.getIcAddress1());\r\n    assertEquals(\"Street2\", p.getIcAddress2());\r\n    assertEquals(\"City\", p.getIcCity());\r\n    assertEquals(\"PA\", p.getIcState());\r\n    assertEquals(\"19003-2715\", p.getIcZip());\r\n    assertEquals(\"555-555-5555\", p.getIcPhone());\r\n    assertEquals(\"1\", p.getIcID());\r\n    assertEquals(\"1\", p.getMotherMID());\r\n    assertEquals(\"0\", p.getFatherMID());\r\n    assertEquals(\"O-\", p.getBloodType().getName());\r\n    assertEquals(Ethnicity.Caucasian, p.getEthnicity());\r\n    assertEquals(Gender.Male, p.getGender());\r\n    assertEquals(\"This person is absolutely crazy. Do not touch them.\", p.getTopicalNotes());\r\n}"},
 {"id":447, "parametername":"PersonnelBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parameterclass":270, "classid":447, "classname":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest", "methodid":3315, "methodname":"edu.ncsu.csc.itrust.dao.personnel.EditPersonnelTest.assertIsPersonnel2(edu.ncsu.csc.itrust.beans.PersonnelBean)", "isreturn":0, "sourcecode":"private void assertIsPersonnel2(PersonnelBean p) {\r\n    assertEquals(8000000009L, p.getMID());\r\n    assertEquals(\"FirstUAP\", p.getFirstName());\r\n    assertEquals(\"LastUAP\", p.getLastName());\r\n    // assertEquals(\"opposite of yin\", p.getSecurityQuestion());\r\n    // assertEquals(\"yang\", p.getSecurityAnswer());\r\n    assertEquals(\"100 Ave\", p.getStreetAddress1());\r\n    assertEquals(\"\", p.getStreetAddress2());\r\n    assertEquals(\"Raleigh\", p.getCity());\r\n    assertEquals(\"NC\", p.getState());\r\n    assertEquals(\"27607\", p.getZip());\r\n    assertEquals(\"111-111-1111\", p.getPhone());\r\n}"},
 {"id":448, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":476, "classname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator", "methodid":3505, "methodname":"edu.ncsu.csc.itrust.datagenerators.TestDataGenerator.-init-(java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"public TestDataGenerator(String projectHome, DAOFactory factory) {\r\n    this.DIR = projectHome + \"/sql/data\";\r\n    this.factory = factory;\r\n}"},
 {"id":449, "parametername":"ErrorList errorList", "parametertype":"edu.ncsu.csc.itrust.exception.ErrorList", "parameterclass":496, "classid":497, "classname":"edu.ncsu.csc.itrust.exception.FormValidationException", "methodid":3719, "methodname":"edu.ncsu.csc.itrust.exception.FormValidationException.-init-(edu.ncsu.csc.itrust.exception.ErrorList)", "isreturn":0, "sourcecode":"/**\r\n * Constructor with error messages as a special ErrorList data type.\r\n *\r\n * @param errorList\r\n * \t\tAn ErrorList object which contains the list of error messages.\r\n */\r\npublic FormValidationException(ErrorList errorList) {\r\n    this.errorList = errorList;\r\n}"},
 {"id":450, "parametername":"TransactionType code", "parametertype":"edu.ncsu.csc.itrust.enums.TransactionType", "parameterclass":490, "classid":584, "classname":"edu.ncsu.csc.itrust.http.iTrustHTTPTest", "methodid":4263, "methodname":"edu.ncsu.csc.itrust.http.iTrustHTTPTest.assertLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "isreturn":0, "sourcecode":"public static void assertLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    for (TransactionBean t : transList) {\r\n        if ((((t.getTransactionType()) == code) && ((t.getLoggedInMID()) == loggedInMID)) && ((t.getSecondaryMID()) == secondaryMID)) {\r\n            assertTrue(((t.getTransactionType()) == code));\r\n            if (!(t.getAddedInfo().trim().contains(addedInfo.trim()))) {\r\n                fail(\"Additional Information is not logged correctly.\");\r\n            }\r\n            return;\r\n        }\r\n    }\r\n    fail(\"Event not logged as specified.\");\r\n}"},
 {"id":451, "parametername":"TransactionType code", "parametertype":"edu.ncsu.csc.itrust.enums.TransactionType", "parameterclass":490, "classid":584, "classname":"edu.ncsu.csc.itrust.http.iTrustHTTPTest", "methodid":4264, "methodname":"edu.ncsu.csc.itrust.http.iTrustHTTPTest.assertNotLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "isreturn":0, "sourcecode":"public static void assertNotLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    for (TransactionBean t : transList) {\r\n        if (((((t.getTransactionType()) == code) && ((t.getLoggedInMID()) == loggedInMID)) && ((t.getSecondaryMID()) == secondaryMID)) && (t.getAddedInfo().trim().contains(addedInfo))) {\r\n            fail(\"Event was logged, but should NOT have been logged\");\r\n            return;\r\n        }\r\n    }\r\n}"},
 {"id":452, "parametername":"DemographicReportFilter.DemographicReportFilterType filterType", "parametertype":"edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType", "parameterclass":585, "classid":586, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilter", "methodid":4268, "methodname":"edu.ncsu.csc.itrust.report.DemographicReportFilter.-init-(edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param filterType\r\n * \t\t\r\n * @param filterValue\r\n * \t\t\r\n */\r\npublic DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    fDAO = factory.getFamilyDAO();\r\n}"},
 {"id":453, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":586, "classname":"edu.ncsu.csc.itrust.report.DemographicReportFilter", "methodid":4268, "methodname":"edu.ncsu.csc.itrust.report.DemographicReportFilter.-init-(edu.ncsu.csc.itrust.report.DemographicReportFilter$DemographicReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param filterType\r\n * \t\t\r\n * @param filterValue\r\n * \t\t\r\n */\r\npublic DemographicReportFilter(DemographicReportFilter.DemographicReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    fDAO = factory.getFamilyDAO();\r\n}"},
 {"id":454, "parametername":"MedicalReportFilter.MedicalReportFilterType filterType", "parametertype":"edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType", "parameterclass":588, "classid":589, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilter", "methodid":4330, "methodname":"edu.ncsu.csc.itrust.report.MedicalReportFilter.-init-(edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param filterType\r\n * \t\t\r\n * @param filterValue\r\n * \t\t\r\n */\r\npublic MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    pDAO = factory.getPatientDAO();\r\n    aDAO = factory.getAllergyDAO();\r\n    oDAO = factory.getOfficeVisitDAO();\r\n}"},
 {"id":455, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":589, "classname":"edu.ncsu.csc.itrust.report.MedicalReportFilter", "methodid":4330, "methodname":"edu.ncsu.csc.itrust.report.MedicalReportFilter.-init-(edu.ncsu.csc.itrust.report.MedicalReportFilter$MedicalReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n *\r\n *\r\n * @param filterType\r\n * \t\t\r\n * @param filterValue\r\n * \t\t\r\n */\r\npublic MedicalReportFilter(MedicalReportFilter.MedicalReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    pDAO = factory.getPatientDAO();\r\n    aDAO = factory.getAllergyDAO();\r\n    oDAO = factory.getOfficeVisitDAO();\r\n}"},
 {"id":456, "parametername":"PersonnelReportFilter.PersonnelReportFilterType filterType", "parametertype":"edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType", "parameterclass":591, "classid":592, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilter", "methodid":4358, "methodname":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.-init-(edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"public PersonnelReportFilter(PersonnelReportFilter.PersonnelReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    pDAO = factory.getPatientDAO();\r\n}"},
 {"id":457, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":592, "classname":"edu.ncsu.csc.itrust.report.PersonnelReportFilter", "methodid":4358, "methodname":"edu.ncsu.csc.itrust.report.PersonnelReportFilter.-init-(edu.ncsu.csc.itrust.report.PersonnelReportFilter$PersonnelReportFilterType,java.lang.String,edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"public PersonnelReportFilter(PersonnelReportFilter.PersonnelReportFilterType filterType, String filterValue, DAOFactory factory) {\r\n    this.filterType = filterType;\r\n    this.filterValue = filterValue;\r\n    pDAO = factory.getPatientDAO();\r\n}"},
 {"id":458, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":595, "classname":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator", "methodid":4380, "methodname":"edu.ncsu.csc.itrust.risk.ChronicDiseaseMediator.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"/**\r\n * Given a factory and patient ID, and sets up a list of all risk checkers\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory to be used in creating the necessary DAOs to perform the checks.\r\n * @param pid\r\n * \t\tThe MID of the patient in question.\r\n * @throws DBException\r\n * \t\t\r\n * @throws NoHealthRecordsException\r\n * \t\t\r\n */\r\npublic ChronicDiseaseMediator(DAOFactory factory, long pid) throws DBException, NoHealthRecordsException {\r\n    riskCheckers = new ArrayList<RiskChecker>();\r\n    riskCheckers.add(new HeartDiseaseRisks(factory, pid));\r\n    riskCheckers.add(new Type1DiabetesRisks(factory, pid));\r\n    riskCheckers.add(new Type2DiabetesRisks(factory, pid));\r\n}"},
 {"id":459, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":597, "classname":"edu.ncsu.csc.itrust.risk.HeartDiseaseRisks", "methodid":4386, "methodname":"edu.ncsu.csc.itrust.risk.HeartDiseaseRisks.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public HeartDiseaseRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    super(factory, patientID);\r\n}"},
 {"id":460, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":599, "classname":"edu.ncsu.csc.itrust.risk.RiskChecker", "methodid":4394, "methodname":"edu.ncsu.csc.itrust.risk.RiskChecker.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public RiskChecker(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    this.factory = factory;\r\n    HealthRecordsDAO hrDAO = factory.getHealthRecordsDAO();\r\n    List<HealthRecord> records = hrDAO.getAllHealthRecords(patientID);\r\n    if ((records.size()) > 0)\r\n        currentHealthRecord = records.get(0);\r\n    else\r\n        throw new NoHealthRecordsException();\r\n\r\n    patient = factory.getPatientDAO().getPatient(patientID);\r\n}"},
 {"id":461, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":600, "classname":"edu.ncsu.csc.itrust.risk.Type1DiabetesRisks", "methodid":4400, "methodname":"edu.ncsu.csc.itrust.risk.Type1DiabetesRisks.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public Type1DiabetesRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    super(factory, patientID);\r\n}"},
 {"id":462, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":602, "classname":"edu.ncsu.csc.itrust.risk.Type2DiabetesRisks", "methodid":4409, "methodname":"edu.ncsu.csc.itrust.risk.Type2DiabetesRisks.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public Type2DiabetesRisks(DAOFactory factory, long patientID) throws DBException, NoHealthRecordsException {\r\n    super(factory, patientID);\r\n}"},
 {"id":463, "parametername":"PatientBean patient", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":604, "classname":"edu.ncsu.csc.itrust.risk.factors.AgeFactor", "methodid":4417, "methodname":"edu.ncsu.csc.itrust.risk.factors.AgeFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,int)", "isreturn":0, "sourcecode":"public AgeFactor(PatientBean patient, int age) {\r\n    this.age = age;\r\n    this.patient = patient;\r\n}"},
 {"id":464, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":606, "classname":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor", "methodid":4424, "methodname":"edu.ncsu.csc.itrust.risk.factors.ChildhoodInfectionFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double[])", "isreturn":0, "sourcecode":"public ChildhoodInfectionFactor(DAOFactory factory, long mid, double... icdCodes) {\r\n    this.factory = factory;\r\n    this.patientID = mid;\r\n    this.icdCodes = icdCodes.clone();\r\n}"},
 {"id":465, "parametername":"HealthRecord currentHealthRecord", "parametertype":"edu.ncsu.csc.itrust.beans.HealthRecord", "parameterclass":257, "classid":608, "classname":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactor", "methodid":4436, "methodname":"edu.ncsu.csc.itrust.risk.factors.CholesterolFactor.-init-(edu.ncsu.csc.itrust.beans.HealthRecord)", "isreturn":0, "sourcecode":"public CholesterolFactor(HealthRecord currentHealthRecord) {\r\n    this.record = currentHealthRecord;\r\n}"},
 {"id":466, "parametername":"PatientBean patient", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":610, "classname":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactor", "methodid":4445, "methodname":"edu.ncsu.csc.itrust.risk.factors.EthnicityFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.enums.Ethnicity[])", "isreturn":0, "sourcecode":"public EthnicityFactor(PatientBean patient, Ethnicity... atRisks) {\r\n    this.atRisk = atRisks.clone();\r\n    this.patient = patient;\r\n}"},
 {"id":467, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":612, "classname":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor", "methodid":4454, "methodname":"edu.ncsu.csc.itrust.risk.factors.FamilyHistoryFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double,double)", "isreturn":0, "sourcecode":"public FamilyHistoryFactor(DAOFactory factory, long patientID, double icdLower, double icdUpper) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n    this.icdLower = icdLower;\r\n    this.icdUpper = icdUpper;\r\n}"},
 {"id":468, "parametername":"PatientBean patient", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":614, "classname":"edu.ncsu.csc.itrust.risk.factors.GenderFactor", "methodid":4463, "methodname":"edu.ncsu.csc.itrust.risk.factors.GenderFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.enums.Gender)", "isreturn":0, "sourcecode":"public GenderFactor(PatientBean patient, Gender gender) {\r\n    this.patient = patient;\r\n    this.gender = gender;\r\n}"},
 {"id":469, "parametername":"Gender gender", "parametertype":"edu.ncsu.csc.itrust.enums.Gender", "parameterclass":483, "classid":614, "classname":"edu.ncsu.csc.itrust.risk.factors.GenderFactor", "methodid":4463, "methodname":"edu.ncsu.csc.itrust.risk.factors.GenderFactor.-init-(edu.ncsu.csc.itrust.beans.PatientBean,edu.ncsu.csc.itrust.enums.Gender)", "isreturn":0, "sourcecode":"public GenderFactor(PatientBean patient, Gender gender) {\r\n    this.patient = patient;\r\n    this.gender = gender;\r\n}"},
 {"id":470, "parametername":"HealthRecord currentHealthRecord", "parametertype":"edu.ncsu.csc.itrust.beans.HealthRecord", "parameterclass":257, "classid":616, "classname":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactor", "methodid":4470, "methodname":"edu.ncsu.csc.itrust.risk.factors.HypertensionFactor.-init-(edu.ncsu.csc.itrust.beans.HealthRecord)", "isreturn":0, "sourcecode":"public HypertensionFactor(HealthRecord currentHealthRecord) {\r\n    this.record = currentHealthRecord;\r\n}"},
 {"id":471, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":620, "classname":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor", "methodid":4489, "methodname":"edu.ncsu.csc.itrust.risk.factors.PriorDiagnosisFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long,double,double)", "isreturn":0, "sourcecode":"public PriorDiagnosisFactor(DAOFactory factory, long patientID, double lowerICDCode, double upperICDCode) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n    this.lowerICDCode = lowerICDCode;\r\n    this.upperICDCode = upperICDCode;\r\n}"},
 {"id":472, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":621, "classname":"edu.ncsu.csc.itrust.risk.factors.SmokingFactor", "methodid":4492, "methodname":"edu.ncsu.csc.itrust.risk.factors.SmokingFactor.-init-(edu.ncsu.csc.itrust.dao.DAOFactory,long)", "isreturn":0, "sourcecode":"public SmokingFactor(DAOFactory factory, long patientID) {\r\n    this.factory = factory;\r\n    this.patientID = patientID;\r\n}"},
 {"id":473, "parametername":"HealthRecord currentHealthRecord", "parametertype":"edu.ncsu.csc.itrust.beans.HealthRecord", "parameterclass":257, "classid":623, "classname":"edu.ncsu.csc.itrust.risk.factors.WeightFactor", "methodid":4501, "methodname":"edu.ncsu.csc.itrust.risk.factors.WeightFactor.-init-(edu.ncsu.csc.itrust.beans.HealthRecord,int)", "isreturn":0, "sourcecode":"public WeightFactor(HealthRecord currentHealthRecord, int bmiThreshold) {\r\n    this.currentHealthRecord = currentHealthRecord;\r\n    this.bmiThreshold = bmiThreshold;\r\n}"},
 {"id":474, "parametername":"DAOFactory factory", "parametertype":"edu.ncsu.csc.itrust.dao.DAOFactory", "parameterclass":336, "classid":626, "classname":"edu.ncsu.csc.itrust.server.SessionTimeoutListener", "methodid":4513, "methodname":"edu.ncsu.csc.itrust.server.SessionTimeoutListener.-init-(edu.ncsu.csc.itrust.dao.DAOFactory)", "isreturn":0, "sourcecode":"/**\r\n * The specialized constructor, which takes a particular DAOFactory to be used when checking for the pre-specified\r\n * timeout limit.\r\n *\r\n * @param factory\r\n * \t\tThe DAOFactory to be used.\r\n */\r\npublic SessionTimeoutListener(DAOFactory factory) {\r\n    this.factory = factory;\r\n}"},
 {"id":475, "parametername":"TransactionType transType", "parametertype":"edu.ncsu.csc.itrust.enums.TransactionType", "parameterclass":490, "classid":646, "classname":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils", "methodid":4636, "methodname":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransactionOnly(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "isreturn":0, "sourcecode":"public static void assertTransactionOnly(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    assertEquals(\"Only one transaction should have been logged\", 1, transList.size());\r\n    JUnitiTrustUtils.assertTransaction(transType, loggedInMID, secondaryMID, addedInfo, transList.get(0));\r\n}"},
 {"id":476, "parametername":"TransactionType code", "parametertype":"edu.ncsu.csc.itrust.enums.TransactionType", "parameterclass":490, "classid":646, "classname":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils", "methodid":4634, "methodname":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertLogged(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String)", "isreturn":0, "sourcecode":"public static void assertLogged(TransactionType code, long loggedInMID, long secondaryMID, String addedInfo) throws DBException {\r\n    List<TransactionBean> transList = TestDAOFactory.getTestInstance().getTransactionDAO().getAllTransactions();\r\n    TransactionBean lastRecordedAction = transList.get(0);\r\n    assertTrue(((lastRecordedAction.getTransactionType()) == code));\r\n    assertTrue(((lastRecordedAction.getLoggedInMID()) == loggedInMID));\r\n    assertTrue(((lastRecordedAction.getSecondaryMID()) == secondaryMID));\r\n    assertTrue(lastRecordedAction.getAddedInfo().equals(addedInfo));\r\n}"},
 {"id":477, "parametername":"TransactionType transType", "parametertype":"edu.ncsu.csc.itrust.enums.TransactionType", "parameterclass":490, "classid":646, "classname":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils", "methodid":4635, "methodname":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String,edu.ncsu.csc.itrust.beans.TransactionBean)", "isreturn":0, "sourcecode":"private static void assertTransaction(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo, TransactionBean trans) {\r\n    assertEquals(transType, trans.getTransactionType());\r\n    assertEquals(loggedInMID, trans.getLoggedInMID());\r\n    assertEquals(secondaryMID, trans.getSecondaryMID());\r\n    assertEquals(addedInfo, trans.getAddedInfo());\r\n}"},
 {"id":478, "parametername":"TransactionBean trans", "parametertype":"edu.ncsu.csc.itrust.beans.TransactionBean", "parameterclass":281, "classid":646, "classname":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils", "methodid":4635, "methodname":"edu.ncsu.csc.itrust.testutils.JUnitiTrustUtils.assertTransaction(edu.ncsu.csc.itrust.enums.TransactionType,long,long,java.lang.String,edu.ncsu.csc.itrust.beans.TransactionBean)", "isreturn":0, "sourcecode":"private static void assertTransaction(TransactionType transType, long loggedInMID, long secondaryMID, String addedInfo, TransactionBean trans) {\r\n    assertEquals(transType, trans.getTransactionType());\r\n    assertEquals(loggedInMID, trans.getLoggedInMID());\r\n    assertEquals(secondaryMID, trans.getSecondaryMID());\r\n    assertEquals(addedInfo, trans.getAddedInfo());\r\n}"},
 {"id":479, "parametername":"OkayBean other", "parametertype":"edu.ncsu.csc.itrust.testutils.OkayBean", "parameterclass":647, "classid":647, "classname":"edu.ncsu.csc.itrust.testutils.OkayBean", "methodid":4640, "methodname":"edu.ncsu.csc.itrust.testutils.OkayBean.equals(edu.ncsu.csc.itrust.testutils.OkayBean)", "isreturn":0, "sourcecode":"private boolean equals(OkayBean other) {\r\n    return true;\r\n}"},
 {"id":480, "parametername":"ValidationFormat format", "parametertype":"edu.ncsu.csc.itrust.validate.ValidationFormat", "parameterclass":682, "classid":651, "classname":"edu.ncsu.csc.itrust.testutils.ValidatorProxy", "methodid":4657, "methodname":"edu.ncsu.csc.itrust.testutils.ValidatorProxy.checkFormat(java.lang.String,java.lang.Long,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "isreturn":0, "sourcecode":"@Override\r\npublic String checkFormat(String name, Long value, ValidationFormat format, boolean isNullable) {\r\n    return super.checkFormat(name, value, format, isNullable);\r\n}"},
 {"id":481, "parametername":"ValidationFormat format", "parametertype":"edu.ncsu.csc.itrust.validate.ValidationFormat", "parameterclass":682, "classid":651, "classname":"edu.ncsu.csc.itrust.testutils.ValidatorProxy", "methodid":4658, "methodname":"edu.ncsu.csc.itrust.testutils.ValidatorProxy.checkFormat(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "isreturn":0, "sourcecode":"@Override\r\npublic String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    return super.checkFormat(name, value, format, isNullable);\r\n}"},
 {"id":482, "parametername":"TestBean bean", "parametertype":"edu.ncsu.csc.itrust.testutils.TestBean", "parameterclass":649, "classid":651, "classname":"edu.ncsu.csc.itrust.testutils.ValidatorProxy", "methodid":4659, "methodname":"edu.ncsu.csc.itrust.testutils.ValidatorProxy.validate(edu.ncsu.csc.itrust.testutils.TestBean)", "isreturn":0, "sourcecode":"@Override\r\npublic void validate(TestBean bean) throws FormValidationException {\r\n    throw new IllegalStateException(\"Mock object acts as a proxy to protected BeanValidator classes. Do not call this method\");\r\n}"},
 {"id":483, "parametername":"PatientBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":652, "classname":"edu.ncsu.csc.itrust.validate.AddPatientValidator", "methodid":4661, "methodname":"edu.ncsu.csc.itrust.validate.AddPatientValidator.validate(edu.ncsu.csc.itrust.beans.PatientBean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(PatientBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":484, "parametername":"PersonnelBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parameterclass":270, "classid":653, "classname":"edu.ncsu.csc.itrust.validate.AddPersonnelValidator", "methodid":4663, "methodname":"edu.ncsu.csc.itrust.validate.AddPersonnelValidator.validate(edu.ncsu.csc.itrust.beans.PersonnelBean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(PersonnelBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":485, "parametername":"AdverseEventBean b", "parametertype":"edu.ncsu.csc.itrust.beans.AdverseEventBean", "parameterclass":243, "classid":654, "classname":"edu.ncsu.csc.itrust.validate.AdverseEventValidator", "methodid":4665, "methodname":"edu.ncsu.csc.itrust.validate.AdverseEventValidator.validate(edu.ncsu.csc.itrust.beans.AdverseEventBean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param d\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(AdverseEventBean b) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"comment\", b.getDescription(), ValidationFormat.ADVERSE_EVENT_COMMENTS, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":486, "parametername":"AllergyBean m", "parametertype":"edu.ncsu.csc.itrust.beans.AllergyBean", "parameterclass":244, "classid":655, "classname":"edu.ncsu.csc.itrust.validate.AllergyBeanValidator", "methodid":4667, "methodname":"edu.ncsu.csc.itrust.validate.AllergyBeanValidator.validate(edu.ncsu.csc.itrust.beans.AllergyBean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(AllergyBean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Allergy Description\", m.getDescription(), ValidationFormat.ALLERGY_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":487, "parametername":"ApptBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.ApptBean", "parameterclass":245, "classid":656, "classname":"edu.ncsu.csc.itrust.validate.ApptBeanValidator", "methodid":4669, "methodname":"edu.ncsu.csc.itrust.validate.ApptBeanValidator.validate(edu.ncsu.csc.itrust.beans.ApptBean)", "isreturn":0, "sourcecode":"@Override\r\npublic void validate(ApptBean bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    if ((bean.getComment()) == null)\r\n        return;\r\n\r\n    errorList.addIfNotNull(checkFormat(\"Appointment Comment\", bean.getComment(), ValidationFormat.APPT_COMMENT, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":488, "parametername":"ApptTypeBean a", "parametertype":"edu.ncsu.csc.itrust.beans.ApptTypeBean", "parameterclass":247, "classid":657, "classname":"edu.ncsu.csc.itrust.validate.ApptTypeBeanValidator", "methodid":4671, "methodname":"edu.ncsu.csc.itrust.validate.ApptTypeBeanValidator.validate(edu.ncsu.csc.itrust.beans.ApptTypeBean)", "isreturn":0, "sourcecode":"@Override\r\npublic void validate(ApptTypeBean a) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Appointment Type Name\", a.getName(), ValidationFormat.APPT_TYPE_NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Appointment Type Duration\", ((a.getDuration()) + \"\"), ValidationFormat.APPT_TYPE_DURATION, false));\r\n    if ((a.getDuration()) <= 0) {\r\n        errorList.addIfNotNull(\"Appointment duration must be greater than zero.\");\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":489, "parametername":"ValidationFormat format", "parametertype":"edu.ncsu.csc.itrust.validate.ValidationFormat", "parameterclass":682, "classid":658, "classname":"edu.ncsu.csc.itrust.validate.BeanValidator", "methodid":4677, "methodname":"edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Check the format against the given enum. isNullable will check if the string is empty or a Java null.\r\n * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * \t\t\r\n * @param value\r\n * \t\t\r\n * @param format\r\n * \t\t\r\n * @param isNullable\r\n * \t\t\r\n * @return \r\n */\r\nprotected String checkFormat(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    String errorMessage = (name + \": \") + (format.getDescription());\r\n    if ((value == null) || (\"\".equals(value)))\r\n        return isNullable ? \"\" : errorMessage;\r\n    else\r\n        if (format.getRegex().matcher(value).matches())\r\n            return \"\";\r\n        else\r\n            return errorMessage;\r\n\r\n\r\n}"},
 {"id":490, "parametername":"ValidationFormat format", "parametertype":"edu.ncsu.csc.itrust.validate.ValidationFormat", "parameterclass":682, "classid":658, "classname":"edu.ncsu.csc.itrust.validate.BeanValidator", "methodid":4676, "methodname":"edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.Long,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Check a long value against a particular format. isNullable will check if it is empty or a Java null.\r\n * Otherwise, an error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * \t\t\r\n * @param longValue\r\n * \t\t\r\n * @param format\r\n * \t\t\r\n * @param isNullable\r\n * \t\t\r\n * @return \r\n */\r\nprotected String checkFormat(String name, Long longValue, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (longValue != null)\r\n        str = String.valueOf(longValue);\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}"},
 {"id":491, "parametername":"ValidationFormat format", "parametertype":"edu.ncsu.csc.itrust.validate.ValidationFormat", "parameterclass":682, "classid":658, "classname":"edu.ncsu.csc.itrust.validate.BeanValidator", "methodid":4675, "methodname":"edu.ncsu.csc.itrust.validate.BeanValidator.checkFormat(java.lang.String,java.lang.Double,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Check the format against the given enum. isNullable will check if it is a Java null. Otherwise, an\r\n * error message will be returned. Use this in conjunction with {@link ErrorList}.\r\n *\r\n * @param name\r\n * \t\t\r\n * @param doubleValue\r\n * \t\t\r\n * @param format\r\n * \t\t\r\n * @param isNullable\r\n * \t\t\r\n * @return \r\n */\r\nprotected String checkFormat(String name, Double doubleValue, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (doubleValue != null)\r\n        str = String.valueOf(doubleValue);\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}"},
 {"id":492, "parametername":"Gender gen", "parametertype":"edu.ncsu.csc.itrust.enums.Gender", "parameterclass":483, "classid":658, "classname":"edu.ncsu.csc.itrust.validate.BeanValidator", "methodid":4678, "methodname":"edu.ncsu.csc.itrust.validate.BeanValidator.checkGender(java.lang.String,edu.ncsu.csc.itrust.enums.Gender,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Check against the proper gender\r\n *\r\n * @param name\r\n * \t\t\r\n * @param gen\r\n * \t\t\r\n * @param format\r\n * \t\t\r\n * @param isNullable\r\n * \t\t\r\n * @return \r\n */\r\nprotected String checkGender(String name, Gender gen, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (gen != null)\r\n        str = gen.toString();\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}"},
 {"id":493, "parametername":"ValidationFormat format", "parametertype":"edu.ncsu.csc.itrust.validate.ValidationFormat", "parameterclass":682, "classid":658, "classname":"edu.ncsu.csc.itrust.validate.BeanValidator", "methodid":4678, "methodname":"edu.ncsu.csc.itrust.validate.BeanValidator.checkGender(java.lang.String,edu.ncsu.csc.itrust.enums.Gender,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "isreturn":0, "sourcecode":"/**\r\n * Check against the proper gender\r\n *\r\n * @param name\r\n * \t\t\r\n * @param gen\r\n * \t\t\r\n * @param format\r\n * \t\t\r\n * @param isNullable\r\n * \t\t\r\n * @return \r\n */\r\nprotected String checkGender(String name, Gender gen, ValidationFormat format, boolean isNullable) {\r\n    String str = \"\";\r\n    if (gen != null)\r\n        str = gen.toString();\r\n\r\n    return checkFormat(name, str, format, isNullable);\r\n}"},
 {"id":494, "parametername":"ValidationFormat format", "parametertype":"edu.ncsu.csc.itrust.validate.ValidationFormat", "parameterclass":682, "classid":658, "classname":"edu.ncsu.csc.itrust.validate.BeanValidator", "methodid":4680, "methodname":"edu.ncsu.csc.itrust.validate.BeanValidator.checkNotZero(java.lang.String,java.lang.String,edu.ncsu.csc.itrust.validate.ValidationFormat,boolean)", "isreturn":0, "sourcecode":"protected String checkNotZero(String name, String value, ValidationFormat format, boolean isNullable) {\r\n    String s = checkFormat(name, value, format, isNullable);\r\n    if (s.equals(\"\")) {\r\n        if ((Double.valueOf(value)) < 0.1) {\r\n            return name + \" must be greater than 0\";\r\n        }\r\n    }\r\n    return s;\r\n}"},
 {"id":495, "parametername":"DiagnosisBean d", "parametertype":"edu.ncsu.csc.itrust.beans.DiagnosisBean", "parameterclass":248, "classid":660, "classname":"edu.ncsu.csc.itrust.validate.DiagnosisBeanValidator", "methodid":4694, "methodname":"edu.ncsu.csc.itrust.validate.DiagnosisBeanValidator.validate(edu.ncsu.csc.itrust.beans.DiagnosisBean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(DiagnosisBean d) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"ICD9CM Code\", d.getICDCode(), ValidationFormat.ICD9CM, false));\r\n    errorList.addIfNotNull(checkFormat(\"Description\", d.getDescription(), ValidationFormat.ICD_CODE_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":496, "parametername":"DrugInteractionBean d", "parametertype":"edu.ncsu.csc.itrust.beans.DrugInteractionBean", "parameterclass":250, "classid":661, "classname":"edu.ncsu.csc.itrust.validate.DrugInteractionValidator", "methodid":4696, "methodname":"edu.ncsu.csc.itrust.validate.DrugInteractionValidator.validate(edu.ncsu.csc.itrust.beans.DrugInteractionBean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param d\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(DrugInteractionBean d) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"FirstDrug\", d.getFirstDrug(), ValidationFormat.ND, false));\r\n    errorList.addIfNotNull(checkFormat(\"SecondDrug\", d.getSecondDrug(), ValidationFormat.ND, false));\r\n    errorList.addIfNotNull(checkFormat(\"description\", d.getDescription(), ValidationFormat.DRUG_INT_COMMENTS, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":497, "parametername":"MessageBean m", "parametertype":"edu.ncsu.csc.itrust.beans.MessageBean", "parameterclass":262, "classid":662, "classname":"edu.ncsu.csc.itrust.validate.EMailValidator", "methodid":4698, "methodname":"edu.ncsu.csc.itrust.validate.EMailValidator.validate(edu.ncsu.csc.itrust.beans.MessageBean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param m\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(MessageBean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"body\", m.getBody(), ValidationFormat.EMAILS, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":498, "parametername":"EditOfficeVisitForm form", "parametertype":"edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm", "parameterclass":286, "classid":663, "classname":"edu.ncsu.csc.itrust.validate.EditOfficeVisitValidator", "methodid":4700, "methodname":"edu.ncsu.csc.itrust.validate.EditOfficeVisitValidator.validate(edu.ncsu.csc.itrust.beans.forms.EditOfficeVisitForm)", "isreturn":0, "sourcecode":"/* public EditOfficeVisitValidator(boolean validatePrescription) {\nthis.validatePrescription = validatePrescription;\n}\n */\r\n/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(EditOfficeVisitForm form) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"HCP ID\", form.getHcpID(), ValidationFormat.MID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Hospital ID\", form.getHospitalID(), ValidationFormat.HOSPITAL_ID, true));\r\n    errorList.addIfNotNull(checkFormat(\"Notes\", form.getNotes(), ValidationFormat.NOTES, true));\r\n    errorList.addIfNotNull(checkFormat(\"Patient ID\", form.getPatientID(), ValidationFormat.MID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Visit Date\", form.getVisitDate(), ValidationFormat.DATE, false));\r\n    /* if (validatePrescription) {\n    errorList.addIfNotNull(checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE,\n    false));\n    errorList.addIfNotNull(checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false));\n    errorList.addIfNotNull(checkFormat(\"Instructions\", form.getInstructions(),\n    ValidationFormat.NOTES, true));\n    errorList.addIfNotNull(checkInt(\"Dosage\", form.getDosage(), 0, 9999, false));\n    if ((checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE, false)) == \"\"\n    && (checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false)) == \"\") {\n    Date sd = null;\n    Date ed = null;\n    try {\n    sd = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getStartDate());\n    ed = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getEndDate());\n    String dateError = null;\n    if (sd.after(ed)) {\n    dateError = \"The start date of the prescription must be before the end date.\";\n    }\n    errorList.addIfNotNull(dateError);\n    } catch (ParseException e) {\n    errorList.addIfNotNull(ValidationFormat.DATE.getDescription());\n    }\n\n    }\n    }\n     */\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":499, "parametername":"EditPrescriptionsForm form", "parametertype":"edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm", "parameterclass":287, "classid":664, "classname":"edu.ncsu.csc.itrust.validate.EditPrescriptionsValidator", "methodid":4702, "methodname":"edu.ncsu.csc.itrust.validate.EditPrescriptionsValidator.validate(edu.ncsu.csc.itrust.beans.forms.EditPrescriptionsForm)", "isreturn":0, "sourcecode":"/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.validate.BeanValidator#validate(java.lang.Object)\n */\r\n@Override\r\npublic void validate(EditPrescriptionsForm form) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Instructions\", form.getInstructions(), ValidationFormat.NOTES, false));\r\n    errorList.addIfNotNull((form.getInstructions().equals(defaultInstructions) ? \"Instructions: \" + (ValidationFormat.NOTES.getDescription()) : \"\"));\r\n    errorList.addIfNotNull(checkInt(\"Dosage\", form.getDosage(), 0, 9999, false));\r\n    if (((checkFormat(\"Start Date\", form.getStartDate(), ValidationFormat.DATE, false)) == \"\") && ((checkFormat(\"End Date\", form.getEndDate(), ValidationFormat.DATE, false)) == \"\")) {\r\n        Date sd = null;\r\n        Date ed = null;\r\n        try {\r\n            sd = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getStartDate());\r\n            ed = new SimpleDateFormat(\"MM/dd/yyyy\").parse(form.getEndDate());\r\n            String dateError = null;\r\n            if (sd.after(ed)) {\r\n                dateError = \"The start date of the prescription must be before the end date.\";\r\n            }\r\n            errorList.addIfNotNull(dateError);\r\n        } catch (ParseException e) {\r\n            errorList.addIfNotNull(ValidationFormat.DATE.getDescription());\r\n        }\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":500, "parametername":"HealthRecordForm bean", "parametertype":"edu.ncsu.csc.itrust.beans.forms.HealthRecordForm", "parameterclass":288, "classid":665, "classname":"edu.ncsu.csc.itrust.validate.HealthRecordFormValidator", "methodid":4704, "methodname":"edu.ncsu.csc.itrust.validate.HealthRecordFormValidator.validate(edu.ncsu.csc.itrust.beans.forms.HealthRecordForm)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(HealthRecordForm bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkInt(\"Systolic blood pressure\", bean.getBloodPressureN(), 0, 999, false));\r\n    errorList.addIfNotNull(checkInt(\"Diastolic blood pressure\", bean.getBloodPressureD(), 0, 999, false));\r\n    errorList.addIfNotNull(checkInt(\"Cholesterol HDL\", bean.getCholesterolHDL(), 0, 89, false));\r\n    errorList.addIfNotNull(checkInt(\"Cholesterol LDL\", bean.getCholesterolLDL(), 0, 600, false));\r\n    errorList.addIfNotNull(checkInt(\"Cholesterol Triglycerides\", bean.getCholesterolTri(), 100, 600, false));\r\n    errorList.addIfNotNull(checkNotZero(\"Height\", bean.getHeight(), ValidationFormat.Height, false));\r\n    errorList.addIfNotNull(checkNotZero(\"Weight\", bean.getWeight(), ValidationFormat.Weight, false));\r\n    errorList.addIfNotNull(checkInt(\"Smoker\", bean.getIsSmoker(), 0, 10, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":501, "parametername":"HospitalBean h", "parametertype":"edu.ncsu.csc.itrust.beans.HospitalBean", "parameterclass":258, "classid":666, "classname":"edu.ncsu.csc.itrust.validate.HospitalBeanValidator", "methodid":4706, "methodname":"edu.ncsu.csc.itrust.validate.HospitalBeanValidator.validate(edu.ncsu.csc.itrust.beans.HospitalBean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(HospitalBean h) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Hospital ID\", h.getHospitalID(), ValidationFormat.HOSPITAL_ID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Hospital Name\", h.getHospitalName(), ValidationFormat.HOSPITAL_NAME, false));\r\n    if (!(h.getHospitalAddress().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Hospital Address\", h.getHospitalAddress(), ValidationFormat.ADDRESS, false));\r\n    }\r\n    if (!(h.getHospitalCity().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Hospital City\", h.getHospitalCity(), ValidationFormat.CITY, false));\r\n    }\r\n    if (!(h.getHospitalState().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Hospital State\", h.getHospitalState(), ValidationFormat.STATE, false));\r\n    }\r\n    if (!(h.getHospitalZip().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Hospital Zip\", h.getHospitalZip(), ValidationFormat.ZIPCODE, false));\r\n    }\r\n    if (errorList.hasErrors()) {\r\n        throw new FormValidationException(errorList);\r\n    }\r\n}"},
 {"id":502, "parametername":"LOINCbean m", "parametertype":"edu.ncsu.csc.itrust.beans.LOINCbean", "parameterclass":259, "classid":667, "classname":"edu.ncsu.csc.itrust.validate.LOINCBeanValidator", "methodid":4708, "methodname":"edu.ncsu.csc.itrust.validate.LOINCBeanValidator.validate(edu.ncsu.csc.itrust.beans.LOINCbean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(LOINCbean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    if ((((m.getLabProcedureCode()) == null) || ((m.getComponent()) == null)) || ((m.getKindOfProperty()) == null)) {\r\n        throw new FormValidationException(\"You must have a Lab Procedure Code, Component and Kind Of Property\");\r\n    }\r\n    errorList.addIfNotNull(checkFormat(\"LaboratoryProcedureCode\", m.getLabProcedureCode(), ValidationFormat.LOINC, false));\r\n    errorList.addIfNotNull(checkFormat(\"Component\", m.getComponent(), ValidationFormat.LOINC_ITEM, false));\r\n    errorList.addIfNotNull(checkFormat(\"KindOfProperty\", m.getKindOfProperty(), ValidationFormat.LOINC_ITEM, false));\r\n    errorList.addIfNotNull(checkFormat(\"TimeAspect\", m.getTimeAspect(), ValidationFormat.LOINC_ITEM, true));\r\n    errorList.addIfNotNull(checkFormat(\"System\", m.getSystem(), ValidationFormat.LOINC_ITEM, true));\r\n    errorList.addIfNotNull(checkFormat(\"ScaleType\", m.getScaleType(), ValidationFormat.LOINC_ITEM, true));\r\n    errorList.addIfNotNull(checkFormat(\"MethodType\", m.getMethodType(), ValidationFormat.LOINC_ITEM, true));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":503, "parametername":"LabProcedureBean b", "parametertype":"edu.ncsu.csc.itrust.beans.LabProcedureBean", "parameterclass":260, "classid":668, "classname":"edu.ncsu.csc.itrust.validate.LabProcedureValidator", "methodid":4710, "methodname":"edu.ncsu.csc.itrust.validate.LabProcedureValidator.validate(edu.ncsu.csc.itrust.beans.LabProcedureBean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\npublic void validate(LabProcedureBean b) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"LOINC\", b.getLoinc(), ValidationFormat.LOINC, false));\r\n    errorList.addIfNotNull(checkFormat(\"Commentary\", b.getCommentary(), ValidationFormat.LABPROCEDURE_COMMENTS, true));\r\n    errorList.addIfNotNull(checkFormat(\"Results\", b.getResults(), ValidationFormat.LABPROCEDURE_COMMENTS, true));\r\n    errorList.addIfNotNull(checkFormat(\"Status\", b.getStatus(), ValidationFormat.LAB_STATUS, false));\r\n    errorList.addIfNotNull(checkFormat(\"Rights\", b.getRights(), ValidationFormat.LAB_RIGHTS, false));\r\n    if (((b.getNumericalResult()) != null) && ((b.getNumericalResult().length()) > 0)) {\r\n        errorList.addIfNotNull(checkFormat(\"Numerical Result\", b.getNumericalResult(), ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT, false));\r\n        errorList.addIfNotNull(checkFormat(\"Numerical Result\", b.getNumericalResult(), ValidationFormat.LABPROCEDURE_NUMRESULT_LENGTH, false));\r\n    }\r\n    if (((b.getUpperBound()) != null) && ((b.getUpperBound().length()) > 0)) {\r\n        errorList.addIfNotNull(checkFormat(\"Upper Bound\", b.getUpperBound(), ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT, false));\r\n        errorList.addIfNotNull(checkFormat(\"Upper Bound\", b.getUpperBound(), ValidationFormat.LABPROCEDURE_NUMRESULT_LENGTH, false));\r\n    }\r\n    if (((b.getLowerBound()) != null) && ((b.getLowerBound().length()) > 0)) {\r\n        errorList.addIfNotNull(checkFormat(\"Lower Bound\", b.getLowerBound(), ValidationFormat.LABPROCEDURE_NUMRESULT_CONTENT, false));\r\n        errorList.addIfNotNull(checkFormat(\"Lower Bound\", b.getLowerBound(), ValidationFormat.LABPROCEDURE_NUMRESULT_LENGTH, false));\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":504, "parametername":"MedicationBean m", "parametertype":"edu.ncsu.csc.itrust.beans.MedicationBean", "parameterclass":261, "classid":670, "classname":"edu.ncsu.csc.itrust.validate.MedicationBeanValidator", "methodid":4714, "methodname":"edu.ncsu.csc.itrust.validate.MedicationBeanValidator.validate(edu.ncsu.csc.itrust.beans.MedicationBean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(MedicationBean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"ND Code\", m.getNDCode(), ValidationFormat.ND, false));\r\n    errorList.addIfNotNull(checkFormat(\"Description\", m.getDescription(), ValidationFormat.ND_CODE_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":505, "parametername":"MessageBean mBean", "parametertype":"edu.ncsu.csc.itrust.beans.MessageBean", "parameterclass":262, "classid":671, "classname":"edu.ncsu.csc.itrust.validate.MessageValidator", "methodid":4716, "methodname":"edu.ncsu.csc.itrust.validate.MessageValidator.validate(edu.ncsu.csc.itrust.beans.MessageBean)", "isreturn":0, "sourcecode":"@Override\r\npublic void validate(MessageBean mBean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"body\", mBean.getBody(), ValidationFormat.MESSAGES_BODY, false));\r\n    errorList.addIfNotNull(checkFormat(\"subject\", mBean.getSubject(), ValidationFormat.MESSAGES_SUBJECT, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":506, "parametername":"OverrideReasonBean orc", "parametertype":"edu.ncsu.csc.itrust.beans.OverrideReasonBean", "parameterclass":265, "classid":672, "classname":"edu.ncsu.csc.itrust.validate.OverrideReasonBeanValidator", "methodid":4718, "methodname":"edu.ncsu.csc.itrust.validate.OverrideReasonBeanValidator.validate(edu.ncsu.csc.itrust.beans.OverrideReasonBean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(OverrideReasonBean orc) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Reason Code\", orc.getORCode(), ValidationFormat.ORC, false));\r\n    errorList.addIfNotNull(checkFormat(\"Description\", orc.getDescription(), ValidationFormat.OR_CODE_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":507, "parametername":"PatientInstructionsBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.PatientInstructionsBean", "parameterclass":268, "classid":673, "classname":"edu.ncsu.csc.itrust.validate.PatientInstructionsBeanValidator", "methodid":4720, "methodname":"edu.ncsu.csc.itrust.validate.PatientInstructionsBeanValidator.validate(edu.ncsu.csc.itrust.beans.PatientInstructionsBean)", "isreturn":0, "sourcecode":"/* (non-Javadoc)\n@see edu.ncsu.csc.itrust.validate.BeanValidator#validate(java.lang.Object)\n */\r\n@Override\r\npublic void validate(PatientInstructionsBean bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Name\", bean.getName(), ValidationFormat.PATIENT_INSTRUCTIONS_NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Comments\", bean.getComment(), ValidationFormat.PATIENT_INSTRUCTIONS_COMMENTS, false));\r\n    // The following checks URL length.\r\n    errorList.addIfNotNull(checkFormat(\"URL\", bean.getUrl(), ValidationFormat.PATIENT_INSTRUCTIONS_URL, false));\r\n    // The following checks URL format.\r\n    UrlValidator urlValidator = new UrlValidator();\r\n    if (!(urlValidator.isValid(bean.getUrl()))) {\r\n        errorList.addIfNotNull(\"URL: A valid URL is required.\");\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":508, "parametername":"PatientBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PatientBean", "parameterclass":266, "classid":674, "classname":"edu.ncsu.csc.itrust.validate.PatientValidator", "methodid":4722, "methodname":"edu.ncsu.csc.itrust.validate.PatientValidator.validate(edu.ncsu.csc.itrust.beans.PatientBean)", "isreturn":0, "sourcecode":"@Override\r\npublic void validate(PatientBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    // First name, last name, and email are all required\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, false));\r\n    if (!(p.getDateOfBirthStr().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Date of Birth\", p.getDateOfBirthStr(), ValidationFormat.DATE, false));\r\n    }\r\n    if (!(p.getDateOfDeathStr().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Date of Death\", p.getDateOfDeathStr(), ValidationFormat.DATE, true));\r\n    }\r\n    try {\r\n        if ((\"\".equals(p.getDateOfDeathStr())) || ((p.getDateOfDeath()) == null)) {\r\n            if (!(p.getCauseOfDeath().equals(\"\"))) {\r\n                errorList.addIfNotNull(\"Cause of Death cannot be specified without Date of Death!\");\r\n            }\r\n        } else {\r\n            if (p.getDateOfDeath().before(p.getDateOfBirth()))\r\n                errorList.addIfNotNull(\"Death date cannot be before birth date!\");\r\n\r\n            if (p.getDateOfDeath().after(new Date())) {\r\n                errorList.addIfNotNull(\"Death date cannot be in the future!\");\r\n            }\r\n        }\r\n        if (p.getDateOfBirth().after(new Date())) {\r\n            errorList.addIfNotNull(\"Birth date cannot be in the future!\");\r\n        }\r\n    } catch (NullPointerException e) {\r\n        // ignore this\r\n    }\r\n    if (!(p.getCauseOfDeath().isEmpty())) {\r\n        boolean deathCauseNull = (null == (p.getDateOfDeathStr())) || (p.getDateOfDeathStr().equals(\"\"));\r\n        errorList.addIfNotNull(checkFormat(\"Cause of Death\", p.getCauseOfDeath(), ValidationFormat.ICD9CM, deathCauseNull));\r\n    }\r\n    if (!(p.getStreetAddress1().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Street Address 1\", p.getStreetAddress1(), ValidationFormat.ADDRESS, false));\r\n    }\r\n    if (!(p.getStreetAddress2().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Street Address 2\", p.getStreetAddress2(), ValidationFormat.ADDRESS, true));\r\n    }\r\n    if (!(p.getCity().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"City\", p.getCity(), ValidationFormat.CITY, false));\r\n    }\r\n    if (!(p.getState().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"State\", p.getState(), ValidationFormat.STATE, false));\r\n    }\r\n    if (!(p.getZip().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Zip Code\", p.getZip(), ValidationFormat.ZIPCODE, false));\r\n    }\r\n    if (!(p.getPhone().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Phone Number\", p.getPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    }\r\n    if (!(p.getEmergencyName().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Emergency Contact Name\", p.getEmergencyName(), ValidationFormat.NAME, false));\r\n    }\r\n    if (!(p.getEmergencyPhone().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Emergency Contact Phone\", p.getEmergencyPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    }\r\n    if (!(p.getIcName().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Name\", p.getIcName(), ValidationFormat.NAME, false));\r\n    }\r\n    if (!(p.getIcAddress1().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Address 1\", p.getIcAddress1(), ValidationFormat.ADDRESS, false));\r\n    }\r\n    if (!(p.getIcAddress2().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Address 2\", p.getIcAddress2(), ValidationFormat.ADDRESS, true));\r\n    }\r\n    if (!(p.getIcCity().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company City\", p.getIcCity(), ValidationFormat.CITY, false));\r\n    }\r\n    if (!(p.getIcState().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company State\", p.getIcState(), ValidationFormat.STATE, false));\r\n    }\r\n    if (!(p.getIcZip().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Zip\", p.getIcZip(), ValidationFormat.ZIPCODE, false));\r\n    }\r\n    if (!(p.getIcPhone().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company Phone\", p.getIcPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    }\r\n    if (!(p.getIcID().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Insurance Company ID\", p.getIcID(), ValidationFormat.INSURANCE_ID, false));\r\n    }\r\n    if (!(p.getMotherMID().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Mother MID\", p.getMotherMID(), ValidationFormat.NPMID, true));\r\n    }\r\n    if (!(p.getFatherMID().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Father MID\", p.getFatherMID(), ValidationFormat.NPMID, true));\r\n    }\r\n    if (!(p.getTopicalNotes().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Topical Notes\", p.getTopicalNotes(), ValidationFormat.NOTES, true));\r\n    }\r\n    /* This block was added for Theme 5 by Tyler Arehart */\r\n    if (!(p.getCreditCardNumber().isEmpty())) {\r\n        if (!((p.getCreditCardNumber().equals(\"\")) && (p.getCreditCardType().equals(\"\")))) {\r\n            String s = null;\r\n            CreditCardValidator c;\r\n            int type = -1;\r\n            if (p.getCreditCardType().equals(\"VISA\"))\r\n                type = CreditCardValidator.VISA;\r\n\r\n            if (p.getCreditCardType().equals(\"MASTERCARD\"))\r\n                type = CreditCardValidator.MASTERCARD;\r\n\r\n            if (p.getCreditCardType().equals(\"DISCOVER\"))\r\n                type = CreditCardValidator.DISCOVER;\r\n\r\n            if (p.getCreditCardType().equals(\"AMEX\"))\r\n                type = CreditCardValidator.AMEX;\r\n\r\n            if (type != (-1)) {\r\n                c = new CreditCardValidator(type);\r\n                if (!(c.isValid(p.getCreditCardNumber()))) {\r\n                    s = \"Credit Card Number\";\r\n                }\r\n            } else {\r\n                s = \"Credit Card Type\";\r\n            }\r\n            errorList.addIfNotNull(s);\r\n        }\r\n    }\r\n    if (!(p.getDirectionsToHome().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Directions to Home\", p.getDirectionsToHome(), ValidationFormat.COMMENTS, true));\r\n    }\r\n    if (!(p.getReligion().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Religion\", p.getReligion(), ValidationFormat.NAME, true));\r\n    }\r\n    if (!(p.getLanguage().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Language\", p.getLanguage(), ValidationFormat.NAME, true));\r\n    }\r\n    if (!(p.getSpiritualPractices().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Spiritual Practices\", p.getSpiritualPractices(), ValidationFormat.COMMENTS, true));\r\n    }\r\n    if (!(p.getAlternateName().isEmpty())) {\r\n        errorList.addIfNotNull(checkFormat(\"Alternate Name\", p.getAlternateName(), ValidationFormat.NAME, true));\r\n    }\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":509, "parametername":"PersonnelBean p", "parametertype":"edu.ncsu.csc.itrust.beans.PersonnelBean", "parameterclass":270, "classid":675, "classname":"edu.ncsu.csc.itrust.validate.PersonnelValidator", "methodid":4724, "methodname":"edu.ncsu.csc.itrust.validate.PersonnelValidator.validate(edu.ncsu.csc.itrust.beans.PersonnelBean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(PersonnelBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"First name\", p.getFirstName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Last name\", p.getLastName(), ValidationFormat.NAME, false));\r\n    errorList.addIfNotNull(checkFormat(\"Street Address 1\", p.getStreetAddress1(), ValidationFormat.ADDRESS, false));\r\n    errorList.addIfNotNull(checkFormat(\"Street Address 2\", p.getStreetAddress2(), ValidationFormat.ADDRESS, true));\r\n    errorList.addIfNotNull(checkFormat(\"City\", p.getCity(), ValidationFormat.CITY, false));\r\n    errorList.addIfNotNull(checkFormat(\"State\", p.getState(), ValidationFormat.STATE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Zip Code\", p.getZip(), ValidationFormat.ZIPCODE, false));\r\n    errorList.addIfNotNull(checkFormat(\"Phone Number\", p.getPhone(), ValidationFormat.PHONE_NUMBER, false));\r\n    errorList.addIfNotNull(checkFormat(\"Email\", p.getEmail(), ValidationFormat.EMAIL, true));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":510, "parametername":"ProcedureBean p", "parametertype":"edu.ncsu.csc.itrust.beans.ProcedureBean", "parameterclass":273, "classid":676, "classname":"edu.ncsu.csc.itrust.validate.ProcedureBeanValidator", "methodid":4726, "methodname":"edu.ncsu.csc.itrust.validate.ProcedureBeanValidator.validate(edu.ncsu.csc.itrust.beans.ProcedureBean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(ProcedureBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"CPT Code\", p.getCPTCode(), ValidationFormat.CPT, false));\r\n    errorList.addIfNotNull(checkFormat(\"Description\", p.getDescription(), ValidationFormat.CPT_CODE_DESCRIPTION, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":511, "parametername":"ReferralBean p", "parametertype":"edu.ncsu.csc.itrust.beans.ReferralBean", "parameterclass":274, "classid":677, "classname":"edu.ncsu.csc.itrust.validate.ReferralBeanValidator", "methodid":4728, "methodname":"edu.ncsu.csc.itrust.validate.ReferralBeanValidator.validate(edu.ncsu.csc.itrust.beans.ReferralBean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(ReferralBean p) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Notes\", p.getReferralDetails(), ValidationFormat.REFERRAL_NOTES, false));\r\n    errorList.addIfNotNull(checkFormat(\"Priority\", Integer.toString(p.getPriority()), ValidationFormat.PRIORITY, false));\r\n    errorList.addIfNotNull(checkFormat(\"Patient ID\", p.getPatientID(), ValidationFormat.MID, false));\r\n    errorList.addIfNotNull(checkFormat(\"Receiver ID\", p.getReceiverID(), ValidationFormat.MID, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":512, "parametername":"RemoteMonitoringDataBean m", "parametertype":"edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean", "parameterclass":275, "classid":678, "classname":"edu.ncsu.csc.itrust.validate.RemoteMonitoringDataBeanValidator", "methodid":4730, "methodname":"edu.ncsu.csc.itrust.validate.RemoteMonitoringDataBeanValidator.validate(edu.ncsu.csc.itrust.beans.RemoteMonitoringDataBean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(RemoteMonitoringDataBean m) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    // Skip validation if values were not submitted (0 or -1)\r\n    if (!(((m.getSystolicBloodPressure()) == 0) || ((m.getSystolicBloodPressure()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Systolic Blood Pressure\", (\"\" + (m.getSystolicBloodPressure())), ValidationFormat.SYSTOLIC_BLOOD_PRESSURE, true));\r\n\r\n    if (!(((m.getDiastolicBloodPressure()) == 0) || ((m.getDiastolicBloodPressure()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Diastolic Blood Pressure\", (\"\" + (m.getDiastolicBloodPressure())), ValidationFormat.DIASTOLIC_BLOOD_PRESSURE, true));\r\n\r\n    if (!(((m.getGlucoseLevel()) == 0) || ((m.getGlucoseLevel()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Glucose Level\", (\"\" + (m.getGlucoseLevel())), ValidationFormat.GLUCOSE_LEVEL, true));\r\n\r\n    if (!(((m.getPedometerReading()) == 0) || ((m.getPedometerReading()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Pedometer Reading\", (\"\" + (m.getPedometerReading())), ValidationFormat.PEDOMETER_READING, true));\r\n\r\n    if (!(((m.getHeight()) == 0) || ((m.getHeight()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Height\", (\"\" + (m.getHeight())), ValidationFormat.HEIGHT, true));\r\n\r\n    if (!(((m.getWeight()) == 0) || ((m.getWeight()) == (-1))))\r\n        errorList.addIfNotNull(checkFormat(\"Weight\", (\"\" + (m.getWeight())), ValidationFormat.WEIGHT, true));\r\n\r\n    if (errorList.hasErrors()) {\r\n        throw new FormValidationException(errorList);\r\n    }\r\n}"},
 {"id":513, "parametername":"SecurityQA bean", "parametertype":"edu.ncsu.csc.itrust.beans.SecurityQA", "parameterclass":277, "classid":679, "classname":"edu.ncsu.csc.itrust.validate.SecurityQAValidator", "methodid":4732, "methodname":"edu.ncsu.csc.itrust.validate.SecurityQAValidator.validate(edu.ncsu.csc.itrust.beans.SecurityQA)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(SecurityQA bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    if (null == bean)\r\n        throw new FormValidationException(\"Null form\");\r\n\r\n    if (null == (bean.getConfirmAnswer()))\r\n        throw new FormValidationException(\"Confirm answer cannot be empty\");\r\n\r\n    if (!(bean.getAnswer().equals(bean.getConfirmAnswer())))\r\n        throw new FormValidationException(\"Security answers do not match\");\r\n\r\n    errorList.addIfNotNull(checkFormat(\"Security Question\", bean.getQuestion(), ValidationFormat.QUESTION, false));\r\n    errorList.addIfNotNull(checkFormat(\"Security Answer\", bean.getAnswer(), ValidationFormat.ANSWER, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"},
 {"id":514, "parametername":"SurveyResultBean bean", "parametertype":"edu.ncsu.csc.itrust.beans.SurveyResultBean", "parameterclass":279, "classid":680, "classname":"edu.ncsu.csc.itrust.validate.SurveySearchValidator", "methodid":4734, "methodname":"edu.ncsu.csc.itrust.validate.SurveySearchValidator.validate(edu.ncsu.csc.itrust.beans.SurveyResultBean)", "isreturn":0, "sourcecode":"/**\r\n * Performs the act of validating the bean in question, which varies depending on the\r\n * type of validator.  If the validation does not succeed, a {@link FormValidationException} is thrown.\r\n *\r\n * @param p\r\n * \t\tA bean of the type to be validated.\r\n */\r\n@Override\r\npublic void validate(SurveyResultBean bean) throws FormValidationException {\r\n    ErrorList errorList = new ErrorList();\r\n    errorList.addIfNotNull(checkFormat(\"Zip Code\", bean.getHCPzip(), ValidationFormat.ZIPCODE, false));\r\n    if (errorList.hasErrors())\r\n        throw new FormValidationException(errorList);\r\n\r\n}"}]